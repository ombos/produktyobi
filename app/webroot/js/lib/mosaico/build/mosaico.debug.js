(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Mosaico = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/var/www/s/app/webroot/js/lib/mosaico/bower_components/console-browserify/index.js":[function(require,module,exports){
(function (global){
function log(){}function info(){console.log.apply(console,arguments)}function warn(){console.log.apply(console,arguments)}function error(){console.warn.apply(console,arguments)}function time(o){times[o]=Date.now()}function timeEnd(o){var e=times[o];if(!e)throw new Error("No such label: "+o);var n=Date.now()-e;console.log(o+": "+n+"ms")}function trace(){var o=new Error;o.name="Trace",o.message=util.format.apply(null,arguments),console.error(o.stack)}function dir(o){console.log(util.inspect(o)+"\n")}function assert(o){if(!o){var e=slice.call(arguments,1);assert.ok(!1,util.format.apply(null,e))}}var util=require("util"),assert=require("assert"),slice=Array.prototype.slice,console,times={};console="undefined"!=typeof global&&global.console?global.console:"undefined"!=typeof window&&window.console?window.console:{};for(var functions=[[log,"log"],[info,"info"],[warn,"warn"],[error,"error"],[time,"time"],[timeEnd,"timeEnd"],[trace,"trace"],[dir,"dir"],[assert,"assert"]],i=0;i<functions.length;i++){var tuple=functions[i],f=tuple[0],name=tuple[1];console[name]||(console[name]=f)}module.exports=console;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"assert":"/var/www/s/app/webroot/js/lib/mosaico/node_modules/browserify/node_modules/assert/assert.js","util":"/var/www/s/app/webroot/js/lib/mosaico/node_modules/browserify/node_modules/util/util.js"}],"/var/www/s/app/webroot/js/lib/mosaico/bower_components/evol-colorpicker/js/evol.colorpicker.min.js":[function(require,module,exports){
!function(t,e){var i=0,o=window.navigator.userAgent,s=o.indexOf("MSIE ")>0,f=s?"-ie":"",n=s?!1:/mozilla/.test(o.toLowerCase())&&!/webkit/.test(o.toLowerCase()),c=[],a=["ffffff","000000","eeece1","1f497d","4f81bd","c0504d","9bbb59","8064a2","4bacc6","f79646"],r=["f2f2f2","7f7f7f","ddd9c3","c6d9f0","dbe5f1","f2dcdb","ebf1dd","e5e0ec","dbeef3","fdeada","d8d8d8","595959","c4bd97","8db3e2","b8cce4","e5b9b7","d7e3bc","ccc1d9","b7dde8","fbd5b5","bfbfbf","3f3f3f","938953","548dd4","95b3d7","d99694","c3d69b","b2a2c7","92cddc","fac08f","a5a5a5","262626","494429","17365d","366092","953734","76923c","5f497a","31859b","e36c09","7f7f7f","0c0c0c","1d1b10","0f243e","244061","632423","4f6128","3f3151","205867","974806"],l=["c00000","ff0000","ffc000","ffff00","92d050","00b050","00b0f0","0070c0","002060","7030a0"],h=[["003366","336699","3366cc","003399","000099","0000cc","000066"],["006666","006699","0099cc","0066cc","0033cc","0000ff","3333ff","333399"],["669999","009999","33cccc","00ccff","0099ff","0066ff","3366ff","3333cc","666699"],["339966","00cc99","00ffcc","00ffff","33ccff","3399ff","6699ff","6666ff","6600ff","6600cc"],["339933","00cc66","00ff99","66ffcc","66ffff","66ccff","99ccff","9999ff","9966ff","9933ff","9900ff"],["006600","00cc00","00ff00","66ff99","99ffcc","ccffff","ccccff","cc99ff","cc66ff","cc33ff","cc00ff","9900cc"],["003300","009933","33cc33","66ff66","99ff99","ccffcc","ffffff","ffccff","ff99ff","ff66ff","ff00ff","cc00cc","660066"],["333300","009900","66ff33","99ff66","ccff99","ffffcc","ffcccc","ff99cc","ff66cc","ff33cc","cc0099","993399"],["336600","669900","99ff33","ccff66","ffff99","ffcc99","ff9999","ff6699","ff3399","cc3399","990099"],["666633","99cc00","ccff33","ffff66","ffcc66","ff9966","ff6666","ff0066","d60094","993366"],["a58800","cccc00","ffff00","ffcc00","ff9933","ff6600","ff0033","cc0066","660033"],["996633","cc9900","ff9900","cc6600","ff3300","ff0000","cc0000","990033"],["663300","996600","cc3300","993300","990000","800000","993333"]],d="#0000ffff",p=function(t){var e=t.toString(16);return 1==e.length&&(e="0"+e),e},v=function(t){return p(Number(t))},u=function(t){var e=p(t);return e+e+e},_=function(t){if(t.length>10){var e=1+t.indexOf("("),i=t.indexOf(")"),o=t.substring(e,i).split(",");return["#",v(o[0]),v(o[1]),v(o[2])].join("")}return t};t.widget("evol.colorpicker",{version:"3.2.1",options:{color:null,showOn:"both",hideButton:!1,displayIndicator:!0,transparentColor:!1,history:!0,defaultPalette:"theme",strings:"Theme Colors,Standard Colors,Web Colors,Theme Colors,Back to Palette,History,No history yet."},_active:!1,_create:function(){var e=this;switch(this._paletteIdx="theme"==this.options.defaultPalette?1:2,this._id="evo-cp"+i++,this._enabled=!0,this.options.showOn=this.options.hideButton?"focus":this.options.showOn,this.element.get(0).tagName){case"INPUT":var o=this.options.color,c=this.element,a=("focus"===this.options.showOn?"":"evo-pointer ")+"evo-colorind"+(n?"-ff":f)+(this.options.hideButton?" evo-hidden-button":""),r="";if(this._isPopup=!0,this._palette=null,null!==o)c.val(o);else{var l=c.val();""!==l&&(o=this.options.color=l)}o===d?a+=" evo-transparent":r=null!==o?"background-color:"+o:"",c.addClass("colorPicker "+this._id).wrap('<div style="width:'+(this.options.hideButton?this.element.width():this.element.width()+32)+"px;"+(s?"margin-bottom:-21px;":"")+(n?"padding:1px 0;":"")+'"></div>').after('<div class="'+a+'" style="'+r+'"></div>').on("keyup onpaste",function(i){var o=t(this).val();o!=e.options.color&&e._setValue(o,!0)});var h=this.options.showOn;("both"===h||"focus"===h)&&c.on("focus",function(){e.showPalette()}),("both"===h||"button"===h)&&c.next().on("click",function(t){return t.stopPropagation(),e.showPalette(),!1});break;default:this._isPopup=!1,this._palette=this.element.html(this._paletteHTML()).attr("aria-haspopup","true"),this._bindColors()}if(this.options.history&&(o&&this._add2History(o),this.options.initialHistory)){var p=this.options.initialHistory;for(var v in p)this._add2History(p[v])}},_paletteHTML:function(){var t=this._paletteIdx=Math.abs(this._paletteIdx),e=this.options,i=e.strings.split(","),o='<div class="evo-pop'+f+' ui-widget ui-widget-content ui-corner-all"'+(this._isPopup?' style="position:absolute"':"")+"><span>"+this["_paletteHTML"+t]()+'</span><div class="evo-more"><a href="javascript:void(0)">'+i[1+t]+"</a>";return e.history&&(o+='<a href="javascript:void(0)" class="evo-hist">'+i[5]+"</a>"),o+="</div>",e.displayIndicator&&(o+=this._colorIndHTML(this.options.color)+this._colorIndHTML("")),o+="</div>"},_colorIndHTML:function(t){var e=s?"evo-colorbox-ie ":"",i="";return t?t===d?e+="evo-transparent":i="background-color:"+t:i="display:none",'<div class="evo-color" style="float:left"><div style="'+i+'" class="'+e+'"></div><span>'+(t?t:"")+"</span></div>"},_paletteHTML1:function(){for(var t=this.options,e=t.strings.split(","),i='<td style="background-color:#',o=s?'"><div style="width:2px;"></div></td>':'"><span/></td>',n='<tr><th colspan="10" class="ui-widget-content">',c='<table class="evo-palette'+f+'">'+n+e[0]+"</th></tr><tr>",h=0;10>h;h++)c+=i+a[h]+o;for(c+="</tr>",s||(c+='<tr><th colspan="10"></th></tr>'),c+='<tr class="top">',h=0;10>h;h++)c+=i+r[h]+o;for(var d=1;4>d;d++)for(c+='</tr><tr class="in">',h=0;10>h;h++)c+=i+r[10*d+h]+o;for(c+='</tr><tr class="bottom">',h=40;50>h;h++)c+=i+r[h]+o;for(c+="</tr>"+n,t.transparentColor&&(c+='<div class="evo-transparent evo-tr-box"></div>'),c+=e[1]+"</th></tr><tr>",h=0;10>h;h++)c+=i+l[h]+o;return c+="</tr></table>"},_paletteHTML2:function(){for(var t,e,i='<td style="background-color:#',o=s?'"><div style="width:5px;"></div></td>':'"><span/></td>',n='<table class="evo-palette2'+f+'"><tr>',c="</tr></table>",a='<div class="evo-palcenter">',r=0,l=h.length;l>r;r++){a+=n;var d=h[r];for(t=0,e=d.length;e>t;t++)a+=i+d[t]+o;a+=c}a+='<div class="evo-sep"/>';var p="";for(a+=n,t=255;t>10;t-=10)a+=i+u(t)+o,t-=10,p+=i+u(t)+o;return a+=c+n+p+c+"</div>"},_switchPalette:function(e){if(this._enabled){var i,o,s,f=this.options.strings.split(",");if(t(e).hasClass("evo-hist")){var n=['<table class="evo-palette"><tr><th class="ui-widget-content">',f[5],"</th></tr></tr></table>",'<div class="evo-cHist">'];if(0===c.length)n.push("<p>&nbsp;",f[6],"</p>");else for(var a=c.length-1;a>-1;a--)9===c[a].length?n.push('<div class="evo-transparent"></div>'):n.push('<div style="background-color:',c[a],'"></div>');n.push("</div>"),i=-this._paletteIdx,o=n.join(""),s=f[4]}else this._paletteIdx<0?(i=-this._paletteIdx,this._palette.find(".evo-hist").show()):i=2==this._paletteIdx?1:2,o=this["_paletteHTML"+i](),s=f[i+1],this._paletteIdx=i;this._paletteIdx=i;var r=this._palette.find(".evo-more").prev().html(o).end().children().eq(0).html(s);0>i&&r.next().hide()}},_downOrUpPositioning:function(){for(var t=this.element,e=0;null!==t&&100>e;){if("visible"!=t.css("overflow")){var i=this._palette.offset().top+this._palette.height(),o=t.offset().top+t.height(),s=this._palette.offset().top-this._palette.height()-this.element.outerHeight(),f=t.offset().top,n=i>o&&s>f;n?this._palette.css({bottom:this.element.outerHeight()+"px"}):this._palette.css({bottom:"auto"});break}if("HTML"==t[0].tagName)break;t=t.offsetParent(),e++}},showPalette:function(){if(this._enabled&&(this._active=!0,t(".colorPicker").not("."+this._id).colorpicker("hidePalette"),null===this._palette)){this._palette=this.element.next().after(this._paletteHTML()).next().on("click",function(t){return t.stopPropagation(),!1}),this._bindColors();var e=this;this._isPopup&&(this._downOrUpPositioning(),t(document.body).on("click."+e._id,function(t){t.target!=e.element.get(0)&&e.hidePalette()}).on("keyup."+e._id,function(t){27===t.keyCode&&e.hidePalette()}))}return this},hidePalette:function(){if(this._isPopup&&this._palette){t(document.body).off("click."+this._id);var e=this;this._palette.off("mouseover click","td,.evo-transparent").fadeOut(function(){e._palette.remove(),e._palette=e._cTxt=null}).find(".evo-more a").off("click")}return this},_bindColors:function(){var e=this,i=this.options,o=this._palette.find("div.evo-color"),s=i.history?"td,.evo-cHist>div":"td";i.transparentColor&&(s+=",.evo-transparent"),this._cTxt1=o.eq(0).children().eq(0),this._cTxt2=o.eq(1).children().eq(0),this._palette.on("click",s,function(i){if(e._enabled){var o=t(this);e._setValue(o.hasClass("evo-transparent")?d:_(o.attr("style").substring(17))),e._active=!1}}).on("mouseover",s,function(i){if(e._enabled){var o=t(this),s=o.hasClass("evo-transparent")?d:_(o.attr("style").substring(17));e.options.displayIndicator&&e._setColorInd(s,2),e._active&&e.element.trigger("mouseover.color",s)}}).find(".evo-more a").on("click",function(){e._switchPalette(this)})},val:function(t){return"undefined"==typeof t?this.options.color:(this._setValue(t),this)},_setValue:function(t,e){t=t.replace(/ /g,""),this.options.color=t,this._isPopup?(e||this.hidePalette(),this._setBoxColor(this.element.val(t).next(),t)):this._setColorInd(t,1),this.options.history&&this._paletteIdx>0&&this._add2History(t),this.element.trigger("change.color",t)},_setColorInd:function(t,e){var i=this["_cTxt"+e];this._setBoxColor(i,t),i.next().html(t)},_setBoxColor:function(t,e){e===d?t.addClass("evo-transparent").removeAttr("style"):t.removeClass("evo-transparent").attr("style","background-color:"+e)},_setOption:function(t,e){"color"==t?this._setValue(e,!0):this.options[t]=e},_add2History:function(t){for(var e=c.length,i=0;e>i;i++)if(t==c[i])return;e>27&&c.shift(),c.push(t)},clear:function(){this.hidePalette().val("")},enable:function(){var t=this.element;return this._isPopup?t.removeAttr("disabled"):t.css({opacity:"1","pointer-events":"auto"}),"focus"!==this.options.showOn&&this.element.next().addClass("evo-pointer"),t.removeAttr("aria-disabled"),this._enabled=!0,this},disable:function(){var t=this.element;return this._isPopup?t.attr("disabled","disabled"):(this.hidePalette(),t.css({opacity:"0.3","pointer-events":"none"})),"focus"!==this.options.showOn&&this.element.next().removeClass("evo-pointer"),t.attr("aria-disabled","true"),this._enabled=!1,this},isDisabled:function(){return!this._enabled},destroy:function(){t(document.body).off("click."+this._id),this._palette&&(this._palette.off("mouseover click","td,.evo-cHist>div,.evo-transparent").find(".evo-more a").off("click"),this._isPopup&&this._palette.remove(),this._palette=this._cTxt=null),this._isPopup&&this.element.next().off("click").remove().end().off("focus").unwrap(),this.element.removeClass("colorPicker "+this.id).empty(),t.Widget.prototype.destroy.call(this)}})}(jQuery);

},{}],"/var/www/s/app/webroot/js/lib/mosaico/bower_components/jsep/src/jsep.js":[function(require,module,exports){
!function(e){"use strict";var r="Compound",t="Identifier",n="MemberExpression",o="Literal",u="ThisExpression",i="CallExpression",a="UnaryExpression",s="BinaryExpression",p="LogicalExpression",c="ConditionalExpression",f="ArrayExpression",l=46,d=44,v=39,h=34,x=40,y=41,b=91,E=93,m=63,g=59,w=58,U=function(e,r){var t=new Error(e+" at character "+r);throw t.index=r,t.description=e,t},O=!0,k={"-":O,"!":O,"~":O,"+":O},j={"||":1,"&&":2,"|":3,"^":4,"&":5,"==":6,"!=":6,"===":6,"!==":6,"<":7,">":7,"<=":7,">=":7,"<<":8,">>":8,">>>":8,"+":9,"-":9,"*":10,"/":10,"%":10},P=function(e){var r,t=0;for(var n in e)(r=n.length)>t&&e.hasOwnProperty(n)&&(t=r);return t},C=P(k),B=P(j),A={"true":!0,"false":!1,"null":null},S="this",q=function(e){return j[e]||0},J=function(e,r,t){var n="||"===e||"&&"===e?p:s;return{type:n,operator:e,left:r,right:t}},L=function(e){return e>=48&&57>=e},M=function(e){return 36===e||95===e||e>=65&&90>=e||e>=97&&122>=e},F=function(e){return 36===e||95===e||e>=65&&90>=e||e>=97&&122>=e||e>=48&&57>=e},I=function(e){for(var s,p,O=0,P=e.charAt,I=e.charCodeAt,T=function(r){return P.call(e,r)},V=function(r){return I.call(e,r)},z=e.length,D=function(){for(var e=V(O);32===e||9===e;)e=V(++O)},G=function(){var e,r,t=K();return D(),V(O)!==m?t:(O++,e=G(),e||U("Expected expression",O),D(),V(O)===w?(O++,r=G(),r||U("Expected expression",O),{type:c,test:t,consequent:e,alternate:r}):void U("Expected :",O))},H=function(){D();for(var r=e.substr(O,B),t=r.length;t>0;){if(j.hasOwnProperty(r))return O+=t,r;r=r.substr(0,--t)}return!1},K=function(){var e,r,t,n,o,u,i,a;if(u=N(),r=H(),!r)return u;for(o={value:r,prec:q(r)},i=N(),i||U("Expected expression after "+r,O),n=[u,o,i];(r=H())&&(t=q(r),0!==t);){for(o={value:r,prec:t};n.length>2&&t<=n[n.length-2].prec;)i=n.pop(),r=n.pop().value,u=n.pop(),e=J(r,u,i),n.push(e);e=N(),e||U("Expected expression after "+r,O),n.push(o,e)}for(a=n.length-1,e=n[a];a>1;)e=J(n[a-1].value,n[a-2],e),a-=2;return e},N=function(){var r,t,n;if(D(),r=V(O),L(r)||r===l)return Q();if(r===v||r===h)return R();if(M(r)||r===x)return Y();if(r===b)return $();for(t=e.substr(O,C),n=t.length;n>0;){if(k.hasOwnProperty(t))return O+=n,{type:a,operator:t,argument:N(),prefix:!0};t=t.substr(0,--n)}return!1},Q=function(){for(var e,r,t="";L(V(O));)t+=T(O++);if(V(O)===l)for(t+=T(O++);L(V(O));)t+=T(O++);if(e=T(O),"e"===e||"E"===e){for(t+=T(O++),e=T(O),"+"!==e&&"-"!==e||(t+=T(O++));L(V(O));)t+=T(O++);L(V(O-1))||U("Expected exponent ("+t+T(O)+")",O)}return r=V(O),M(r)?U("Variable names cannot start with a number ("+t+T(O)+")",O):r===l&&U("Unexpected period",O),{type:o,value:parseFloat(t),raw:t}},R=function(){for(var e,r="",t=T(O++),n=!1;z>O;){if(e=T(O++),e===t){n=!0;break}if("\\"===e)switch(e=T(O++)){case"n":r+="\n";break;case"r":r+="\r";break;case"t":r+="	";break;case"b":r+="\b";break;case"f":r+="\f";break;case"v":r+="\x0B"}else r+=e}return n||U('Unclosed quote after "'+r+'"',O),{type:o,value:r,raw:t+r+t}},W=function(){var r,n=V(O),i=O;for(M(n)?O++:U("Unexpected "+T(O),O);z>O&&(n=V(O),F(n));)O++;return r=e.slice(i,O),A.hasOwnProperty(r)?{type:o,value:A[r],raw:r}:r===S?{type:u}:{type:t,name:r}},X=function(e){for(var t,n,o=[];z>O;){if(D(),t=V(O),t===e){O++;break}t===d?O++:(n=G(),n&&n.type!==r||U("Expected comma",O),o.push(n))}return o},Y=function(){var e,r;for(e=V(O),r=e===x?Z():W(),D(),e=V(O);e===l||e===b||e===x;)O++,e===l?(D(),r={type:n,computed:!1,object:r,property:W()}):e===b?(r={type:n,computed:!0,object:r,property:G()},D(),e=V(O),e!==E&&U("Unclosed [",O),O++):e===x&&(r={type:i,arguments:X(y),callee:r}),D(),e=V(O);return r},Z=function(){O++;var e=G();return D(),V(O)===y?(O++,e):void U("Unclosed (",O)},$=function(){return O++,{type:f,elements:X(E)}},_=[];z>O;)s=V(O),s===g||s===d?O++:(p=G())?_.push(p):z>O&&U('Unexpected "'+T(O)+'"',O);return 1===_.length?_[0]:{type:r,body:_}};if(I.version="<%= version %>",I.toString=function(){return"JavaScript Expression Parser (JSEP) v"+I.version},I.addUnaryOp=function(e){return k[e]=O,this},I.addBinaryOp=function(e,r){return B=Math.max(e.length,B),j[e]=r,this},I.removeUnaryOp=function(e){return delete k[e],e.length===C&&(C=P(k)),this},I.removeBinaryOp=function(e){return delete j[e],e.length===B&&(B=P(j)),this},"undefined"==typeof exports){var T=e.jsep;e.jsep=I,I.noConflict=function(){return e.jsep===I&&(e.jsep=T),I}}else"undefined"!=typeof module&&module.exports?exports=module.exports=I:exports.parse=I}(this);

},{}],"/var/www/s/app/webroot/js/lib/mosaico/bower_components/knockout-sortable/build/knockout-sortable.min.js":[function(require,module,exports){
(function (global){
!function(e){if("function"==typeof define&&define.amd)define(["knockout","jquery","jquery-ui/sortable","jquery-ui/draggable"],e);else if("function"==typeof require&&"object"==typeof exports&&"object"==typeof module){var n=(typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null),t=(typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);(typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null),(typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null),e(n,t)}else e(window.ko,window.jQuery)}(function(e,n){var t="ko_sortItem",o="ko_sourceIndex",a="ko_sortList",r="ko_parentList",i="ko_dragItem",s=e.utils.unwrapObservable,d=e.utils.domData.get,l=e.utils.domData.set,c=n.ui&&n.ui.version,u=c&&c.indexOf("1.6.")&&c.indexOf("1.7.")&&(c.indexOf("1.8.")||"1.8.24"===c),p=function(n,o){e.utils.arrayForEach(n,function(e){1===e.nodeType&&(l(e,t,o),l(e,r,d(e.parentNode,a)))})},f=function(n,t){var o,a={},r=s(n())||{};return r.data?(a[t]=r.data,a.name=r.template):a[t]=n(),e.utils.arrayForEach(["afterAdd","afterRender","as","beforeRemove","includeDestroyed","templateEngine","templateOptions","nodes"],function(n){r.hasOwnProperty(n)?a[n]=r[n]:e.bindingHandlers.sortable.hasOwnProperty(n)&&(a[n]=e.bindingHandlers.sortable[n])}),"foreach"===t&&(a.afterRender?(o=a.afterRender,a.afterRender=function(e,n){p.call(n,e,n),o.call(n,e,n)}):a.afterRender=p),a},b=function(e,n){var t=s(n);if(t)for(var o=0;e>o;o++)t[o]&&s(t[o]._destroy)&&e++;return e},g=function(t,o){var a,r;o?(r=document.getElementById(o),r&&(a=new e.templateSources.domElement(r),a.text(n.trim(a.text())))):n(t).contents().each(function(){this&&1!==this.nodeType&&t.removeChild(this)})};e.bindingHandlers.sortable={init:function(c,p,m,v,h){var y,D,C=n(c),x=s(p())||{},k=f(p,"foreach"),w={};g(c,k.name),n.extend(!0,w,e.bindingHandlers.sortable),x.options&&w.options&&(e.utils.extend(w.options,x.options),delete x.options),e.utils.extend(w,x),w.connectClass&&(e.isObservable(w.allowDrop)||"function"==typeof w.allowDrop)?e.computed({read:function(){var n=s(w.allowDrop),t="function"==typeof n?n.call(this,k.foreach):n;e.utils.toggleDomNodeCssClass(c,w.connectClass,t)},disposeWhenNodeIsRemoved:c},this):e.utils.toggleDomNodeCssClass(c,w.connectClass,w.allowDrop),e.bindingHandlers.template.init(c,function(){return k},m,v,h),y=w.options.start,D=w.options.update;var H=setTimeout(function(){var p;C.sortable(e.utils.extend(w.options,{start:function(n,t){var a=t.item[0];l(a,o,e.utils.arrayIndexOf(t.item.parent().children(),a)),t.item.find("input:focus").change(),y&&y.apply(this,arguments)},receive:function(e,n){p=d(n.item[0],i),p&&(p.clone&&(p=p.clone()),w.dragged&&(p=w.dragged.call(this,p,e,n)||p))},update:function(i,s){var c,f,g,m,v,h=s.item[0],y=s.item.parent()[0],C=d(h,t)||p;if(p=null,C&&this===y||!u&&n.contains(this,y)){if(c=d(h,r),g=d(h,o),f=d(h.parentNode,a),m=e.utils.arrayIndexOf(s.item.parent().children(),h),k.includeDestroyed||(g=b(g,c),m=b(m,f)),(w.beforeMove||w.afterMove)&&(v={item:C,sourceParent:c,sourceParentNode:c&&s.sender||h.parentNode,sourceIndex:g,targetParent:f,targetIndex:m,cancelDrop:!1},w.beforeMove&&w.beforeMove.call(this,v,i,s)),c?n(c===f?this:s.sender||this).sortable("cancel"):n(h).remove(),v&&v.cancelDrop)return;m>=0&&(c&&(c.splice(g,1),e.processAllDeferredBindingUpdates&&e.processAllDeferredBindingUpdates()),f.splice(m,0,C)),l(h,t,null),e.processAllDeferredBindingUpdates&&e.processAllDeferredBindingUpdates(),w.afterMove&&w.afterMove.call(this,v,i,s)}D&&D.apply(this,arguments)},connectWith:w.connectClass?"."+w.connectClass:!1})),void 0!==w.isEnabled&&e.computed({read:function(){C.sortable(s(w.isEnabled)?"enable":"disable")},disposeWhenNodeIsRemoved:c})},0);return e.utils.domNodeDisposal.addDisposeCallback(c,function(){(C.data("ui-sortable")||C.data("sortable"))&&C.sortable("destroy"),e.utils.toggleDomNodeCssClass(c,w.connectClass,!1),clearTimeout(H)}),{controlsDescendantBindings:!0}},update:function(n,t,o,r,i){var s=f(t,"foreach");l(n,a,s.foreach),e.bindingHandlers.template.update(n,function(){return s},o,r,i)},connectClass:"ko_container",allowDrop:!0,afterMove:null,beforeMove:null,options:{}},e.bindingHandlers.draggable={init:function(t,o,a,r,d){var c=s(o())||{},u=c.options||{},p=e.utils.extend({},e.bindingHandlers.draggable.options),b=f(o,"data"),g=c.connectClass||e.bindingHandlers.draggable.connectClass,m=void 0!==c.isEnabled?c.isEnabled:e.bindingHandlers.draggable.isEnabled;return c="data"in c?c.data:c,l(t,i,c),e.utils.extend(p,u),p.connectToSortable=g?"."+g:!1,n(t).draggable(p),void 0!==m&&e.computed({read:function(){n(t).draggable(s(m)?"enable":"disable")},disposeWhenNodeIsRemoved:t}),e.utils.domNodeDisposal.addDisposeCallback(t,function(){n(t).draggable("destroy")}),e.bindingHandlers.template.init(t,function(){return b},a,r,d)},update:function(n,t,o,a,r){var i=f(t,"data");return e.bindingHandlers.template.update(n,function(){return i},o,a,r)},connectClass:e.bindingHandlers.sortable.connectClass,options:{helper:"clone"}}});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/var/www/s/app/webroot/js/lib/mosaico/bower_components/knockout-undomanager/knockout-undomanager.js":[function(require,module,exports){
(function (global){
!function(e){"function"==typeof require&&"object"==typeof exports&&"object"==typeof module?module.exports=e((typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null),require("./../knockoutjs-reactor/dist/ko-reactor.min.js")):"function"==typeof define&&define.amd?define(["knockout","knockoutjs-reactor","exports"],e):e(ko,ko.watch)}(function(e,n){var t=function(t,o){var i,d=e.observableArray(),r=e.observableArray(),u=0,l=1,c=2,f=u,a=0,s=1,m=2,p=3,g=a,b={levels:100,undoLabel:"undo (#COUNT#)",redoLabel:"redo (#COUNT#)"};o="object"==typeof o?e.utils.extend(b,o):b;var v=function(e){f==l?y(e,r):f==c?y(e,d):f==u&&(y(e,d),r.removeAll())},h=function(e,n){return"undefined"!=typeof e.mergedAction?e.mergedAction(n):null},y=function(e,n){if(n().length>0){var t=h(n()[n().length-1],e);if(null!==t)return void(n()[n().length-1]=t)}n().length>=o.levels&&n.shift(),i=n,n.push(e)},A=function(n,t,o){return{name:e.computed(function(){return e.utils.unwrapObservable(n).replace(/#COUNT#/,o().length)}),enabled:e.computed(function(){return 0!==o().length}),execute:function(){var e=o.pop();if(e){var n=f;f=t;var d=g;g=p,e(),k(i),g=d,f=n}return!0}}},k=function(e){if("undefined"==typeof e)throw"Unexpected operation: stack cleaner called with undefined stack";e().length>0&&"undefined"!=typeof e()[e().length-1].mergedAction&&delete e()[e().length-1].mergedAction},M=function(e,n){var t=function(e,n){e(),n()}.bind(void 0,e,n);return"undefined"!=typeof e.mergedAction&&(t.mergedAction=e.mergedAction),t},x=function(e,n,t){if("undefined"!=typeof n)e(n);else{if(!t)throw"Unexpected condition: no item and no child.oldValues!";if("deleted"==t.status)e.splice(t.index,0,t.value);else{if("added"!=t.status)throw"Unsupproted item.status: "+t.status;e.splice(t.index,1)}}},U=function(e,n,t,o,i){return e.bind(void 0,t,o,i)},j=U,w=function(e,n,t){var o="undefined"!=typeof n.oldValues?n.oldValues[0]:void 0,i=j(x,e,n,o,t);g!=s&&(g==p?"undefined"!=typeof i&&(i.mergedAction=function(e){return"undefined"!=typeof e.mergeMe&&e.mergeMe?M(e,this):null},i.mergeMe=!0):"undefined"!=typeof i&&(n.oldValues&&g==m&&(i.mergedAction=function(e,n,t){return"object"==typeof t.mergeableAction&&e==t.mergeableAction.child?this:null}.bind(i,n,t),i.mergeableAction={child:n,item:t}),t&&"deleted"==t.status&&(i.mergedAction=function(e,n,t){return"object"==typeof t.mergeableMove&&n.value==t.mergeableMove.item.value?M(t,this):(console.log("UR","not mergeable",typeof t.mergeableMove),null)}.bind(i,n,t)),t&&"added"==t.status&&(i.mergeableMove={child:n,item:t})),"undefined"!=typeof i&&v(i))},C={depth:-1,oldValues:1,mutable:!0,tagFields:!0},O={},V="function"==typeof n?n:e.watch,L=V(t,C,w,O);return{push:v,undoCommand:A(o.undoLabel,l,d),redoCommand:A(o.redoLabel,c,r),reset:function(){d.removeAll(),r.removeAll()},setModeOnce:function(){g=m,k(d)},setModeMerge:function(){g=p,k(d)},setModeNormal:function(){g=a,k(d)},setModeIgnore:function(){g=s,k(d)},setUndoActionMaker:function(e){j=e},dispose:function(){L.dispose()}}};return t});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./../knockoutjs-reactor/dist/ko-reactor.min.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/knockoutjs-reactor/dist/ko-reactor.min.js"}],"/var/www/s/app/webroot/js/lib/mosaico/bower_components/knockout.wrap/knockout.wrap.js":[function(require,module,exports){
(function (global){
!function(r){"function"==typeof require&&"object"==typeof exports&&"object"==typeof module?r((typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null),exports):"function"==typeof define&&define.amd?define(["knockout","exports"],r):r(ko,ko.wrap={})}(function(r,t){function n(r){var t=typeof r;return"object"===t&&(r?r.constructor==Date?t="date":"[object Array]"==Object.prototype.toString.call(r)&&(t="array"):t="null"),t}function e(t){var n={};for(var e in t){var o=t[e];r.isComputed(o)||(n[e]=u(o))}return n}function o(r){var t=[];if(!r||0==r.length)return t;for(var n=0,e=r.length;e>n;++n)t.push(u(r[n]));return t}function u(t){var a=r.isObservable(t);if(a){var f=t();return u(f)}return"array"==n(t)?o(t):"object"==n(t)?e(t):t}function a(){v=[{obj:null,wrapped:null,lvl:""}]}function f(t,n,e){for(var o=0;o<v.length;++o)if(v[o].obj===t)return v[o].wrapped;var u={};for(var a in t){var f=t[a];v.push({obj:t,wrapped:u,lvl:c()+"/"+a}),u[a]=l(f,n,e),v.pop()}return n&&n[c()]&&(u=n[c()](u)),p()&&r.track(u),e?r.observable(u):u}function i(t,n,e){var o=r.observableArray();if(!t||0==t.length)return o;for(var u=0,a=t.length;a>u;++u)o.push(l(t[u],n,e));return o}function c(){return v[v.length-1].lvl}function l(t,e,o){if("array"==n(t))return i(t,e,o);if("object"==n(t))return f(t,e,o);if(p()||"function"==typeof t)return t;var u=r.observable();return u(t),u}function p(){return null!=r.track}t.fromJS=function(r,t,n){return a(),l(r,t,n)},t.updateFromJS=function(t,n,e,o){return a(),t(r.utils.unwrapObservable(l(n,e,o)))},t.fromJSON=function(n,e,o){var u=r.utils.parseJson(n);return arguments[0]=u,t.fromJS.apply(this,e,o)},t.toJS=function(r){return u(r)},t.toJSON=function(n){var e=t.toJS(n);return r.utils.stringifyJson(e)};var v});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/var/www/s/app/webroot/js/lib/mosaico/bower_components/knockoutjs-reactor/dist/ko-reactor.min.js":[function(require,module,exports){
ko.subscribable.fn.watch=function(e,a,t,o){var r=typeof e;return"boolean"===r||"undefined"===r?ko.watch(this,{enabled:e!==!1}):"function"!==r||ko.isSubscribable(e)?ko.watch(e,a,t,o||this):ko.watch(this,a||{},e,o||this),this},ko.watch=function(e,a,t,o){function r(l,c,f,u,s,b){if(l&&0!==a.depth&&(-1===a.depth||f.length<(a.depth||1))){if(a.watchedOnly&&!l.watchable&&l!=e)return;if((a.enabled===!1||a.enabled===!0)&&(l.watchable=a.enabled),l.watchable===!1)return;a.seal===!0&&(l.watchable=!1);var h=typeof l;if("object"===h||"function"===h){if(l._watcher===o)return;if(a.hide&&ko.utils.arrayIndexOf(a.hide,l)>-1)return;var d=[].concat(f,c&&c!==e?c:[]);if("function"!==h){if("[object Object]"===Object.prototype.toString.call(l))ko.utils.objectForEach(l,function(e,t){if(t=a.getter?a.getter.call(o,d,l,e):t){if(a.wrap){var n=Object.prototype.toString.call(t);"[object Function]"!==n&&"[object Object]"!==n&&(a.beforeWrap&&a.beforeWrap.call(o,d,l,t)===!1||(t=l[e]="[object Array]"===n?ko.observableArray(t):ko.observable(t)))}a.unloop&&(t._watcher=u?void 0:o);var i=r(t,s?null:l,d,u,null,e);a.tagFields&&void 0===t._fieldName&&(i||"parentsOnly"!==a.tagFields&&"function"==typeof t||"object"==typeof t)&&(t._fieldName=e)}});else if(a.hideArrays!==!0)for(var p=0;p<l.length;p++)r(l[p],s?null:l,d,u);return!0}if("function"==typeof l.notifySubscribers&&t){if(a.enabled===!0&&l.watchable===!1)return;if(u||!a.beforeWatch||a.beforeWatch.call(o,d,l,b)!==!1){var v="function"==typeof l.pop;if(u?n(l):i(l,v,d,s),v)return r(l(),s?null:l,d,u,!0),!0;if(a.hideWrappedValues!==!0)return r(l(),s?null:l,d,u,!0)}}}}}function n(e){var t=e[l];if(!t)throw"Subscriptions field (."+l+") not defined for observable child "+(e._fieldName||"");if(t.change)for(var r=t.change.length-1;r>=0;r--)t.change[r]._watcher===o&&t.change[r].dispose();if(t.beforeChange&&(a.mutable||a.oldValues>0))for(var r=t.beforeChange.length-1;r>=0;r--)t.beforeChange[r]._watcher===o&&t.beforeChange[r].dispose();if(t.arrayChange)for(var r=t.arrayChange.length-1;r>=0;r--)t.arrayChange[r]._watcher===o&&t.arrayChange[r].dispose()}function i(e,n,i,l){n?e.subscribe(function(a){ko.utils.arrayForEach(a,function(a){var n=t.call(o,i,e,a);void 0!==n&&o(n),a.moved||setTimeout(function(){r(a.value,l?null:e,i,"deleted"===a.status)},0)})},void 0,"arrayChange")._watcher=o:(e.subscribe(function(){if(e.watchable!==!1){var n=t.call(o,i,e);void 0!==n&&o(n),a.mutable&&"object"==typeof e()&&r(e(),l?null:e,i)}},null,"change")._watcher=o,(a.oldValues>0||a.mutable)&&(e.subscribe(function(t){if(a.oldValues>0){var o=e.oldValues?e.oldValues:e.oldValues=[];for(o.unshift(t);o.length>a.oldValues;)o.pop()}a.mutable&&"object"==typeof t&&r(t,l?null:e,i,!1,!0)},null,"beforeChange")._watcher=o))}"function"==typeof a&&(o=o||t,t=a,a={}),o=o||this;var l;switch(ko.DEBUG||ko.version){case!0:l="_subscriptions";break;case"3.0.0":l="F";break;case"3.1.0":l="H";break;case"3.2.0":l="M";break;case"3.3.0":l="G";case"3.4.0":l="K";break;default:throw"Unsupported Knockout version. Only v3.0.0 to v3.4.0 are supported when minified. Current version is "+ko.version}return"function"!=typeof e||ko.isSubscribable(e)?(r(e,null,[]),{dispose:function(){r(e,null,[],!0)}}):ko.computed(e,t,a)},window.foo="1.3.6";

},{}],"/var/www/s/app/webroot/js/lib/mosaico/bower_components/mensch/lib/debug.js":[function(require,module,exports){
(function (process){
function debug(e){return _debug.bind(null,e)}function _debug(e){var n=[].slice.call(arguments,1);n.unshift("["+e+"]"),process.stderr.write(n.join(" ")+"\n")}exports=module.exports=debug;

}).call(this,require('_process'))

},{"_process":"/var/www/s/app/webroot/js/lib/mosaico/node_modules/browserify/node_modules/process/browser.js"}],"/var/www/s/app/webroot/js/lib/mosaico/bower_components/mensch/lib/lexer.js":[function(require,module,exports){
function lex(e){function a(){return i(),e[v]}function r(e){return e?y[y.length-1-e]:w}function s(a){var r=v+1;return a===e.slice(r,r+a.length)}function t(a){var r=e.slice(v).indexOf(a);return r>0?r:!1}function c(e){return e===n(1)}function n(a){return e[v+(a||1)]}function o(){var e=y.pop();return w=y[y.length-1],e}function l(e){return w=e,y.push(w),y.length}function u(e){var a=w;return y[y.length-1]=w=e,a}function i(a){if(1==(a||1))"\n"==e[v]?(h++,p=1):p++,v++;else{var r=e.slice(v,v+a).split("\n");r.length>1&&(h+=r.length-1,p=1),p+=r[r.length-1].length,v+=a}}function b(){x.end={line:h,col:p},DEBUG&&debug("addToken:",JSON.stringify(x,null,2)),E.push(x),k="",x={}}function m(e){x={type:e,start:{line:h,col:p}}}var f,g,k="",p=0,v=-1,d=0,h=1,w="before-selector",y=[w],x={},E=[],D=["media","keyframes",{name:"-webkit-keyframes",type:"keyframes",prefix:"-webkit-"},{name:"-moz-keyframes",type:"keyframes",prefix:"-moz-"},{name:"-ms-keyframes",type:"keyframes",prefix:"-ms-"},{name:"-o-keyframes",type:"keyframes",prefix:"-o-"},"font-face",{name:"import",state:"before-at-value"},{name:"charset",state:"before-at-value"},"supports","viewport",{name:"namespace",state:"before-at-value"},"document",{name:"-moz-document",type:"document",prefix:"-moz-"},"page"];for(TIMER&&(f=Date.now());g=a();)switch(DEBUG&&debug(g,r()),g){case" ":switch(r()){case"selector":case"value":case"value-paren":case"at-group":case"at-value":case"comment":case"double-string":case"single-string":k+=g}break;case"\n":case"	":case"\r":case"\f":switch(r()){case"value":case"value-paren":case"at-group":case"comment":case"single-string":case"double-string":case"selector":k+=g;break;case"at-value":"\n"===g&&(x.value=k.trim(),b(),o())}break;case":":switch(r()){case"name":x.name=k.trim(),k="",u("before-value");break;case"before-selector":k+=g,m("selector"),l("selector");break;default:k+=g}break;case";":switch(r()){case"name":case"before-value":case"value":k.trim().length>0&&(x.value=k.trim(),b()),u("before-name");break;case"value-paren":k+=g;break;case"at-value":x.value=k.trim(),b(),o();break;case"before-name":break;default:k+=g}break;case"{":switch(r()){case"selector":if("\\"===n(-1)){k+=g;break}x.text=k.trim(),b(),u("before-name"),d+=1;break;case"at-group":switch(x.name=k.trim(),x.type){case"font-face":case"viewport":case"page":l("before-name");break;default:l("before-selector")}b(),d+=1;break;case"name":case"at-rule":x.name=k.trim(),b(),l("before-name"),d+=1;break;case"comment":case"double-string":case"single-string":k+=g}break;case"}":switch(r()){case"before-name":case"name":case"before-value":case"value":k&&(x.value=k.trim()),x.name&&x.value&&b(),m("end"),b(),o(),"at-group"===r()&&(m("at-group-end"),b(),o()),d>0&&(d-=1);break;case"at-group":case"before-selector":case"selector":if("\\"===n(-1)){k+=g;break}d>0&&"at-group"===r(1)&&(m("at-group-end"),b()),d>1&&o(),d>0&&(d-=1);break;case"double-string":case"single-string":case"comment":k+=g}break;case'"':case"'":switch(r()){case"double-string":'"'===g&&"\\"!==n(-1)&&o();break;case"single-string":"'"===g&&"\\"!==n(-1)&&o();break;case"before-at-value":u("at-value"),l('"'===g?"double-string":"single-string");break;case"before-value":u("value"),l('"'===g?"double-string":"single-string");break;case"comment":break;default:"\\"!==n(-1)&&l('"'===g?"double-string":"single-string")}k+=g;break;case"/":switch(r()){case"comment":case"double-string":case"single-string":k+=g;break;case"before-value":case"selector":case"name":case"value":if(c("*")){var z=t("*/");z&&i(z+1)}else k+=g;break;default:c("*")?(m("comment"),l("comment"),i()):k+=g}break;case"*":switch(r()){case"comment":c("/")?(x.text=k,i(),b(),o()):k+=g;break;case"before-selector":k+=g,m("selector"),l("selector");break;default:k+=g}break;case"@":switch(r()){case"comment":case"double-string":case"single-string":k+=g;break;default:for(var T,B,G=!1,I=0,M=D.length;!G&&M>I;++I)B=D[I],T=B.name||B,s(T)&&(G=!0,m(T),l(B.state||"at-group"),i(T.length),B.prefix&&(x.prefix=B.prefix),B.type&&(x.type=B.type));G||(k+=g)}break;case"(":switch(r()){case"value":l("value-paren")}k+=g;break;case")":switch(r()){case"value-paren":o()}k+=g;break;default:switch(r()){case"before-selector":m("selector"),l("selector");break;case"before-name":m("property"),u("name");break;case"before-value":u("value");break;case"before-at-value":u("at-value")}k+=g}return TIMER&&debug("ran in",Date.now()-f+"ms"),E}var DEBUG=!1,TIMER=!1,debug=require("./debug")("lex");exports=module.exports=lex;

},{"./debug":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/mensch/lib/debug.js"}],"/var/www/s/app/webroot/js/lib/mosaico/bower_components/mensch/lib/parser.js":[function(require,module,exports){
function parse(e,r){var t;r||(r={}),_comments=!!r.comments,_position=!!r.position,_depth=0,_tokens=Array.isArray(e)?e.slice():lex(e);var s,n,a=[];for(TIMER&&(t=Date.now());n=next();)s=parseToken(n),s&&a.push(s);return TIMER&&debug("ran in",Date.now()-t+"ms"),{type:"stylesheet",stylesheet:{rules:a}}}function astNode(e,r){r||(r={});for(var t,s=["type","name","value"],n={},a=0;a<s.length;++a)t=s[a],e[t]&&(n[t]=r[t]||e[t]);for(s=Object.keys(r),a=0;a<s.length;++a)t=s[a],n[t]||(n[t]=r[t]);return _position&&(n.position={start:e.start,end:e.end}),DEBUG&&debug("astNode:",JSON.stringify(n,null,2)),n}function next(){var e=_tokens.shift();return DEBUG&&debug("next:",JSON.stringify(e,null,2)),e}function parseAtGroup(e){_depth+=1;var r={};switch(e.type){case"font-face":case"viewport":r.declarations=parseDeclarations();break;case"page":r.prefix=e.prefix,r.declarations=parseDeclarations();break;default:r.prefix=e.prefix,r.rules=parseRules()}return astNode(e,r)}function parseAtImport(e){return astNode(e)}function parseCharset(e){return astNode(e)}function parseComment(e){return astNode(e,{text:e.text})}function parseNamespace(e){return astNode(e)}function parseProperty(e){return astNode(e)}function parseSelector(e){function r(e){return e.trim()}return astNode(e,{type:"rule",selectors:e.text.split(",").map(r),declarations:parseDeclarations(e)})}function parseToken(e){switch(e.type){case"property":return parseProperty(e);case"selector":return parseSelector(e);case"at-group-end":return void(_depth-=1);case"media":case"keyframes":return parseAtGroup(e);case"comment":if(_comments)return parseComment(e);break;case"charset":return parseCharset(e);case"import":return parseAtImport(e);case"namespace":return parseNamespace(e);case"font-face":case"supports":case"viewport":case"document":case"page":return parseAtGroup(e)}DEBUG&&debug("parseToken: unexpected token:",JSON.stringify(e))}function parseTokensWhile(e){for(var r,t,s=[];(t=next())&&e&&e(t);)r=parseToken(t),r&&s.push(r);return t&&"end"!==t.type&&_tokens.unshift(t),s}function parseDeclarations(){return parseTokensWhile(function(e){return"property"===e.type||"comment"===e.type})}function parseRules(){return parseTokensWhile(function(){return _depth})}var DEBUG=!1,TIMER=!1,debug=require("./debug")("parse"),lex=require("./lexer");exports=module.exports=parse;var _comments,_depth,_position,_tokens;

},{"./debug":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/mensch/lib/debug.js","./lexer":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/mensch/lib/lexer.js"}],"/var/www/s/app/webroot/js/lib/mosaico/bower_components/tinycolor/tinycolor.js":[function(require,module,exports){
!function(){function t(r,n){if(r=r?r:"",n=n||{},r instanceof t)return r;if(!(this instanceof t))return new t(r,n);var a=e(r);this._originalInput=r,this._r=a.r,this._g=a.g,this._b=a.b,this._a=a.a,this._roundA=j(100*this._a)/100,this._format=n.format||a.format,this._gradientType=n.gradientType,this._r<1&&(this._r=j(this._r)),this._g<1&&(this._g=j(this._g)),this._b<1&&(this._b=j(this._b)),this._ok=a.ok,this._tc_id=I++}function e(t){var e={r:0,g:0,b:0},n=1,i=!1,o=!1;return"string"==typeof t&&(t=q(t)),"object"==typeof t&&(t.hasOwnProperty("r")&&t.hasOwnProperty("g")&&t.hasOwnProperty("b")?(e=r(t.r,t.g,t.b),i=!0,o="%"===String(t.r).substr(-1)?"prgb":"rgb"):t.hasOwnProperty("h")&&t.hasOwnProperty("s")&&t.hasOwnProperty("v")?(t.s=O(t.s),t.v=O(t.v),e=s(t.h,t.s,t.v),i=!0,o="hsv"):t.hasOwnProperty("h")&&t.hasOwnProperty("s")&&t.hasOwnProperty("l")&&(t.s=O(t.s),t.l=O(t.l),e=a(t.h,t.s,t.l),i=!0,o="hsl"),t.hasOwnProperty("a")&&(n=t.a)),n=k(n),{ok:i,format:t.format||o,r:T(255,$(e.r,0)),g:T(255,$(e.g,0)),b:T(255,$(e.b,0)),a:n}}function r(t,e,r){return{r:255*A(t,255),g:255*A(e,255),b:255*A(r,255)}}function n(t,e,r){t=A(t,255),e=A(e,255),r=A(r,255);var n,a,i=$(t,e,r),s=T(t,e,r),o=(i+s)/2;if(i==s)n=a=0;else{var f=i-s;switch(a=o>.5?f/(2-i-s):f/(i+s),i){case t:n=(e-r)/f+(r>e?6:0);break;case e:n=(r-t)/f+2;break;case r:n=(t-e)/f+4}n/=6}return{h:n,s:a,l:o}}function a(t,e,r){function n(t,e,r){return 0>r&&(r+=1),r>1&&(r-=1),1/6>r?t+6*(e-t)*r:.5>r?e:2/3>r?t+(e-t)*(2/3-r)*6:t}var a,i,s;if(t=A(t,360),e=A(e,100),r=A(r,100),0===e)a=i=s=r;else{var o=.5>r?r*(1+e):r+e-r*e,f=2*r-o;a=n(f,o,t+1/3),i=n(f,o,t),s=n(f,o,t-1/3)}return{r:255*a,g:255*i,b:255*s}}function i(t,e,r){t=A(t,255),e=A(e,255),r=A(r,255);var n,a,i=$(t,e,r),s=T(t,e,r),o=i,f=i-s;if(a=0===i?0:f/i,i==s)n=0;else{switch(i){case t:n=(e-r)/f+(r>e?6:0);break;case e:n=(r-t)/f+2;break;case r:n=(t-e)/f+4}n/=6}return{h:n,s:a,v:o}}function s(t,e,r){t=6*A(t,360),e=A(e,100),r=A(r,100);var n=N.floor(t),a=t-n,i=r*(1-e),s=r*(1-a*e),o=r*(1-(1-a)*e),f=n%6,h=[r,s,i,i,o,r][f],l=[o,r,r,s,i,i][f],u=[i,i,o,r,r,s][f];return{r:255*h,g:255*l,b:255*u}}function o(t,e,r,n){var a=[M(j(t).toString(16)),M(j(e).toString(16)),M(j(r).toString(16))];return n&&a[0].charAt(0)==a[0].charAt(1)&&a[1].charAt(0)==a[1].charAt(1)&&a[2].charAt(0)==a[2].charAt(1)?a[0].charAt(0)+a[1].charAt(0)+a[2].charAt(0):a.join("")}function f(t,e,r,n){var a=[M(P(n)),M(j(t).toString(16)),M(j(e).toString(16)),M(j(r).toString(16))];return a.join("")}function h(e,r){r=0===r?0:r||10;var n=t(e).toHsl();return n.s-=r/100,n.s=H(n.s),t(n)}function l(e,r){r=0===r?0:r||10;var n=t(e).toHsl();return n.s+=r/100,n.s=H(n.s),t(n)}function u(e){return t(e).desaturate(100)}function c(e,r){r=0===r?0:r||10;var n=t(e).toHsl();return n.l+=r/100,n.l=H(n.l),t(n)}function g(e,r){r=0===r?0:r||10;var n=t(e).toRgb();return n.r=$(0,T(255,n.r-j(255*-(r/100)))),n.g=$(0,T(255,n.g-j(255*-(r/100)))),n.b=$(0,T(255,n.b-j(255*-(r/100)))),t(n)}function d(e,r){r=0===r?0:r||10;var n=t(e).toHsl();return n.l-=r/100,n.l=H(n.l),t(n)}function b(e,r){var n=t(e).toHsl(),a=(j(n.h)+r)%360;return n.h=0>a?360+a:a,t(n)}function p(e){var r=t(e).toHsl();return r.h=(r.h+180)%360,t(r)}function _(e){var r=t(e).toHsl(),n=r.h;return[t(e),t({h:(n+120)%360,s:r.s,l:r.l}),t({h:(n+240)%360,s:r.s,l:r.l})]}function m(e){var r=t(e).toHsl(),n=r.h;return[t(e),t({h:(n+90)%360,s:r.s,l:r.l}),t({h:(n+180)%360,s:r.s,l:r.l}),t({h:(n+270)%360,s:r.s,l:r.l})]}function v(e){var r=t(e).toHsl(),n=r.h;return[t(e),t({h:(n+72)%360,s:r.s,l:r.l}),t({h:(n+216)%360,s:r.s,l:r.l})]}function y(e,r,n){r=r||6,n=n||30;var a=t(e).toHsl(),i=360/n,s=[t(e)];for(a.h=(a.h-(i*r>>1)+720)%360;--r;)a.h=(a.h+i)%360,s.push(t(a));return s}function w(e,r){r=r||6;for(var n=t(e).toHsv(),a=n.h,i=n.s,s=n.v,o=[],f=1/r;r--;)o.push(t({h:a,s:i,v:s})),s=(s+f)%1;return o}function x(t){var e={};for(var r in t)t.hasOwnProperty(r)&&(e[t[r]]=r);return e}function k(t){return t=parseFloat(t),(isNaN(t)||0>t||t>1)&&(t=1),t}function A(t,e){R(t)&&(t="100%");var r=F(t);return t=T(e,$(0,parseFloat(t))),r&&(t=parseInt(t*e,10)/100),N.abs(t-e)<1e-6?1:t%e/parseFloat(e)}function H(t){return T(1,$(0,t))}function S(t){return parseInt(t,16)}function R(t){return"string"==typeof t&&-1!=t.indexOf(".")&&1===parseFloat(t)}function F(t){return"string"==typeof t&&-1!=t.indexOf("%")}function M(t){return 1==t.length?"0"+t:""+t}function O(t){return 1>=t&&(t=100*t+"%"),t}function P(t){return Math.round(255*parseFloat(t)).toString(16)}function C(t){return S(t)/255}function q(t){t=t.replace(z,"").replace(E,"").toLowerCase();var e=!1;if(B[t])t=B[t],e=!0;else if("transparent"==t)return{r:0,g:0,b:0,a:0,format:"name"};var r;return(r=U.rgb.exec(t))?{r:r[1],g:r[2],b:r[3]}:(r=U.rgba.exec(t))?{r:r[1],g:r[2],b:r[3],a:r[4]}:(r=U.hsl.exec(t))?{h:r[1],s:r[2],l:r[3]}:(r=U.hsla.exec(t))?{h:r[1],s:r[2],l:r[3],a:r[4]}:(r=U.hsv.exec(t))?{h:r[1],s:r[2],v:r[3]}:(r=U.hsva.exec(t))?{h:r[1],s:r[2],v:r[3],a:r[4]}:(r=U.hex8.exec(t))?{a:C(r[1]),r:S(r[2]),g:S(r[3]),b:S(r[4]),format:e?"name":"hex8"}:(r=U.hex6.exec(t))?{r:S(r[1]),g:S(r[2]),b:S(r[3]),format:e?"name":"hex"}:(r=U.hex3.exec(t))?{r:S(r[1]+""+r[1]),g:S(r[2]+""+r[2]),b:S(r[3]+""+r[3]),format:e?"name":"hex"}:!1}function L(t){var e,r;return t=t||{level:"AA",size:"small"},e=(t.level||"AA").toUpperCase(),r=(t.size||"small").toLowerCase(),"AA"!==e&&"AAA"!==e&&(e="AA"),"small"!==r&&"large"!==r&&(r="small"),{level:e,size:r}}var z=/^[\s,#]+/,E=/\s+$/,I=0,N=Math,j=N.round,T=N.min,$=N.max,D=N.random;t.prototype={isDark:function(){return this.getBrightness()<128},isLight:function(){return!this.isDark()},isValid:function(){return this._ok},getOriginalInput:function(){return this._originalInput},getFormat:function(){return this._format},getAlpha:function(){return this._a},getBrightness:function(){var t=this.toRgb();return(299*t.r+587*t.g+114*t.b)/1e3},getLuminance:function(){var t,e,r,n,a,i,s=this.toRgb();return t=s.r/255,e=s.g/255,r=s.b/255,n=.03928>=t?t/12.92:Math.pow((t+.055)/1.055,2.4),a=.03928>=e?e/12.92:Math.pow((e+.055)/1.055,2.4),i=.03928>=r?r/12.92:Math.pow((r+.055)/1.055,2.4),.2126*n+.7152*a+.0722*i},setAlpha:function(t){return this._a=k(t),this._roundA=j(100*this._a)/100,this},toHsv:function(){var t=i(this._r,this._g,this._b);return{h:360*t.h,s:t.s,v:t.v,a:this._a}},toHsvString:function(){var t=i(this._r,this._g,this._b),e=j(360*t.h),r=j(100*t.s),n=j(100*t.v);return 1==this._a?"hsv("+e+", "+r+"%, "+n+"%)":"hsva("+e+", "+r+"%, "+n+"%, "+this._roundA+")"},toHsl:function(){var t=n(this._r,this._g,this._b);return{h:360*t.h,s:t.s,l:t.l,a:this._a}},toHslString:function(){var t=n(this._r,this._g,this._b),e=j(360*t.h),r=j(100*t.s),a=j(100*t.l);return 1==this._a?"hsl("+e+", "+r+"%, "+a+"%)":"hsla("+e+", "+r+"%, "+a+"%, "+this._roundA+")"},toHex:function(t){return o(this._r,this._g,this._b,t)},toHexString:function(t){return"#"+this.toHex(t)},toHex8:function(){return f(this._r,this._g,this._b,this._a)},toHex8String:function(){return"#"+this.toHex8()},toRgb:function(){return{r:j(this._r),g:j(this._g),b:j(this._b),a:this._a}},toRgbString:function(){return 1==this._a?"rgb("+j(this._r)+", "+j(this._g)+", "+j(this._b)+")":"rgba("+j(this._r)+", "+j(this._g)+", "+j(this._b)+", "+this._roundA+")"},toPercentageRgb:function(){return{r:j(100*A(this._r,255))+"%",g:j(100*A(this._g,255))+"%",b:j(100*A(this._b,255))+"%",a:this._a}},toPercentageRgbString:function(){return 1==this._a?"rgb("+j(100*A(this._r,255))+"%, "+j(100*A(this._g,255))+"%, "+j(100*A(this._b,255))+"%)":"rgba("+j(100*A(this._r,255))+"%, "+j(100*A(this._g,255))+"%, "+j(100*A(this._b,255))+"%, "+this._roundA+")"},toName:function(){return 0===this._a?"transparent":this._a<1?!1:G[o(this._r,this._g,this._b,!0)]||!1},toFilter:function(e){var r="#"+f(this._r,this._g,this._b,this._a),n=r,a=this._gradientType?"GradientType = 1, ":"";if(e){var i=t(e);n=i.toHex8String()}return"progid:DXImageTransform.Microsoft.gradient("+a+"startColorstr="+r+",endColorstr="+n+")"},toString:function(t){var e=!!t;t=t||this._format;var r=!1,n=this._a<1&&this._a>=0,a=!e&&n&&("hex"===t||"hex6"===t||"hex3"===t||"name"===t);return a?"name"===t&&0===this._a?this.toName():this.toRgbString():("rgb"===t&&(r=this.toRgbString()),"prgb"===t&&(r=this.toPercentageRgbString()),"hex"!==t&&"hex6"!==t||(r=this.toHexString()),"hex3"===t&&(r=this.toHexString(!0)),"hex8"===t&&(r=this.toHex8String()),"name"===t&&(r=this.toName()),"hsl"===t&&(r=this.toHslString()),"hsv"===t&&(r=this.toHsvString()),r||this.toHexString())},_applyModification:function(t,e){var r=t.apply(null,[this].concat([].slice.call(e)));return this._r=r._r,this._g=r._g,this._b=r._b,this.setAlpha(r._a),this},lighten:function(){return this._applyModification(c,arguments)},brighten:function(){return this._applyModification(g,arguments)},darken:function(){return this._applyModification(d,arguments)},desaturate:function(){return this._applyModification(h,arguments)},saturate:function(){return this._applyModification(l,arguments)},greyscale:function(){return this._applyModification(u,arguments)},spin:function(){return this._applyModification(b,arguments)},_applyCombination:function(t,e){return t.apply(null,[this].concat([].slice.call(e)))},analogous:function(){return this._applyCombination(y,arguments)},complement:function(){return this._applyCombination(p,arguments)},monochromatic:function(){return this._applyCombination(w,arguments)},splitcomplement:function(){return this._applyCombination(v,arguments)},triad:function(){return this._applyCombination(_,arguments)},tetrad:function(){return this._applyCombination(m,arguments)}},t.fromRatio=function(e,r){if("object"==typeof e){var n={};for(var a in e)e.hasOwnProperty(a)&&("a"===a?n[a]=e[a]:n[a]=O(e[a]));e=n}return t(e,r)},t.equals=function(e,r){return e&&r?t(e).toRgbString()==t(r).toRgbString():!1},t.random=function(){return t.fromRatio({r:D(),g:D(),b:D()})},t.mix=function(e,r,n){n=0===n?0:n||50;var a,i=t(e).toRgb(),s=t(r).toRgb(),o=n/100,f=2*o-1,h=s.a-i.a;a=f*h==-1?f:(f+h)/(1+f*h),a=(a+1)/2;var l=1-a,u={r:s.r*a+i.r*l,g:s.g*a+i.g*l,b:s.b*a+i.b*l,a:s.a*o+i.a*(1-o)};return t(u)},t.readability=function(e,r){var n=t(e),a=t(r);return(Math.max(n.getLuminance(),a.getLuminance())+.05)/(Math.min(n.getLuminance(),a.getLuminance())+.05)},t.isReadable=function(e,r,n){var a,i,s=t.readability(e,r);switch(i=!1,a=L(n),a.level+a.size){case"AAsmall":case"AAAlarge":i=s>=4.5;break;case"AAlarge":i=s>=3;break;case"AAAsmall":i=s>=7}return i},t.mostReadable=function(e,r,n){var a,i,s,o,f=null,h=0;n=n||{},i=n.includeFallbackColors,s=n.level,o=n.size;for(var l=0;l<r.length;l++)a=t.readability(e,r[l]),a>h&&(h=a,f=t(r[l]));return t.isReadable(e,f,{level:s,size:o})||!i?f:(n.includeFallbackColors=!1,t.mostReadable(e,["#fff","#000"],n))};var B=t.names={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"0ff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000",blanchedalmond:"ffebcd",blue:"00f",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",burntsienna:"ea7e5d",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"0ff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkgrey:"a9a9a9",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkslategrey:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dimgrey:"696969",dodgerblue:"1e90ff",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"f0f",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",grey:"808080",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgray:"d3d3d3",lightgreen:"90ee90",lightgrey:"d3d3d3",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslategray:"789",lightslategrey:"789",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"0f0",limegreen:"32cd32",linen:"faf0e6",magenta:"f0f",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370db",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"db7093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"663399",red:"f00",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",slategrey:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",wheat:"f5deb3",white:"fff",whitesmoke:"f5f5f5",yellow:"ff0",yellowgreen:"9acd32"},G=t.hexNames=x(B),U=function(){var t="[-\\+]?\\d+%?",e="[-\\+]?\\d*\\.\\d+%?",r="(?:"+e+")|(?:"+t+")",n="[\\s|\\(]+("+r+")[,|\\s]+("+r+")[,|\\s]+("+r+")\\s*\\)?",a="[\\s|\\(]+("+r+")[,|\\s]+("+r+")[,|\\s]+("+r+")[,|\\s]+("+r+")\\s*\\)?";return{rgb:new RegExp("rgb"+n),rgba:new RegExp("rgba"+a),hsl:new RegExp("hsl"+n),hsla:new RegExp("hsla"+a),hsv:new RegExp("hsv"+n),hsva:new RegExp("hsva"+a),hex3:/^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex8:/^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/}}();"undefined"!=typeof module&&module.exports?module.exports=t:"function"==typeof define&&define.amd?define(function(){return t}):window.tinycolor=t}();

},{}],"/var/www/s/app/webroot/js/lib/mosaico/bower_components/toastr/toastr.js":[function(require,module,exports){
(function (global){
!function(e){e(["jquery"],function(e){return function(){function t(e,t,n){return g({type:O.error,iconClass:m().iconClasses.error,message:e,optionsOverride:n,title:t})}function n(t,n){return t||(t=m()),v=e("#"+t.containerId),v.length?v:(n&&(v=u(t)),v)}function i(e,t,n){return g({type:O.info,iconClass:m().iconClasses.info,message:e,optionsOverride:n,title:t})}function o(e){w=e}function s(e,t,n){return g({type:O.success,iconClass:m().iconClasses.success,message:e,optionsOverride:n,title:t})}function a(e,t,n){return g({type:O.warning,iconClass:m().iconClasses.warning,message:e,optionsOverride:n,title:t})}function r(e,t){var i=m();v||n(i),l(e,i,t)||d(i)}function c(t){var i=m();return v||n(i),t&&0===e(":focus",t).length?void h(t):void(v.children().length&&v.remove())}function d(t){for(var n=v.children(),i=n.length-1;i>=0;i--)l(e(n[i]),t)}function l(t,n,i){var o=i&&i.force?i.force:!1;return t&&(o||0===e(":focus",t).length)?(t[n.hideMethod]({duration:n.hideDuration,easing:n.hideEasing,complete:function(){h(t)}}),!0):!1}function u(t){return v=e("<div/>").attr("id",t.containerId).addClass(t.positionClass).attr("aria-live","polite").attr("role","alert"),v.appendTo(e(t.target)),v}function p(){return{tapToDismiss:!0,toastClass:"toast",containerId:"toast-container",debug:!1,showMethod:"fadeIn",showDuration:300,showEasing:"swing",onShown:void 0,hideMethod:"fadeOut",hideDuration:1e3,hideEasing:"swing",onHidden:void 0,closeMethod:!1,closeDuration:!1,closeEasing:!1,extendedTimeOut:1e3,iconClasses:{error:"toast-error",info:"toast-info",success:"toast-success",warning:"toast-warning"},iconClass:"toast-info",positionClass:"toast-top-right",timeOut:5e3,titleClass:"toast-title",messageClass:"toast-message",escapeHtml:!1,target:"body",closeHtml:'<button type="button">&times;</button>',newestOnTop:!0,preventDuplicates:!1,progressBar:!1}}function f(e){w&&w(e)}function g(t){function i(e){return null==e&&(e=""),new String(e).replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function o(){r(),d(),l(),u(),p(),c()}function s(){y.hover(b,O),!x.onclick&&x.tapToDismiss&&y.click(w),x.closeButton&&k&&k.click(function(e){e.stopPropagation?e.stopPropagation():void 0!==e.cancelBubble&&e.cancelBubble!==!0&&(e.cancelBubble=!0),w(!0)}),x.onclick&&y.click(function(e){x.onclick(e),w()})}function a(){y.hide(),y[x.showMethod]({duration:x.showDuration,easing:x.showEasing,complete:x.onShown}),x.timeOut>0&&(H=setTimeout(w,x.timeOut),q.maxHideTime=parseFloat(x.timeOut),q.hideEta=(new Date).getTime()+q.maxHideTime,x.progressBar&&(q.intervalId=setInterval(D,10)))}function r(){t.iconClass&&y.addClass(x.toastClass).addClass(E)}function c(){x.newestOnTop?v.prepend(y):v.append(y)}function d(){t.title&&(I.append(x.escapeHtml?i(t.title):t.title).addClass(x.titleClass),y.append(I))}function l(){t.message&&(M.append(x.escapeHtml?i(t.message):t.message).addClass(x.messageClass),y.append(M))}function u(){x.closeButton&&(k.addClass("toast-close-button").attr("role","button"),y.prepend(k))}function p(){x.progressBar&&(B.addClass("toast-progress"),y.prepend(B))}function g(e,t){if(e.preventDuplicates){if(t.message===C)return!0;C=t.message}return!1}function w(t){var n=t&&x.closeMethod!==!1?x.closeMethod:x.hideMethod,i=t&&x.closeDuration!==!1?x.closeDuration:x.hideDuration,o=t&&x.closeEasing!==!1?x.closeEasing:x.hideEasing;return!e(":focus",y).length||t?(clearTimeout(q.intervalId),y[n]({duration:i,easing:o,complete:function(){h(y),x.onHidden&&"hidden"!==j.state&&x.onHidden(),j.state="hidden",j.endTime=new Date,f(j)}})):void 0}function O(){(x.timeOut>0||x.extendedTimeOut>0)&&(H=setTimeout(w,x.extendedTimeOut),q.maxHideTime=parseFloat(x.extendedTimeOut),q.hideEta=(new Date).getTime()+q.maxHideTime)}function b(){clearTimeout(H),q.hideEta=0,y.stop(!0,!0)[x.showMethod]({duration:x.showDuration,easing:x.showEasing})}function D(){var e=(q.hideEta-(new Date).getTime())/q.maxHideTime*100;B.width(e+"%")}var x=m(),E=t.iconClass||x.iconClass;if("undefined"!=typeof t.optionsOverride&&(x=e.extend(x,t.optionsOverride),E=t.optionsOverride.iconClass||E),!g(x,t)){T++,v=n(x,!0);var H=null,y=e("<div/>"),I=e("<div/>"),M=e("<div/>"),B=e("<div/>"),k=e(x.closeHtml),q={intervalId:null,hideEta:null,maxHideTime:null},j={toastId:T,state:"visible",startTime:new Date,options:x,map:t};return o(),a(),s(),f(j),x.debug&&console&&console.log(j),y}}function m(){return e.extend({},p(),b.options)}function h(e){v||(v=n()),e.is(":visible")||(e.remove(),e=null,0===v.children().length&&(v.remove(),C=void 0))}var v,w,C,T=0,O={error:"error",info:"info",success:"success",warning:"warning"},b={clear:r,remove:c,error:t,getContainer:n,info:i,options:{},subscribe:o,success:s,version:"2.1.2",warning:a};return b}()})}("function"==typeof define&&define.amd?define:function(e,t){"undefined"!=typeof module&&module.exports?module.exports=t((typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null)):window.toastr=t(window.jQuery)});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/var/www/s/app/webroot/js/lib/mosaico/build/templates.js":[function(require,module,exports){
var templateSystem=require("../src/js/bindings/choose-template.js");document.addEventListener("DOMContentLoaded",function(t){templateSystem.addTemplate("array","<!-- ko foreach: $data --><!-- ko block: $data --><!-- /ko --><!-- /ko -->"),templateSystem.addTemplate("block-show","<!-- ko block: $data, scrollIntoView: $root.selectedBlock() === $data --><!-- /ko -->"),templateSystem.addTemplate("block-wysiwyg",'<div class="editable block" data-drop-content="Drop here" data-bind="attr: { \'data-drop-content\': $root.t(\'Drop here\') }, click: function(obj, evt) { $root.selectBlock(obj); return true }, clickBubble: false, css: { selected: $root.selectedBlock() === $data }, scrollIntoView: $root.selectedBlock() === $data">  <div class="mo-blockselectionhelper"></div>  <div class="tools" data-bind="tooltips: {}">    <!-- ko if: typeof $index != \'undefined\' -->    <div title="Drag this handle to move the block" data-bind="attr: { title: $root.t(\'Drag this handle to move the block\') }" class="tool handle"><i class="fa fa-fw fa-sort"></i></div>    <!-- ko if: $index() > 0 -->    <div title="Move this block upside" data-bind="attr: { title: $root.t(\'Move this block upside\') }" class="tool moveup"><i class="fa fa-fw fa-sort-asc" data-bind=\'click: $root.moveBlock.bind($element, $index, $parent, true)\'></i></div>    <!-- /ko -->    <!-- ko if: $index() < $parent.blocks().length -1 -->    <div title="Move this block downside" data-bind="attr: { title: $root.t(\'Move this block downside\') }" class="tool movedown"><i class="fa fa-fw fa-sort-desc" data-bind=\'click: $root.moveBlock.bind($element, $index, $parent, false)\'></i></div>    <!-- /ko -->    <div title="Delete block" class="tool delete" data-bind="attr: { title: $root.t(\'Delete block\') }, click: $root.removeBlock.bind($element, $rawData, $parent)"><i class="fa fa-fw fa-trash-o"></i></div>    <div title="Duplicate block" class="tool clone" data-bind="attr: { title: $root.t(\'Duplicate block\') }, click: $root.duplicateBlock.bind($element, $index, $parent)"><i class="fa fa-fw fa-files-o"></i></div>    <!-- /ko -->    <!-- ko if: typeof $data._nextVariant != \'undefined\' --><div title="Switch block variant" class="tool variant" data-bind="attr: { title: $root.t(\'Switch block variant\') }, click: $data._nextVariant"><i class="fa fa-fw fa-magic"></i></div><!-- /ko -->  </div>  <!-- ko block: $data --><!-- /ko --></div>'),templateSystem.addTemplate("blocks-show","<!-- ko template: { name: 'block-show', foreach: blocks } --><!-- /ko -->"),templateSystem.addTemplate("blocks-wysiwyg","<div class=\"sortable-blocks-edit\" data-drop-content=\"Drop here\" data-empty-content=\"Drop here blocks from the Blocks tab\" data-bind=\"attr: { 'data-drop-content': $root.t('Drop here'), 'data-empty-content': $root.t('Drop here blocks from the &quot;Blocks&quot; tab') }, css: { 'empty': ko.utils.unwrapObservable(blocks).length == 0 }, extsortable: { connectClass: 'sortable-blocks-edit', template: 'block-wysiwyg', data: blocks, dragging: $root.dragging, beforeMove: $root.startMultiple, afterMove: $root.stopMultiple, options: { handle: '.handle', placeholder: $root.placeholderHelper } }\"></div>"),templateSystem.addTemplate("customstyle",'<div class="customStyleHelp" data-bind="html: $root.t(\'Customized block.<ul><li>In this status changes to properties will be specific to the current block (instead of being global to all blocks in the same section)</li><li>A <span class=&quot;customStyled&quot;><span>&quot;small cube&quot; </span></span> icon beside the property will mark the customization. By clicking this icon the property value will be reverted to the value defined for the section.</li></ul>\')">Customized block.<ul><li>In this status changes to properties will be specific to the current block (instead of being global to all blocks in the same section)</li><li>A <span class="customStyled"><span>"small cube" </span></span> icon beside the property will mark the customization. By clicking this icon the property value will be reverted to the value defined for the section.</li></ul></div>'),templateSystem.addTemplate("empty",""),templateSystem.addTemplate("error",'[<div style="background-color: #fff0f0" data-bind="text: ko.toJS($data)"></div>]'),templateSystem.addTemplate("gallery-images",'<div data-bind="foreach: items.currentPageData">  <div class="draggable-item" data-bind="if: typeof thumbnailUrl != \'undefined\'">    <div class="draggable image" data-bind="click: $root.addImage, extdraggable: { data: $data, dropContainer: \'#main-wysiwyg-area\', dragging: $root.draggingImage, \'options\': { \'appendTo\': \'#page\' } }, style: { backgroundImage: \'url(\\\'\' + thumbnailUrl + \'\\\')\' }">      <img title="Trascina questa immagine sulla posizione in cui vuoi inserirla" style="display: block;" data-bind="tooltips: {}, attr: { src: thumbnailUrl }"/>    </div>  </div></div><!-- ko if: items.pageCount() > 1 --><div class="galleryPager" data-bind="buttonset: {}">  <a href="#" data-bind="click: items.moveFirst, button: { disabled: items.currentPage() == 1, icons: { primary: \'fa fa-fast-backward\' }, text: false }">First</a>  <a href="#" data-bind="click: items.movePrevious, button: { disabled: items.currentPage() == 1, icons: { primary: \'fa fa-backward\' }, text: false }">Previous</a>  <span data-bind="button: { disabled: true, text: true, label: \' \'+items.currentPage()+\' di \'+items.pageCount()+\' \' }"> X di Y </span>  <a href="#" data-bind="click: items.moveNext, button: { disabled: items.currentPage() == items.pageCount(), icons: { primary: \'fa fa-forward\' }, text: false }">Next</a>  <a href="#" data-bind="click: items.moveLast, button: { disabled: items.currentPage() == items.pageCount(), icons: { primary: \'fa fa-fast-forward\' }, text: false }">Last</a></div><!-- /ko -->'),templateSystem.addTemplate("img-wysiwyg",'<table tabfocus="0" cellspacing="0" cellpadding="0" data-drop-content="Drop here" data-bind="style: _stylebind, click: function(obj, evt) { $root.selectItem(_item, _data); return true; }, clickBubble: false, fudroppable: { activeClass: \'ui-state-highlight\', hoverClass: \'ui-state-draghover\' }, droppable: { options: { accept: \'.image\', activeClass: \'ui-state-highlight\', hoverClass: \'ui-state-draghover\' }, data: _src, dragged: $root.fileToImage }, css: { selecteditem: $root.isSelectedItem(_item) }, scrollIntoView: $root.isSelectedItem(_item), attr: { \'data-drop-content\': $root.t(\'Drop here\'), width: _width, height: _height, align: _align }"  class="img-wysiwyg selectable-img" style="display: table;"><tr><td class="uploadzone">  <div class="mo-imgselectionhelper"></div>  <div class="mo-uploadzone"></div>  <div class="img-size" data-bind="text: _size">size</div>  <div class="midtools" data-bind="tooltips: {}">    <!-- ko if: _src() != \'\' -->    <div title="Remove image" class="tool delete" data-bind="attr: { title: $root.t(\'Remove image\') }, click: _src.bind(_src, \'\'), clickBubble: false"><i class="fa fa-fw fa-trash-o"></i></div>    <!-- ko if: typeof $root.editImage !== \'undefined\' -->    <div title="Open the image editing tool" class="tool edit" data-bind="attr: { title: $root.t(\'Open the image editing tool\') }, click: $root.editImage.bind($element, _src), clickBubble: false"><i class="fa fa-fw fa-pencil"></i></div>    <!-- /ko -->    <!-- /ko -->    <!-- ko if: _src() == \'\' -->    <div title="Upload a new image" data-bind="attr: { title: $root.t(\'Upload a new image\') }" class="tool upload" style="position: relative; overflow: hidden;"><i class="fa fa-fw fa-upload"></i>      <input class="fileupload nofile" type="file" name="files[]" data-bind="fileupload: { data: _src, onerror: $root.notifier.error, onfile: $root.loadImage, canvasPreview: true }" style="z-index: 20; position: absolute; top: 0; left: 0; right: 0; bottom: 0; min-width: 100%; min-height: 100%; font-size: 999px; text-align: right; filter: alpha(opacity=0); opacity: 0; outline: none; cursor: inherit; display: block">    </div>    <!-- /ko -->  </div>  <!-- ko template: _template --><!-- /ko -->  <!-- ko if: _src() == \'\' -->    <!--    <img style="display: block;" class="imgplaceholder" width="200" src="" alt="Insert an image here" data-bind="wysiwygSrc: { src: _src.preloaded, placeholder: _placeholdersrc, width: _width, height: _height, method: _method }" />    -->    <span class="fileuploadtext" style="text-align: center; display: -ms-flexbox; display: flex; align-items: center; flex-align: center; justify-content: center; padding: 1em; position: absolute; top: 0; left: 0; right: 0; bottom: 0;"><span class="textMiddle" style=" text-shadow: 1px 1px 0 #FFFFFF, 0 0 10px #FFFFFF; font-weight: bold;" data-bind="text: $root.t(\'Drop an image here\')">Drop an image here</span></span>  <!-- /ko -->  <!-- ko if: _src() != \'\' -->  <!--    <img style="display: block;" width="200" src="" data-bind="preloader: _src, wysiwygSrc: { src: _src.preloaded, placeholder: _placeholdersrc, width: _width, height: _height, method: _method }" />    -->  <!-- /ko -->  <!-- pulsante per la cancellazione -->  <div title="Drop an image here or click the upload button" data-bind="attr: { title: $root.t(\'Drop an image here or click the upload button\') }, tooltips: {}" class="workzone" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; overflow: hidden;">    <!-- ko if: _src.preloaded && _src() != _src.preloaded() -->PRELOADING....<!-- /ko -->    <!-- ko if: _src() != \'\' -->      <input class="fileupload withfile" type="file" name="files[]" data-bind="fileupload: { data: _src, onerror: $root.notifier.error, onfile: $root.galleryRecent.unshift.bind($root.galleryRecent), canvasPreview: true }" style="z-index: -20; position: absolute; top: 0; left: 0; right: 0; bottom: 0; min-width: 100%; min-height: 100%; font-zie: 999px; text-align: right; filter: alpha(opacity=0); opacity: 0; outline: none; cursor: inherit; display: block">    <!-- /ko -->    <div class="progress" style="opacity: .5; width: 80%; margin-left: 10%; position: absolute; bottom: 30%; height: 20px; border: 2px solid black;">      <div class="progress-bar progress-bar-success" style="height: 20px; background-color: black; "></div>    </div>  </div></table>'),templateSystem.addTemplate("main",'<div id="page" style="display: none;" data-bind="visible: true, css: { withToolbox: $root.showToolbox, withPreviewFrame: showPreviewFrame }">  <div id="main-edit-area" data-bind="click: function(obj, evt) { $root.selectBlock(null); return true; }, clickBubble: false">    <!-- ko withProperties: { templateMode: \'wysiwyg\', templateModeFallback: \'show\' } -->    <div id="main-wysiwyg-area" data-bind="wysiwygScrollfix: true, scrollable: true, fudroppable: { active: draggingImage }, css: { isdragging: dragging, isdraggingimg: draggingImage }, block: content"></div>    <!-- /ko -->  </div>  <div id="toolbar" class="mo" data-bind="tooltips: {}">    <!-- ko if: typeof $root.undo != \'undefined\' -->    <span data-bind="buttonset: { }" class="leftButtons">    <a title="Undo last operation" href="#" data-bind="attr: { title: $root.t(\'Undo last operation\') }, click: $root.undo.execute, clickBubble: false, button: { disabled: !$root.undo.enabled(), icons: { primary: \'fa fa-reply\' }, label: $root.undo.name, text: true }">UNDO</a>    <a title="Redo last operation" href="#" data-bind="attr: { title: $root.t(\'Redo last operation\') }, click: $root.redo.execute, clickBubble: false, button: { disabled: !$root.redo.enabled(), icons: { primary: \'fa fa-share\' }, label: $root.redo.name, text: true }">REDO</a>    </span>    <!-- ko if: $root.debug -->    <a href="#" data-bind="click: $root.undoReset, clickBubble: false, button: { disabled: !$root.undo.enabled() && !$root.redo.enabled(), label: \'reset\', text: true }">RESET</a>    <!-- /ko -->    <!-- /ko -->    <span>    <input id="showGallery" type="checkbox" data-bind="checked: $root.showGallery, button: { refreshOn: $root.showGallery,     icons: { primary: \'fa fa-fw fa-picture-o\', secondary: null }, text: true, label: $root.t(\'Gallery\') }"><label title="Show image gallery" for="showGallery" data-bind="attr: { title: $root.t(\'Show image gallery\') }">show gallery</label></input>    </span>    <input id="previewFrameToggle" type="checkbox" data-bind="checked: $root.showPreviewFrame, button: { refreshOn: $root.showPreviewFrame, icons: { primary: \'fa fa-fw fa-tablet\', secondary: null }, text: false, label: $root.t(\'Preview\') }"><label title="Show live preview" for="previewFrameToggle" data-bind="attr: { title: $root.t(\'Show live preview\') }">PREVIEW</label></input>    <!-- ko if: $root.debug -->    <a href="#" data-bind="click: $root.export, clickBubble: false, button: { label: \'export\', text: true }">EXPORT</a>    <input type="checkbox" data-bind="checked: $root.debug" /> debug    <a href="#" data-bind="click: $root.loadDefaultBlocks, clickBubble: false, button: { icons: { primary: \'fa fa-fw fa-upload\' }, label: \'Default\', text: true }">LOAD BLOCKS</a>    [<a id="subscriptionsCount" href="javascript:viewModel.loopSubscriptionsCount()">subs</a>]    <!-- /ko -->    <span data-bind="visible: false">    <input type="checkbox" data-bind="checked: $root.showToolbox" /> toolbox    </span>    <div class="rightButtons">    <label for="templateTitle" style="color:#eee; font-weight:700; margin-right:5px;">TYTUŁ</label>    <input type="text" name="template_title" id="templateTitle" style="margin-right:20px; width:200px; height:26px;" />    <!-- ko if: typeof $root.save !== \'undefined\' -->    <a title="Save template" href="#" data-bind="attr: { title: $root.t(\'Save template\') }, click: $root.save.execute, clickBubble: false, button: { disabled: !$root.save.enabled(), icons: { primary: \'fa fa-fw fa-cloud-upload\' }, label: $root.t($root.save.name), text: true }">ZAPISZ</a>    <!-- /ko -->    <!-- ko if: typeof $root.test !== \'undefined\' -->    <a title="Show preview and send test" href="#" data-bind="attr: { title: $root.t(\'Show preview and send test\') }, click: $root.test.execute, clickBubble: false, button: { disabled: !$root.test.enabled(), icons: { primary: \'fa fa-fw fa-paper-plane\' }, label: $root.t($root.test.name), text: true }">TEST</a>    <!-- /ko -->    <!-- ko if: typeof $root.download !== \'undefined\' -->    <form id="downloadForm" action="#" method="POST">    <input type="hidden" name="action" value="download" />    <input type="hidden" name="filename" value="email.html" />    <input type="hidden" name="html" id="downloadHtmlTextarea" />    <a title="Download template" href="#" data-bind="attr: { title: $root.t(\'Download template\') }, click: $root.download.execute, clickBubble: false, button: { disabled: !$root.download.enabled(), icons: { primary: \'fa fa-fw fa-download\' }, label: $root.t($root.download.name), text: true }">ZAPISZ NA DYSK</a>    </form>    <!-- /ko -->    </div>  </div>  <!-- ko if: $root.showToolbox -->  <div id="main-toolbox" class="mo" data-bind="scrollable: true, withProperties: { templateMode: \'edit\' }">    <div data-bind="template: { name: \'toolbox\' }"></div>  </div>  <!-- /ko -->    <div id="main-preview" class="mo" data-bind="scrollable: true, if: $root.showPreviewFrame">    <div id="preview-toolbar">      <div data-bind="visible: $root.showPreviewFrame, buttonset: { }" style="display: inline-block">        <input id="previewLarge" type="radio" name="previewMode" value="large" data-bind="checked: $root.previewMode, button: { text: false, label: \'large\', icons: { primary: \'fa fa-fw fa-desktop\' } }" />        <label for="previewLarge" title="Large screen" data-bind="attr: { title: $root.t(\'Large screen\') }">Large screen</label>        <input id="previewDesktop" type="radio" name="previewMode" value="desktop" data-bind="checked: $root.previewMode, button: { text: false, label: \'desktop\', icons: { primary: \'fa fa-fw fa-tablet\' } }" />        <label for="previewDesktop" title="Tablet" data-bind="attr: { title: $root.t(\'Tablet\') }">Tablet</label>        <input id="previewMobile" type="radio" name="previewMode" value="mobile" data-bind="checked: $root.previewMode, button: { text: false, label: \'mobile\', icons: { primary: \'fa fa-fw fa-mobile\' } }" />        <label for="previewMobile" title="Smartphone" data-bind="attr: { title: $root.t(\'Smartphone\') }">Smartphone</label>      </div>    </div>    <div id="frame-container" data-bind="css: { desktop: $root.previewMode() == \'desktop\', mobile: $root.previewMode() == \'mobile\', large: $root.previewMode() == \'large\' }">      <iframe data-bind="bindIframe: $data"></iframe>    </div>  </div>  <div class="mo" id="mo-body"></div>  <!-- TODO REMOVE ME  <div id="incompatible-browser" title="Unsupported browser" style="display: none" data-bind="attr: { title: $root.t(\'Usupported browser\') }, html: \'<p>Your browser is not supported.</p><p>Use a different browser or try updaring your browser.</p><p>Supported browsers: <ul><li>Internet Explorer &gt;= 10</li><li>Google Chrome &gt;= 30</li><li>Apple Safari &gt;= 5</li><li>Mozilla Firefix &gt;= 20</li></ul></p>\'">    Unsupported browser  </div>  -->  <div id="incompatible-template" title="Saved model is obsolete" style="display: none" data-bind="attr: { title: $root.t(\'Saved model is obsolete\') }, html: $root.t(\'<p>The saved model has been created with a previous, non completely compatible version, of the template</p><p>Some content or style in the model <b>COULD BE LOST</b> if you will <b>save</b></p><p>Contact us for more informations!</p>\')">    Incompatible template  </div>  <div id="fake-image-editor" title="Fake image editor" style="display: none" data-bind="attr: { title: $root.t(\'Fake image editor\') }, html: $root.t(\'<p>Fake image editor</p>\')">    <p>Fake image editor</p>  </div></div><!-- ko if: $root.logoPath --><div id="loading" class="loading" style="display: block; width: 300px; text-align: center; height: 32px; position: absolute; top:0; bottom: 0; left: 0; right: 0;  margin: auto;" data-bind="attr: { style: \'position: absolute; top: 5px; left: 6px; z-index: 150;\'}, css: { loading: false }">  <a href="/" data-bind="attr: { href: $root.logoUrl, alt: $root.logoAlt }"><img data-bind="attr: { src: $root.logoPath }" width="32" height="32" alt="mosaico" border="0" /></a>  <div style="opacity: 0" data-bind="visible: false">Oppps... !!</div></div><!-- /ko -->'),templateSystem.addTemplate("toolbox",'<div id="tooltabs" class="tabs_horizontal button_color" data-bind="tabs: { active: $root.selectedTool }">  <ul>    <li data-bind="tooltips: {}"><a title="Blocks ready to be added to the template" data-local="true" href="#toolblocks" data-bind="attr: { title: $root.t(\'Blocks ready to be added to the template\') }"><i class="fa fa-fw fa-cubes"></i> <span data-bind="html: $root.t(\'Blocks\')">Blocks</span></a></li>    <li data-bind="tooltips: {}"><a title="Edit content options" href="#toolcontents" data-local="true" data-bind="attr: { title: $root.t(\'Edit content options\') }"><i class="fa fa-fw fa-pencil"></i> <span data-bind="html: $root.t(\'Content\')">Content</span></a></li>    <li data-bind="tooltips: {}"><a title="Edit style options" href="#toolstyles" data-local="true" data-bind="attr: { title: $root.t(\'Edit style options\') }"><i class="fa fa-fw fa-paint-brush"></i> <span data-bind="html: $root.t(\'Style\')">Style</span></a></li>  </ul>  <div id="toolblocks" data-bind="scrollable: true">    <div class="block-list" data-bind="foreach: blockDefs" style="text-align: center">      <div class="draggable-item" data-bind="withProperties: { templateMode: \'show\' }">        <div class="block" data-bind="extdraggable: { connectClass: \'sortable-blocks-edit\', data: $data, dropContainer: \'#main-wysiwyg-area\', dragging: $root.dragging, \'options\': { handle: \'.handle\', distance: 10, \'appendTo\': \'#page\' } }, click: $root.addBlock" style="position: relative;">          <div title="Click or drag to add this block to the template" class="handle" data-bind="attr: { title: $root.t(\'Click or drag to add this block to the template\') }, tooltips: {}"></div>          <img data-bind="attr: { alt: $root.t(\'Block __name__\', { name: ko.utils.unwrapObservable(type) }), src: $root.templatePath(\'edres/\'+ko.utils.unwrapObservable(type)+\'.png\') }" alt="Block __name__" />        </div>        <a href="#" class="addblockbutton" data-bind="click: $root.addBlock, button: { label: $root.t(\'Add\') }">Add</a>      </div>    </div>  </div>  <div id="toolcontents" data-bind="scrollable: true">    <!-- ko if: $root.selectedBlock() !== null -->    <div data-bind="block: $root.selectedBlock"></div>    <!-- /ko -->    <!-- ko if: $root.selectedBlock() == null -->    <div class="noSelectedBlock" data-bind="text: $root.t(\'By clicking on message parts you will select a block and content options, if any, will show here\')">By clicking on message parts you will select a block and content options, if any, will show here</div>    <!-- /ko -->    <!-- ko block: content --><!-- /ko -->  </div>    <div id="toolstyles" data-bind="scrollable: true, withProperties: { templateMode: \'styler\' }">    <!-- ko if: typeof $root.content().theme === \'undefined\' || typeof $root.content().theme().scheme === \'undefined\' || $root.content().theme().scheme() === \'custom\' -->      <!-- ko if: $root.selectedBlock() !== null -->      <div data-bind="block: $root.selectedBlock, css: { workLocal: $root.selectedBlock().customStyle, workGlobal: typeof $root.selectedBlock().customStyle === \'undefined\' || !$root.selectedBlock().customStyle() }"></div>      <!-- /ko -->      <!-- ko if: $root.selectedBlock() == null -->      <div class="noSelectedBlock" data-bind="text: $root.t(\'By clicking on message parts you will select a block and style options, if available, will show here\')">By clicking on message parts you will select a block and style options, if available, will show here</div>      <!-- /ko -->      <div class="workGlobalContent">      <!-- ko block: content --><!-- /ko -->      </div>    <!-- /ko -->  </div></div>        <div id="toolimages" class="slidebar" data-bind="scrollable: true, css: { hidden: $root.showGallery() === false }">  <div class="close" data-bind="click: $root.showGallery.bind($element, false);">X</div>  <span class="pane-title" data-bind="text: $root.t(\'Gallery:\')">Gallery:</span>  <div data-drop-content="Drop here" class="img-dropzone pane uploadzone" data-bind="attr: { \'data-drop-content\': $root.t(\'Drop here\') }, fudroppable: { activeClass: \'ui-state-highlight\', hoverClass: \'ui-state-draghover\' }">  <div class="mo-uploadzone" style="position: relative; padding: 2em; border: 2px dotted #808080">     <input class="fileupload" type="file" multiple name="files[]" data-bind="fileupload: { onerror: $root.notifier.error, onfile: $root.loadImage }" style="z-index: 10; position: absolute; top: 0; left: 0; right: 0; bottom: 0; min-width: 100%; min-height: 100%; font-zie: 999px; text-align: right; filter: alpha(opacity=0); opacity: 0; outline: none; cursor: inherit; display: block">     <span data-bind="text: $root.t(\'Click or drag files here\')">Click or drag files here</span>     <div class="workzone" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; overflow: hidden;">       <div class="progress" style="opacity: .5; width: 80%; margin-left: 10%; position: absolute; bottom: 30%; height: 20px; border: 2px solid black;">         <div class="progress-bar progress-bar-success" style="height: 20px; background-color: black; "></div>       </div>     </div>  </div>  </div>  <!-- ko if: $root.showGallery() -->  <div id="toolimagestab" class="tabs_horizontal" data-bind="tabs: { active: $root.selectedImageTab }">    <ul>      <li data-bind="tooltips: {}"><a title="Session images" data-local="true" href="#toolimagesrecent" data-bind="attr: { title: $root.t(\'Session images\') }, text: $root.t(\'Recents\')">Recents</a></li>      <li data-bind="tooltips: {}"><a title="Remote gallery" data-local="true" href="#toolimagesgallery" data-bind="attr: { title: $root.t(\'Remote gallery\') }, text: $root.t(\'Gallery\')">Gallery</a></li>    </ul>    <div id="toolimagesrecent">      <!-- ko if: galleryRecent().length == 0 --><div class="galleryEmpty" data-bind="text: $root.t(\'No images uploaded, yet\')">No images uploaded, yet</div><!-- /ko -->      <!-- ko template: {name: \'gallery-images\', data: { items: galleryRecent } } --># recent gallery #<!-- /ko -->    </div>    <div id="toolimagesgallery" style="text-align: center">    <!-- ko if: $root.galleryLoaded() === false --><a class="loadbutton" title="Show images from the gallery" href="#" data-bind="attr: { title: $root.t(\'Show images from the gallery\') }, click: $root.loadGallery, button: { disabled: $root.galleryLoaded, icons: { primary: \'fa fa-fw fa-picture-o\' }, label: $root.galleryLoaded() == \'loading\' ? $root.t(\'Loading...\') : $root.t(\'Load gallery\'), text: true }"># load gally #</a><!-- /ko -->    <!-- ko if: $root.galleryLoaded() === \'loading\' --><div class="galleryEmpty" data-bind="text: $root.t(\'Loading gallery...\')">Loading gallery...</div><!-- /ko -->    <!-- ko if: $root.galleryLoaded() === 0 --><div class="galleryEmpty" data-bind="text: $root.t(\'The gallery is empty\')">The gallery is empty</div><!-- /ko -->    <!-- ko template: {name: \'gallery-images\', data: { items: galleryRemote } } --># remote gallery #<!-- /ko -->    </div>  </div>  <!-- /ko --></div><div id="tooldebug" class="slidebar" data-bind="css: { hidden: $root.debug() === false }">  <div class="close" data-bind="click: $root.debug.bind($element, false);">X</div>    <!-- ko if: $root.debug -->  Content:  <pre data-bind=\'text: ko.toJSON(content, null, 2)\' style="overflow: auto; height: 20%"></pre>  BlockDefs:  <pre data-bind=\'text: ko.toJSON(blockDefs, null, 2)\' style="overflow: auto; height: 20%"></pre>  <!-- /ko -->  <a href="#" data-bind="click: $root.exportHTMLtoTextarea.bind($element, \'#outputhtml\'); clickBubble: false, button: { text: true, label:\'Generate\' }">Output</a>  <a href="#" data-bind="click: $root.exportJSONtoTextarea.bind($element, \'#outputhtml\'); clickBubble: false, button: { text: true, label:\'Export\' }">Export</a>  <a href="#" data-bind="click: $root.importJSONfromTextarea.bind($element, \'#outputhtml\'); clickBubble: false, button: { text: true, label:\'Import\' }">Import</a>  <textarea id="outputhtml" rows="10" style="width: 100%;"></textarea></div><div id="tooltheme" class="ui-widget slidebar" data-bind="css: { hidden: $root.showTheme() === false }">  <div class="close" data-bind="click: $root.showTheme.bind($element, false);">X</div>    <!-- ko withProperties: { templateMode: \'styler\' } -->    <!-- ko if: $root.showTheme -->      <!-- ko block: $root.content().theme --><!-- /ko -->    <!-- /ko -->  <!-- /ko --></div>')});

},{"../src/js/bindings/choose-template.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/choose-template.js"}],"/var/www/s/app/webroot/js/lib/mosaico/node_modules/browserify/node_modules/assert/assert.js":[function(require,module,exports){
// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// when used in node, this will actually load the util module we depend on
// versus loading the builtin util module as happens otherwise
// this is a bug in node module loading as far as I am concerned
var util = require('util/');

var pSlice = Array.prototype.slice;
var hasOwn = Object.prototype.hasOwnProperty;

// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  }
  else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = stackStartFunction.name;
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function replacer(key, value) {
  if (util.isUndefined(value)) {
    return '' + value;
  }
  if (util.isNumber(value) && !isFinite(value)) {
    return value.toString();
  }
  if (util.isFunction(value) || util.isRegExp(value)) {
    return value.toString();
  }
  return value;
}

function truncate(s, n) {
  if (util.isString(s)) {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}

function getMessage(self) {
  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
         self.operator + ' ' +
         truncate(JSON.stringify(self.expected, replacer), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

function _deepEqual(actual, expected) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
    if (actual.length != expected.length) return false;

    for (var i = 0; i < actual.length; i++) {
      if (actual[i] !== expected[i]) return false;
    }

    return true;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!util.isObject(actual) && !util.isObject(expected)) {
    return actual == expected;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b) {
  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b)) {
    return a === b;
  }
  var aIsArgs = isArguments(a),
      bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b);
  }
  var ka = objectKeys(a),
      kb = objectKeys(b),
      key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key])) return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  } else if (actual instanceof expected) {
    return true;
  } else if (expected.call({}, actual) === true) {
    return true;
  }

  return false;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (util.isString(expected)) {
    message = expected;
    expected = null;
  }

  try {
    block();
  } catch (e) {
    actual = e;
  }

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  if (!shouldThrow && expectedException(actual, expected)) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws.apply(this, [true].concat(pSlice.call(arguments)));
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/message) {
  _throws.apply(this, [false].concat(pSlice.call(arguments)));
};

assert.ifError = function(err) { if (err) {throw err;}};

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

},{"util/":"/var/www/s/app/webroot/js/lib/mosaico/node_modules/browserify/node_modules/util/util.js"}],"/var/www/s/app/webroot/js/lib/mosaico/node_modules/browserify/node_modules/inherits/inherits_browser.js":[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],"/var/www/s/app/webroot/js/lib/mosaico/node_modules/browserify/node_modules/process/browser.js":[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],"/var/www/s/app/webroot/js/lib/mosaico/node_modules/browserify/node_modules/util/support/isBufferBrowser.js":[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],"/var/www/s/app/webroot/js/lib/mosaico/node_modules/browserify/node_modules/util/util.js":[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./support/isBuffer":"/var/www/s/app/webroot/js/lib/mosaico/node_modules/browserify/node_modules/util/support/isBufferBrowser.js","_process":"/var/www/s/app/webroot/js/lib/mosaico/node_modules/browserify/node_modules/process/browser.js","inherits":"/var/www/s/app/webroot/js/lib/mosaico/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/app.js":[function(require,module,exports){
(function (global){
"use strict";function _canonicalize(e){var i=global.document.createElement("div");return i.innerHTML="<a></a>",i.firstChild.href=e,i.innerHTML=i.innerHTML,i.firstChild.href}var templateLoader=require("./template-loader.js"),console=require("./../../bower_components/console-browserify/index.js"),ko=(typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null),$=(typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);require("./ko-bindings.js");var performanceAwareCaller=require("./timed-call.js").timedCall,addUndoStackExtensionMaker=require("./undomanager/undomain.js"),colorPlugin=require("./ext/color.js"),localStorageLoader=require("./ext/localstorage.js"),applyBindingOptions=function(e,i){i.bindingHandlers.wysiwygSrc.convertedUrl=function(i,t,n,o){var a=e.imgProcessorBackend?e.imgProcessorBackend:"./upload",r=a.match(/^(https?:\/\/[^\/]*\/).*$/),l=i.match(/^(https?:\/\/[^\/]*\/).*$/);return null===r||null!==l&&r[1]==l[1]?a+"?src="+encodeURIComponent(i)+"&method="+encodeURIComponent(t)+"&params="+encodeURIComponent(n+","+o):(console.log("Cannot apply backend image resizing to non-local resources ",i,t,n,o,r,l),i+"?method="+t+"&width="+n+(null!==o?"&height="+o:""))},i.bindingHandlers.wysiwygSrc.placeholderUrl=function(i,t,n){return e.imgProcessorBackend+"?method=placeholder&params="+i+encodeURIComponent(",")+t},e&&e.tinymceConfig&&(i.bindingHandlers.wysiwyg.standardOptions=e.tinymceConfig),e&&e.tinymceConfigFull&&(i.bindingHandlers.wysiwyg.fullOptions=e.tinymceConfigFull)},start=function(e,i,t,n,o){templateLoader.fixPageEvents();var a=function(i){var t={messages:{unknownError:i.t("Unknown error"),uploadedBytes:i.t("Uploaded bytes exceed file size"),maxNumberOfFiles:i.t("Maximum number of files exceeded"),acceptFileTypes:i.t("File type not allowed"),maxFileSize:i.t("File is too large"),minFileSize:i.t("File is too small"),post_max_size:i.t("The uploaded file exceeds the post_max_size directive in php.ini"),max_file_size:i.t("File is too big"),min_file_size:i.t("File is too small"),accept_file_types:i.t("Filetype not allowed"),max_number_of_files:i.t("Maximum number of files exceeded"),max_width:i.t("Image exceeds maximum width"),min_width:i.t("Image requires a minimum width"),max_height:i.t("Image exceeds maximum height"),min_height:i.t("Image requires a minimum height"),abort:i.t("File upload aborted"),image_resize:i.t("Failed to resize image"),generic:i.t("Unexpected upload error")}};e&&e.fileuploadConfig&&(t=$.extend(!0,t,e.fileuploadConfig)),ko.bindingHandlers.fileupload.extendOptions=t},r=function(i){e&&e.strings&&(i.t=function(t,n){var o=e.strings[t];return"undefined"==typeof o&&(console.warn("Missing translation string for",t,": using default string"),o=t),i.tt(o,n)})},l=[addUndoStackExtensionMaker(performanceAwareCaller),colorPlugin,r];if("undefined"!=typeof o)for(var d=0;d<o.length;d++)l.push(o[d]);l.push(a);var s=e.fileuploadConfig?e.fileuploadConfig.url:"/upload/";applyBindingOptions(e,ko),$("<!-- ko template: 'main' --><!-- /ko -->").appendTo(global.document.body),"undefined"==typeof i&&"undefined"!=typeof t&&(i=t.template),templateLoader.load(performanceAwareCaller,i,t,n,l,s)},initFromLocalStorage=function(e,i,t){try{var n=localStorageLoader(i,e.emailProcessorBackend),o="undefined"!=typeof t?t:[];o.push(n.extension);var a=_canonicalize(n.metadata.template);start(e,a,n.metadata,n.model,o)}catch(r){console.error("TODO not found ",i,r)}},init=function(e,i){var t=global.location.hash?global.location.href.split("#")[1]:void 0;if(e&&(e.template||e.data))if(e.data){var n=JSON.parse(e.data);start(e,void 0,n.metadata,n.content,i)}else start(e,e.template,void 0,void 0,i);else if(t&&7==t.length)initFromLocalStorage(e,t,i);else{if(!t)return!1;start(e,_canonicalize(t),void 0,void 0,i)}return!0};module.exports={isCompatible:templateLoader.isCompatible,init:init,start:start};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./../../bower_components/console-browserify/index.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/console-browserify/index.js","./ext/color.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/ext/color.js","./ext/localstorage.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/ext/localstorage.js","./ko-bindings.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/ko-bindings.js","./template-loader.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/template-loader.js","./timed-call.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/timed-call.js","./undomanager/undomain.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/undomanager/undomain.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/bind-iframe.js":[function(require,module,exports){
(function (global){
"use strict";var ko=(typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null),console=require("./../../../bower_components/console-browserify/index.js"),addScriptTemplate=function(t,e,n){var o=t.createElement("script");return o.setAttribute("type","text/html"),o.setAttribute("id",e),o.text=n,t.body.appendChild(o),o};ko.bindingHandlers.bindIframe={tpl:'<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body><div data-bind="block: content"></div></body>\r\n</html>\r\n',init:function(t,e){function n(n){try{var o=t.contentDocument;o.open(),o.write(ko.bindingHandlers.bindIframe.tpl),o.close();try{var r=o.body;if(r){for(var i=t.contentWindow.parent.document.getElementsByTagName("script"),a=0;a<i.length;a++)"text/html"==i[a].getAttribute("type")&&i[a].getAttribute("id")&&addScriptTemplate(o,i[a].getAttribute("id"),i[a].innerHTML);var d=o.getElementsByTagName("HTML");ko.utils.domNodeDisposal.addDisposeCallback(t,function(){ko.cleanNode(d[0]||r)}),ko.applyBindings(e(),d[0]||r)}else console.log("no iframedoc",n)}catch(l){throw console.log("error reading iframe.body",l,n),l}}catch(l){throw console.log("error reading iframe contentDocument",l,n),l}}n("first call")}};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./../../../bower_components/console-browserify/index.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/console-browserify/index.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/blocks.js":[function(require,module,exports){
(function (global){
"use strict";var ko=(typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null),console=require("./../../../bower_components/console-browserify/index.js");ko.bindingHandlers.withProperties={init:function(e,n,t,o,a){var l=a.createChildContext(a.$rawData,null,function(e){ko.utils.extend(e,n())});return ko.applyBindingsToDescendants(l,e),{controlsDescendantBindings:!0}}},ko.virtualElements.allowedBindings.withProperties=!0,ko.bindingHandlers.log={init:function(e,n,t,o,a){console.log("log",n())}},ko.bindingHandlers.block={templateExists:function(e){var n=global.document.getElementById(e);return!!n},_chooseTemplate:function(e,n,t,o){var a=n+"-"+t;if(ko.bindingHandlers.block.templateExists(a))return a;if("undefined"!=typeof o&&null!==o)return ko.bindingHandlers.block._chooseTemplate(e,n,o);var l=e?"array":"object-"+t;if(ko.bindingHandlers.block.templateExists(l))return l;throw"cannot find template for "+a+"/"+l},_displayMode:function(e,n){var t="undefined"!=typeof e.type?ko.utils.unwrapObservable(e.type):"notablock-"+typeof e,o="undefined"!=typeof e.splice,a=n.templateMode?n.templateMode:"show";return ko.bindingHandlers.block._chooseTemplate(o,t,a,n.templateModeFallback)},_makeTemplateValueAccessor:function(e,n){return function(){var t,o,a=e(),l=ko.utils.peekObservable(a);if(!l||"object"!=typeof l.data&&"function"!=typeof l.data)t=a;else if(t=l.data,"undefined"!=typeof l.template){var i=ko.utils.unwrapObservable(l.template),r=n.templateMode?n.templateMode:"show";o=ko.bindingHandlers.block._chooseTemplate(!1,i,r,n.templateModeFallback)}var d=ko.utils.unwrapObservable(t);if(ko.isObservable(d)&&console.log("doubleObservable",d),"undefined"==typeof o)if(void 0===t)o="empty";else try{o=ko.bindingHandlers.block._displayMode(d,n)}catch(s){throw console.log(s,d,n.$data,n.templateMode),s}return{name:o,data:t,templateEngine:ko.nativeTemplateEngine.instance}}},init:function(e,n,t,o,a){"undefined"==typeof n()&&console.log("found a null block: check ending commas in arrays defs in IE");var l=ko.bindingHandlers.block._makeTemplateValueAccessor(n,a);return ko.bindingHandlers.template.init(e,l)},update:function(e,n,t,o,a){var l=ko.bindingHandlers.block._makeTemplateValueAccessor(n,a);return ko.bindingHandlers.template.update(e,l,t,o,a)}},ko.expressionRewriting.bindingRewriteValidators.block=!1,ko.virtualElements.allowedBindings.block=!0;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./../../../bower_components/console-browserify/index.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/console-browserify/index.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/choose-template.js":[function(require,module,exports){
"use strict";module.exports=require("./string-template.js");

},{"./string-template.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/string-template.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/colorpicker.js":[function(require,module,exports){
(function (global){
"use strict";require("./../../../bower_components/evol-colorpicker/js/evol.colorpicker.min.js");var $=(typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null),ko=(typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null),kojqui=(typeof window !== "undefined" ? window['kojqui'] : typeof global !== "undefined" ? global['kojqui'] : null),ColorPicker=function(){kojqui.BindingHandler.call(this,"colorpicker")};ColorPicker.prototype=kojqui.utils.createObject(kojqui.BindingHandler.prototype),ColorPicker.prototype.constructor=ColorPicker,ColorPicker.prototype.init=function(o,r,e){var i=r(),n=i.color,t=ko.computed({read:n,write:n,disposeWhenNodeIsRemoved:o}),c=function(){return t};ko.bindingHandlers.value.init(o,c,e);var u=function(o,r){"undefined"!=typeof r&&t(r)};$(o).on("change.color",u),ko.computed({read:function(){var r={color:ko.utils.unwrapObservable(t),showOn:"button"};for(var e in i)"color"!==e&&i.hasOwnProperty(e)&&(r[e]=ko.utils.unwrapObservable(i[e]));$(o).colorpicker(r)},disposeWhenNodeIsRemoved:o}),ko.utils.domNodeDisposal.addDisposeCallback(o,function(){$(o).off("change.color",u),$(o).colorpicker("destroy")})},kojqui.utils.register(ColorPicker);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./../../../bower_components/evol-colorpicker/js/evol.colorpicker.min.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/evol-colorpicker/js/evol.colorpicker.min.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/csstext.js":[function(require,module,exports){
(function (global){
"use strict";var ko=(typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null);ko.bindingHandlers.cssText={update:function(e,t,n){var r=ko.utils.unwrapObservable(t());try{e.innerText=r}catch(s){e.styleSheet||(e.innerHTML="a{}"),e.styleSheet.cssText=r}}};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/droppable.js":[function(require,module,exports){
(function (global){
"use strict";var $=(typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null),ko=(typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null);!function(e){e(ko,$)}(function(e,t){var o="ko_sortItem",n="ko_dragItem",a=(e.utils.unwrapObservable,e.utils.domData.get);e.utils.domData.set;e.bindingHandlers.droppable={init:function(d,i,l,r,s){var u,p=t(d),b=e.utils.unwrapObservable(i())||{},c={};t.extend(!0,c,e.bindingHandlers.droppable),b.data?(b.options&&c.options&&(e.utils.extend(c.options,b.options),delete b.options),e.utils.extend(c,b)):c.data=b,u=c.options.drop,p.droppable(e.utils.extend(c.options,{drop:function(e,t){var d=t.draggable[0],i=a(d,o)||a(d,n);i&&(i.clone&&(i=i.clone()),c.dragged&&(i=c.dragged.call(this,i,e,t)||i),c.data&&c.data(i)),u&&u.apply(this,arguments)}})),void 0!==c.isEnabled&&e.computed({read:function(){p.droppable(e.utils.unwrapObservable(c.isEnabled)?"enable":"disable")},disposeWhenNodeIsRemoved:d})},update:function(e,t,o,n,a){},targetIndex:null,afterMove:null,beforeMove:null,options:{}}});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/eventable.js":[function(require,module,exports){
(function (global){
"use strict";var ko=(typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null),$=(typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null),console=require("./../../../bower_components/console-browserify/index.js");ko.bindingHandlers.focusable={focus:function(){},blur:function(){},init:function(o){ko.utils.domNodeDisposal.addDisposeCallback(o,function(){$(o).off("focusin",ko.bindingHandlers.focusable.focus),$(o).off("focusout",ko.bindingHandlers.focusable.blur)}),$(o).on("focusin",ko.bindingHandlers.focusable.focus),$(o).on("focusout",ko.bindingHandlers.focusable.blur)}},ko.bindingHandlers.scrollable={scroll:function(){},init:function(o){ko.utils.domNodeDisposal.addDisposeCallback(o,function(){$(o).off("scroll",ko.bindingHandlers.scrollable.scroll)}),$(o).on("scroll",ko.bindingHandlers.scrollable.scroll)}};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./../../../bower_components/console-browserify/index.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/console-browserify/index.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/extender-pagination.js":[function(require,module,exports){
(function (global){
"use strict";var ko=(typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null);ko.extenders.paging=function(e,t){var n=ko.observable(t||10),r=ko.observable(1);return e.pageSize=ko.computed({read:n,write:function(e){n(e>0?e:10)}}),e.currentPage=ko.computed({read:r,write:function(t){r(t>e.pageCount()?e.pageCount():0>=t?1:t)}}),e.pageCount=ko.computed(function(){return Math.ceil(e().length/e.pageSize())||1}),e.currentPageData=ko.computed(function(){var t=n(),o=r(),u=t*(o-1),a=t*o;return e().slice(u,a)}),e.moveFirst=function(){e.currentPage(1)},e.movePrevious=function(){e.currentPage(e.currentPage()-1)},e.moveNext=function(){e.currentPage(e.currentPage()+1)},e.moveLast=function(){e.currentPage(e.pageCount())},e};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/extsortables.js":[function(require,module,exports){
(function (global){
"use strict";var $=(typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null),ko=(typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null),console=require("./../../../bower_components/console-browserify/index.js");require("./../../../bower_components/knockout-sortable/build/knockout-sortable.min.js");var isDraggingHelper=function(e,n){e()?n.type==e()+"stop"&&e(!1):"dragstart"!=n.type&&"sortstart"!=n.type||e(n.type.substring(0,4))},makeExtendedValueAccessor=function(e){return function(){var n=e();ko.utils.peekObservable(n);ko.utils.unwrapObservable(n),"undefined"==n.options&&(n.options={});var r=n.options.start;n.options.start=function(e,t){return"undefined"!=typeof n.dragging&&ko.isWritableObservable(n.dragging)&&isDraggingHelper(n.dragging,e),"undefined"!=typeof n.dropContainer&&(n.scrollInterval=global.setInterval(function(){var e=$(n.dropContainer).scrollTop();$(n.dropContainer).scrollTop(e+n.adding)},20)),"undefined"!=typeof r?r(e,t):void 0};var t=n.options.stop;n.options.stop=function(e,r){return"undefined"!=typeof n.dragging&&ko.isWritableObservable(n.dragging)&&isDraggingHelper(n.dragging,e),"undefined"!=typeof n.dropContainer&&global.clearInterval(n.scrollInterval),"undefined"!=typeof t?t(e,r):void 0};var o=n.options.drag;return n.options.drag=function(e,r){if("undefined"!=typeof n.dropContainer){var t=e.pageY-$(n.dropContainer).offset().top,i=t-$(n.dropContainer).height();-20>t?n.adding=-20:0>t?n.adding=-10:10>t?n.adding=-5:i>20?n.adding=20:i>0?n.adding=10:i>-10?n.adding=5:n.adding=0}return"undefined"!=typeof o?o(e,r):void 0},n}};ko.bindingHandlers.extsortable={init:function(e,n,r,t,o){return ko.bindingHandlers.sortable.init(e,makeExtendedValueAccessor(n),r,t,o)},update:function(e,n,r,t,o){return ko.bindingHandlers.sortable.update(e,makeExtendedValueAccessor(n),r,t,o)}},ko.bindingHandlers.extdraggable={init:function(e,n,r,t,o){return ko.bindingHandlers.draggable.init(e,makeExtendedValueAccessor(n),r,t,o)},update:function(e,n,r,t,o){return ko.bindingHandlers.draggable.update(e,makeExtendedValueAccessor(n),r,t,o)}};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./../../../bower_components/console-browserify/index.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/console-browserify/index.js","./../../../bower_components/knockout-sortable/build/knockout-sortable.min.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/knockout-sortable/build/knockout-sortable.min.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/fileupload.js":[function(require,module,exports){
(function (global){
"use strict";var $=(typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null),ko=(typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null),console=require("./../../../bower_components/console-browserify/index.js");ko.bindingHandlers.preloader={init:function(e,i){var o=i();if("undefined"==typeof o.preloaded){o.preloaded=ko.observable("");var r=function(e){if(e!=o.preloaded())if(""!==e){var i=new Image;i.onload=function(){o.preloaded(e)},i.onerror=function(){o.preloaded(e)},i.src=e}else o.preloaded(e)};o.subscribe(r),r(o())}}},ko.bindingHandlers.advattr={init:function(e,i,o,r,l){var a=ko.utils.unwrapObservable(i()||{});ko.utils.objectForEach(a,function(i,o){var r=e.getAttribute(i);if(ko.isWriteableObservable(o)){var l=o();l!=r&&(o(r),null!==l&&console.log("AdvAttr found a value different from the default",i,l,r))}})},update:function(e,i,o){var r=ko.utils.unwrapObservable(i())||{};ko.utils.objectForEach(r,function(i,o){o=ko.utils.unwrapObservable(o);var r=o===!1||null===o||void 0===o;r?e.removeAttribute(i):e.setAttribute(i,o.toString())})}},ko.bindingHandlers.advstyle={init:function(e,i,o,r,l){var a=ko.utils.unwrapObservable(i()||{});ko.utils.objectForEach(a,function(i,o){var r;if(i.match(/Px$/)?(i=i.substr(0,i.length-2),r=e.style[i],r.match(/px$/)?r=r.replace(/px$/,""):console.log("AdvStyle binding found an unexpected default value",i,r,e)):r=e.style[i],ko.isWriteableObservable(o)){var l=o();l!=r&&(o(r),null!==l&&console.log("AdvStyle found a value different from the default",i,l,r))}})},update:function(e,i){var o=ko.utils.unwrapObservable(i()||{});ko.utils.objectForEach(o,function(i,o){o=ko.utils.unwrapObservable(o),null!==o&&"undefined"!=typeof o&&o!==!1||(o=""),i.match(/Px$/)&&(i=i.substr(0,i.length-2),o+="px"),e.style[i]=o})}},ko.bindingHandlers.domlog={init:function(e,i){console.log("initialized",e),ko.utils.domNodeDisposal.addDisposeCallback(e,function(){console.log("disposed",e)})}},ko.bindingHandlers.fudroppable={init:function(e,i){var o=i()||{},r={},l=function(e,i,o,r,l,a){e[i]?global.clearTimeout(e[i]):("undefined"!=typeof r&&o.classList.add(r),ko.isWriteableObservable(l)&&!l()&&l(!0));var t=function(){e[i]=null,"undefined"!=typeof r&&o.classList.remove(r),ko.isWriteableObservable(l)&&l()&&l(!1)};"dragleave"==a.type?t():e[i]=global.setTimeout(t,500)};(o.active||o.activeClass)&&ko.utils.registerEventHandler(global,"dragover",l.bind(void 0,r,"activeTimeout",e,o.activeClass,o.active)),o.hoverClass&&ko.utils.registerEventHandler(e,"dragover dragenter dragleave",l.bind(void 0,r,"hoverTimeout",e,o.hoverClass,void 0))}},ko.bindingHandlers.fileupload={extendOptions:{},remoteFilePreprocessor:function(e){return e},init:function(e,i){ko.utils.domNodeDisposal.addDisposeCallback(e,function(){$(e).fileupload("destroy")}),global.webkitURL?$(e).attr("title"," "):$(e).attr("title","")},update:function(e,i){var o=i()||{},r=$(e),l=r.parents(".uploadzone"),a=o.data;o.data=void 0;var t=o.canvasPreview;ko.utils.extend(o,{url:"/upload/",dataType:"json",dropZone:l.find(".mo-uploadzone")[0],autoUpload:!0,acceptFileTypes:/(\.|\/)(gif|jpe?g|png)$/i,maxFileSize:1048576,disableImageResize:/Android(?!.*Chrome)|Opera/.test(global.navigator.userAgent),previewMaxWidth:200,previewMaxHeight:200,previewCrop:!1,replaceFileInput:!1,messages:{unknownError:"Unknown error",uploadedBytes:"Uploaded bytes exceed file size",maxNumberOfFiles:"Maximum number of files exceeded",acceptFileTypes:"File type not allowed",maxFileSize:"File is too large",minFileSize:"File is too small",post_max_size:"The uploaded file exceeds the post_max_size directive in php.ini",max_file_size:"File is too big",min_file_size:"File is too small",accept_file_types:"Filetype not allowed",max_number_of_files:"Maximum number of files exceeded",max_width:"Image exceeds maximum width",min_width:"Image requires a minimum width",max_height:"Image exceeds maximum height",min_height:"Image requires a minimum height",abort:"File upload aborted",image_resize:"Failed to resize image",generic:"Unexpected upload error"}}),ko.utils.extend(o,ko.bindingHandlers.fileupload.extendOptions);var n=0,s="",d=function(){0===--n&&(a&&a(s),s="",t&&(l.find("img").show(),l.find("canvas").remove()),l.removeClass("uploading"),l.find(".progress-bar").css("width",0))},u=function(e){if("object"==typeof o.messages&&null!==o.messages){var i=e.match(/^([^ ]+)(.*)$/);if(i&&"undefined"!=typeof o.messages[i[1]])return o.messages[i[1]]+i[2]}return e};r.fileupload(o);for(var f=["fileuploadadd","fileuploadprocessalways","fileuploadprogressall","fileuploaddone","fileuploadfail"],p=function(e,i){if("fileuploadadd"==e.type&&n++,"fileuploadfail"==e.type&&(console.log("fileuploadfail",e,i),o.onerror&&(""===i.errorThrown&&"error"==i.textStatus?o.onerror(u("generic")):o.onerror(u("generic ("+i.errorThrown+")"))),d()),"fileuploaddone"==e.type)if("undefined"!=typeof i.result.files[0].url){if(o.onfile)for(var r=0;r<i.result.files.length;r++)i.result.files[r]=ko.bindingHandlers.fileupload.remoteFilePreprocessor(i.result.files[r]),o.onfile(i.result.files[r]);if(""===s&&(s=i.result.files[0].url),t){var a=new Image;a.onload=d,a.onerror=d,a.src=i.result.files[0].url}else d()}else"undefined"!=typeof i.result.files[0].error?(console.log("remote error",e,i),o.onerror&&o.onerror(u(i.result.files[0].error)),d()):(console.log("unexpected error",e,i),o.onerror&&o.onerror(u("generic (Unexpected Error retrieving uploaded file)")),d());if("fileuploadprocessalways"==e.type){var f=i.index,p=i.files[f];if(p.preview&&0===f&&0===l.find("canvas").length){if(t){var c=$(p.preview).css("width","100%");l.find("img").hide(),l.prepend(c)}l.addClass("uploading"),l.find(".progress-bar").css("width",0)}p.error&&(o.onerror&&o.onerror(u(p.error)),d())}if("fileuploadprogressall"==e.type){var v=parseInt(i.loaded/i.total*100,10);l.find(".progress-bar").css("width",v+"%")}},c=f.length-1;c>=0;c--){var v=f[c];r.on(v,p)}$.support.fileInput||r.prop("disabled",!0).parent().addClass("disabled")}};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./../../../bower_components/console-browserify/index.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/console-browserify/index.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/if-subs.js":[function(require,module,exports){
(function (global){
"use strict";var ko=(typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null),console=require("./../../../bower_components/console-browserify/index.js");ko.bindingHandlers.ifSubs={cloneNodes:function(e,o){for(var n=0,i=e.length,t=[];i>n;n++){var r=e[n].cloneNode(!0);t.push(o?ko.cleanNode(r):r)}return t},init:function(e,o,n,i,t){var r,s,u=o();return"undefined"==typeof u.data.subsCount&&ko.extenders.subscriptionsCount(u.data),ko.computed(function(){var n,i,d,p=ko.utils.unwrapObservable(o().data.subsCount),a=!s;d=-("undefined"!=typeof o().gutter?o().gutter:1),n=p+(r?d:0)>=ko.utils.unwrapObservable(u.threshold),"undefined"!=typeof o().not&&o().not&&(n=!n),i=a||n!==r,i&&(a&&ko.computedContext.getDependenciesCount()&&(s=ko.bindingHandlers.ifSubs.cloneNodes(ko.virtualElements.childNodes(e),!0)),n?(a||ko.virtualElements.setDomNodeChildren(e,ko.bindingHandlers.ifSubs.cloneNodes(s)),ko.applyBindingsToDescendants(t,e)):ko.virtualElements.emptyNode(e),r=n)},null,{disposeWhenNodeIsRemoved:e}),{controlsDescendantBindings:!0}}},ko.virtualElements.allowedBindings.ifSubs=!0;var beforeSubscriptionProp,afterSubscriptionProp;if("undefined"!=typeof ko.DEBUG&&"undefined"!=typeof ko.isWritableObservable)beforeSubscriptionProp="beforeSubscriptionAdd",afterSubscriptionProp="afterSubscriptionRemove";else if("3.2.0"==ko.version)beforeSubscriptionProp="va",afterSubscriptionProp="nb";else if("3.3.0"==ko.version)beforeSubscriptionProp="ja",afterSubscriptionProp="ua";else{if("3.4.0"!=ko.version)throw"Unsupported minimized Knockout version "+ko.version+" (supported DEBUG or minimized 3.2.0 ... 3.4.0)";beforeSubscriptionProp="sa",afterSubscriptionProp="Ia"}ko.extenders.subscriptionsCount=function(e,o,n){if("undefined"==typeof e.subsCount){e.subsCount=ko.observable(e.getSubscriptionsCount()).extend({notify:"always"});var i=e[beforeSubscriptionProp],t=e[afterSubscriptionProp];e[beforeSubscriptionProp]=function(t){i&&i.call(e,t);var r=e.getSubscriptionsCount()+1;"undefined"!=typeof o&&r!=o&&"undefined"!=typeof n&&r!=n||e.subsCount(r)},e[afterSubscriptionProp]=function(i){t&&t.call(e,i);var r=e.getSubscriptionsCount();"undefined"!=typeof o&&r!=o&&"undefined"!=typeof n&&r!=n||e.subsCount(r)}}else console.log("already applied subscriptionCount to observable");return null};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./../../../bower_components/console-browserify/index.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/console-browserify/index.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/jqueryui-spinner.js":[function(require,module,exports){
(function (global){
"use strict";var $=(typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null),console=require("./../../../bower_components/console-browserify/index.js");$.widget("ui.spinner",$.ui.spinner,{_adjustValue:function(i){var e=(this._super(i),this.options);return i=parseFloat(i.toFixed(this._precision())),null!==e.max&&i>e.max?e.max:null!==e.min&&i<e.min?e.min:i}});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./../../../bower_components/console-browserify/index.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/console-browserify/index.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/jqueryui-tabs.js":[function(require,module,exports){
(function (global){
"use strict";var $=(typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null),console=require("./../../../bower_components/console-browserify/index.js");$.widget("ui.tabs",$.ui.tabs,{_isLocal:function(e){return"true"==e.getAttribute("data-local")?!0:this._superApply(arguments)}});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./../../../bower_components/console-browserify/index.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/console-browserify/index.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/script-template.js":[function(require,module,exports){
(function (global){
"use strict";function pushTemplate(e,t){var n=global.document.createElement("script");n.setAttribute("type","text/html"),n.setAttribute("id",e),n.text=t,global.document.body.appendChild(n)}function removeTemplate(e){var t=global.document.getElementById(e);t&&t.parentNode.removeChild(t)}function init(){}function getTemplateContent(e){var t=global.document.getElementById(e);return t?t.innerHTML:void 0}module.exports={init:init,addTemplate:pushTemplate,removeTemplate:removeTemplate,getTemplateContent:getTemplateContent};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/scrollfix.js":[function(require,module,exports){
(function (global){
"use strict";var ko=(typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null),$=(typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null),console=require("./../../../bower_components/console-browserify/index.js"),tinymce=(typeof window !== "undefined" ? window['tinymce'] : typeof global !== "undefined" ? global['tinymce'] : null),timeout,render=function(){timeout=void 0,"undefined"!=typeof tinymce.activeEditor&&"undefined"!=typeof tinymce.activeEditor.theme&&"undefined"!=typeof tinymce.activeEditor.theme.panel&&"undefined"!=typeof tinymce.activeEditor.theme.panel.visible&&(("undefined"!=typeof tinymce.activeEditor.theme.panel._visible&&tinymce.activeEditor.theme.panel._visible&&tinymce.activeEditor.theme.panel._fixed||"undefined"!=typeof tinymce.activeEditor.theme.panel.state&&tinymce.activeEditor.theme.panel.state.get("visible")&&tinymce.activeEditor.theme.panel.state.get("fixed"))&&tinymce.activeEditor.theme.panel.fixed(!1),tinymce.activeEditor.nodeChanged(),tinymce.activeEditor.theme.panel.visible(!0),tinymce.activeEditor.theme.panel.layoutRect().y<=40&&tinymce.activeEditor.theme.panel.moveBy(0,40-tinymce.activeEditor.theme.panel.layoutRect().y))};ko.bindingHandlers.wysiwygScrollfix={scroll:function(e){timeout&&global.clearTimeout(timeout),timeout=global.setTimeout(render,50)},init:function(e){ko.utils.domNodeDisposal.addDisposeCallback(e,function(){$(e).off("scroll",ko.bindingHandlers.wysiwygScrollfix.scroll)}),$(e).on("scroll",ko.bindingHandlers.wysiwygScrollfix.scroll)}};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./../../../bower_components/console-browserify/index.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/console-browserify/index.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/scrollintoview.js":[function(require,module,exports){
(function (global){
"use strict";var $=(typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null),ko=(typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null),console=require("./../../../bower_components/console-browserify/index.js"),_scrollIntoView=function(o,e,l,n){var r=l.scrollTop(),t=r-n-(e?20:-20),i="undefined"!=typeof l[0].nodeType;if(i){var s={scrollTop:""+Math.round(t)+"px"},c=Math.round(Math.abs(t-r));l.stop().animate(s,c)}else l.scrollTop(t)};ko.bindingHandlers.scrollIntoView={update:function(o,e,l,n,r){var t=ko.utils.unwrapObservable(e());if(t)try{for(;8===o.nodeType;)o=o.nextSibling;if(8!==o.nodeType){var i,s=$(o).scrollParent(),c=!1;9==s[0].nodeType?(s=$(s[0].defaultView),i=0,c=!0):i=s.offset().top;var a=s.height(),p=s.scrollTop(),u=i+a,d=$(o),f=d.offset().top;c&&(f-=p);var w=d.height(),v=f+w;f>i&&u>f+w||(a>w?(i>f&&_scrollIntoView(o,!0,s,i-f),v>u&&_scrollIntoView(o,!1,s,u-v)):(i>f&&u>v&&_scrollIntoView(o,!1,s,u-v),f>i&&v>u&&_scrollIntoView(o,!0,s,i-f)))}}catch(T){console.log("TODO exception scrolling into view",T)}}},ko.virtualElements.allowedBindings.scrollIntoView=!0;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./../../../bower_components/console-browserify/index.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/console-browserify/index.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/string-template.js":[function(require,module,exports){
(function (global){
"use strict";function createStringTemplateEngine(e){var t=e.makeTemplateSource;return e.makeTemplateSource=function(e){return"undefined"!=typeof templates[e]?new ko.templateSources.stringTemplate(e,templates[e]):t(e)},e}function pushTemplate(e,t){templates[e]=t}function removeTemplate(e){"undefined"!=typeof templates[e]?templates[e]=void 0:origTemplateSystem.removeTemplate(e)}function init(){ko.setTemplateEngine(createStringTemplateEngine(new ko.nativeTemplateEngine))}function getTemplateContent(e){return"undefined"!=typeof templates[e]?templates[e]:origTemplateSystem.getTemplateContent(e)}var ko=(typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null),origTemplateSystem=require("./script-template.js"),templates={};ko.templateSources.stringTemplate=function(e,t){this.templateName=e,this.template=t,this._data={}},ko.utils.extend(ko.templateSources.stringTemplate.prototype,{data:function(e,t){return 1===arguments.length?this._data[e]:void(this._data[e]=t)},text:function(e){return 0===arguments.length?this.template:void(this.template=e)}}),module.exports={init:init,addTemplate:pushTemplate,removeTemplate:removeTemplate,getTemplateContent:getTemplateContent};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./script-template.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/script-template.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/tooltips.js":[function(require,module,exports){
(function (global){
"use strict";var ko=(typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null),$=(typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null),kojqui=(typeof window !== "undefined" ? window['kojqui'] : typeof global !== "undefined" ? global['kojqui'] : null),console=require("./../../../bower_components/console-browserify/index.js"),extendValueAccessor=function(e,n){return function(){return ko.utils.extend(n,e()),n}},options={show:{delay:500},track:!0,items:'[title][title!=""][title!=" "]'};ko.bindingHandlers.tooltips={init:function(e,n,o,t,i){return"undefined"!=typeof $.fn.tooltip&&"undefined"!=typeof ko.bindingHandlers.tooltip?ko.bindingHandlers.tooltip.init(e,extendValueAccessor(n,options),o,t,i):void 0},update:function(e,n,o,t,i){return"undefined"!=typeof $.fn.tooltip&&"undefined"!=typeof ko.bindingHandlers.tooltip?ko.bindingHandlers.tooltip.update(e,extendValueAccessor(n,options),o,t,i):void 0}};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./../../../bower_components/console-browserify/index.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/console-browserify/index.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/validated-value.js":[function(require,module,exports){
(function (global){
"use strict";var ko=(typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null),console=require("./../../../bower_components/console-browserify/index.js");ko.bindingHandlers.validatedValue={init:function(e,i,n){var t=i;if("undefined"!=typeof e.pattern){var a=new RegExp("^(?:"+e.pattern+")$"),r=ko.computed({read:function(){var n=ko.utils.unwrapObservable(i()),t=null===n||""===n||a.test(n);return t?e.classList.remove("invalid"):e.classList.add("invalid"),n},write:ko.isWriteableObservable(i())&&function(e){i()(e)},disposeWhenNodeIsRemoved:e});t=function(){return r}}ko.bindingHandlers.value.init(e,t,n)}},ko.expressionRewriting._twoWayBindings.validatedValue=!0;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./../../../bower_components/console-browserify/index.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/console-browserify/index.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/virtuals.js":[function(require,module,exports){
(function (global){
"use strict";var ko=(typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null),console=require("./../../../bower_components/console-browserify/index.js");ko.bindingHandlers.uniqueId={currentIndex:0,init:function(e,n){var t=ko.utils.unwrapObservable(n())||{};if(""===t.id()){var i,l,r;r="ko_"+("undefined"!=typeof t.type?ko.utils.unwrapObservable(t.type):"block");do i=r+"_"+ ++ko.bindingHandlers.uniqueId.currentIndex,l=global.document.getElementById(i);while(l);t.id(i)}}},ko.virtualElements.allowedBindings.uniqueId=!0,ko.bindingHandlers.virtualAttr={update:function(e,n){8!==e.nodeType&&ko.bindingHandlers.attr.update(e,n)}},ko.virtualElements.allowedBindings.virtualAttr=!0,ko.bindingHandlers.virtualAttrStyle={update:function(e,n,t,i,l){if(8!==e.nodeType){var r="undefined"==typeof l.templateMode||"wysiwyg"!=l.templateMode,d=["style"];r&&d.push("replacedstyle");for(var o=ko.utils.unwrapObservable(n()),a=0;a<d.length;a++){var u=d[a],s=o===!1||null===o||void 0===o;s?e.removeAttribute(u):e.setAttribute(u,o.toString())}}}},ko.virtualElements.allowedBindings.virtualAttrStyle=!0,ko.bindingHandlers.virtualStyle={update:function(e,n){8!==e.nodeType&&ko.bindingHandlers.style.update(e,n)}},ko.virtualElements.allowedBindings.virtualStyle=!0,ko.bindingHandlers.virtualHtml={init:ko.bindingHandlers.html.init,update:function(e,n){if(8===e.nodeType){var t=ko.utils.unwrapObservable(n());if(ko.virtualElements.emptyNode(e),null!==t&&void 0!==t){"string"!=typeof t&&(t=t.toString());var i=ko.utils.parseHtmlFragment(t);if(i)for(var l=e.nextSibling,r=0,d=i.length;d>r;r++)l.parentNode.insertBefore(i[r],l)}}else ko.bindingHandlers.html.update(e,n);return{controlsDescendantBindings:!0}}},ko.virtualElements.allowedBindings.virtualHtml=!0;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./../../../bower_components/console-browserify/index.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/console-browserify/index.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/wysiwygs.js":[function(require,module,exports){
(function (global){
"use strict";var tinymce=(typeof window !== "undefined" ? window['tinymce'] : typeof global !== "undefined" ? global['tinymce'] : null),$=(typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null),ko=(typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null),console=require("./../../../bower_components/console-browserify/index.js");require("./eventable.js"),ko.bindingHandlers.wysiwygOrHtml={init:function(e,t,n,i,o){var r="undefined"==typeof o.templateMode||"wysiwyg"!=o.templateMode;return r?ko.bindingHandlers.virtualHtml.init():ko.bindingHandlers.wysiwyg.init(e,t,n,i,o)},update:function(e,t,n,i,o){var r="undefined"==typeof o.templateMode||"wysiwyg"!=o.templateMode;return r?ko.bindingHandlers.virtualHtml.update(e,t,n,i,o):void 0}},ko.virtualElements.allowedBindings.wysiwygOrHtml=!0,ko.bindingHandlers.wysiwygHref={init:function(e,t,n,i,o){if(8!==e.nodeType){var r=(t(),"undefined"==typeof o.templateMode||"wysiwyg"!=o.templateMode);if(r)e.setAttribute("target","_new");else{var l=n();"undefined"!=typeof l.wysiwygOrHtml?e.setAttribute("href","javascript:void(0)"):(e.removeAttribute("href"),e.setAttribute("disabledhref","#"))}}},update:function(e,t,n,i,o){if(8!==e.nodeType){var r="undefined"==typeof o.templateMode||"wysiwyg"!=o.templateMode,l=ko.utils.unwrapObservable(t());r&&(l===!1||null===l||void 0===l?e.removeAttribute("href"):e.setAttribute("href",l.toString()))}}},ko.virtualElements.allowedBindings.wysiwygHref=!0,ko.bindingHandlers.wysiwygSrc={convertedUrl:function(e,t,n,i){var o=e+"?method="+t+"&width="+n+(null!==i?"&height="+i:"");return console.log("basic converterUrl",o),o},placeholderUrl:function(e,t,n){},update:function(e,t,n,i,o){var r=ko.utils.unwrapObservable(t()),l=ko.utils.unwrapObservable(r.src),a=ko.utils.unwrapObservable(r.placeholder),s=ko.utils.unwrapObservable(r.width),d=ko.utils.unwrapObservable(r.height);if(l===!1||null===l||void 0===l||""===l)"object"==typeof a&&null!==a?e.setAttribute("src",ko.bindingHandlers.wysiwygSrc.placeholderUrl(a.width,a.height,a.text)):e.removeAttribute("src");else{var u=ko.utils.unwrapObservable(r.method);u||(u=s>0&&d>0?"cover":"resize");var g=ko.bindingHandlers.wysiwygSrc.convertedUrl(l.toString(),u,s,d);e.setAttribute("src",g)}"undefined"!=typeof s&&null!==s?e.setAttribute("width",s):e.removeAttribute("width"),"undefined"!=typeof d&&null!==d?e.setAttribute("height",d):e.removeAttribute("height")}},ko.bindingHandlers.wysiwygId={init:function(e,t,n,i,o){var r="undefined"==typeof o.templateMode||"wysiwyg"!=o.templateMode;r||e.setAttribute("id",ko.utils.unwrapObservable(t()))},update:function(e,t,n,i,o){var r="undefined"==typeof o.templateMode||"wysiwyg"!=o.templateMode;r||e.setAttribute("id",ko.utils.unwrapObservable(t()))}},ko.virtualElements.allowedBindings.wysiwygId=!0,ko.bindingHandlers.wysiwygClick={init:function(e,t,n,i,o){var r="undefined"==typeof o.templateMode||"wysiwyg"!=o.templateMode;r||ko.bindingHandlers.click.init(e,t,n,i,o)}},ko.virtualElements.allowedBindings.wysiwygClick=!0,ko.bindingHandlers.wysiwygCss={update:function(e,t,n,i,o){var r="undefined"==typeof o.templateMode||"wysiwyg"!=o.templateMode;r||ko.bindingHandlers.css.update(e,t,n,i,o)}},ko.virtualElements.allowedBindings.wysiwygCss=!0,ko.bindingHandlers.wysiwygImg={makeTemplateValueAccessor:function(e,t){return function(){var n="undefined"!=typeof t.templateMode&&"wysiwyg"==t.templateMode,i=e(),o=ko.utils.peekObservable(i);return ko.utils.unwrapObservable(i),{name:n?o._editTemplate:o._template,templateEngine:ko.nativeTemplateEngine.instance}}},init:function(e,t,n,i,o){return ko.bindingHandlers.template.init(e,ko.bindingHandlers.wysiwygImg.makeTemplateValueAccessor(t,o))},update:function(e,t,n,i,o){return o=o.extend(t()),ko.bindingHandlers.template.update(e,ko.bindingHandlers.wysiwygImg.makeTemplateValueAccessor(t,o),n,i,o)}},ko.virtualElements.allowedBindings.wysiwygImg=!0,ko.bindingHandlers.wysiwyg={currentIndex:0,standardOptions:{},fullOptions:{toolbar1:"bold italic forecolor backcolor hr styleselect removeformat | link unlink | pastetext code",plugins:["link hr paste lists textcolor code"]},init:function(e,t,n,i,o){ko.bindingHandlers.focusable.init(e),ko.utils.domNodeDisposal.addDisposeCallback(e,function(){tinymce.remove("#"+e.getAttribute("id"))});var r=t();if(!ko.isObservable(r))throw"Wysiwyg binding called with non observable";if(8===e.nodeType)throw"Wysiwyg binding called on virtual node, ignoring...."+e.innerHTML;var l=e.getAttribute("id");l||(l="wysiwyg_"+ ++ko.bindingHandlers.wysiwyg.currentIndex,e.setAttribute("id",l));var a,s="DIV"==e.tagName||"TD"==e.tagName,d=!1,u=!1,g={selector:"#"+l,inline:!0,hidden_input:!1,plugins:["paste"],toolbar1:"bold italic",toolbar2:"",preview_styles:!1,paste_as_text:!0,language:"en",schema:"html5",extended_valid_elements:"strong/b,em/i,*[*]",menubar:!1,skin:"gray-flat",setup:function(e){e.on("change redo undo",function(){d||(u=!0,r(e.getContent({format:"raw"})),u=!1)}),e.on("focus",function(){e.nodeChanged(),e.getElement().click()}),e.on("BeforeSetContent",function(e){e.initial&&(e.format="raw")}),a=e}};return ko.utils.extend(g,ko.bindingHandlers.wysiwyg.standardOptions),s&&ko.utils.extend(g,ko.bindingHandlers.wysiwyg.fullOptions),global.setTimeout(function(){tinymce.init(g)}),ko.computed(function(){var n=ko.utils.unwrapObservable(t());if(!u){try{d=!0,"undefined"!=typeof a?a.setContent(n,{format:"raw"}):ko.utils.setHtml(e,n)}catch(i){console.log("TODO exception setting content to editable element",typeof a,i)}d=!1}},null,{disposeWhenNodeIsRemoved:e}),{controlsDescendantBindings:!0}}};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./../../../bower_components/console-browserify/index.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/console-browserify/index.js","./eventable.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/eventable.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/converter/checkmodel.js":[function(require,module,exports){
"use strict";var console=require("./../../../bower_components/console-browserify/index.js"),checkModel=function(e,o,t,n,l){var f,i,p,r=0;if("undefined"==typeof l&&(l=!1),"undefined"!=typeof o&&"function"==typeof o.splice)for(f={},i=0;i<o.length;i++)f[o[i].type]=o[i];else f=o;for(var a in e)if(e.hasOwnProperty(a))if(p="undefined"!=typeof n?n+"."+a:a,t.hasOwnProperty(a))if(typeof t[a]!=typeof e[a])null!==t[a]&&null!==e[a]&&("string"==typeof t[a]?String(e[a])!=e[a]&&(console.log("TODO Different type 1 ",p,typeof t[a],typeof e[a],t[a],e[a]),r=Math.max(r,2)):"number"==typeof t[a]?Number(e[a])!=e[a]&&(console.log("TODO Different type 2 ",p,typeof t[a],typeof e[a],t[a],e[a]),r=Math.max(r,2)):(console.log("TODO Different type 3 ",p,typeof t[a],typeof e[a],t[a],e[a]),r=Math.max(r,2)));else if("object"==typeof e[a])if(null!==e[a])if("undefined"!=typeof e[a].splice){if(e[a].length>0)if(t[a].length>0){var c=0;for(i=0;i<t[a].length;i++)if("string"==typeof t[a][i].type){for(;c<e[a].length&&e[a][c].type!==t[a][i].type;)console.log("ignoring ",p,e[a][c].type," block type in reference not found in model"),c++;if(c>=e[a].length){console.log("WARN cannot find ",p,t[a][i].type," block in reference"),r=Math.max(r,2);break}r=Math.max(r,checkModel(e[a][c],void 0,t[a][i],p+"["+i+"."+t[a][i].type+"]"))}}else for(i=0;i<e[a].length;i++)"string"!=typeof e[a][i].type?(console.log("TODO found an object with no type",p,e[a][i]),r=Math.max(r,2)):f.hasOwnProperty(e[a][i].type)?r=Math.max(r,checkModel(f[e[a][i].type],f,e[a][i],p+"["+i+"."+e[a][i].type+"]")):(console.warn("TODO the model uses a block type not defined by the template. REMOVING IT!!",p,e[a][i]),e[a].splice(i,1),i--,r=Math.max(r,2))}else null===t[a]?l?(console.log("WARN Null object in model ",p,"instead of",e[a],"deleting it"),r=Math.max(r,2),delete e[a]):(console.log("INFO Null object in model ",p,"instead of",e[a],"cloning it from the reference"),r=Math.max(r,1),t[a]=e[a]):r=Math.max(r,checkModel(e[a],f,t[a],p,l));else null!==t[a]&&(console.log("TODO Null in reference but not null in model",p,t[a]),r=Math.max(r,2));else"string"!=typeof e[a]&&"boolean"!=typeof e[a]&&"number"!=typeof e[a]&&(console.log("TODO unsupported type",p,typeof e[a]),r=Math.max(r,2));else l?(console.warn("WARN Property ",p,"found in model is not defined by template: removing it!"),r=Math.max(r,2),delete e[a]):(console.log("INFO Property ",p,"missing in model, cloning from reference!"),r=Math.max(r,1),t[a]=e[a]);return l||(r=Math.max(r,checkModel(t,o,e,"undefined"!=typeof n?n+"!R":"!R",!0))),r};module.exports=checkModel;

},{"./../../../bower_components/console-browserify/index.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/console-browserify/index.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/converter/declarations.js":[function(require,module,exports){
"use strict";var converterUtils=require("./utils.js"),cssParse=require("./../../../bower_components/mensch/lib/parser.js"),console=require("./../../../bower_components/console-browserify/index.js"),domutils=require("./domutils.js"),_declarationValueLookup=function(e,t,r){for(var n=e.length-1;n>=0;n--)if("property"==e[n].type&&e[n].name==t)return _declarationValueUrlPrefixer(e[n].value,r);return null},_propToCamelCase=function(e){return e.replace(/-([a-z])/g,function(e,t,r,n){return t.toUpperCase()})},_declarationValueUrlPrefixer=function(e,t){if(e.match(/url\(.*\)/)){var r=e.replace(/(url\()([^\)]*)(\))/g,function(e,r,n,l){var i=n.trim(),o=n.trim().charAt(0);"'"==o||'"'==o?i=i.substr(1,i.length-2):o="";var a=t(i);return null!==a?r+o+a+o+l:e});return r}return e},elaborateDeclarations=function(e,t,r,n,l,i,o){var a="object"==typeof i&&null!==i?i:{},u=null,d=0;if("undefined"==typeof t){var f=cssParse("#{\n"+e+"}",{comments:!0,position:!0});t=f.stylesheet.rules[0].declarations,d=1}for(var s=t.length-1;s>=0;s--)if("property"==t[s].type)if(o===!0&&"display"==t[s].name&&"none"==t[s].value)null===u&&(u=e),u=converterUtils.removeStyle(u,t[s].position.start,t[s].position.end,d,0,0,"");else{var v=t[s].name.match(/^-ko-(bind-|attr-)?([a-z0-9-]*?)(-if|-ifnot)?$/);if(null!==v){null===u&&"undefined"!=typeof e&&(u=e);var c,p,y,m="attr-"==v[1],h="bind-"==v[1],b=v[2],S="-if"==v[3]||"-ifnot"==v[3];if(S){c=t[s].name.substr(0,t[s].name.length-v[3].length);var g=_declarationValueLookup(t,c,r);if(null===g)throw"Unable to find declaration "+c+" for "+t[s].name}else{if((m||h)&&"undefined"==typeof l&&"undefined"!=typeof e)throw"Attributes and bind declarations are only allowed in inline styles!";var w,U=!0;if(m?(y=domutils.getAttribute(l,b),U=!1,w="virtualAttr"):h?(w=null,"text"==b?"undefined"!=typeof l?y=domutils.getInnerText(l):U=!1:"html"==b&&"undefined"!=typeof l?y=domutils.getInnerHtml(l):U=!1):(U="undefined"!=typeof e,U&&(y=_declarationValueLookup(t,b,r)),w="virtualStyle"),U&&null===y)throw console.error("Cannot find default value for",t[s].name,t),"Cannot find default value for "+t[s].name+": "+t[s].value+" in "+l+" ("+typeof e+"/"+b+")";var _=y,A=_propToCamelCase(b);try{p=converterUtils.expressionBinding(t[s].value,n,_)}catch(k){throw console.error("Model ensure path failed",k.stack,"name",t[s].name,"value",t[s].value,"default",y,"element",l),k}null!==w&&"undefined"==typeof a[w]&&(a[w]={}),"virtualAttr"==w&&"href"==A&&(w=null,A="wysiwygHref","undefined"!=typeof l&&null!==l&&domutils.removeAttribute(l,"href"));var x=_declarationValueLookup(t,t[s].name+"-if",r),C=!1;if(null===x)x=_declarationValueLookup(t,t[s].name+"-ifnot",r),C=!0;else if(null!==_declarationValueLookup(t,t[s].name+"-ifnot",r))throw"Unexpected error: cannot use both -if and -ifnot property conditions";if(null!==x)try{var V=converterUtils.conditionBinding(x,n);p=(C?"!":"")+"("+V+") ? "+p+" : null"}catch(k){throw console.error("Unable to deal with -ko style binding condition",x,t[s].name),k}null!==w?a[w][A]=p:a[A]=p}if(null!==u)try{if("undefined"!=typeof l&&null!==l)u=converterUtils.removeStyle(u,t[s].position.start,t[s].position.end,d,0,0,"");else{var P="";S||(P=b+": <!-- ko text: "+p+" -->"+y+"<!-- /ko -->"),u=converterUtils.removeStyle(u,t[s].position.start,t[s].position.end,d,0,0,P)}}catch(k){throw console.warn("Remove style failed",k,"name",t[s]),k}}else{var j=_declarationValueUrlPrefixer(t[s].value,r);if(j!=t[s].value&&(null===u&&"undefined"!=typeof e&&(u=e),null!==u))try{u=converterUtils.removeStyle(u,t[s].position.start,t[s].position.end,d,0,0,t[s].name+": "+j)}catch(k){throw console.log("Remove style failed replacing url",k,"name",t[s]),k}var z=_propToCamelCase(t[s].name),L="virtualAttrStyle",q="undefined"!=typeof a.virtualStyle?a.virtualStyle[z]:void 0,T=" ";"undefined"==typeof a[L]&&(a[L]="''",T=""),"undefined"!=typeof q?(a[L]="'"+t[s].name+": '+("+q+")+';"+T+"'+"+a[L],delete a.virtualStyle[z]):a[L]="'"+t[s].name+": "+converterUtils.addSlashes(j)+";"+T+"'+"+a[L]}}if("undefined"!=typeof l&&null!==l){for(var O in a.virtualStyle)if(a.virtualStyle.hasOwnProperty(O))throw console.log("Unexpected virtualStyle binding after conversion to virtualAttr.style",O,a.virtualStyle[O],e),"Unexpected virtualStyle binding after conversion to virtualAttr.style for "+O;delete a.virtualStyle;var B=domutils.getAttribute(l,"data-bind"),D=(null!==B?B+", ":"")+_bindingSerializer(a);domutils.setAttribute(l,"data-bind",D)}if("undefined"==typeof e){var H=!1;for(var I in a.virtualStyle)if(a.virtualStyle.hasOwnProperty(I)){H=!0;break}if(H){if("undefined"!=typeof a.virtualAttrStyle){var R=a.virtualAttrStyle;delete a.virtualAttrStyle,a.virtualAttrStyle=R}}else delete a.virtualStyle;return _bindingSerializer(a)}return u},_bindingSerializer=function(e){var t=[];for(var r in e)e.hasOwnProperty(r)&&("object"==typeof e[r]?t.push(r+": { "+_bindingSerializer(e[r])+" }"):t.push(r+": "+e[r]));return t.reverse().join(", ")};module.exports=elaborateDeclarations;

},{"./../../../bower_components/console-browserify/index.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/console-browserify/index.js","./../../../bower_components/mensch/lib/parser.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/mensch/lib/parser.js","./domutils.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/converter/domutils.js","./utils.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/converter/utils.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/converter/domutils.js":[function(require,module,exports){
(function (global){
"use strict";function _extend(e,t){if(t)for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}var $=(typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null),objExtend=function(e,t){return"function"==typeof $.extend?$.extend(!0,e,t):_extend(e,JSON.parse(JSON.stringify(t)))},getAttribute=function(e,t){var n=$(e).attr(t);return"undefined"==typeof n&&(n=null),n},setAttribute=function(e,t,n){$(e).attr(t,n)},removeAttribute=function(e,t){$(e).removeAttr(t)},getInnerText=function(e){return $(e).text()},getInnerHtml=function(e){return $(e).html()},getLowerTagName=function(e){return""===e.tagName&&"string"==typeof e.name?e.name.toLowerCase():""!==e.tagName?e.tagName.toLowerCase():$(e).prop("tagName").toLowerCase()},setContent=function(e,t){$(e).html(t)},replaceHtml=function(e,t){$(e).replaceWith(t)},removeElements=function(e,t){t&&"undefined"!=typeof e.detach&&e.detach(),e.remove()};module.exports={getAttribute:getAttribute,setAttribute:setAttribute,removeAttribute:removeAttribute,getInnerText:getInnerText,getInnerHtml:getInnerHtml,getLowerTagName:getLowerTagName,setContent:setContent,replaceHtml:replaceHtml,removeElements:removeElements,objExtend:objExtend};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/converter/editor.js":[function(require,module,exports){
"use strict";var console=require("./../../../bower_components/console-browserify/index.js"),elaborateDeclarations=require("./declarations.js"),utils=require("./utils.js"),modelDef=require("./model.js"),_getOptionsObject=function(e){for(var t=e.split("|"),o={},n=0;n<t.length;n++){var i=t[n].split("=");o[i[0]]=i.length>1?i[1]:i[0]}return o},_filterProps=function(e,t,o){var n=[];for(var i in e)if(!i.match(/^customStyle$/)&&!i.match(/^_/)&&e.hasOwnProperty(i)){var l=null!==e[i]&&"undefined"!=typeof e[i]._category&&"style"==e[i]._category;if("id"==i||"type"==i||i.match(/Blocks$/));else if("styler"==t)(l||o>0)&&n.push(i);else if("edit"==t){var a=null!==e[i]&&"undefined"!=typeof e[i]._category&&"content"==e[i]._category&&("undefined"==typeof e[i]._context||"block"!=e[i]._context);a&&n.push(i)}else"undefined"==typeof t&&n.push(i)}return n},_propInput=function(e,t,o,n,i){var l,a="";if(null!==e&&"undefined"!=typeof e._widget&&(l=e._widget),"undefined"==typeof l)throw"Unknown data type for "+t;var d="focusable: true";if("edit"==n&&(d+=", event: { focus: function(ui, event) { $($element).click(); } } "),a+='<label class="data-'+l+'"'+("boolean"==l?" data-bind=\"event: { mousedown: function(ui, evt) { if (evt.button == 0) { var input = $($element).find('input'); var ch = input.prop('checked'); setTimeout(function() { input.click(); input.prop('checked', !ch); input.trigger('change'); }, 0); } } }, click: function(ui, evt) { evt.preventDefault(); }, clickBubble: false\"":"")+">","undefined"!=typeof i&&"undefined"!=typeof i[l]){var s=i[l],p={};if("undefined"!=typeof s.parameters)for(var r in s.parameters)s.parameters.hasOwnProperty(r)&&"undefined"!=typeof e["_"+r]&&(p[r]=e["_"+r]);a+=s.html(o,d,p)}else if("boolean"==l)a+='<input type="checkbox" value="nothing" data-bind="checked: '+o+", "+d+'" />',a+='<span class="checkbox-replacer" ></span>';else if("color"==l)a+='<input size="7" type="text" data-bind="colorpicker: { color: '+o+", strings: $root.t('Theme Colors,Standard Colors,Web Colors,Theme Colors,Back to Palette,History,No history yet.') }, , "+d+'" />';else if("select"==l){if("undefined"!=typeof e._options){var u=_getOptionsObject(e._options);a+='<select data-bind="value: '+o+", "+d+'">';for(var f in u)u.hasOwnProperty(f)&&(a+='<option value="'+f+"\" data-bind=\"text: $root.ut('template', '"+utils.addSlashes(u[f])+"')\">"+u[f]+"</option>");a+="</select>"}}else if("font"==l)a+='<select type="text" data-bind="value: '+o+", "+d+'">',a+='<optgroup label="Sans-Serif Fonts">',a+='<option value="Arial,Helvetica,sans-serif">Arial</option>',a+="<option value=\"'Comic Sans MS',cursive,sans-serif\">Comic Sans MS</option>",a+='<option value="Impact,Charcoal,sans-serif">Impact</option>',a+="<option value=\"'Trebuchet MS',Helvetica,sans-serif\">Trebuchet MS</option>",a+='<option value="Verdana,Geneva,sans-serif">Verdana</option>',a+="</optgroup>",a+='<optgroup label="Serif Fonts">',a+='<option value="Georgia,serif">Georgia</option>',a+="<option value=\"'Times New Roman',Times,serif\">Times New Roman</option>",a+="</optgroup>",a+='<optgroup label="Monospace Fonts">',a+="<option value=\"'Courier New',Courier,monospace\">Courier New</option>",a+="</optgroup>",a+="</select>";else if("url"==l)a+='<div class="ui-textbutton">',a+='<input class="ui-textbutton-input" size="7" type="url" pattern="(mailto:.+@.+|https?://.+\\..+|\\[.*\\].*)" value="nothing" data-bind="css: { withButton: typeof $root.linkDialog !== \'undefined\' }, validatedValue: '+o+", "+d+'" />',a+="<a class=\"ui-textbutton-button\" data-bind=\"visible: typeof $root.linkDialog !== 'undefined', click: typeof $root.linkDialog !== 'undefined' ? $root.linkDialog.bind($element.previousSibling) : false, button: { icons: { primary: 'fa fa-fw fa-ellipsis-h' }, label: 'Opzioni', text: false }\">Opzioni</a>",a+="</div>";else if("integer"==l){var c=0,v=1e3;null!==e&&"undefined"!=typeof e._max&&(v=e._max),null!==e&&"undefined"!=typeof e._min&&(c=e._min);var b=v-c>=100?10:1,y=5*b;a+='<input class="number-spinner" size="7" step="'+b+'" type="number" value="-1" data-bind="spinner: { min: '+c+", max: "+v+", page: "+y+", value: "+o+" }, valueUpdate: ['change', 'spin'], "+d+'" />'}else a+='<input size="7" type="text" value="nothing" data-bind="value: '+o+", "+d+'" />';return a+="</label>"},_getGlobalStyleProp=function(e,t,o,n){var i;return"object"==typeof t&&null!==t&&"undefined"==typeof t._widget||"undefined"!=typeof o&&"undefined"!=typeof n&&n.length>0&&"object"==typeof e&&"undefined"!=typeof e[n]&&(i=e[n]),i},_propEditor=function(e,t,o,n,i,l,a,d,s,p,r,u,f,c,v){if("undefined"==typeof s&&(s=0),"undefined"!=typeof a&&"object"==typeof n&&null!==n&&"undefined"==typeof n._usecount)return console.log("TODO EDITOR ignoring",l,"property because it is not used by the template","prop:",a,"type:",d,"level:",s,e._templateName),"";var b,y="undefined"!=typeof u?a+"._defaultComputed":a,h="",m=y,g=1,_=1;if("object"==typeof n&&null!==n&&"undefined"==typeof n._widget||"undefined"==typeof u&&(g+=1),"undefined"==typeof u&&"undefined"!=typeof p&&(_+=p),"undefined"!=typeof a&&f&&(h+="<!-- ko ifSubs: { data: "+m+", threshold: "+_+", gutter: "+g+" } -->"),"undefined"==typeof a||null!==n&&"undefined"!=typeof n._name||console.log("TODO WARN Missing label for property ",a),"undefined"==typeof a&&null!==n&&"undefined"==typeof n._name&&console.log("TODO WARN Missing label for object ",n.type),"object"==typeof n&&null!==n&&"undefined"==typeof n._widget){var k=_filterProps(n,d,s),S="styler"==d&&null!==n&&"undefined"!=typeof n.customStyle&&"undefined"!=typeof u,w="",$="";"undefined"!=typeof a&&"edit"==d&&(w=", click: function(obj, evt) { $root.selectItem("+a+", $data); return false }, clickBubble: false, css: { selecteditem: $root.isSelectedItem("+a+") }, scrollIntoView: $root.isSelectedItem("+a+"), ",$+=" selectable"),S&&($+=" supportsCustomStyles"),h+='<div class="objEdit level'+s+$+'" data-bind="tooltips: {}'+w+'">';var D=null!==n&&"undefined"!=typeof n._name?n._name:"undefined"!=typeof a?"["+a+"]":"";if(S){var j="Stile";"undefined"!=typeof i&&null!==i&&"undefined"!=typeof i._name?j=i._name:console.log("TODO missing label for theme section ",a,null!==n?n.type:"-"),D="<span class=\"blockSelectionMethod\" data-bind=\"text: customStyle() ? $root.ut('template', '"+utils.addSlashes(D)+"') : $root.ut('template', '"+utils.addSlashes(j)+"')\">Block</span>"}else D="<span data-bind=\"text: $root.ut('template', '"+utils.addSlashes(D)+"')\">"+D+"</span>";if(b=null!==n&&"undefined"!=typeof n._help?' title="'+utils.addSlashes(n._help)+"\" data-bind=\"attr: { title: $root.ut('template', '"+utils.addSlashes(n._help)+"') }\"":"",h+="<span"+b+' class="objLabel level'+s+'">'+D+"</span>","edit"==d&&"undefined"!=typeof n._blockDescription&&(h+="<div class=\"blockDescription\" data-bind=\"html: $root.ut('template', '"+utils.addSlashes(n._blockDescription)+"')\">"+n._blockDescription+"</div>"),S&&(h+='<label class="data-boolean blockCheck" data-bind="tooltips: { }">',h+='<input type="checkbox" value="nothing" data-bind="focusable: true, checked: customStyle" />',h+='<span title="Switch between global and block level styles editing" data-bind="attr: { title: $root.t(\'Switch between global and block level styles editing\') }" class="checkbox-replacer checkbox-replacer-onoff"></span>',h+="</label>",h+="<!-- ko template: { name: 'customstyle', if: customStyle } --><!-- /ko -->"),"undefined"!=typeof a&&(h+="<!-- ko with: "+a+" -->",1==s&&"undefined"!=typeof a&&"undefined"!=typeof n._previewBindings&&"undefined"!=typeof e)){"undefined"!=typeof c&&(h+='<!-- ko with: $root.content() --><div class="objPreview" data-bind="'+c+'"></div><!-- /ko -->'),"undefined"!=typeof v&&(h+='<!-- ko with: $parent --><div class="objPreview" data-bind="'+v+'"></div><!-- /ko -->');var x=elaborateDeclarations(void 0,n._previewBindings,o,e.bind(this,l+"."));h+='<div class="objPreview"><div class="objPreviewInner" data-bind="'+x+'"></div></div>'}var B;0===s&&"undefined"!=typeof n._previewBindings&&(B=elaborateDeclarations(void 0,n._previewBindings,o,e.bind(this,l.length>0?l+".":"")));var E,O,T,C,I=h.length;for(E=0;E<k.length;E++)O=l.length>0?l+"."+k[E]:k[E],"object"==typeof n[k[E]]&&null!==n[k[E]]&&"undefined"==typeof n[k[E]]._widget||(C=void 0,0===s&&"theme"==k[E]?h+=_propEditor(e,t,o,n[k[E]],T,O,k[E],d,0,p,void 0,void 0,f,c):(C=_getGlobalStyleProp(r,n[k[E]],k[E],O),h+=_propEditor(e,t,o,n[k[E]],T,O,k[E],d,s+1,p,r,C,f,c,B)));for(E=0;E<k.length;E++)O=l.length>0?l+"."+k[E]:k[E],"object"==typeof n[k[E]]&&null!==n[k[E]]&&"undefined"==typeof n[k[E]]._widget&&(C=void 0,0===s&&"theme"==k[E]?h+=_propEditor(e,t,o,n[k[E]],T,O,k[E],d,0,p,void 0,void 0,f,c):(C=_getGlobalStyleProp(r,n[k[E]],k[E],O),h+=_propEditor(e,t,o,n[k[E]],T,O,k[E],d,s+1,p,r,C,f,c,B)));var P=h.length-I;if(0===P){if("object"==typeof n&&null!==n&&"template"==n._context)return"";h+='<div class="objEmpty" data-bind="html: $root.t(\'Selected element has no editable properties\')">Selected element has no editable properties</div>'}"undefined"!=typeof a&&(h+="<!-- /ko -->"),h+="</div>"}else{var N=!0;if("undefined"==typeof r&&(N=!1),null===n||"object"!=typeof n||"undefined"!=typeof n._widget){var M=[];"undefined"!=typeof u&&M.push("css: { notnull: "+a+"() !== null }"),b=null!==n&&"undefined"!=typeof n._help?' title="'+utils.addSlashes(n._help)+"\" data-bind=\"attr: { title: $root.ut('template', '"+utils.addSlashes(n._help)+"') }\"":"",b.length>0&&M.push("tooltips: {}");var G=M.length>0?'data-bind="'+utils.addSlashes(M.join())+'"':"";h+='<div class="propEditor '+(N?"checkboxes":"")+'"'+G+">";var z=null!==n&&"undefined"!=typeof n._name?n._name:"undefined"!=typeof a?"["+a+"]":"";z="<span data-bind=\"text: $root.ut('template', '"+utils.addSlashes(z)+"')\">"+z+"</span>",h+="<span"+b+' class="propLabel">'+z+"</span>",h+='<div class="propInput '+("undefined"!=typeof r?"local":"")+'" data-bind="css: { default: '+a+'() === null }">',h+=_propInput(n,a,y,d,t),h+="</div>","undefined"!=typeof u&&(h+='<div class="propInput global" data-bind="css: { overridden: '+a+'() !== null }">',h+=_propInput(n,a,u,d,t),h+="</div>",N&&(h+='<div class="propCheck"><label data-bind="tooltips: {}"><input type="checkbox" data-bind="focusable: true, click: function(evt, obj) { $root.localGlobalSwitch('+a+", "+u+"); return true; }, checked: "+a+'() !== null">',h+='<span class="checkbox-replacer" data-bind="css: { checked: '+a+"() !== null }, attr: { title: $root.t('This style is specific for this block: click here to remove the custom style and revert to the theme value') }\"></span>",h+="</label></div>")),h+="</div>"}else h+=null===n||"object"!=typeof n?'<div class="propEditor unknown">[A|'+a+"|"+typeof n+"]</div>":'<div class="propEditor unknown">[B|'+a+"|"+typeof n+"]</div>"}return"undefined"!=typeof a&&f&&(h+="<!-- /ko -->",h+="<!-- ko ifSubs: { not: true, data: "+m+", threshold: "+_+", gutter: 0 } -->",h+='<span class="label notused">('+a+")</span>",h+="<!-- /ko -->"),h},createBlockEditor=function(e,t,o,n,i,l,a,d,s,p,r,u){"undefined"==typeof r&&(r=!0);var f,c=modelDef.getDef(e,l),v=modelDef.getDef(e,i);"undefined"!=typeof v._previewBindings&&"thaeme"!=l&&"styler"==a&&(f=elaborateDeclarations(void 0,v._previewBindings,n,modelDef.getBindValue.bind(void 0,e,o,i,i,"")));var b,y="undefined"!=typeof p&&p?e[l]._globalStyles:void 0,h="undefined"!=typeof p&&p?e[l]._globalStyle:void 0;if("undefined"!=typeof h){var m=modelDef.getDef(e,"theme");b=m[h.replace(/^(\$theme|_theme_)\./,"")]}var g=modelDef.getBindValue.bind(void 0,e,o,i,l);g._templateName=l;var _='<div class="editor">';_+='<div class="blockType'+("undefined"!=typeof y?" withdefaults":"")+'">'+c.type+"</div>";var k=_propEditor(g,t,n,c,b,"",void 0,a,u,s,y,h,r,f);k.length>0&&(_+=k),_+="</div>",d(_,l,a)},createBlockEditors=function(e,t,o,n,i,l,a,d){createBlockEditor(e,t,o,n,i,l,"edit",a,d),createBlockEditor(e,t,o,n,i,l,"styler",a,d,!0)},generateEditors=function(e,t,o,n,i){var l,a=e._defs,d=e.templateName,s=e._blocks,p=[];for(l=0;l<s.length;l++)"undefined"!=typeof s[l].container&&p.push(modelDef.generateModel(a,s[l].block)),createBlockEditors(a,t,void 0,o,s[l].root,s[l].block,n,i);return"undefined"!=typeof a.theme&&createBlockEditor(a,t,void 0,o,d,"theme","styler",n,void 0,!1,!1,-1),p};module.exports=generateEditors;

},{"./../../../bower_components/console-browserify/index.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/console-browserify/index.js","./declarations.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/converter/declarations.js","./model.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/converter/model.js","./utils.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/converter/utils.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/converter/main.js":[function(require,module,exports){
"use strict";var modelDef=require("./model.js"),wrappedResultModel=function(e){var r=e._defs,t=e.templateName,l=modelDef.getDef(r,t),a=modelDef.generateResultModel(e),o=require("./wrapper.js"),d=o(a,l,r);return d},translateTemplate=function(){var e=require("./parser.js");return e.apply(e,arguments)},generateEditors=function(){var e=require("./editor.js");return e.apply(e,arguments)},checkModel=function(){var e=require("./checkmodel.js");return e.apply(e,arguments)};module.exports={translateTemplate:translateTemplate,wrappedResultModel:wrappedResultModel,generateResultModel:modelDef.generateResultModel,generateEditors:generateEditors,checkModel:checkModel};

},{"./checkmodel.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/converter/checkmodel.js","./editor.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/converter/editor.js","./model.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/converter/model.js","./parser.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/converter/parser.js","./wrapper.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/converter/wrapper.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/converter/model.js":[function(require,module,exports){
"use strict";var objExtend=require("./domutils.js").objExtend,console=require("./../../../bower_components/console-browserify/index.js"),_valueSet=function(e,t,n,o){var l=n.indexOf(".");if(-1==l)if("undefined"==typeof t[n])console.log("Undefined prop "+n+" while setting value "+o+" in model._valueSet");else if(null===t[n])"object"==typeof o&&null!==o&&"undefined"==typeof o.push&&console.log("nullpropobjectvalue",n,o),t[n]=o;else if("object"==typeof t[n]&&"function"==typeof t[n].push){var r;if("string"==typeof o){var f=o.match(/^\[(.*)\]$/);if(null===f)throw"Unexpected default value for array property "+n+": "+o;r=f[1].split(",")}else{if("object"!=typeof o||"undefined"==typeof o.push)throw"Unexpected default value for array property "+n+": "+o+" typeof "+typeof o;r=o}for(var d=[],i=0;i<r.length;i++)"@"==r[i].substr(0,1)?d.push(_generateModel(e,r[i].substr(1))):r[i].length>0&&d.push(r[i]);t[n]=d}else"string"==typeof t[n]||"boolean"==typeof t[n]?t[n]=o:"object"==typeof t[n]&&null!==t[n]&&"undefined"!=typeof t[n]._widget?("object"==typeof o&&null!==o&&console.log("objectvalue",n,t[n]._widget,o),t[n]=o):console.log("setting",typeof t[n],t[n],n,o);else{var a=n.substr(0,l);_valueSet(e,t[a],n.substr(l+1),o)}},_modelCreateOrUpdateBlockDef=function(e,t,n,o){if("undefined"!=typeof e[t]&&e[t]._initialized&&!e[t]._writeable)throw console.log("_modelCreateOrUpdateBlockDef",e,t,n,o),"Trying to alter non writeable model: "+t+" / "+n;if("undefined"==typeof e[t]&&(e[t]={_writeable:!0},"undefined"==typeof o&&(o={}),"undefined"==typeof o.category&&"undefined"==typeof e[t]._category&&(t.match(/(^t|.T)heme$/)||t.match(/(^s|.S)tyle$/)||t.match(/(^c|.C)olor$/)||t.match(/(^r|.R)adius$/)?o.category="style":o.category="content")),"undefined"!=typeof o){if("undefined"!=typeof o.name&&(e[t]._name=o.name),"undefined"!=typeof o.themeOverride&&(e[t]._themeOverride=o.themeOverride),"undefined"!=typeof o.globalStyle){e[t]._globalStyle=o.globalStyle;var l=o.globalStyle.replace(/^(\$theme|_theme_)\./,""),r=l.indexOf("."),f=-1!=r?l.substr(0,r):l;_modelCreateOrUpdateBlockDef(e,"theme",f),("undefined"==typeof e[t]._themeOverride||e[t]._themeOverride)&&_modelCreateOrUpdateBlockDef(e,t,"customStyle=false")}"undefined"!=typeof o.contextName&&(e[t]._context=o.contextName,"block"==o.contextName&&"undefined"==typeof e[t]._globalStyle&&(e[t]._globalStyle="_theme_.bodyTheme",_modelCreateOrUpdateBlockDef(e,"theme","bodyTheme"),("undefined"==typeof e[t]._themeOverride||e[t]._themeOverride)&&_modelCreateOrUpdateBlockDef(e,t,"customStyle=false"))),"undefined"!=typeof o.extend&&(e[t].type=o.extend)}for(var d in o)o.hasOwnProperty(d)&&"undefined"!=typeof o[d]&&-1==["name","extend","contextName","globalStyle","themeOverride"].indexOf(d)&&(e[t]["_"+d]=o[d]);"undefined"!=typeof n&&n.length>0&&(e[t]._props="undefined"!=typeof e[t]._props&&e[t]._props.length>0?e[t]._props+" "+n:n)},_removePrefix=function(e){var t=e.match(/^[^A-Z]+([A-Z])(.*)$/);return null!==t?t[1].toLowerCase()+t[2]:null},_generateModelFromDef=function(e,t){var n={};for(var o in e)if(!o.match(/^_.*/)&&e.hasOwnProperty(o)){var l=e[o];if("object"==typeof l&&null!==l&&"undefined"!=typeof l._complex&&l._complex)n[o]=_generateModelFromDef(l,t);else if("type"==o)n[o]=l;else{if("object"!=typeof l)throw console.error("Unexpected model def",o,l,e),"Unexpected model def ["+o+"]="+l;n[o]=null}}if("undefined"!=typeof e._defaultValues){var r=e._defaultValues;for(var f in r)r.hasOwnProperty(f)&&_valueSet(t,n,f,r[f])}return n},_generateModel=function(e,t){var n=_getModelDef(e,t,!1,!0);return _generateModelFromDef(n,e)},_getDef=function(e,t){return _getModelDef(e,t,!1,!0)},_getModelDef=function(e,t,n,o){if("undefined"==typeof e[t]){if(-1!=t.indexOf(" "))return null;var l=_removePrefix(t);return null!==l?_getModelDef(e,l,n,o):null}var r=e[t];if("object"!=typeof r)throw"Block definition must be an object: found "+r+" for "+t;if("undefined"==typeof r._initialized){if("undefined"==typeof r.type&&(-1==t.indexOf(" ")?r.type=t:r.type=t.substr(t.indexOf(" ")+1)),r.type!=t&&"undefined"==typeof r._widget){var f=_getModelDef(e,r.type,!0),d=objExtend(f,r);r=d,e[t]=r}else"undefined"==typeof r._widget&&"undefined"==typeof r._props&&"undefined"==typeof r._complex;r._writeable=!0,r._initialized=!0}if("undefined"!=typeof r._props){var i=r._props;if(i=i.split(" "),i.length>0&&"undefined"==typeof r._writeable)throw console.error("Altering a non writable object ",t,i,r),"Altering a non writable object: "+t+" def: "+i;"undefined"==typeof r._processedDefs&&(r._processedDefs={}),"undefined"==typeof r._globalStyles&&(r._globalStyles={}),"undefined"==typeof r._defaultValues&&(r._defaultValues={});for(var a=0;a<i.length;a++){var u=i[a];if(0!==u.length){var s=u,p=null,y=u.match(/^([^=\[\]]+)(\[\])?(=?)(.*)$/);if(null!==y&&(u=y[1],"[]"==y[2]&&("undefined"==typeof r[u]&&(r[u]=[]),p=[]),"="==y[3]&&(p=u.match(/(^v|V)isible$/)?"true"==String(y[4]).toLowerCase():u.match(/^customStyle$/)?"true"==String(y[4]).toLowerCase():y[4])),null!==p&&"undefined"==typeof r._defaultValues[u]&&(r._defaultValues[u]=p),"undefined"==typeof r[u]){var c=_getModelDef(e,t+" "+u,!0);null===c&&(c=_getModelDef(e,u,!0)),r[u]=c}r._processedDefs[u]=s,r._complex=!0}}delete r._props}if(n){r._writeable=!1;var _=objExtend({},r);return _}if(o)return r._writeable=!1,r;if("undefined"==typeof r._writeable||r._writeable===!1)throw"Retrieving non writeable object definition: "+t;return r},_increaseUseCount=function(e,t){if(e){if("undefined"==typeof t._usecount)throw console.error("ERROR trying to bind an unused property while readonly",t),"ERROR trying to bind an unused property"}else"undefined"==typeof t._usecount&&(t._usecount=0),t._usecount++},ensureGlobalStyle=function(e,t,n,o,l,r,f,d){var i=n(r,f,d);if("undefined"==typeof e[o]._globalStyles[l]){if(t)throw"Cannot find _globalStyle for "+l+" in "+o+"!";(-1!=l.indexOf(".")||"object"==typeof e[o][l]&&"undefined"!=typeof e[o][l]._widget)&&(e[o]._globalStyles[l]=i)}else if(e[o]._globalStyles[l]!=i)throw"Unexpected conflicting globalStyle [2] for "+o+"/"+l+": old="+e[o]._globalStyles[l]+" new="+i},modelEnsurePathAndGetBindValue=function(e,t,n,o,l,r,f,d,i,a){var u,s,p;if("$"==f.substr(0,1)){console.warn("DEPRECATED $ in bindingProvider: ",f,l);var y=f.indexOf(".");if(-1==y)throw"Unexpected fullPath: "+f+"/"+r+"/"+l+"/"+d+"/"+i;if(u=f.substr(1,y-1),p=f.substr(y+1),"theme"!=u)throw"Unexpected $ sequence: "+u+" in "+f;var c=p.indexOf(".");u=p.substr(0,c),p=p.substr(c+1),s="$root.content().theme()."+u+"()."+p.replace(new RegExp("\\.","g"),"().")}else if("#"==f.substr(0,1))console.warn("DEPRECATED # in bindingProvider: ",f,l),u=o,p=f.substr(1),s="$root.content()."+p.replace(new RegExp("\\.","g"),"().");else if("_theme_."==f.substr(0,8)){var _=f.indexOf(".",8);u=f.substr(8,_-8),p=f.substr(_+1),s="$root.content().theme()."+u+"()."+p.replace(new RegExp("\\.","g"),"().")}else"_root_."==f.substr(0,7)?(u=o,p=f.substr(7),s="$root.content()."+p.replace(new RegExp("\\.","g"),"().")):(u=l,p=r+f,s=f.replace(new RegExp("\\.","g"),"()."));if("undefined"==typeof t[u])throw"Cannot find model def for ["+u+"]";var g=p.indexOf("."),b=-1==g?p:p.substr(0,g);if(-1!=u.indexOf("-"))throw console.error("ERROR cannot use - for block names",u),"ERROR unexpected char in block name: "+u;if(-1!=b.indexOf("-"))throw console.error("ERROR cannot use - for property names",b),"ERROR unexpected char in property name: "+u;if(e)return"undefined"!=typeof t[u]._globalStyle&&"undefined"!=typeof t[u][b]&&"style"==t[u][b]._category&&(s+="._defaultComputed"),s;var h;if(e){if("undefined"!=typeof d)throw"Cannot use defaultValue in readonly mode!";if(i)throw"Cannot use overrideDefault in readonly mode for "+u+"/"+p+"/"+i+"!";if("undefined"!=typeof a)throw"Cannot set category for "+u+"/"+p+"/"+a+" in readonly mode!";h=_getModelDef(t,u,!1,!0)}else t[u]._writeable===!1&&console.log("TODO debug use cases for this condition",u,p),h=_getModelDef(t,u,t[u]._writeable===!1);if(null===h)throw"Unexpected model for ["+u+"]";if("undefined"==typeof h[b]){if(e)throw"Cannot find path "+b+" for "+u+"!";_modelCreateOrUpdateBlockDef(t,u,b),h=_getModelDef(t,u,!1)}"undefined"!=typeof t[u]._globalStyle&&"undefined"!=typeof t[u][b]&&null!==t[u][b]&&"style"==t[u][b]._category&&(s+="._defaultComputed");var m=h;try{if(_increaseUseCount(e,m),-1!=g){var w=p;do{var v=w.substr(0,g);if("undefined"==typeof m[v])throw"Found an unexpected prop "+v+" for model "+u+" for "+p;m=m[v],_increaseUseCount(e,m),w=w.substr(g+1),g=w.indexOf(".")}while(-1!=g);if("undefined"==typeof m[w]||null===m[w])throw"Found an unexpected path termination "+w+" for model "+u+" for "+p;m=m[w]}else m=m[p];if("undefined"==typeof m||null===m)throw"Unexpected null model for "+u+"/"+r+"/"+f;"undefined"!=typeof a&&(m._category=a),_increaseUseCount(e,m)}catch(x){throw console.error("TODO ERROR Property lookup exception",x,u,p,l,f,t),x}if("undefined"!=typeof t[u]._globalStyle&&"object"==typeof t[u][b]&&null!==t[u][b]&&"undefined"!=typeof t[u][b]._category&&"style"==t[u][b]._category){var O=modelEnsurePathAndGetBindValue.bind(void 0,e,t,n,o,l,""),D=-1!=p.indexOf(".")?p.substr(p.indexOf(".")):"";if(-1!=D.indexOf(".",1))throw"TODO unsupported object nesting! "+p;var S=t[u]._globalStyle+"."+b;"object"==typeof t[u][b]&&null!==t[u][b]&&"undefined"!=typeof t[u][b]._globalStyle&&(S=t[u][b]._globalStyle),ensureGlobalStyle(t,e,O,u,b,S,void 0,!1);var R=S+D;if("undefined"==typeof d&&null!==t[u]._defaultValues[p]&&(d=t[u]._defaultValues[p]),ensureGlobalStyle(t,e,O,u,p,R,d,i),"undefined"!=typeof d){if(e)throw console.error("Cannot set a new theme default value",R.substr(7),d,"while in readonly mode"),"Cannot set a new theme default value ("+d+") for "+R.substr(7)+" while in readonly mode!";n("default",R.substr(7),d)}d=null}if("undefined"!=typeof d)if("undefined"==typeof t[u]._defaultValues[p]||"undefined"!=typeof i&&i){if(e)throw"Cannot set new _defaultValues [1] for "+p+" in "+u+"!";t[u]._defaultValues[p]=d}else if(null===d){if(e&&null!==t[u]._defaultValues[p])throw"Cannot set new _defaultValues [2] for "+p+" in "+u+"!";t[u]._defaultValues[p]=null}else if(t[u]._defaultValues[p]!=d)throw console.error("TODO error!!! Trying to set a new default value for "+u+" "+p+" while it already exists (current: "+t[u]._defaultValues[p]+", new: "+d+")"),"Trying to set a new default value for "+u+" "+p+" while it already exists (current: "+t[u].defaultValues[p]+", new: "+d+")";return s},generateResultModel=function(e){var t=e._defs,n=e.templateName,o=_generateModel(t,n);return"undefined"!=typeof t.theme&&(o.theme=_generateModel(t,"theme")),o};module.exports={ensurePathAndGetBindValue:modelEnsurePathAndGetBindValue.bind(void 0,!1),getBindValue:modelEnsurePathAndGetBindValue.bind(void 0,!0),generateModel:_generateModel,generateResultModel:generateResultModel,getDef:_getDef,createOrUpdateBlockDef:_modelCreateOrUpdateBlockDef};

},{"./../../../bower_components/console-browserify/index.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/console-browserify/index.js","./domutils.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/converter/domutils.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/converter/parser.js":[function(require,module,exports){
(function (global){
"use strict";function conditional_replace(t){return t.replace(/<!--\[if ([^\]]*)\]>([\s\S]*?)<!\[endif\]-->/g,function(t,e,o){var a="<!-- cc:start -->";a+=o.replace(/<(\/?)([A-Za-z]*)/g,"<$1cc$2").replace(/<\/([^>]*)>/g,"<!-- cc:before:$1 --></$1><!-- cc:after:$1 -->"),a+="<!-- cc:end -->";var i='<replacedcc condition="'+e+'" style="display: none">';return i+=$("<div>").append($(a)).html().replace(/<!-- cc:before:([^ ]*) --><\/\1><!-- cc:after:\1 -->/g,"</$1>").replace(/^<!-- cc:start -->/,"").replace(/<!-- cc:end -->$/,""),i+="</replacedcc>"})}var $=(typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null),console=require("./../../../bower_components/console-browserify/index.js"),converterUtils=require("./utils.js"),elaborateDeclarations=require("./declarations.js"),processStylesheetRules=require("./stylesheet.js"),modelDef=require("./model.js"),domutils=require("./domutils.js"),wrapElementWithCondition=function(t,e,o){var a=domutils.getAttribute(e,t);try{var i=converterUtils.conditionBinding(a,o);$(e).before("<!-- ko if: "+i+" -->"),$(e).after("<!-- /ko -->"),domutils.removeAttribute(e,t)}catch(r){throw console.warn("Model ensure path failed in if/variant",e,a,t),r}},replacedAttributes=function(t,e){domutils.setAttribute(t,e,domutils.getAttribute(t,"replaced"+e))},processStyle=function(t,e,o,a){var i,r=domutils.getAttribute(t,"replacedstyle"),l=null;a&&(i={uniqueId:"$data",attr:{id:"id"}});var d=null!==domutils.getAttribute(t,"data-ko-display");l=elaborateDeclarations(r,void 0,e,o,t,i,d),null===l?l=r:domutils.removeAttribute(t,"replacedstyle"),null!==l&&(l.trim().length>0?domutils.setAttribute(t,"style",l):domutils.removeAttribute(t,"style"))},_fixRelativePath=function(t,e,o,a){var i=domutils.getAttribute(a,t),r=e(i);null!==r&&domutils.setAttribute(a,t,r)},processBlock=function(t,e,o,a,i,r,l,d,s,n){try{var u;if("block"==r)u=domutils.getAttribute(t,"data-ko-block"),domutils.removeAttribute(t,"data-ko-block");else{if("template"!=r)throw"Unexpected context name while processing block: "+r;u=l}$("[data-ko-remove]",t).remove();for(var c=$("[data-ko-block]",t).replaceWith("<replacedblock>"),m=["href","src","data-ko-placeholder-src","background"],p=0;p<m.length;p++){var h=_fixRelativePath.bind(void 0,m[p],i);$("["+m[p]+"]",t).each(h)}var b=domutils.getAttribute(t,"data-ko-properties");null===b&&(b=""),$("[data-ko-properties]",t).each(function(t,e){b.length>0&&(b+=" "),b+=domutils.getAttribute(e,"data-ko-properties"),domutils.removeAttribute(e,"data-ko-properties")}),modelDef.createOrUpdateBlockDef(e,u,b,{contextName:r});var f=modelDef.ensurePathAndGetBindValue.bind(void 0,e,o,l,u,"");"block"==r&&f("id",""),$("style",t).each(function(t,a){var r=domutils.getInnerHtml(a),d=modelDef.createOrUpdateBlockDef.bind(void 0,e),s=modelDef.ensurePathAndGetBindValue.bind(void 0,e,o,l),c=processStylesheetRules(r,void 0,s,d,o,i,l,u);if(c!=r)if(""!==c.trim()){var m=n(c);domutils.setAttribute(a,"data-bind","template: { name: '"+m+"' }"),domutils.setContent(a,"")}else domutils.removeElements($(a))}),processStyle(t,i,f,s);for(var v=["data-ko-display","data-ko-editable","data-ko-wrap","href"],k=0;k<v.length;k++){var g=domutils.getAttribute(t,v[k]);if(g)throw console.warn("ERROR: Unsupported "+v[k]+" used together with data-ko-block",t),"ERROR: Unsupported "+v[k]+" used together with data-ko-block"}return $("[data-ko-link]",t).each(function(t,e){var o=domutils.getAttribute(e,"data-ko-link"),a=domutils.getAttribute(e,"replacedstyle");"undefined"!=typeof a&&null!==a||(a=""),a=""!==a?"-ko-attr-href: @"+o+"; "+a:"-ko-attr-href: @"+o,domutils.setAttribute(e,"replacedstyle",a),domutils.setAttribute(e,"data-ko-wrap",o),domutils.removeAttribute(e,"data-ko-link")}),$("[replacedstyle]",t).each(function(t,e){processStyle(e,i,f,!1)}),$("[replacedhttp-equiv]",t).each(function(t,e){replacedAttributes(e,"http-equiv")}),$("[data-ko-display]",t).each(function(t,e){wrapElementWithCondition("data-ko-display",e,f)}),$("[data-ko-editable]",t).each(function(t,e){var o,a,i,r,l,d,s=domutils.getAttribute(e,"data-ko-editable");if(s.lastIndexOf(".")>0){var u=s.substr(0,s.lastIndexOf("."));l=f(u)}else l=f(s);if(d="wysiwygClick: function(obj, evt) { $root.selectItem("+l+", $data); return false }, clickBubble: false, wysiwygCss: { selecteditem: $root.isSelectedItem("+l+") }, scrollIntoView: $root.isSelectedItem("+l+")","img"!=domutils.getLowerTagName(e)){a=domutils.getInnerHtml(e);var c=f(s,a,!0,"wysiwyg");if(o="",domutils.getAttribute(e,"id")||(o+="wysiwygId: id()+'_"+s.replace(".","_")+"', "),"undefined"!=typeof d&&(o+=d+", "),o+="wysiwygOrHtml: "+c,"td"==domutils.getLowerTagName(e)){var m=$('<div data-ko-wrap="false" style="width: 100%; height: 100%"></div>')[0];domutils.setAttribute(m,"data-bind",o);var p=domutils.getInnerHtml($("<div></div>").append(m));domutils.setContent(e,p)}else i=domutils.getAttribute(e,"data-bind"),r=(null!==i?i+", ":"")+o,domutils.setAttribute(e,"data-bind",r),domutils.setContent(e,"");domutils.removeAttribute(e,"data-ko-editable")}else{var h=domutils.getAttribute(e,"width");if(""===h&&(h=null),null===h)throw console.error("ERROR: data-ko-editable images must declare a WIDTH attribute!",e),"ERROR: data-ko-editable images must declare a WIDTH attribute!";var b=domutils.getAttribute(e,"height");""===b&&(b=null);var v=domutils.getAttribute(e,"align");i=domutils.getAttribute(e,"data-bind");var k=i&&i.match(/virtualAttr: {[^}]* height: ([^,}]*)[,}]/);k&&(b=k[1]);var g=i&&i.match(/virtualAttr: {[^}]* width: ([^,}]*)[,}]/);g&&(h=g[1]);var w;a=domutils.getAttribute(e,"data-ko-placeholder-src");var y="";a?y=domutils.getAttribute(e,"src"):a=domutils.getAttribute(e,"src");var A;h&&b?A=h+"+'x'+"+b:b?h||(A="'h'+"+b+"+''"):A="'w'+"+h+"+''";var _,D=b||domutils.getAttribute(e,"data-ko-placeholder-height"),R=h||domutils.getAttribute(e,"data-ko-placeholder-width");if(domutils.removeAttribute(e,"src"),domutils.removeAttribute(e,"data-ko-editable"),domutils.removeAttribute(e,"data-ko-placeholder-height"),domutils.removeAttribute(e,"data-ko-placeholder-width"),domutils.removeAttribute(e,"data-ko-placeholder-src"),a&&(_="{ width: "+R+", height: "+D+", text: "+A+"}"),!R||!D)throw console.error("IMG data-ko-editable must declare width and height attributes, or their placeholder counterparts data-ko-placeholder-width/data-ko-placeholder-height",e),"ERROR: IMG data-ko-editable MUST declare width and height attributes, or their placeholder counterparts data-ko-placeholder-width/data-ko-placeholder-height";var B=f(s,y,!1,"wysiwyg");o="wysiwygSrc: { width: "+h+", height: "+b+", src: "+B+", placeholder: "+_+" }",r=(null!==i?i+", ":"")+o,domutils.setAttribute(e,"data-bind",r);var I=n(e),O="{ width: "+h;"left"==v?O+=", float: 'left'":"right"==v?O+=", float: 'right'":"center"==v?console.log("non so cosa fa align=center su una img e quindi non so come simularne l'editing"):"top"==v?O+=", verticalAlign: 'top'":"middle"==v?O+=", verticalAlign: 'middle'":"bottom"==v&&(O+=", verticalAlign: 'bottom'"),O+="}",$(e).before("<!-- ko wysiwygImg: { _data: $data, _item: "+l+", _template: '"+I+"', _editTemplate: 'img-wysiwyg', _src: "+B+", _width: "+h+", _height: "+b+", _align: "+(null===v?void 0:"'"+v+"'")+", _size: "+A+", _method: "+w+", _placeholdersrc: "+_+", _stylebind: "+O+" } -->"),$(e).after("<!-- /ko -->")}}),$("[href]",t).each(function(t,e){var o=domutils.getAttribute(e,"href"),a="wysiwygHref: '"+converterUtils.addSlashes(o)+"'",i=domutils.getAttribute(e,"data-bind"),r=(null!==i?i+", ":"")+a;domutils.setAttribute(e,"data-bind",r)}),$("replacedblock",t).each(function(t,r){var s=c[t],m=processBlock(s,e,o,a,i,"block",u,d,!0,n),p=modelDef.ensurePathAndGetBindValue(e,o,l,u,"",m);$(r).before("<!-- ko block: { data: "+converterUtils.addSlashes(p)+", template: 'block' } -->"),$(r).after("<!-- /ko -->"),$(r).remove()}),$($("[data-ko-wrap]",t).get().reverse(),t).each(function(t,e){var o=domutils.getAttribute(e,"data-ko-wrap");if("undefined"==typeof o||""===o||"true"===o)throw"Unsupported empty value for data-ko-wrap: use false value if you want to always remove the tag";var a,i,r=converterUtils.conditionBinding(o,f),l=domutils.getAttribute(e,"data-bind");if(""!==l&&null!==l&&l.match(/(block|wysiwygOrHtml):/)){var d="<!-- ko "+l+" -->"+domutils.getInnerHtml(e)+"<!-- /ko -->";a=n(d),domutils.removeAttribute(e,"data-ko-wrap"),i=n(e),domutils.replaceHtml(e,"<!-- ko template: /* special */ (typeof templateMode != 'undefined' && templateMode == 'wysiwyg') || "+r+" ? '"+i+"' : '"+a+"' --><!-- /ko -->")}else a=n(domutils.getInnerHtml(e)),domutils.removeAttribute(e,"data-ko-wrap"),domutils.setContent(e,"<!-- ko template: '"+a+"' --><!-- /ko -->"),i=n(e),domutils.replaceHtml(e,"<!-- ko template: (typeof templateMode != 'undefined' && templateMode == 'wysiwyg') || "+r+" ? '"+i+"' : '"+a+"' --><!-- /ko -->")}),n(t,u,"show"),a(l,u,r,d),u}catch(w){throw console.error("Exception while parsing the template",w,t),w}},translateTemplate=function(t,e,o,a){var i={},r=conditional_replace(e.replace(/(<[^>]+\s)(style|http-equiv)(="[^"]*"[^>]*>)/gi,function(t,e,o,a){return e+"replaced"+o+a})),l=$(r),d=l[0],s=[],n=function(t,e,o,a){s.push({root:t,block:e,context:o,container:a})},u=function(t,e,o){if("undefined"==typeof i.themes&&(i.themes={}),"undefined"==typeof i.themes[t]&&(i.themes[t]={}),"undefined"==typeof i.themes[t][e]||null===i.themes[t][e])i.themes[t][e]=o;else if("undefined"!=typeof o&&null!==o){var a=i.themes[t][e];a!=o&&console.log("Error setting a new default for property "+e+" in theme "+t+". old:"+a+" new:"+o+"!")}},c=$("[data-ko-container]",l),m={};c.each(function(t,e){var o=domutils.getAttribute(e,"data-ko-container")+"Blocks";domutils.removeAttribute(e,"data-ko-container"),domutils.setAttribute(e,"data-bind","block: "+o);var a=$("> [data-ko-block]",e);domutils.removeElements(a,!0),m[o]=a}),modelDef.createOrUpdateBlockDef(i,"id"),modelDef.createOrUpdateBlockDef(i,"bodyTheme"),modelDef.createOrUpdateBlockDef(i,"blocks","blocks[]"),modelDef.createOrUpdateBlockDef(i,"text"),processBlock(d,i,u,n,o,"template",t,void 0,!1,a);var p=function(e,r,l){processBlock(l,i,u,n,o,"block",t,e,!0,a)};for(var h in m)if(m.hasOwnProperty(h)){var b=m[h],f=h;modelDef.ensurePathAndGetBindValue(i,u,t,t,"",f+".blocks","[]"),b.each(p.bind(void 0,f))}var v={_defs:i,templateName:t,_blocks:s};return"undefined"!=typeof i[t]._version&&(v.version=i[t]._version),v};module.exports=translateTemplate;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./../../../bower_components/console-browserify/index.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/console-browserify/index.js","./declarations.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/converter/declarations.js","./domutils.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/converter/domutils.js","./model.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/converter/model.js","./stylesheet.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/converter/stylesheet.js","./utils.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/converter/utils.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/converter/stylesheet.js":[function(require,module,exports){
"use strict";var cssParse=require("./../../../bower_components/mensch/lib/parser.js"),console=require("./../../../bower_components/console-browserify/index.js"),converterUtils=require("./utils.js"),elaborateDeclarations=require("./declarations.js"),_processStyleSheetRules_processBlockDef=function(e,t){for(var o,s,r,l=0;l<t.length;l++)if("rule"==t[l].type){for(var n=t[l].selectors,a=!1,i=!1,c=0;c<n.length;c++)n[c].match(/:preview$/)?i=!0:a=!0;if(i&&a)throw console.log("cannot mix selectors type (:preview and declarations) in @supports -ko-blockdefs ",n),"Cannot mix selectors type (:preview and declarations) in @supports -ko-blockdefs";if(!i&&!a)throw console.log("cannot find known selectors in @supports -ko-blockdefs ",n),"Cannot find known selectors in @supports -ko-blockdefs";if(a){o="",s={},r=t[l].declarations;for(var p=0;p<r.length;p++)"property"==r[p].type&&("label"==r[p].name?s.name=r[p].value:"context"==r[p].name?s.contextName=r[p].value:"properties"==r[p].name?o=r[p].value:"theme"==r[p].name?s.globalStyle="_theme_."+r[p].value:"themeOverride"==r[p].name?s.themeOverride="true"==String(r[p].value).toLowerCase():s[r[p].name]=r[p].value);for(var u=0;u<n.length;u++)e(n[u],o,s)}if(i)for(var d=0;d<n.length;d++){var f=n[d].substr(0,n[d].indexOf(":")),v=t[l].declarations;e(f,void 0,{previewBindings:v})}}},processStylesheetRules=function(e,t,o,s,r,l,n,a){var i=e,c=null;if("undefined"==typeof t){var p=cssParse(e,{comments:!0,position:!0});if("stylesheet"!=p.type||"undefined"==typeof p.stylesheet)throw console.log("unable to process styleSheet",p),"Unable to parse stylesheet";t=p.stylesheet.rules}for(var u,d=t.length-1;d>=0;d--){if("supports"==t[d].type&&"-ko-blockdefs"==t[d].name)_processStyleSheetRules_processBlockDef(s,t[d].rules),i=converterUtils.removeStyle(i,t[d].position.start,c,0,0,0,"");else if("media"==t[d].type||"supports"==t[d].type)i=processStylesheetRules(i,t[d].rules,o,s,r,l,n,a);else if("comment"==t[d].type);else if("rule"==t[d].type){for(var f=t[d].selectors,v="",y=null,h=0;h<f.length;h++){v.length>0&&(v+=", ");var m=f[h].match(/\[data-ko-block=([^ ]*)\]/);if(null!==m){if(null!==y&&y!=m[1])throw"Found multiple block-match attribute selectors: cannot translate it ("+y+" vs "+m[1]+")";y=m[1]}v+="<!-- ko text: templateMode =='wysiwyg' ? '#main-wysiwyg-area ' : '' --><!-- /ko -->"+f[h]}if(y){var k="<!-- ko foreach: $root.findObjectsOfType($data, '"+y+"') -->",g="<!-- /ko -->",b=c,w=" ";t[d].declarations.length>0&&(t[d].declarations[0].position.start.line!=t[d].position.end.line&&(w="\n"+new Array(t[d].position.start.col).join(" ")),b=t[d].declarations[t[d].declarations.length-1].position.end),null===b?i+=w+g:i=b==c?converterUtils.removeStyle(i,b,c,0,0,0,w+g):converterUtils.removeStyle(i,b,c,0,0,0,w+"}"+w+g),v=k+w+v.replace(new RegExp("\\[data-ko-block="+y+"\\]","g"),"<!-- ko text: '#'+id() -->"+y+"<!-- /ko -->"),s(y,"",{contextName:"block"})}var S=y?y:a;u=o.bind(this,S,"");var x=elaborateDeclarations(i,t[d].declarations,l,u);null!==x&&(i=x),i=converterUtils.removeStyle(i,t[d].position.start,t[d].position.end,0,0,0,v)}else console.log("Unknown rule type",t[d].type,"while parsing <style> rules");c=t[d].position.start}return i};module.exports=processStylesheetRules;

},{"./../../../bower_components/console-browserify/index.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/console-browserify/index.js","./../../../bower_components/mensch/lib/parser.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/mensch/lib/parser.js","./declarations.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/converter/declarations.js","./utils.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/converter/utils.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/converter/utils.js":[function(require,module,exports){
"use strict";var console=require("./../../../bower_components/console-browserify/index.js"),jsep=require("./../../../bower_components/jsep/src/jsep.js");jsep.addBinaryOp("or",1),jsep.addBinaryOp("and",2),jsep.addBinaryOp("eq",6),jsep.addBinaryOp("neq",6),jsep.addBinaryOp("lt",7),jsep.addBinaryOp("lte",7),jsep.addBinaryOp("gt",7),jsep.addBinaryOp("gte",7);var addSlashes=function(e){return e.replace(/[\\"']/g,"\\$&").replace(/\u0000/g,"\\0")},removeStyle=function(e,r,n,t,o,a,i){for(var s=e.split("\n"),p=o,u=a,l=1+t;l<r.line;l++)p+=s[l-1-t].length+1;if(p+=r.col,null!==n){for(var d=1+t;d<n.line;d++)u+=s[d-1-t].length+1;u+=n.col}else u+=e.length+1;var c=e.substr(0,p-1)+i+e.substr(u-1);return c},expressionGenerator=function(e,r,n){function t(e){switch(e){case"or":return"||";case"and":return"&&";case"lt":return"<";case"lte":return"<=";case"gt":return">";case"gte":return">=";case"eq":return"==";case"neq":return"!=";default:return e}}function o(e,r,n,a){if("undefined"==typeof n&&(n=!0),"undefined"!=typeof a&&"Identifier"!==e.type&&"MemberExpression"!==e.type&&console.log("Cannot apply default value to variable when using expressions"),"BinaryExpression"===e.type||"LogicalExpression"===e.type)return"("+o(e.left,r,n)+" "+t(e.operator)+" "+o(e.right,r,n)+")";if("CallExpression"===e.type){var i=e.arguments.map(function(e){return o(e,r,n)});return o(e.callee,r,n)+"("+i.join(", ")+")"}if("UnaryExpression"===e.type)return e.operator+o(e.argument,r,n);if("MemberExpression"==e.type&&e.computed)throw"Unexpected computed member expression";if("MemberExpression"!=e.type||e.computed){if("Literal"===e.type)return e.raw;if("Identifier"===e.type){var s=e.name;return n?r(s,a)+"()":s}if("ConditionalExpression"===e.type)return"("+o(e.test,r,n)+" ? "+o(e.consequent,r,n)+" : "+o(e.alternate,r,n)+")";throw"Compound"===e.type?"Syntax error in expression: operator expected after "+o(e.body[0],r,!1):"Found an unsupported expression type: "+e.type}var p=o(e.object,r,!1)+"."+o(e.property,r,!1);return n&&"Math"!==e.object.name&&"Color"!==e.object.name?r(p,a)+"()":p}return o(e,r,void 0,n)},expressionBinding=function(e,r,n){var t;if("undefined"!=typeof n&&null!==n){var o=e.trim().replace(/@\[([^\]]+)\]|@([a-zA-Z0-9\._]+)\b/g,"###var###");if(o=o.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&"),"###var###"==o)t=[null,n];else if(o="^"+o.replace(/###var###/g,"(.+)")+"$",t=n.trim().match(new RegExp(o)),!t)throw console.log("Cannot find matches",t,"for",n,e,o,e),"Cannot find default value for "+e+" in "+n}try{var a=0,i="'"+e.replace(/@\[([^\]]+)\]|@([a-zA-Z0-9\._]+)\b|(')/g,function(e,n,o,i){if(i)return"\\"+i;a++;var s,p=n||o;if(t&&("undefined"!=typeof t[a]?s=t[a].trim():console.log("ABZZZ Cannot find default value for",p,"in",t,"as",a)),n){var u=jsep(n),l=expressionGenerator(u,r,s);return"'+"+l+"+'"}return"'+"+r(p,s)+"()+'"})+"'";return i=i.replace(/(^|[^\\])''\+/g,"$1").replace(/\+''/g,""),0===a&&"false"!==i&&"true"!==i&&console.error("Unexpected expression with no valid @variable references",e),i}catch(s){throw"Exception parsing expression "+e+" "+s}},conditionBinding=function(e,r){var n=jsep(e),t=expressionGenerator(n,r);return t};module.exports={addSlashes:addSlashes,removeStyle:removeStyle,conditionBinding:conditionBinding,expressionBinding:expressionBinding};

},{"./../../../bower_components/console-browserify/index.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/console-browserify/index.js","./../../../bower_components/jsep/src/jsep.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/jsep/src/jsep.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/converter/wrapper.js":[function(require,module,exports){
(function (global){
"use strict";var ko=(typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null),kowrap=require("./../../../bower_components/knockout.wrap/knockout.wrap.js"),console=require("./../../../bower_components/console-browserify/index.js"),_getOptionsObject=function(e){for(var t=e.split("|"),n={},o=0;o<t.length;o++){var r=t[o].split("=");n[r[0]]=r.length>1?r[1]:r[0]}return n},_makeComputed=function(e,t,n,o,r,i){var a=ko.computed({read:function(){var n=e();if(null===n){var a=ko.utils.unwrapObservable(o);return"undefined"==typeof a||"custom"==a?ko.utils.unwrapObservable(t):i[a][r]}return n},write:function(a){var l,u=ko.utils.unwrapObservable(o);if(l="undefined"==typeof u||"custom"==u?ko.utils.peekObservable(t):i[u][r],n)e(a==l?null:a);else{var s=ko.utils.peekObservable(e);a==l&&null===s||e(a)}}});return a},_nextVariantFunction=function(e,t,n){for(var o,r=e.utils.unwrapObservable(t),i=0;i<n.length&&(o=e.utils.peekObservable(n[i]),o!=r);i++);i==n.length&&(console.warn("Didn't find a variant!",t,r,n),i=n.length-1);var a=i+1;a==n.length&&(a=0);var l=e.utils.peekObservable(n[a]);t(l)},_getVariants=function(e){var t,n=e._variant;if("object"!=typeof e[n]||"undefined"==typeof e[n]._widget||"string"!=typeof e[n]._options&&"boolean"!==e[n]._widget)throw console.error("Unexpected variant declaration",n,e[n]),"Unexpected variant declaration: cannot find property "+n+" or its _options string and it is not a boolean";return t="string"==typeof e[n]._options?Object.keys(_getOptionsObject(e[n]._options)):[!0,!1]},_makeComputedFunction=function(e,t,n,o,r,i,a){if("undefined"==typeof e){if("undefined"==typeof o.utils.unwrapObservable(a).type)throw console.log("TODO ERROR Found a non-typed def ",e,a),"Found a non-typed def "+e;var l=o.utils.unwrapObservable(o.utils.unwrapObservable(a).type);e=t[l],"object"!=typeof e&&console.log("TODO ERROR Found a non-object def ",e,"for",l)}"undefined"==typeof r&&"undefined"!=typeof i&&i&&(r=a);var u="$root.content().",s=e._globalStyles;if("undefined"!=typeof s)for(var p in s)if(s.hasOwnProperty(p)){var b,c,f,d="$root.content().theme().scheme";if(s[p].substr(0,u.length)!=u)throw"UNEXPECTED globalStyle path ("+s[p]+") outside selfPath ("+u+")";f=s[p].substr(u.length),c=r,d.substr(0,u.length)==u?b=d.substr(u.length):(console.log("IS THIS CORRECT?",d,u),b=d);for(var v=c,h=f.split("()."),_="",k=!0,g=0;g<h.length;g++)c=o.utils.unwrapObservable(c)[h[g]],k?"theme"==h[g]&&(k=!1):(_.length>0&&(_+="."),_+=h[g]);for(var m=b.split("()."),w=0;w<m.length;w++)v=o.utils.unwrapObservable(v)[m[w]];for(var O=!0,y=p.split("."),R=a,S=0;S<y.length;S++)R=o.utils.unwrapObservable(R)[y[S]];if(!o.isObservable(R))throw"Unexpected non observable target "+p+"/"+_;R._defaultComputed=_makeComputed(R,c,O,v,_,n)}if("undefined"!=typeof e._variant){for(var F=e._variant.split("."),C=a,x=o.utils.unwrapObservable(a),P=0;P<F.length;P++)C=o.utils.unwrapObservable(C)[F[P]];if("undefined"!=typeof C._defaultComputed&&(console.log("Found variant on a style property: beware variants should be only used on content properties because they don't match the theme fallback behaviour",e._variant),C=C._defaultComputed),"undefined"==typeof C)throw console.log("ERROR looking for variant target",e._variant,a),"ERROR looking for variant target "+e._variant;x._nextVariant=_nextVariantFunction.bind(C,o,C,_getVariants(e))}for(var j in e)if(e.hasOwnProperty(j)){var B=e[j];if("object"==typeof B&&null!==B&&"undefined"!=typeof B._context&&"block"==B._context){var E=r[j](),I=_makeComputedFunction(t[j],t,n,o,r,i,E);a[j](I)}else if("object"==typeof B&&null!==B&&"blocks"==B.type){for(var T,D,J,V=r[j](),A=V.blocks(),U=0;U<A.length;U++)T=o.utils.unwrapObservable(A[U]),D=o.utils.unwrapObservable(T.type),J=_makeComputedFunction(t[D],t,n,o,r,i,T),A[U](J);var W=V.blocks;_augmentBlocksObservable(W,_blockInstrumentFunction.bind(V,void 0,t,n,o,void 0,r,i)),r[j]._wrap=_makeBlocksWrap.bind(r[j],W._instrumentBlock),r[j]._unwrap=_unwrap.bind(r[j])}}return a},_augmentBlocksObservable=function(e,t){e._instrumentBlock=t,"undefined"==typeof e.origPush&&(e.origPush=e.push,e.push=_makePush.bind(e),e.origSplice=e.splice,e.splice=_makeSplice.bind(e))},_makeBlocksWrap=function(e,t){var n=ko.toJS(t),o=n.blocks;n.blocks=[];var r=kowrap.fromJS(n,void 0,!0)();_augmentBlocksObservable(r.blocks,e);for(var i=0;i<o.length;i++){var a=ko.toJS(o[i]);a.id="block_"+i,r.blocks.push(a)}this(r)},_makePush=function(){if(arguments.length>1)throw"Array push with multiple arguments not implemented";if(arguments.length>0&&ko.isObservable(arguments[0])&&("function"==typeof arguments[0]._unwrap?arguments[0]=arguments[0]._unwrap():console.log("WARN: pushing observable with no _unwrap function (TODO remove me, expected condition)")),ko.isObservable(arguments[0]))return this.origPush.apply(this,arguments);var e=this._instrumentBlock(arguments[0]);return this.origPush.apply(this,[e])},_makeSplice=function(){if(arguments.length>3)throw"Array splice with multiple objects not implemented";if(arguments.length>2&&ko.isObservable(arguments[2])&&("function"==typeof arguments[2]._unwrap?arguments[2]=arguments[2]._unwrap():console.log("WARN: splicing observable with no _unwrap function (TODO remove me, expected condition)")),arguments.length>2&&!ko.isObservable(arguments[2])){var e=this._instrumentBlock(arguments[2]);return this.origSplice.apply(this,[arguments[0],arguments[1],e])}return this.origSplice.apply(this,arguments)},_blockInstrumentFunction=function(e,t,n,o,r,i,a,l){"undefined"==typeof r&&(r=l);var u;u={"":_makeComputedFunction.bind(r,e,t,n,o,i,a)};var s=kowrap.fromJS(r,u,!0);return s._unwrap=_unwrap.bind(s),s},_wrap=function(e,t){var n=ko.utils.unwrapObservable(e(ko,t,void 0,!0));this(n)},_unwrap=function(){return ko.toJS(this)},_modelInstrument=function(e,t,n){var o=_blockInstrumentFunction.bind(void 0,t,n,n.themes),r=o(ko,e,void 0,!0);return r._wrap=_wrap.bind(r,o),r._unwrap=_unwrap.bind(r),r};module.exports=_modelInstrument;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./../../../bower_components/console-browserify/index.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/console-browserify/index.js","./../../../bower_components/knockout.wrap/knockout.wrap.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/knockout.wrap/knockout.wrap.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/ext/color.js":[function(require,module,exports){
(function (global){
function Color(t){this.getBrightness=function(n){return t(n).getBrightness()},this.isLight=function(n){return t(n).isLight()},this.isDark=function(n){return t(n).isDark()},this.getLuminance=function(n){return t(n).getLuminance()},this.lighten=function(n,i){return t(n).lighten(i).toHexString()},this.brighten=function(n,i){return t(n).brighten(i).toHexString()},this.darken=function(n,i){return t(n).darken(i).toHexString()},this.desaturate=function(n,i){return t(n).desaturate(i).toHexString()},this.saturate=function(n,i){return t(n).saturate(i).toHexString()},this.greyscale=function(n){return t(n).greyscale().toHexString()},this.spin=function(n,i){return t(n).spin(i).toHexString()},this.complement=function(n){return t(n).complement().toHexString()},this.mix=t.mix,this.readability=t.readability,this.isReadable=t.isReadable,this.mostReadable=t.mostReadable}var tinycolor=require("./../../../bower_components/tinycolor/tinycolor.js"),colorPlugin=function(t){global.Color=new Color(tinycolor)};module.exports=colorPlugin;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./../../../bower_components/tinycolor/tinycolor.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/tinycolor/tinycolor.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/ext/localstorage.js":[function(require,module,exports){
(function (global){
"use strict";var console=require("./../../../bower_components/console-browserify/index.js"),ko=(typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null),$=(typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null),lsLoader=function(e,t){var o=global.localStorage.getItem("metadata-"+e);if(null!==o){var l,a=global.localStorage.getItem("template-"+e);null!==a&&(l=JSON.parse(a));var n=JSON.parse(o);return{metadata:n,model:l,extension:lsCommandPluginFactory(n,t)}}throw"Cannot find stored data for "+e},lsCommandPluginFactory=function(e,t){var o=function(e,o,l){var a={name:"Save",enabled:ko.observable(!0)};a.execute=function(){a.enabled(!1);var e=t?t:"/dl/",o="templateTitle",n=global.document.getElementById(o),r=n.value;console.log("save template "+r+" "+e);var s=$.post(e,{action:"save",html:l.exportHTML(),title:r},null,"html");s.fail(function(){console.log("fail",arguments),l.notifier.error(l.t("Unexpected error talking to server: contact us!"))}),s.success(function(){console.log("success",arguments),l.notifier.success(l.t("Template saved..."))}),s.always(function(){a.enabled(!0)})};var n={name:"Test",enabled:ko.observable(!0)},r={name:"Download",enabled:ko.observable(!0)};n.execute=function(){n.enabled(!1);var a=global.localStorage.getItem("testemail");if(null!==a&&"null"!=a||(a=l.t("Insert here the recipient email address")),a=global.prompt(l.t("Test email address"),a),a.match(/@/)){global.localStorage.setItem("testemail",a),console.log("TODO testing...",a);var r=t?t:"/dl/",s=$.post(r,{action:"email",rcpt:a,subject:"[test] "+e+" - "+o,html:l.exportHTML()},null,"html");s.fail(function(){console.log("fail",arguments),l.notifier.error(l.t("Unexpected error talking to server: contact us!"))}),s.success(function(){console.log("success",arguments),l.notifier.success(l.t("Test email sent..."))}),s.always(function(){n.enabled(!0)})}else global.alert(l.t("Invalid email address")),n.enabled(!0)},r.execute=function(){r.enabled(!1),l.notifier.info(l.t("Downloading...")),l.exportHTMLtoTextarea("#downloadHtmlTextarea");var e=t?t:"/dl/";global.document.getElementById("downloadForm").setAttribute("action",e),global.document.getElementById("downloadForm").submit(),r.enabled(!0)},l.save=a,l.test=n,l.download=r}.bind(void 0,e.key,e.name);return o};module.exports=lsLoader;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./../../../bower_components/console-browserify/index.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/console-browserify/index.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/ko-bindings.js":[function(require,module,exports){
"use strict";require("./../../bower_components/knockout-sortable/build/knockout-sortable.min.js"),require("./bindings/jqueryui-spinner.js"),require("./bindings/jqueryui-tabs.js"),require("./bindings/colorpicker.js"),require("./bindings/blocks.js"),require("./bindings/csstext.js"),require("./bindings/bind-iframe.js"),require("./bindings/droppable.js"),require("./bindings/fileupload.js"),require("./bindings/virtuals.js"),require("./bindings/wysiwygs.js"),require("./bindings/scrollfix.js"),require("./bindings/if-subs.js"),require("./bindings/extsortables.js"),require("./bindings/eventable.js"),require("./bindings/tooltips.js"),require("./bindings/extender-pagination.js"),require("./bindings/validated-value.js"),require("./bindings/scrollintoview.js");

},{"./../../bower_components/knockout-sortable/build/knockout-sortable.min.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/knockout-sortable/build/knockout-sortable.min.js","./bindings/bind-iframe.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/bind-iframe.js","./bindings/blocks.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/blocks.js","./bindings/colorpicker.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/colorpicker.js","./bindings/csstext.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/csstext.js","./bindings/droppable.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/droppable.js","./bindings/eventable.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/eventable.js","./bindings/extender-pagination.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/extender-pagination.js","./bindings/extsortables.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/extsortables.js","./bindings/fileupload.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/fileupload.js","./bindings/if-subs.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/if-subs.js","./bindings/jqueryui-spinner.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/jqueryui-spinner.js","./bindings/jqueryui-tabs.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/jqueryui-tabs.js","./bindings/scrollfix.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/scrollfix.js","./bindings/scrollintoview.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/scrollintoview.js","./bindings/tooltips.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/tooltips.js","./bindings/validated-value.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/validated-value.js","./bindings/virtuals.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/virtuals.js","./bindings/wysiwygs.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/wysiwygs.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/template-loader.js":[function(require,module,exports){
(function (global){
"use strict";function _viewModelPluginInstance(e){var t;return{viewModel:function(n){t=e(n)},init:function(){"undefined"!=typeof t&&"undefined"!=typeof t.init&&t.init()},dispose:function(){"undefined"!=typeof t&&"undefined"!=typeof t.dispose&&t.dispose()}}}var $=(typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null),ko=(typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null),kojqui=(typeof window !== "undefined" ? window['kojqui'] : typeof global !== "undefined" ? global['kojqui'] : null),templateConverter=require("./converter/main.js"),console=require("./../../bower_components/console-browserify/index.js"),initializeViewmodel=require("./viewmodel.js"),templateSystem=require("./bindings/choose-template.js"),pluginsCall=function(e,t,n,o){var a,i,r,l,d;d=[],"undefined"!=typeof o&&o?(a=e.length-1,i=0,r=-1):(a=0,i=e.length-1,r=1);for(var s=a;s!=i+r;s+=r)"undefined"!=typeof e[s][t]&&(l=e[s][t].apply(e[s],n),"undefined"!=typeof l&&d.push(l));return d},origDisposeCallback=ko.utils.domNodeDisposal.addDisposeCallback;ko.utils.domNodeDisposal.addDisposeCallback=function(e,t){var n=function(e){try{t(e)}catch(n){console.log("cought dispose callback exception",n)}};origDisposeCallback(e,n)};var bindingPluginMaker=function(e){return{viewModel:function(t){try{e("applyBindings",ko.applyBindings.bind(void 0,t))}catch(n){throw console.log(n,n.stack),n}},dispose:function(){try{e("unapplyBindings",ko.cleanNode.bind(this,global.document.body))}catch(t){throw console.log(t,t.stack),t}}}},templateCreator=function(e,t,n,o){var a=n;for("undefined"!=typeof n&&"undefined"!=typeof o&&("object"==typeof t&&"replacedhtml"==t.tagName.toLowerCase()||(a+="-"+o));"undefined"==typeof a||null===a||e.exists(a);)a="anonymous-"+Math.floor(1e5*Math.random()+1);if("object"==typeof t&&"replacedhtml"==t.tagName.toLowerCase()){var i=$(t),r=$("replacedhead",i),l=$("replacedbody",i);e.adder(a+"-head",r.html()||""),e.adder(a+"-show",l.html()||""),e.adder(a+"-preview",i.html()),e.adder(a+"-wysiwyg",i.html()),r.children().detach(),r.html("<!-- ko block: content --><!-- /ko -->"),r.before("<!-- ko withProperties: { templateMode: 'head' } -->"),r.after("<!-- /ko -->"),l.html("<!-- ko block: content --><!-- /ko -->"),e.adder(a+"-iframe",i[0].outerHTML)}else"object"==typeof t?e.adder(a,t.outerHTML):e.adder(a,t);return a},_templateUrlConverter=function(e,t){return t.match(/^[^\/]*:/)||t.match(/^\//)||t.match(/^\[/)||t.match(/^#?$/)?null:e+t},templateLoader=function(e,t,n,o,a,i){var r="string"==typeof t?t:n.template,l="./",d=r.lastIndexOf("/");-1!=d&&(l=r.substr(0,d+1));var s,u=_templateUrlConverter.bind(void 0,l);s="undefined"==typeof n?{template:r,name:"No name",created:Date.now()}:n,$.get(r,function(t){var n=templateCompiler(e,u,"template",t,o,s,a,i);n.init()})},templateCompiler=function(e,t,n,o,a,i,r,l){var d=o.match(/^([\S\s]*)([<]html[^>]*>[\S\s]*<\/html>)([\S\s]*)$/i);if(null===d)throw"Unable to find <html> opening and closing tags in the template";var s=d[1],u={"<html":0,"<head":0,"<body":0,"</html":0,"</body":0,"</head":0},c=d[2].replace(/(<\/?)(html|head|body)([^>]*>)/gi,function(e,t,n,o){return u[(t+n).toLowerCase()]+=1,t+"replaced"+n+o});for(var p in u)if(u.hasOwnProperty(p)&&1!=u[p]){if(0===u[p])throw"ERROR: missing mandatory element "+p+">";if(u[p]>1)throw"ERROR: multiple element "+p+"> occourences are not supported (found "+u[p]+" occourences)"}var f=d[3],m=[],g="+$root.contentListeners()",b=[];if("undefined"!=typeof r)for(var h=0;h<r.length;h++)"function"==typeof r[h]?b.push(_viewModelPluginInstance(r[h])):b.push(r[h]);var v=[],y={adder:function(e,t){if("string"!=typeof t)throw"Template system: cannot create new template "+e;var n=t.match(/(data)?-ko-[^ =:]*/g);n&&console.error("ERROR: found unexpected -ko- attribute in compiled template",e,", you probably mispelled it:",n),templateSystem.addTemplate(e,t),v.push(e)},exists:function(e){var t=templateSystem.getTemplateContent(e);return"undefined"!=typeof t},dispose:function(){for(var e=v.length-1;e>=0;e--)templateSystem.removeTemplate(v[e])}};ko.bindingHandlers.block.templateExists=y.exists;for(var k=templateCreator.bind(void 0,y),w=e("translateTemplate",templateConverter.translateTemplate.bind(void 0,n,c,t,k)),C=e("generateModel",templateConverter.wrappedResultModel.bind(void 0,w)),S={},M=pluginsCall(b,"widget",[$,ko,kojqui]),L=0;L<M.length;L++)S[M[L].widget]=M[L];m.push.apply(m,e("generateEditors",templateConverter.generateEditors.bind(void 0,w,S,t,k,g)));var E=!1;if("undefined"!=typeof a&&null!==a){var x;x="string"==typeof a?ko.utils.parseJson(a):a;var R=e("checkModel",templateConverter.checkModel.bind(void 0,C._unwrap(),m,x));2==R&&(console.error("Trying to compile an incompatible template version!",C._unwrap(),m,x),E=!0);try{C._wrap(x)}catch(q){console.error("Unable to inject model content!",q),E=!0}}var T=s+templateSystem.getTemplateContent(n+"-iframe").replace(/(<\/?)replaced(html|head|body)([^>]*>)/gi,function(e,t,n,o){return t+n+o})+f,D=ko.bindingHandlers.bindIframe.tpl;ko.bindingHandlers.bindIframe.tpl=T;var j={dispose:function(){ko.bindingHandlers.bindIframe.tpl=D}};b.push(j),b.push(y);var F=e("initializeViewmodel",initializeViewmodel.bind(this,C,m,t,l));F.metadata=i;var H="0.13.0";return"undefined"!=typeof F.metadata.editorversion&&F.metadata.editorversion!==H&&console.warn("The model being loaded has been created with an older editor version",F.metadata.editorversion,"vs",H),F.metadata.editorversion=H,"undefined"!=typeof w.version&&("undefined"!=typeof F.metadata.templateversion&&F.metadata.templateversion!==w.version&&console.error("The model being loaded has been created with a different template version",w.version,"vs",F.metadata.templateversion),F.metadata.templateversion=w.version),templateSystem.init(),b.push(bindingPluginMaker(e)),pluginsCall(b,"viewModel",[F]),E&&$("#incompatible-template").dialog({modal:!0,appendTo:"#mo-body",buttons:{Ok:function(){$(this).dialog("close")}}}),{model:F,init:function(){pluginsCall(b,"init",void 0,!0)},dispose:function(){pluginsCall(b,"dispose",void 0,!0)}}},checkFeature=function(e,t){if(!t())throw console.warn("Missing feature",e),"Missing feature "+e},isCompatible=function(){try{return checkFeature("matchMedia",function(){return"undefined"!=typeof global.matchMedia}),checkFeature("XMLHttpRequest 2",function(){return"XMLHttpRequest"in global&&"withCredentials"in new global.XMLHttpRequest}),checkFeature("ES5 strict",function(){return function(){return"undefined"==typeof this}()}),checkFeature("CSS borderRadius",function(){return"undefined"!=typeof global.document.body.style.borderRadius}),checkFeature("CSS boxShadow",function(){return"undefined"!=typeof global.document.body.style.boxShadow}),checkFeature("CSS boxSizing",function(){return"undefined"!=typeof global.document.body.style.boxSizing}),checkFeature("CSS backgroundSize",function(){return"undefined"!=typeof global.document.body.style.backgroundSize}),checkFeature("CSS backgroundOrigin",function(){return"undefined"!=typeof global.document.body.style.backgroundOrigin}),!0}catch(e){return!1}},fixPageEvents=function(){global.addEventListener&&(global.addEventListener("drag",function(e){e=e||global.event,e.preventDefault()},!1),global.addEventListener("dragstart",function(e){e=e||global.event,e.preventDefault()},!1),global.addEventListener("dragover",function(e){e=e||global.event,e.preventDefault()},!1),global.addEventListener("drop",function(e){e=e||global.event,e.preventDefault()},!1),global.document.body.addEventListener("drop",function(e){e.preventDefault()},!1)),global.document.ondragstart&&(global.document.ondragstart=function(){return!1})};module.exports={compile:templateCompiler,load:templateLoader,isCompatible:isCompatible,fixPageEvents:fixPageEvents};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./../../bower_components/console-browserify/index.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/console-browserify/index.js","./bindings/choose-template.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/bindings/choose-template.js","./converter/main.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/converter/main.js","./viewmodel.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/viewmodel.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/timed-call.js":[function(require,module,exports){
"use strict";var console=require("./../../bower_components/console-browserify/index.js"),_call=function(e){return e()},logs=[],_timedCall=function(e,o){var l,t=(new Date).getTime();"object"==typeof console&&console.time&&console.time(e),l=_call(o),"object"==typeof console&&console.time&&console.timeEnd(e);var n=(new Date).getTime()-t;return"object"!=typeof console||console.time||console.log(e,"took",n,"ms"),logs.push({name:e,time:n}),logs.length>100&&logs.unshift(),l};module.exports={timedCall:_timedCall,logs:logs};

},{"./../../bower_components/console-browserify/index.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/console-browserify/index.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/undomanager/undomain.js":[function(require,module,exports){
(function (global){
"use strict";var ko=(typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null),undoManager=require("./../../../bower_components/knockout-undomanager/knockout-undomanager.js"),undoserializer=require("./undoserializer.js"),addUndoStackExtensionMaker=function(e){return function(n){n.contentListeners(n.contentListeners()+2);var o=undoManager(n.content,{levels:100,undoLabel:ko.computed(function(){return n.t("Undo (#COUNT#)")}),redoLabel:ko.computed(function(){return n.t("Redo")})});return n.undo=o.undoCommand,n.undo.execute=e.bind(n,"undo",n.undo.execute),n.redo=o.redoCommand,n.redo.execute=e.bind(n,"redo",n.redo.execute),n.undoReset=e.bind(n,"undoReset",o.reset),n.setUndoModeMerge=o.setModeMerge,n.setUndoModeOnce=o.setModeOnce,o.setModeIgnore(),o.setUndoActionMaker(undoserializer.makeUndoAction.bind(void 0,n.content)),undoserializer.watchEnabled(!0),{pause:function(){o.setModeIgnore()},run:function(){o.setModeOnce()},init:function(){o.setModeOnce()},dispose:function(){n.contentListeners(n.contentListeners()-2),undoserializer.watchEnabled(!1),o.dispose()}}}};module.exports=addUndoStackExtensionMaker;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./../../../bower_components/knockout-undomanager/knockout-undomanager.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/knockout-undomanager/knockout-undomanager.js","./undoserializer.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/undomanager/undoserializer.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/undomanager/undoserializer.js":[function(require,module,exports){
(function (global){
"use strict";var ko=(typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null),console=require("./../../../bower_components/console-browserify/index.js"),_reference=function(e,n){for(var t,r,o=0,a=e;o<n.length;)switch(n.charAt(o)){case"(":")"==n.charAt(o+1)&&(a=a()),o+=2;break;case"[":r=n.indexOf("]",o),a=a[n.substring(o+1,r)],o=r+1;break;case".":t=n.indexOf("(",o),-1==t&&(t=n.length),r=n.indexOf("[",o),-1==r&&(r=n.length),r=Math.min(t,r),a=a[n.substring(o+1,r)],o=r}return a},_getPath=function(e,n){for(var t,r="",o=0;o<=e.length;o++)if(t=o<e.length?e[o]:n,ko.isObservable(t)&&(r+="()"),"undefined"!=typeof t._fieldName)r+="."+t._fieldName;else{if(!(o>0&&"function"==typeof e[o-1].pop))throw console.error("Unexpected parent with no _fieldName and no parent array",o,e),"Unexpected parent with no _fieldName and no parent array";var a=ko.isObservable(e[o-1])?ko.utils.peekObservable(e[o-1]):e[o-1],i=ko.utils.arrayIndexOf(a,t);if(-1==i)throw console.error("Unexpected object not found in parent array",a,t,o,e.length,ko.toJS(a),ko.utils.unwrapObservable(t)),"Unexpected object not found in parent array";r+="["+i+"]"}return r},makeDereferencedUndoAction=function(e,n,t,r,o){var a=_reference(n,t);e(a,r,o)},listener,_setListener=function(e){listener=e},makeUndoActionDereferenced=function(e,n,t,r,o,a){try{var i=_getPath(t,r);if("object"!=typeof o&&"function"!=typeof o||(o=ko.toJS(o)),"undefined"!=typeof a&&("object"==typeof a.value||"function"==typeof a.value)){var c=ko.toJS(a);a=c}if("undefined"!=typeof listener)try{listener(i,r,o,a)}catch(f){console.log("Undoserializer ignoring exception in listener callback")}return makeDereferencedUndoAction.bind(void 0,n,e,i,o,a)}catch(f){console.error("Exception processing undo",f,t,r,a)}},watchEnabled,_watchEnabled=function(e){return"undefined"==typeof e?watchEnabled:void(watchEnabled=e)};module.exports={dereference:_getPath,reference:_reference,makeUndoAction:makeUndoActionDereferenced,setListener:_setListener,watchEnabled:_watchEnabled};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./../../../bower_components/console-browserify/index.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/console-browserify/index.js"}],"/var/www/s/app/webroot/js/lib/mosaico/src/js/viewmodel.js":[function(require,module,exports){
(function (global){
"use strict";function initializeEditor(e,o,t,r){function l(e){return e.replace(/<replacedcc[^>]* condition="([^"]*)"[^>]*>([\s\S]*?)<\/replacedcc>/g,function(e,o,t){var r="<!--[if "+o+"]>";return r+=t.replace(/<!-- cc:before:([^ ]*) --><!-- cc:after:\1 -->/g,"</$1>").replace(/^.*<!-- cc:start -->/,"").replace(/<!-- cc:end -->.*$/,"").replace(/<(\/?)cc([A-Za-z]*)/g,"<$1$2"),r+="<![endif]-->"})}var n={galleryRecent:ko.observableArray([]).extend({paging:16}),galleryRemote:ko.observableArray([]).extend({paging:16}),selectedBlock:ko.observable(null),selectedItem:ko.observable(null),selectedTool:ko.observable(0),selectedImageTab:ko.observable(0),dragging:ko.observable(!1),draggingImage:ko.observable(!1),galleryLoaded:ko.observable(!1),showPreviewFrame:ko.observable(!1),previewMode:ko.observable("mobile"),showToolbox:ko.observable(!0),showTheme:ko.observable(!1),showGallery:ko.observable(!1),debug:ko.observable(!1),contentListeners:ko.observable(0),logoPath:"dist/img/mosaico32.png",logoUrl:".",logoAlt:"mosaico"};return n.content=e,n.blockDefs=o,n.notifier=toastr,n.tt=function(e,o){if("undefined"!=typeof o)for(var t in o)o.hasOwnProperty(t)&&(e=e.replace(new RegExp("__"+t+"__","g"),o[t]));return e},n.t=n.tt,n.ut=function(e,o){return o},n.templatePath=t,n.remoteUrlProcessor=function(e){return e},n.remoteFileProcessor=function(e){return"undefined"!=typeof e.url&&(e.url=n.remoteUrlProcessor(e.url)),"undefined"!=typeof e.thumbnailUrl&&(e.thumbnailUrl=n.remoteUrlProcessor(e.thumbnailUrl)),e},n.loadGallery=function(){n.galleryLoaded("loading");var e=r?r:"/upload/";$.getJSON(e,function(e){for(var o=0;o<e.files.length;o++)e.files[o]=n.remoteFileProcessor(e.files[o]);n.galleryLoaded(e.files.length),n.galleryRemote(e.files.reverse())}).fail(function(){n.galleryLoaded(!1),n.notifier.error(n.t("Unexpected error listing files"))})},n.fileToImage=function(e,o,t){return e.url},n.removeBlock=function(e,o){ko.utils.unwrapObservable(n.selectedBlock)==ko.utils.unwrapObservable(e)&&n.selectBlock(null,!0);var t=o.blocks.remove(e);return n.notifier.info(n.t("Block removed: use undo button to restore it...")),t},n.duplicateBlock=function(e,o){var t=ko.utils.unwrapObservable(e),r=ko.toJS(ko.utils.unwrapObservable(o.blocks)[t]);"undefined"!=typeof r.id&&(r.id=""),o.blocks.splice(t+1,0,r)},n.moveBlock=function(e,o,t){var r=ko.utils.unwrapObservable(e),l=ko.utils.unwrapObservable(o.blocks);if(t&&r>0||!t&&r<l.length-1){var a=r+(t?-1:1),i=l[a];n.startMultiple(),o.blocks.splice(a,1),o.blocks.splice(r,0,i),n.stopMultiple()}},n.loadDefaultBlocks=function(){var e=ko.toJS(n.content().mainBlocks);e.blocks=[];for(var o=ko.utils.unwrapObservable(n.blockDefs),t=0;t<o.length;t++){var r=ko.toJS(o[t]);r.id="block_"+t,e.blocks.push(r)}performanceAwareCaller("setMainBlocks",n.content().mainBlocks._wrap.bind(n.content().mainBlocks,e))},n.addImage=function(e){var o=$("#main-wysiwyg-area .selectable-img.selecteditem");return 1==o.length&&"object"==typeof e&&"undefined"!=typeof e.url?(ko.contextFor(o[0])._src(e.url),!0):!1},n.addBlock=function(e,o){var t,r=n.selectedBlock();if(null!==r)for(var l=n.content().mainBlocks().blocks().length-1;l>=0;l--)if(n.content().mainBlocks().blocks()[l]()==r){t=l;break}var a;"undefined"!=typeof t?(a=t+1,n.content().mainBlocks().blocks.splice(a,0,e),n.notifier.info(n.t("New block added after the selected one (__pos__)",{pos:a}))):(n.content().mainBlocks().blocks.push(e),a=n.content().mainBlocks().blocks().length-1,n.notifier.info(n.t("New block added at the model bottom (__pos__)",{pos:a})));var i=n.content().mainBlocks().blocks()[a]();return n.selectBlock(i,!0),!1},n.findObjectsOfType=function(e,o){var t=[],r=ko.utils.unwrapObservable(e);for(var l in r)if(r.hasOwnProperty(l)){var n=ko.utils.unwrapObservable(r[l]);if(l.match(/Blocks$/))for(var a=ko.utils.unwrapObservable(n.blocks),i=0;i<a.length;i++){var s=ko.utils.unwrapObservable(a[i]);null!==o&&ko.utils.unwrapObservable(s.type)!=o||t.push(s)}else"object"==typeof n&&null!==n&&(null!==o&&ko.utils.unwrapObservable(n.type)!=o||t.push(n))}return t},n.placeholderHelper={element:function(e){return $(e[0].outerHTML).removeClass("ui-draggable").addClass("sortable-placeholder").css("display","block").css("position","relative").css("width","100%").css("height","auto").css("opacity",".8")[0]},update:function(e,o){}},n.startMultiple=function(){"undefined"!=typeof n.setUndoModeMerge&&n.setUndoModeMerge()},n.stopMultiple=function(){"undefined"!=typeof n.setUndoModeOnce&&n.setUndoModeOnce()},n.localGlobalSwitch=function(e,o){var t=e();return e(null===t?o():null),!1},n.selectItem=function(e,o,t){var r=ko.utils.peekObservable(e);return"undefined"!=typeof t&&n.selectBlock(t,!1,!0),r!=o&&(e(o),null!==o&&0===n.selectedTool()&&n.selectedTool(1)),!1}.bind(n,n.selectedItem),n.isSelectedItem=function(e){return n.selectedItem()==e},n.selectBlock=function(e,o,t,r){var l=ko.utils.peekObservable(e);r||n.selectItem(null),l!=o&&(e(o),n.showGallery(!1),null===o||t||0!==n.selectedTool()||n.selectedTool(1))}.bind(n,n.selectedBlock),n.countSubscriptions=function(e,o){var t=0;for(var r in e)if(e.hasOwnProperty(r)){var l=e[r];if(ko.isObservable(l)&&("undefined"!=typeof l._defaultComputed&&("undefined"!=typeof o&&console.log(o+"/"+r+"/_",l._defaultComputed.getSubscriptionsCount()),t+=l._defaultComputed.getSubscriptionsCount()),"undefined"!=typeof o&&console.log(o+"/"+r+"/-",l.getSubscriptionsCount()),t+=l.getSubscriptionsCount(),l=ko.utils.unwrapObservable(l)),"object"==typeof l&&null!==l){var a=n.countSubscriptions(l,"undefined"!=typeof o?o+"/"+r+"@":void 0);"undefined"!=typeof o&&console.log(o+"/"+r+"@",a),t+=a}}return t},n.loopSubscriptionsCount=function(){var e=n.countSubscriptions(n.content());global.document.getElementById("subscriptionsCount").innerHTML=e,global.setTimeout(n.loopSubscriptionsCount,1e3)},n["export"]=function(){var e=performanceAwareCaller("exportHTML",n.exportHTML);return e},n.exportHTML=function(){var e="exportframe";$("body").append('<iframe id="'+e+'" data-bind="bindIframe: $data"></iframe>');var o=global.document.getElementById(e);ko.applyBindings(n,o);var t=o.contentWindow.document.doctype,r="<!DOCTYPE "+t.name+(t.publicId?' PUBLIC "'+t.publicId+'"':"")+(!t.publicId&&t.systemId?" SYSTEM":"")+(t.systemId?' "'+t.systemId+'"':"")+">",a=r+"\n"+o.contentWindow.document.documentElement.outerHTML;ko.cleanNode(o),ko.removeNode(o),a=a.replace(/<script ([^>]* )?type="text\/html"[^>]*>[\s\S]*?<\/script>/gm,""),a=a.replace(/<!-- ko ((?!--).)*? -->/g,""),a=a.replace(/<!-- \/ko -->/g,""),a=a.replace(/ data-bind="[^"]*"/gm,""),a=a.replace(/ data-mce-(href|src)="[^"]*"/gm,""),a=a.replace(/ style="[^"]*"([^>]*) replaced(style="[^"]*")/gm,"$1 $2"),a=a.replace(/ replaced(style="[^"]*")([^>]*) style="[^"]*"/gm," $1$2"),a=a.replace(/ replaced(style="[^"]*")/gm," $1"),a=a.replace(/ http-equiv="[^"]*"([^>]*) replaced(http-equiv="[^"]*")/gm,"$1 $2"),a=a.replace(/ replaced(http-equiv="[^"]*")([^>]*) http-equiv="[^"]*"/gm," $1$2"),a=a.replace(/ replaced(http-equiv="[^"]*")/gm," $1"),a=l(a);var i=a.match(/ data-[^ =]+(="[^"]+")? /)||a.match(/ replaced([^= ]*=)/);return i&&console.warn("Output HTML contains unexpected data- attributes or replaced attributes",i),a},n.exportHTMLtoTextarea=function(e){$(e).val(n.exportHTML())},n.exportJSONtoTextarea=function(e){$(e).val(n.exportJSON())},n.importJSONfromTextarea=function(e){n.importJSON($(e).val())},n.exportMetadata=function(){var e=ko.toJSON(n.metadata);return e},n.exportJSON=function(){var e=ko.toJSON(n.content);return e},n.exportJS=function(){return ko.toJS(n.content)},n.importJSON=function(e){var o=ko.utils.parseJson(e);n.content._wrap(o)},n.exportTheme=function(){var e={},o=n.content().theme(),t=function(e,o,r){for(var l in r)if(r.hasOwnProperty(l)){var n=ko.utils.unwrapObservable(r[l]);null!==n&&"object"==typeof n?t(l+".",o,n):o[e+l]=n}};t("",e,o);var r="";for(var l in e)e.hasOwnProperty(l)&&"type"!=l&&(r+=l+": "+e[l]+";\n");return r},n.loadImage=function(e){n.galleryRecent.unshift(e),n.selectedImageTab(0)},n.dialog=function(e,o){$(e).dialog(o)},n.log=function(e,o){},n.selectedImageTab.subscribe(function(e){1==e&&n.galleryLoaded()===!1&&n.loadGallery()},n,"change"),n}var $=(typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null),ko=(typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null),console=require("./../../bower_components/console-browserify/index.js"),performanceAwareCaller=require("./timed-call.js").timedCall,toastr=require("./../../bower_components/toastr/toastr.js");toastr.options={closeButton:!1,debug:!1,positionClass:"toast-bottom-full-width",target:"#mo-body",onclick:null,showDuration:"300",hideDuration:"1000",timeOut:"5000",extendedTimeOut:"1000",showEasing:"swing",hideEasing:"linear",showMethod:"fadeIn",hideMethod:"fadeOut"},module.exports=initializeEditor;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./../../bower_components/console-browserify/index.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/console-browserify/index.js","./../../bower_components/toastr/toastr.js":"/var/www/s/app/webroot/js/lib/mosaico/bower_components/toastr/toastr.js","./timed-call.js":"/var/www/s/app/webroot/js/lib/mosaico/src/js/timed-call.js"}]},{},["/var/www/s/app/webroot/js/lib/mosaico/src/js/app.js","/var/www/s/app/webroot/js/lib/mosaico/build/templates.js"])("/var/www/s/app/webroot/js/lib/mosaico/src/js/app.js")
});
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvdmFyL3d3dy9zL2FwcC93ZWJyb290L2pzL2xpYi9tb3NhaWNvL2Jvd2VyX2NvbXBvbmVudHMvY29uc29sZS1icm93c2VyaWZ5L2luZGV4LmpzIiwiL3Zhci93d3cvcy9hcHAvd2Vicm9vdC9qcy9saWIvbW9zYWljby9ib3dlcl9jb21wb25lbnRzL2V2b2wtY29sb3JwaWNrZXIvanMvZXZvbC5jb2xvcnBpY2tlci5taW4uanMiLCIvdmFyL3d3dy9zL2FwcC93ZWJyb290L2pzL2xpYi9tb3NhaWNvL2Jvd2VyX2NvbXBvbmVudHMvanNlcC9zcmMvanNlcC5qcyIsIi92YXIvd3d3L3MvYXBwL3dlYnJvb3QvanMvbGliL21vc2FpY28vYm93ZXJfY29tcG9uZW50cy9rbm9ja291dC1zb3J0YWJsZS9idWlsZC9rbm9ja291dC1zb3J0YWJsZS5taW4uanMiLCIvdmFyL3d3dy9zL2FwcC93ZWJyb290L2pzL2xpYi9tb3NhaWNvL2Jvd2VyX2NvbXBvbmVudHMva25vY2tvdXQtdW5kb21hbmFnZXIva25vY2tvdXQtdW5kb21hbmFnZXIuanMiLCIvdmFyL3d3dy9zL2FwcC93ZWJyb290L2pzL2xpYi9tb3NhaWNvL2Jvd2VyX2NvbXBvbmVudHMva25vY2tvdXQud3JhcC9rbm9ja291dC53cmFwLmpzIiwiL3Zhci93d3cvcy9hcHAvd2Vicm9vdC9qcy9saWIvbW9zYWljby9ib3dlcl9jb21wb25lbnRzL2tub2Nrb3V0anMtcmVhY3Rvci9kaXN0L2tvLXJlYWN0b3IubWluLmpzIiwiL3Zhci93d3cvcy9hcHAvd2Vicm9vdC9qcy9saWIvbW9zYWljby9ib3dlcl9jb21wb25lbnRzL21lbnNjaC9saWIvZGVidWcuanMiLCIvdmFyL3d3dy9zL2FwcC93ZWJyb290L2pzL2xpYi9tb3NhaWNvL2Jvd2VyX2NvbXBvbmVudHMvbWVuc2NoL2xpYi9sZXhlci5qcyIsIi92YXIvd3d3L3MvYXBwL3dlYnJvb3QvanMvbGliL21vc2FpY28vYm93ZXJfY29tcG9uZW50cy9tZW5zY2gvbGliL3BhcnNlci5qcyIsIi92YXIvd3d3L3MvYXBwL3dlYnJvb3QvanMvbGliL21vc2FpY28vYm93ZXJfY29tcG9uZW50cy90aW55Y29sb3IvdGlueWNvbG9yLmpzIiwiL3Zhci93d3cvcy9hcHAvd2Vicm9vdC9qcy9saWIvbW9zYWljby9ib3dlcl9jb21wb25lbnRzL3RvYXN0ci90b2FzdHIuanMiLCIvdmFyL3d3dy9zL2FwcC93ZWJyb290L2pzL2xpYi9tb3NhaWNvL2J1aWxkL3RlbXBsYXRlcy5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9hc3NlcnQvYXNzZXJ0LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3V0aWwvc3VwcG9ydC9pc0J1ZmZlckJyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvdXRpbC91dGlsLmpzIiwiL3Zhci93d3cvcy9hcHAvd2Vicm9vdC9qcy9saWIvbW9zYWljby9zcmMvanMvYXBwLmpzIiwiL3Zhci93d3cvcy9hcHAvd2Vicm9vdC9qcy9saWIvbW9zYWljby9zcmMvanMvYmluZGluZ3MvYmluZC1pZnJhbWUuanMiLCIvdmFyL3d3dy9zL2FwcC93ZWJyb290L2pzL2xpYi9tb3NhaWNvL3NyYy9qcy9iaW5kaW5ncy9ibG9ja3MuanMiLCIvdmFyL3d3dy9zL2FwcC93ZWJyb290L2pzL2xpYi9tb3NhaWNvL3NyYy9qcy9iaW5kaW5ncy9jaG9vc2UtdGVtcGxhdGUuanMiLCIvdmFyL3d3dy9zL2FwcC93ZWJyb290L2pzL2xpYi9tb3NhaWNvL3NyYy9qcy9iaW5kaW5ncy9jb2xvcnBpY2tlci5qcyIsIi92YXIvd3d3L3MvYXBwL3dlYnJvb3QvanMvbGliL21vc2FpY28vc3JjL2pzL2JpbmRpbmdzL2Nzc3RleHQuanMiLCIvdmFyL3d3dy9zL2FwcC93ZWJyb290L2pzL2xpYi9tb3NhaWNvL3NyYy9qcy9iaW5kaW5ncy9kcm9wcGFibGUuanMiLCIvdmFyL3d3dy9zL2FwcC93ZWJyb290L2pzL2xpYi9tb3NhaWNvL3NyYy9qcy9iaW5kaW5ncy9ldmVudGFibGUuanMiLCIvdmFyL3d3dy9zL2FwcC93ZWJyb290L2pzL2xpYi9tb3NhaWNvL3NyYy9qcy9iaW5kaW5ncy9leHRlbmRlci1wYWdpbmF0aW9uLmpzIiwiL3Zhci93d3cvcy9hcHAvd2Vicm9vdC9qcy9saWIvbW9zYWljby9zcmMvanMvYmluZGluZ3MvZXh0c29ydGFibGVzLmpzIiwiL3Zhci93d3cvcy9hcHAvd2Vicm9vdC9qcy9saWIvbW9zYWljby9zcmMvanMvYmluZGluZ3MvZmlsZXVwbG9hZC5qcyIsIi92YXIvd3d3L3MvYXBwL3dlYnJvb3QvanMvbGliL21vc2FpY28vc3JjL2pzL2JpbmRpbmdzL2lmLXN1YnMuanMiLCIvdmFyL3d3dy9zL2FwcC93ZWJyb290L2pzL2xpYi9tb3NhaWNvL3NyYy9qcy9iaW5kaW5ncy9qcXVlcnl1aS1zcGlubmVyLmpzIiwiL3Zhci93d3cvcy9hcHAvd2Vicm9vdC9qcy9saWIvbW9zYWljby9zcmMvanMvYmluZGluZ3MvanF1ZXJ5dWktdGFicy5qcyIsIi92YXIvd3d3L3MvYXBwL3dlYnJvb3QvanMvbGliL21vc2FpY28vc3JjL2pzL2JpbmRpbmdzL3NjcmlwdC10ZW1wbGF0ZS5qcyIsIi92YXIvd3d3L3MvYXBwL3dlYnJvb3QvanMvbGliL21vc2FpY28vc3JjL2pzL2JpbmRpbmdzL3Njcm9sbGZpeC5qcyIsIi92YXIvd3d3L3MvYXBwL3dlYnJvb3QvanMvbGliL21vc2FpY28vc3JjL2pzL2JpbmRpbmdzL3Njcm9sbGludG92aWV3LmpzIiwiL3Zhci93d3cvcy9hcHAvd2Vicm9vdC9qcy9saWIvbW9zYWljby9zcmMvanMvYmluZGluZ3Mvc3RyaW5nLXRlbXBsYXRlLmpzIiwiL3Zhci93d3cvcy9hcHAvd2Vicm9vdC9qcy9saWIvbW9zYWljby9zcmMvanMvYmluZGluZ3MvdG9vbHRpcHMuanMiLCIvdmFyL3d3dy9zL2FwcC93ZWJyb290L2pzL2xpYi9tb3NhaWNvL3NyYy9qcy9iaW5kaW5ncy92YWxpZGF0ZWQtdmFsdWUuanMiLCIvdmFyL3d3dy9zL2FwcC93ZWJyb290L2pzL2xpYi9tb3NhaWNvL3NyYy9qcy9iaW5kaW5ncy92aXJ0dWFscy5qcyIsIi92YXIvd3d3L3MvYXBwL3dlYnJvb3QvanMvbGliL21vc2FpY28vc3JjL2pzL2JpbmRpbmdzL3d5c2l3eWdzLmpzIiwiL3Zhci93d3cvcy9hcHAvd2Vicm9vdC9qcy9saWIvbW9zYWljby9zcmMvanMvY29udmVydGVyL2NoZWNrbW9kZWwuanMiLCIvdmFyL3d3dy9zL2FwcC93ZWJyb290L2pzL2xpYi9tb3NhaWNvL3NyYy9qcy9jb252ZXJ0ZXIvZGVjbGFyYXRpb25zLmpzIiwiL3Zhci93d3cvcy9hcHAvd2Vicm9vdC9qcy9saWIvbW9zYWljby9zcmMvanMvY29udmVydGVyL2RvbXV0aWxzLmpzIiwiL3Zhci93d3cvcy9hcHAvd2Vicm9vdC9qcy9saWIvbW9zYWljby9zcmMvanMvY29udmVydGVyL2VkaXRvci5qcyIsIi92YXIvd3d3L3MvYXBwL3dlYnJvb3QvanMvbGliL21vc2FpY28vc3JjL2pzL2NvbnZlcnRlci9tYWluLmpzIiwiL3Zhci93d3cvcy9hcHAvd2Vicm9vdC9qcy9saWIvbW9zYWljby9zcmMvanMvY29udmVydGVyL21vZGVsLmpzIiwiL3Zhci93d3cvcy9hcHAvd2Vicm9vdC9qcy9saWIvbW9zYWljby9zcmMvanMvY29udmVydGVyL3BhcnNlci5qcyIsIi92YXIvd3d3L3MvYXBwL3dlYnJvb3QvanMvbGliL21vc2FpY28vc3JjL2pzL2NvbnZlcnRlci9zdHlsZXNoZWV0LmpzIiwiL3Zhci93d3cvcy9hcHAvd2Vicm9vdC9qcy9saWIvbW9zYWljby9zcmMvanMvY29udmVydGVyL3V0aWxzLmpzIiwiL3Zhci93d3cvcy9hcHAvd2Vicm9vdC9qcy9saWIvbW9zYWljby9zcmMvanMvY29udmVydGVyL3dyYXBwZXIuanMiLCIvdmFyL3d3dy9zL2FwcC93ZWJyb290L2pzL2xpYi9tb3NhaWNvL3NyYy9qcy9leHQvY29sb3IuanMiLCIvdmFyL3d3dy9zL2FwcC93ZWJyb290L2pzL2xpYi9tb3NhaWNvL3NyYy9qcy9leHQvbG9jYWxzdG9yYWdlLmpzIiwiL3Zhci93d3cvcy9hcHAvd2Vicm9vdC9qcy9saWIvbW9zYWljby9zcmMvanMva28tYmluZGluZ3MuanMiLCIvdmFyL3d3dy9zL2FwcC93ZWJyb290L2pzL2xpYi9tb3NhaWNvL3NyYy9qcy90ZW1wbGF0ZS1sb2FkZXIuanMiLCIvdmFyL3d3dy9zL2FwcC93ZWJyb290L2pzL2xpYi9tb3NhaWNvL3NyYy9qcy90aW1lZC1jYWxsLmpzIiwiL3Zhci93d3cvcy9hcHAvd2Vicm9vdC9qcy9saWIvbW9zYWljby9zcmMvanMvdW5kb21hbmFnZXIvdW5kb21haW4uanMiLCIvdmFyL3d3dy9zL2FwcC93ZWJyb290L2pzL2xpYi9tb3NhaWNvL3NyYy9qcy91bmRvbWFuYWdlci91bmRvc2VyaWFsaXplci5qcyIsIi92YXIvd3d3L3MvYXBwL3dlYnJvb3QvanMvbGliL21vc2FpY28vc3JjL2pzL3ZpZXdtb2RlbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUN3Q0EsUUFBUyxRQUVULFFBQVMsUUFDTCxRQUFRLElBQUksTUFBTSxRQUFTLFdBRy9CLFFBQVMsUUFDTCxRQUFRLElBQUksTUFBTSxRQUFTLFdBRy9CLFFBQVMsU0FDTCxRQUFRLEtBQUssTUFBTSxRQUFTLFdBR2hDLFFBQVMsTUFBSyxHQUNWLE1BQU0sR0FBUyxLQUFLLE1BR3hCLFFBQVMsU0FBUSxHQUNiLEdBQUksR0FBTyxNQUFNLEVBQ2pCLEtBQUssRUFDRCxLQUFNLElBQUksT0FBTSxrQkFBb0IsRUFHeEMsSUFBSSxHQUFXLEtBQUssTUFBUSxDQUM1QixTQUFRLElBQUksRUFBUSxLQUFPLEVBQVcsTUFHMUMsUUFBUyxTQUNMLEdBQUksR0FBTSxHQUFJLE1BQ2QsR0FBSSxLQUFPLFFBQ1gsRUFBSSxRQUFVLEtBQUssT0FBTyxNQUFNLEtBQU0sV0FDdEMsUUFBUSxNQUFNLEVBQUksT0FHdEIsUUFBUyxLQUFJLEdBQ1QsUUFBUSxJQUFJLEtBQUssUUFBUSxHQUFVLE1BR3ZDLFFBQVMsUUFBTyxHQUNaLElBQUssRUFBWSxDQUNiLEdBQUksR0FBTSxNQUFNLEtBQUssVUFBVyxFQUNoQyxRQUFPLElBQUcsRUFBTyxLQUFLLE9BQU8sTUFBTSxLQUFNLEtBakZqRCxHQUFJLE1BQU8sUUFBUSxRQUNmLE9BQVMsUUFBUSxVQUVqQixNQUFRLE1BQU0sVUFBVSxNQUN4QixRQUNBLFFBR0EsU0FEa0IsbUJBQVgsU0FBMEIsT0FBTyxRQUM5QixPQUFPLFFBQ1EsbUJBQVgsU0FBMEIsT0FBTyxRQUNyQyxPQUFPLFVBaUJyQixLQUFLLEdBWkQsYUFDQyxJQUFLLFFBQ0gsS0FBTSxTQUNOLEtBQU0sU0FDTixNQUFPLFVBQ1AsS0FBTSxTQUNOLFFBQVMsWUFDVCxNQUFPLFVBQ1AsSUFBSyxRQUNMLE9BQVEsV0FHTixFQUFJLEVBQUcsRUFBSSxVQUFVLE9BQVEsSUFBSyxDQUN2QyxHQUFJLE9BQVEsVUFBVSxHQUNsQixFQUFJLE1BQU0sR0FDVixLQUFPLE1BQU0sRUFFWixTQUFRLFFBQ1QsUUFBUSxNQUFRLEdBSXhCLE9BQU8sUUFBVTs7Ozs7Q0NqQ2hCLFNBQVMsRUFBRSxHQUFHLEdBQUksR0FBRSxFQUFFLEVBQUUsT0FBTyxVQUFVLFVBQVUsRUFBRSxFQUFFLFFBQVEsU0FBUyxFQUFFLEVBQUUsRUFBRSxNQUFNLEdBQUcsRUFBRSxHQUFFLEVBQUcsVUFBVSxLQUFLLEVBQUUsaUJBQWlCLFNBQVMsS0FBSyxFQUFFLGVBQWUsS0FBSyxHQUFHLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFVBQVUsR0FBRyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFVBQVUsR0FBRyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxVQUFVLElBQUksU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsV0FBVyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFdBQVcsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFdBQVcsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsV0FBVyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFdBQVcsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFdBQVcsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsV0FBVyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsV0FBVyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFdBQVcsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsV0FBVyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsV0FBVyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFdBQVcsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsV0FBVyxFQUFFLFlBQVksRUFBRSxTQUFTLEdBQUcsR0FBSSxHQUFFLEVBQUUsU0FBUyxHQUFJLE9BQU8sSUFBRyxFQUFFLFNBQVMsRUFBRSxJQUFJLEdBQUcsR0FBRyxFQUFFLFNBQVMsR0FBRyxNQUFPLEdBQUUsT0FBTyxLQUFLLEVBQUUsU0FBUyxHQUFHLEdBQUksR0FBRSxFQUFFLEVBQUcsT0FBTyxHQUFFLEVBQUUsR0FBRyxFQUFFLFNBQVMsR0FBRyxHQUFHLEVBQUUsT0FBTyxHQUFHLENBQUMsR0FBSSxHQUFFLEVBQUUsRUFBRSxRQUFRLEtBQUssRUFBRSxFQUFFLFFBQVEsS0FBSyxFQUFFLEVBQUUsVUFBVSxFQUFFLEdBQUcsTUFBTSxJQUFLLFFBQU8sSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsS0FBSyxLQUFLLElBQUksTUFBTyxHQUFHLEdBQUUsT0FBTyxvQkFBb0IsUUFBUSxRQUFRLFNBQVMsTUFBTSxLQUFLLE9BQU8sT0FBTyxZQUFXLEVBQUcsa0JBQWlCLEVBQUcsa0JBQWlCLEVBQUcsU0FBUSxFQUFHLGVBQWUsUUFBUSxRQUFRLGdHQUFnRyxTQUFRLEVBQUcsUUFBUSxXQUFXLEdBQUksR0FBRSxJQUFLLFFBQU8sS0FBSyxZQUFZLFNBQVMsS0FBSyxRQUFRLGVBQWUsRUFBRSxFQUFFLEtBQUssSUFBSSxTQUFTLElBQUksS0FBSyxVQUFTLEVBQUcsS0FBSyxRQUFRLE9BQU8sS0FBSyxRQUFRLFdBQVcsUUFBUSxLQUFLLFFBQVEsT0FBTyxLQUFLLFFBQVEsSUFBSSxHQUFHLFNBQVMsSUFBSSxRQUFRLEdBQUksR0FBRSxLQUFLLFFBQVEsTUFBTSxFQUFFLEtBQUssUUFBUSxHQUFHLFVBQVUsS0FBSyxRQUFRLE9BQU8sR0FBRyxnQkFBZ0IsZ0JBQWdCLEVBQUUsTUFBTSxJQUFJLEtBQUssUUFBUSxXQUFXLHFCQUFxQixJQUFJLEVBQUUsRUFBRyxJ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RyxHQUFHLEtBQUssWUFBWSxLQUFLLFNBQVMsS0FBSyxhQUFhLFFBQVEsRUFBRSxHQUFHLEtBQUssWUFBWSxFQUFFLEVBQUUsRUFBRSxLQUFLLGVBQWUsS0FBSyxFQUFFLEVBQUUsRUFBRSxHQUFHLEtBQUssWUFBWSxDQUFFLE1BQUssWUFBWSxDQUFFLElBQUksR0FBRSxLQUFLLFNBQVMsS0FBSyxhQUFhLE9BQU8sS0FBSyxHQUFHLE1BQU0sV0FBVyxHQUFHLEdBQUcsS0FBSyxFQUFHLEdBQUUsR0FBRyxFQUFFLE9BQU8sU0FBUyxxQkFBcUIsV0FBVyxJQUFJLEdBQUksR0FBRSxLQUFLLFFBQVEsRUFBRSxFQUFFLE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLFdBQVcsRUFBRSxJQUFJLFlBQVksQ0FBQyxHQUFJLEdBQUUsS0FBSyxTQUFTLFNBQVMsSUFBSSxLQUFLLFNBQVMsU0FBUyxFQUFFLEVBQUUsU0FBUyxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssU0FBUyxTQUFTLElBQUksS0FBSyxTQUFTLFNBQVMsS0FBSyxRQUFRLGNBQWMsRUFBRSxFQUFFLFNBQVMsSUFBSSxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUUsR0FBRSxLQUFLLFNBQVMsS0FBSyxPQUFPLEtBQUssUUFBUSxjQUFjLE9BQU8sS0FBSyxTQUFTLEtBQUssT0FBTyxRQUFTLE9BQU0sR0FBRyxRQUFRLEVBQUUsR0FBRyxRQUFRLEtBQU0sR0FBRSxFQUFFLGVBQWUsTUFBTSxZQUFZLFdBQVcsR0FBRyxLQUFLLFdBQVcsS0FBSyxTQUFRLEVBQUcsRUFBRSxnQkFBZ0IsSUFBSSxJQUFJLEtBQUssS0FBSyxZQUFZLGVBQWUsT0FBTyxLQUFLLFVBQVUsQ0FBQyxLQUFLLFNBQVMsS0FBSyxRQUFRLE9BQU8sTUFBTSxLQUFLLGdCQUFnQixPQUFPLEdBQUcsUUFBUSxTQUFTLEdBQUcsTUFBTyxHQUFFLG1CQUFrQixJQUFLLEtBQUssYUFBYyxJQUFJLEdBQUUsSUFBSyxNQUFLLFdBQVcsS0FBSyx1QkFBdUIsRUFBRSxTQUFTLE1BQU0sR0FB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QVMsV0FBVyxHQUFHLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxNQUFNLGFBQWEsRUFBRSxTQUFTLEdBQUcsSUFBSSxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsV0FBVyxRQUFRLEVBQUUsU0FBUyxFQUFFLEdBQUcsR0FBSSxHQUFFLEtBQUssRUFBRSxFQUFFLFFBQVMsT0FBTyxHQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsR0FBRyxJQUFJLEVBQUUsTUFBTSxjQUFjLFdBQVcsY0FBYyxLQUFLLGVBQWUsbUJBQW1CLGlCQUFpQixrQkFBa0IsU0FBUyxTQUFTLEdBQUcsRUFBRSxlQUFlLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLGdCQUFnQixTQUFTLGVBQWUsS0FBSyxFQUFFLEdBQUcsRUFBRSxnQkFBZ0IsU0FBUyxNQUFNLFlBQVksSUFBSSxFQUFFLGFBQWEsRUFBRSxFQUFFLFlBQVksRUFBRSxZQUFZLFNBQVMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxZQUFZLEdBQUcsR0FBRyxFQUFFLFNBQVMsRUFBRSxHQUFHLEdBQUksR0FBRSxFQUFFLEVBQUcsSUFBRyxFQUFFLElBQUksR0FBSSxHQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxHQUFHLFdBQVcsR0FBSSxPQUFPLElBQUcsRUFBRSxTQUFTLEVBQUUsR0FBRyxHQUFJLEdBQUUsQ0FBRSxJQUFHLEVBQUUsU0FBUyxlQUFlLEdBQUcsSUFBSSxFQUFFLEdBQUksR0FBRSxnQkFBZ0IsV0FBVyxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsR0FBRyxXQUFXLEtBQUssV0FBVyxNQUFNLElBQUksS0FBSyxVQUFVLEVBQUUsWUFBWSxRQUFTLEdBQUUsZ0JBQWdCLFVBQVUsS0FBSyxTQUFTLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxHQUFJLEdBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxXQUFXLElBQUssR0FBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLFFBQU8sRUFBRyxFQUFFLEVBQUUsZ0JBQWdCLFVBQVUsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sT0FBTyxFQUFFLFFBQVEsRUFBRSxlQUFnQixHQUFFLFNBQVMsRUFBRSxNQUFNLE9BQU8sRUFBRSxHQUFHLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBRSxZQUFZLGtCQUFtQixHQUFFLFdBQVcsRUFBRSxVQUFVLEtBQUssV0FBVyxHQUFJLEdBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxrQkFBbUIsR0FBRSxFQUFFLEtBQUssS0FBSyxFQUFFLFNBQVMsQ0FBRSxHQUFFLE1BQU0sc0JBQXNCLEVBQUUsRUFBRSxhQUFhLElBQUkseUJBQXlCLEdBQUcsTUFBTSxFQUFFLE1BQU0sc0JBQXNCLEVBQUUsRUFBRSxhQUFhLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixTQUFTLEtBQUssRUFBRSxXQUFXLE1BQU8sSUFBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsUUFBUSxNQUFNLEVBQUUsRUFBRSxRQUFRLE1BQU8sSUFBSSxHQUFFLFdBQVcsV0FBVyxHQUFJLEVBQUUsR0FBRSxTQUFTLEVBQUUsTUFBTSxPQUFPLEVBQUUsU0FBUyxNQUFNLFNBQVMsRUFBRSxHQUFHLEdBQUksR0FBRSxFQUFFLEtBQUssRUFBRyxHQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sYUFBYSxFQUFFLEtBQUssU0FBUyxXQUFXLElBQUksRUFBRSxLQUFLLEtBQUssZUFBZSxTQUFTLEdBQUcsRUFBRSxNQUFNLEtBQUssWUFBWSxRQUFRLFNBQVMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEtBQUssR0FBRyxHQUFHLElBQUksRUFBRSxRQUFRLEVBQUUsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEVBQUUsUUFBUSxLQUFLLEtBQUssRUFBRSxFQUFFLElBQUksS0FBSyxPQUFPLFNBQVMsRUFBRSxHQUFHLEdBQUksR0FBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxLQUFLLEdBQUcsRUFBRSxFQUFFLEtBQUssU0FBUyxHQUFHLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBRSxJQUFHLEVBQUUsS0FBSyxHQUFHLE9BQU8sSUFBSSxHQUFHLEVBQUUsU0FBUyxLQUFLLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxXQUFXLEdBQUcsRUFBRSxFQUFFLE1BQU0sYUFBYSxFQUFFLEtBQUssU0FBUyxXQUFXLEdBQUcsRUFBRSxtQkFBbUIsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLGFBQWEsR0FBRyxLQUFLLEVBQUUsYUFBYSxFQUFFLGlCQUFpQixHQUFHLEVBQUUsUUFBUSxFQUFFLFdBQVcsWUFBWSxFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsWUFBVyxHQUFJLEVBQUUsWUFBWSxFQUFFLFdBQVcsS0FBSyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFFBQVEsTUFBTSxTQUFTLFVBQVUsRUFBRSxHQUFHLFNBQVMsR0FBRyxFQUFFLFdBQVcsTUFBTyxJQUFHLElBQUksSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsa0NBQWtDLEVBQUUsb0NBQW9DLEVBQUUsT0FBTyxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsa0NBQWtDLEVBQUUsbUNBQW1DLEVBQUUsV0FBVyxFQUFFLFVBQVUsS0FBSyxLQUFLLEVBQUUsRUFBRSxHQUFHLEdBQUcsRUFBRSxNQUFNLEtBQUssWUFBWSxZQUFZLEVBQUUsYUFBYSxJQUFJLEVBQUUsY0FBYSxLQUFNLFNBQVMsRUFBRSxXQUFXLEVBQUUsVUFBVSxLQUFLLFdBQVcsRUFBRSxTQUFTLEVBQUUsRUFBRSxX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QUUsa0JBQW1CLEdBQUUsR0FBSSxJQUFHLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLE1BQU8sR0FBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsR0FBRSxJQUFJLENBQUcsSUFBRyxFQUFFLHFCQUFvQixFQUFHLE1BQU8sR0FBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsR0FBRSxPQUFRLFFBQVMsR0FBRSxHQUFHLEdBQUksR0FBRSxFQUFFLEVBQUcsS0FBSSxFQUFFLEtBQUsseUJBQXlCLEVBQUUsdUNBQXVDLEVBQUUsWUFBWSxHQUFJLElBQUcsRUFBRSxPQUFPLElBQUksR0FBSSxHQUFFLEVBQUUsT0FBTyxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEdBQUcsV0FBVyxHQUFHLEVBQUUsT0FBTyxHQUFHLFNBQVUsSUFBRyxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQUUsVUFBVSxHQUFHLElBQUksR0FBSSxHQUFFLEVBQUUsYUFBYSxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxhQUFhLEdBQUcsV0FBVyxHQUFHLEVBQUUsYUFBYSxHQUFHLFNBQVUsSUFBRyxFQUFFLFlBQVksSUFBSSxHQUFJLEdBQUUsRUFBRSxZQUFZLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLFlBQVksR0FBRyxXQUFXLEdBQUcsRUFBRSxZQUFZLEdBQUcsVUFBVSxRQUFTLEdBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsVUFBVSxTQUFTLEdBQUcsR0FBRyxNQUFNLGFBQWEsRUFBRSxTQUFTLEdBQUcsR0FBSSxHQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFHLFVBQVMsR0FBRyxFQUFFLEdBQUcsRUFBRSxPQUFPLFdBQVcsV0FBVyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLFlBQVksRUFBRSxTQUFTLE1BQU0sT0FBTyxlQUFlLFNBQVMsR0FBRyxFQUFFLFVBQVUsV0FBVyxHQUFHLEVBQUUsYUFBWSxFQUFH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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdldBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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LEdBQ2pELEVBQVUsZUFFWCxFQUFXLFVBRVAsRUF0a0JULEdBQUksR0FBSSxRQUFRLFVBQ1osR0FBSyxRQUFRLFlBQ2IsUUFBVSxRQUFRLFdBQ2xCLHVCQUF5QixRQUFRLG1CQUFtQixVQUVwRCxPQUFTLFFBQVEsU0FDckIsUUFBTyxTQUNMLGFBQWUsRUFDZixPQUFTLEVBQ1QsY0FBaUIsMEJBQ2pCLE9BQVUsV0FDVixRQUFXLEtBQ1gsYUFBZ0IsTUFDaEIsYUFBZ0IsT0FDaEIsUUFBVyxPQUNYLGdCQUFtQixPQUNuQixXQUFjLFFBQ2QsV0FBYyxTQUNkLFdBQWMsU0FDZCxXQUFjLFdBdWpCaEIsT0FBTyxRQUFVIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8qZ2xvYmFsIHdpbmRvdywgZ2xvYmFsKi9cbnZhciB1dGlsID0gcmVxdWlyZShcInV0aWxcIilcbnZhciBhc3NlcnQgPSByZXF1aXJlKFwiYXNzZXJ0XCIpXG5cbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZVxudmFyIGNvbnNvbGVcbnZhciB0aW1lcyA9IHt9XG5cbmlmICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jb25zb2xlKSB7XG4gICAgY29uc29sZSA9IGdsb2JhbC5jb25zb2xlXG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmNvbnNvbGUpIHtcbiAgICBjb25zb2xlID0gd2luZG93LmNvbnNvbGVcbn0gZWxzZSB7XG4gICAgY29uc29sZSA9IHt9XG59XG5cbnZhciBmdW5jdGlvbnMgPSBbXG4gICAgW2xvZywgXCJsb2dcIl1cbiAgICAsIFtpbmZvLCBcImluZm9cIl1cbiAgICAsIFt3YXJuLCBcIndhcm5cIl1cbiAgICAsIFtlcnJvciwgXCJlcnJvclwiXVxuICAgICwgW3RpbWUsIFwidGltZVwiXVxuICAgICwgW3RpbWVFbmQsIFwidGltZUVuZFwiXVxuICAgICwgW3RyYWNlLCBcInRyYWNlXCJdXG4gICAgLCBbZGlyLCBcImRpclwiXVxuICAgICwgW2Fzc2VydCwgXCJhc3NlcnRcIl1cbl1cblxuZm9yICh2YXIgaSA9IDA7IGkgPCBmdW5jdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdHVwbGUgPSBmdW5jdGlvbnNbaV1cbiAgICB2YXIgZiA9IHR1cGxlWzBdXG4gICAgdmFyIG5hbWUgPSB0dXBsZVsxXVxuXG4gICAgaWYgKCFjb25zb2xlW25hbWVdKSB7XG4gICAgICAgIGNvbnNvbGVbbmFtZV0gPSBmXG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnNvbGVcblxuZnVuY3Rpb24gbG9nKCkge31cblxuZnVuY3Rpb24gaW5mbygpIHtcbiAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpXG59XG5cbmZ1bmN0aW9uIHdhcm4oKSB7XG4gICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKVxufVxuXG5mdW5jdGlvbiBlcnJvcigpIHtcbiAgICBjb25zb2xlLndhcm4uYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKVxufVxuXG5mdW5jdGlvbiB0aW1lKGxhYmVsKSB7XG4gICAgdGltZXNbbGFiZWxdID0gRGF0ZS5ub3coKVxufVxuXG5mdW5jdGlvbiB0aW1lRW5kKGxhYmVsKSB7XG4gICAgdmFyIHRpbWUgPSB0aW1lc1tsYWJlbF1cbiAgICBpZiAoIXRpbWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gc3VjaCBsYWJlbDogXCIgKyBsYWJlbClcbiAgICB9XG5cbiAgICB2YXIgZHVyYXRpb24gPSBEYXRlLm5vdygpIC0gdGltZVxuICAgIGNvbnNvbGUubG9nKGxhYmVsICsgXCI6IFwiICsgZHVyYXRpb24gKyBcIm1zXCIpXG59XG5cbmZ1bmN0aW9uIHRyYWNlKCkge1xuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoKVxuICAgIGVyci5uYW1lID0gXCJUcmFjZVwiXG4gICAgZXJyLm1lc3NhZ2UgPSB1dGlsLmZvcm1hdC5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gICAgY29uc29sZS5lcnJvcihlcnIuc3RhY2spXG59XG5cbmZ1bmN0aW9uIGRpcihvYmplY3QpIHtcbiAgICBjb25zb2xlLmxvZyh1dGlsLmluc3BlY3Qob2JqZWN0KSArIFwiXFxuXCIpXG59XG5cbmZ1bmN0aW9uIGFzc2VydChleHByZXNzaW9uKSB7XG4gICAgaWYgKCFleHByZXNzaW9uKSB7XG4gICAgICAgIHZhciBhcnIgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSlcbiAgICAgICAgYXNzZXJ0Lm9rKGZhbHNlLCB1dGlsLmZvcm1hdC5hcHBseShudWxsLCBhcnIpKVxuICAgIH1cbn1cbiIsIi8qXG4gICBldm9sLmNvbG9ycGlja2VyIDMuMi4yXG4gICAoYykgMjAxNSBPbGl2aWVyIEdpdWxpZXJpXG4gICBodHRwOi8vZXZvbHV0ZXVyLmdpdGh1Yi5pby9jb2xvcnBpY2tlci9cbiovXG4hZnVuY3Rpb24oYSxiKXt2YXIgYz0wLGQ9d2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQsZT1kLmluZGV4T2YoXCJNU0lFIFwiKT4wLGY9ZT9cIi1pZVwiOlwiXCIsZz1lPyExOi9tb3ppbGxhLy50ZXN0KGQudG9Mb3dlckNhc2UoKSkmJiEvd2Via2l0Ly50ZXN0KGQudG9Mb3dlckNhc2UoKSksaD1bXSxpPVtcImZmZmZmZlwiLFwiMDAwMDAwXCIsXCJlZWVjZTFcIixcIjFmNDk3ZFwiLFwiNGY4MWJkXCIsXCJjMDUwNGRcIixcIjliYmI1OVwiLFwiODA2NGEyXCIsXCI0YmFjYzZcIixcImY3OTY0NlwiXSxqPVtcImYyZjJmMlwiLFwiN2Y3ZjdmXCIsXCJkZGQ5YzNcIixcImM2ZDlmMFwiLFwiZGJlNWYxXCIsXCJmMmRjZGJcIixcImViZjFkZFwiLFwiZTVlMGVjXCIsXCJkYmVlZjNcIixcImZkZWFkYVwiLFwiZDhkOGQ4XCIsXCI1OTU5NTlcIixcImM0YmQ5N1wiLFwiOGRiM2UyXCIsXCJiOGNjZTRcIixcImU1YjliN1wiLFwiZDdlM2JjXCIsXCJjY2MxZDlcIixcImI3ZGRlOFwiLFwiZmJkNWI1XCIsXCJiZmJmYmZcIixcIjNmM2YzZlwiLFwiOTM4OTUzXCIsXCI1NDhkZDRcIixcIjk1YjNkN1wiLFwiZDk5Njk0XCIsXCJjM2Q2OWJcIixcImIyYTJjN1wiLFwiOTJjZGRjXCIsXCJmYWMwOGZcIixcImE1YTVhNVwiLFwiMjYyNjI2XCIsXCI0OTQ0MjlcIixcIjE3MzY1ZFwiLFwiMzY2MDkyXCIsXCI5NTM3MzRcIixcIjc2OTIzY1wiLFwiNWY0OTdhXCIsXCIzMTg1OWJcIixcImUzNmMwOVwiLFwiN2Y3ZjdmXCIsXCIwYzBjMGNcIixcIjFkMWIxMFwiLFwiMGYyNDNlXCIsXCIyNDQwNjFcIixcIjYzMjQyM1wiLFwiNGY2MTI4XCIsXCIzZjMxNTFcIixcIjIwNTg2N1wiLFwiOTc0ODA2XCJdLGs9W1wiYzAwMDAwXCIsXCJmZjAwMDBcIixcImZmYzAwMFwiLFwiZmZmZjAwXCIsXCI5MmQwNTBcIixcIjAwYjA1MFwiLFwiMDBiMGYwXCIsXCIwMDcwYzBcIixcIjAwMjA2MFwiLFwiNzAzMGEwXCJdLGw9W1tcIjAwMzM2NlwiLFwiMzM2Njk5XCIsXCIzMzY2Y2NcIixcIjAwMzM5OVwiLFwiMDAwMDk5XCIsXCIwMDAwY2NcIixcIjAwMDA2NlwiXSxbXCIwMDY2NjZcIixcIjAwNjY5OVwiLFwiMDA5OWNjXCIsXCIwMDY2Y2NcIixcIjAwMzNjY1wiLFwiMDAwMGZmXCIsXCIzMzMzZmZcIixcIjMzMzM5OVwiXSxbXCI2Njk5OTlcIixcIjAwOTk5OVwiLFwiMzNjY2NjXCIsXCIwMGNjZmZcIixcIjAwOTlmZlwiLFwiMDA2NmZmXCIsXCIzMzY2ZmZcIixcIjMzMzNjY1wiLFwiNjY2Njk5XCJdLFtcIjMzOTk2NlwiLFwiMDBjYzk5XCIsXCIwMGZmY2NcIixcIjAwZmZmZlwiLFwiMzNjY2ZmXCIsXCIzMzk5ZmZcIixcIjY2OTlmZlwiLFwiNjY2NmZmXCIsXCI2NjAwZmZcIixcIjY2MDBjY1wiXSxbXCIzMzk5MzNcIixcIjAwY2M2NlwiLFwiMDBmZjk5XCIsXCI2NmZmY2NcIixcIjY2ZmZmZlwiLFwiNjZjY2ZmXCIsXCI5OWNjZmZcIixcIjk5OTlmZlwiLFwiOTk2NmZmXCIsXCI5OTMzZmZcIixcIjk5MDBmZlwiXSxbXCIwMDY2MDBcIixcIjAwY2MwMFwiLFwiMDBmZjAwXCIsXCI2NmZmOTlcIixcIjk5ZmZjY1wiLFwiY2NmZmZmXCIsXCJjY2NjZmZcIixcImNjOTlmZlwiLFwiY2M2NmZmXCIsXCJjYzMzZmZcIixcImNjMDBmZlwiLFwiOTkwMGNjXCJdLFtcIjAwMzMwMFwiLFwiMDA5OTMzXCIsXCIzM2NjMzNcIixcIjY2ZmY2NlwiLFwiOTlmZjk5XCIsXCJjY2ZmY2NcIixcImZmZmZmZlwiLFwiZmZjY2ZmXCIsXCJmZjk5ZmZcIixcImZmNjZmZlwiLFwiZmYwMGZmXCIsXCJjYzAwY2NcIixcIjY2MDA2NlwiXSxbXCIzMzMzMDBcIixcIjAwOTkwMFwiLFwiNjZmZjMzXCIsXCI5OWZmNjZcIixcImNjZmY5OVwiLFwiZmZmZmNjXCIsXCJmZmNjY2NcIixcImZmOTljY1wiLFwiZmY2NmNjXCIsXCJmZjMzY2NcIixcImNjMDA5OVwiLFwiOTkzMzk5XCJdLFtcIjMzNjYwMFwiLFwiNjY5OTAwXCIsXCI5OWZmMzNcIixcImNjZmY2NlwiLFwiZmZmZjk5XCIsXCJmZmNjOTlcIixcImZmOTk5OVwiLFwiZmY2Njk5XCIsXCJmZjMzOTlcIixcImNjMzM5OVwiLFwiOTkwMDk5XCJdLFtcIjY2NjYzM1wiLFwiOTljYzAwXCIsXCJjY2ZmMzNcIixcImZmZmY2NlwiLFwiZmZjYzY2XCIsXCJmZjk5NjZcIixcImZmNjY2NlwiLFwiZmYwMDY2XCIsXCJkNjAwOTRcIixcIjk5MzM2NlwiXSxbXCJhNTg4MDBcIixcImNjY2MwMFwiLFwiZmZmZjAwXCIsXCJmZmNjMDBcIixcImZmOTkzM1wiLFwiZmY2NjAwXCIsXCJmZjAwMzNcIixcImNjMDA2NlwiLFwiNjYwMDMzXCJdLFtcIjk5NjYzM1wiLFwiY2M5OTAwXCIsXCJmZjk5MDBcIixcImNjNjYwMFwiLFwiZmYzMzAwXCIsXCJmZjAwMDBcIixcImNjMDAwMFwiLFwiOTkwMDMzXCJdLFtcIjY2MzMwMFwiLFwiOTk2NjAwXCIsXCJjYzMzMDBcIixcIjk5MzMwMFwiLFwiOTkwMDAwXCIsXCI4MDAwMDBcIixcIjk5MzMzM1wiXV0sbT1cIiMwMDAwZmZmZlwiLG49ZnVuY3Rpb24oYSl7dmFyIGI9YS50b1N0cmluZygxNik7cmV0dXJuIDE9PWIubGVuZ3RoJiYoYj1cIjBcIitiKSxifSxvPWZ1bmN0aW9uKGEpe3JldHVybiBuKE51bWJlcihhKSl9LHA9ZnVuY3Rpb24oYSl7dmFyIGI9bihhKTtyZXR1cm4gYitiK2J9LHE9ZnVuY3Rpb24oYSl7aWYoYS5sZW5ndGg+MTApe3ZhciBiPTErYS5pbmRleE9mKFwiKFwiKSxjPWEuaW5kZXhPZihcIilcIiksZD1hLnN1YnN0cmluZyhiLGMpLnNwbGl0KFwiLFwiKTtyZXR1cm5bXCIjXCIsbyhkWzBdKSxvKGRbMV0pLG8oZFsyXSldLmpvaW4oXCJcIil9cmV0dXJuIGF9O2Eud2lkZ2V0KFwiZXZvbC5jb2xvcnBpY2tlclwiLHt2ZXJzaW9uOlwiMy4yLjFcIixvcHRpb25zOntjb2xvcjpudWxsLHNob3dPbjpcImJvdGhcIixoaWRlQnV0dG9uOiExLGRpc3BsYXlJbmRpY2F0b3I6ITAsdHJhbnNwYXJlbnRDb2xvcjohMSxoaXN0b3J5OiEwLGRlZmF1bHRQYWxldHRlOlwidGhlbWVcIixzdHJpbmdzOlwiVGhlbWUgQ29sb3JzLFN0YW5kYXJkIENvbG9ycyxXZWIgQ29sb3JzLFRoZW1lIENvbG9ycyxCYWNrIHRvIFBhbGV0dGUsSGlzdG9yeSxObyBoaXN0b3J5IHlldC5cIn0sX2FjdGl2ZTohMSxfY3JlYXRlOmZ1bmN0aW9uKCl7dmFyIGI9dGhpcztzd2l0Y2godGhpcy5fcGFsZXR0ZUlkeD1cInRoZW1lXCI9PXRoaXMub3B0aW9ucy5kZWZhdWx0UGFsZXR0ZT8xOjIsdGhpcy5faWQ9XCJldm8tY3BcIitjKyssdGhpcy5fZW5hYmxlZD0hMCx0aGlzLm9wdGlvbnMuc2hvd09uPXRoaXMub3B0aW9ucy5oaWRlQnV0dG9uP1wiZm9jdXNcIjp0aGlzLm9wdGlvbnMuc2hvd09uLHRoaXMuZWxlbWVudC5nZXQoMCkudGFnTmFtZSl7Y2FzZVwiSU5QVVRcIjp2YXIgZD10aGlzLm9wdGlvbnMuY29sb3IsaD10aGlzLmVsZW1lbnQsaT0oXCJmb2N1c1wiPT09dGhpcy5vcHRpb25zLnNob3dPbj9cIlwiOlwiZXZvLXBvaW50ZXIgXCIpK1wiZXZvLWNvbG9yaW5kXCIrKGc/XCItZmZcIjpmKSsodGhpcy5vcHRpb25zLmhpZGVCdXR0b24/XCIgZXZvLWhpZGRlbi1idXR0b25cIjpcIlwiKSxqPVwiXCI7aWYodGhpcy5faXNQb3B1cD0hMCx0aGlzLl9wYWxldHRlPW51bGwsbnVsbCE9PWQpaC52YWwoZCk7ZWxzZXt2YXIgaz1oLnZhbCgpO1wiXCIhPT1rJiYoZD10aGlzLm9wdGlvbnMuY29sb3I9ayl9ZD09PW0/aSs9XCIgZXZvLXRyYW5zcGFyZW50XCI6aj1udWxsIT09ZD9cImJhY2tncm91bmQtY29sb3I6XCIrZDpcIlwiLGguYWRkQ2xhc3MoXCJjb2xvclBpY2tlciBcIit0aGlzLl9pZCkud3JhcCgnPGRpdiBzdHlsZT1cIndpZHRoOicrKHRoaXMub3B0aW9ucy5oaWRlQnV0dG9uP3RoaXMuZWxlbWVudC53aWR0aCgpOnRoaXMuZWxlbWVudC53aWR0aCgpKzMyKStcInB4O1wiKyhlP1wibWFyZ2luLWJvdHRvbTotMjFweDtcIjpcIlwiKSsoZz9cInBhZGRpbmc6MXB4IDA7XCI6XCJcIikrJ1wiPjwvZGl2PicpLmFmdGVyKCc8ZGl2IGNsYXNzPVwiJytpKydcIiBzdHlsZT1cIicraisnXCI+PC9kaXY+Jykub24oXCJrZXl1cCBvbnBhc3RlXCIsZnVuY3Rpb24oYyl7dmFyIGQ9YSh0aGlzKS52YWwoKTtkIT1iLm9wdGlvbnMuY29sb3ImJmIuX3NldFZhbHVlKGQsITApfSk7dmFyIGw9dGhpcy5vcHRpb25zLnNob3dPbjsoXCJib3RoXCI9PT1sfHxcImZvY3VzXCI9PT1sKSYmaC5vbihcImZvY3VzXCIsZnVuY3Rpb24oKXtiLnNob3dQYWxldHRlKCl9KSwoXCJib3RoXCI9PT1sfHxcImJ1dHRvblwiPT09bCkmJmgubmV4dCgpLm9uKFwiY2xpY2tcIixmdW5jdGlvbihhKXtyZXR1cm4gYS5zdG9wUHJvcGFnYXRpb24oKSxiLnNob3dQYWxldHRlKCksITF9KTticmVhaztkZWZhdWx0OnRoaXMuX2lzUG9wdXA9ITEsdGhpcy5fcGFsZXR0ZT10aGlzLmVsZW1lbnQuaHRtbCh0aGlzLl9wYWxldHRlSFRNTCgpKS5hdHRyKFwiYXJpYS1oYXNwb3B1cFwiLFwidHJ1ZVwiKSx0aGlzLl9iaW5kQ29sb3JzKCl9aWYodGhpcy5vcHRpb25zLmhpc3RvcnkmJihkJiZ0aGlzLl9hZGQySGlzdG9yeShkKSx0aGlzLm9wdGlvbnMuaW5pdGlhbEhpc3RvcnkpKXt2YXIgbj10aGlzLm9wdGlvbnMuaW5pdGlhbEhpc3Rvcnk7Zm9yKHZhciBvIGluIG4pdGhpcy5fYWRkMkhpc3RvcnkobltvXSl9fSxfcGFsZXR0ZUhUTUw6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9wYWxldHRlSWR4PU1hdGguYWJzKHRoaXMuX3BhbGV0dGVJZHgpLGI9dGhpcy5vcHRpb25zLGM9Yi5zdHJpbmdzLnNwbGl0KFwiLFwiKSxkPSc8ZGl2IGNsYXNzPVwiZXZvLXBvcCcrZisnIHVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYWxsXCInKyh0aGlzLl9pc1BvcHVwPycgc3R5bGU9XCJwb3NpdGlvbjphYnNvbHV0ZVwiJzpcIlwiKStcIj48c3Bhbj5cIit0aGlzW1wiX3BhbGV0dGVIVE1MXCIrYV0oKSsnPC9zcGFuPjxkaXYgY2xhc3M9XCJldm8tbW9yZVwiPjxhIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIj4nK2NbMSthXStcIjwvYT5cIjtyZXR1cm4gYi5oaXN0b3J5JiYoZCs9JzxhIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIiBjbGFzcz1cImV2by1oaXN0XCI+JytjWzVdK1wiPC9hPlwiKSxkKz1cIjwvZGl2PlwiLGIuZGlzcGxheUluZGljYXRvciYmKGQrPXRoaXMuX2NvbG9ySW5kSFRNTCh0aGlzLm9wdGlvbnMuY29sb3IpK3RoaXMuX2NvbG9ySW5kSFRNTChcIlwiKSksZCs9XCI8L2Rpdj5cIn0sX2NvbG9ySW5kSFRNTDpmdW5jdGlvbihhKXt2YXIgYj1lP1wiZXZvLWNvbG9yYm94LWllIFwiOlwiXCIsYz1cIlwiO3JldHVybiBhP2E9PT1tP2IrPVwiZXZvLXRyYW5zcGFyZW50XCI6Yz1cImJhY2tncm91bmQtY29sb3I6XCIrYTpjPVwiZGlzcGxheTpub25lXCIsJzxkaXYgY2xhc3M9XCJldm8tY29sb3JcIiBzdHlsZT1cImZsb2F0OmxlZnRcIj48ZGl2IHN0eWxlPVwiJytjKydcIiBjbGFzcz1cIicrYisnXCI+PC9kaXY+PHNwYW4+JysoYT9hOlwiXCIpK1wiPC9zcGFuPjwvZGl2PlwifSxfcGFsZXR0ZUhUTUwxOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPXRoaXMub3B0aW9ucyxiPWEuc3RyaW5ncy5zcGxpdChcIixcIiksYz0nPHRkIHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjojJyxkPWU/J1wiPjxkaXYgc3R5bGU9XCJ3aWR0aDoycHg7XCI+PC9kaXY+PC90ZD4nOidcIj48c3Bhbi8+PC90ZD4nLGc9Jzx0cj48dGggY29sc3Bhbj1cIjEwXCIgY2xhc3M9XCJ1aS13aWRnZXQtY29udGVudFwiPicsaD0nPHRhYmxlIGNsYXNzPVwiZXZvLXBhbGV0dGUnK2YrJ1wiPicrZytiWzBdK1wiPC90aD48L3RyPjx0cj5cIixsPTA7MTA+bDtsKyspaCs9YytpW2xdK2Q7Zm9yKGgrPVwiPC90cj5cIixlfHwoaCs9Jzx0cj48dGggY29sc3Bhbj1cIjEwXCI+PC90aD48L3RyPicpLGgrPSc8dHIgY2xhc3M9XCJ0b3BcIj4nLGw9MDsxMD5sO2wrKyloKz1jK2pbbF0rZDtmb3IodmFyIG09MTs0Pm07bSsrKWZvcihoKz0nPC90cj48dHIgY2xhc3M9XCJpblwiPicsbD0wOzEwPmw7bCsrKWgrPWMralsxMCptK2xdK2Q7Zm9yKGgrPSc8L3RyPjx0ciBjbGFzcz1cImJvdHRvbVwiPicsbD00MDs1MD5sO2wrKyloKz1jK2pbbF0rZDtmb3IoaCs9XCI8L3RyPlwiK2csYS50cmFuc3BhcmVudENvbG9yJiYoaCs9JzxkaXYgY2xhc3M9XCJldm8tdHJhbnNwYXJlbnQgZXZvLXRyLWJveFwiPjwvZGl2PicpLGgrPWJbMV0rXCI8L3RoPjwvdHI+PHRyPlwiLGw9MDsxMD5sO2wrKyloKz1jK2tbbF0rZDtyZXR1cm4gaCs9XCI8L3RyPjwvdGFibGU+XCJ9LF9wYWxldHRlSFRNTDI6ZnVuY3Rpb24oKXtmb3IodmFyIGEsYixjPSc8dGQgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOiMnLGQ9ZT8nXCI+PGRpdiBzdHlsZT1cIndpZHRoOjVweDtcIj48L2Rpdj48L3RkPic6J1wiPjxzcGFuLz48L3RkPicsZz0nPHRhYmxlIGNsYXNzPVwiZXZvLXBhbGV0dGUyJytmKydcIj48dHI+JyxoPVwiPC90cj48L3RhYmxlPlwiLGk9JzxkaXYgY2xhc3M9XCJldm8tcGFsY2VudGVyXCI+JyxqPTAsaz1sLmxlbmd0aDtrPmo7aisrKXtpKz1nO3ZhciBtPWxbal07Zm9yKGE9MCxiPW0ubGVuZ3RoO2I+YTthKyspaSs9YyttW2FdK2Q7aSs9aH1pKz0nPGRpdiBjbGFzcz1cImV2by1zZXBcIi8+Jzt2YXIgbj1cIlwiO2ZvcihpKz1nLGE9MjU1O2E+MTA7YS09MTApaSs9YytwKGEpK2QsYS09MTAsbis9YytwKGEpK2Q7cmV0dXJuIGkrPWgrZytuK2grXCI8L2Rpdj5cIn0sX3N3aXRjaFBhbGV0dGU6ZnVuY3Rpb24oYil7aWYodGhpcy5fZW5hYmxlZCl7dmFyIGMsZCxlLGY9dGhpcy5vcHRpb25zLnN0cmluZ3Muc3BsaXQoXCIsXCIpO2lmKGEoYikuaGFzQ2xhc3MoXCJldm8taGlzdFwiKSl7dmFyIGc9Wyc8dGFibGUgY2xhc3M9XCJldm8tcGFsZXR0ZVwiPjx0cj48dGggY2xhc3M9XCJ1aS13aWRnZXQtY29udGVudFwiPicsZls1XSxcIjwvdGg+PC90cj48L3RyPjwvdGFibGU+XCIsJzxkaXYgY2xhc3M9XCJldm8tY0hpc3RcIj4nXTtpZigwPT09aC5sZW5ndGgpZy5wdXNoKFwiPHA+Jm5ic3A7XCIsZls2XSxcIjwvcD5cIik7ZWxzZSBmb3IodmFyIGk9aC5sZW5ndGgtMTtpPi0xO2ktLSk5PT09aFtpXS5sZW5ndGg/Zy5wdXNoKCc8ZGl2IGNsYXNzPVwiZXZvLXRyYW5zcGFyZW50XCI+PC9kaXY+Jyk6Zy5wdXNoKCc8ZGl2IHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjonLGhbaV0sJ1wiPjwvZGl2PicpO2cucHVzaChcIjwvZGl2PlwiKSxjPS10aGlzLl9wYWxldHRlSWR4LGQ9Zy5qb2luKFwiXCIpLGU9Zls0XX1lbHNlIHRoaXMuX3BhbGV0dGVJZHg8MD8oYz0tdGhpcy5fcGFsZXR0ZUlkeCx0aGlzLl9wYWxldHRlLmZpbmQoXCIuZXZvLWhpc3RcIikuc2hvdygpKTpjPTI9PXRoaXMuX3BhbGV0dGVJZHg/MToyLGQ9dGhpc1tcIl9wYWxldHRlSFRNTFwiK2NdKCksZT1mW2MrMV0sdGhpcy5fcGFsZXR0ZUlkeD1jO3RoaXMuX3BhbGV0dGVJZHg9Yzt2YXIgaj10aGlzLl9wYWxldHRlLmZpbmQoXCIuZXZvLW1vcmVcIikucHJldigpLmh0bWwoZCkuZW5kKCkuY2hpbGRyZW4oKS5lcSgwKS5odG1sKGUpOzA+YyYmai5uZXh0KCkuaGlkZSgpfX0sX2Rvd25PclVwUG9zaXRpb25pbmc6ZnVuY3Rpb24oKXtmb3IodmFyIGE9dGhpcy5lbGVtZW50LGI9MDtudWxsIT09YSYmMTAwPmI7KXtpZihcInZpc2libGVcIiE9YS5jc3MoXCJvdmVyZmxvd1wiKSl7dmFyIGM9dGhpcy5fcGFsZXR0ZS5vZmZzZXQoKS50b3ArdGhpcy5fcGFsZXR0ZS5oZWlnaHQoKSxkPWEub2Zmc2V0KCkudG9wK2EuaGVpZ2h0KCksZT10aGlzLl9wYWxldHRlLm9mZnNldCgpLnRvcC10aGlzLl9wYWxldHRlLmhlaWdodCgpLXRoaXMuZWxlbWVudC5vdXRlckhlaWdodCgpLGY9YS5vZmZzZXQoKS50b3AsZz1jPmQmJmU+ZjtnP3RoaXMuX3BhbGV0dGUuY3NzKHtib3R0b206dGhpcy5lbGVtZW50Lm91dGVySGVpZ2h0KCkrXCJweFwifSk6dGhpcy5fcGFsZXR0ZS5jc3Moe2JvdHRvbTpcImF1dG9cIn0pO2JyZWFrfWlmKFwiSFRNTFwiPT1hWzBdLnRhZ05hbWUpYnJlYWs7YT1hLm9mZnNldFBhcmVudCgpLGIrK319LHNob3dQYWxldHRlOmZ1bmN0aW9uKCl7aWYodGhpcy5fZW5hYmxlZCYmKHRoaXMuX2FjdGl2ZT0hMCxhKFwiLmNvbG9yUGlja2VyXCIpLm5vdChcIi5cIit0aGlzLl9pZCkuY29sb3JwaWNrZXIoXCJoaWRlUGFsZXR0ZVwiKSxudWxsPT09dGhpcy5fcGFsZXR0ZSkpe3RoaXMuX3BhbGV0dGU9dGhpcy5lbGVtZW50Lm5leHQoKS5hZnRlcih0aGlzLl9wYWxldHRlSFRNTCgpKS5uZXh0KCkub24oXCJjbGlja1wiLGZ1bmN0aW9uKGEpe3JldHVybiBhLnN0b3BQcm9wYWdhdGlvbigpLCExfSksdGhpcy5fYmluZENvbG9ycygpO3ZhciBiPXRoaXM7dGhpcy5faXNQb3B1cCYmKHRoaXMuX2Rvd25PclVwUG9zaXRpb25pbmcoKSxhKGRvY3VtZW50LmJvZHkpLm9uKFwiY2xpY2suXCIrYi5faWQsZnVuY3Rpb24oYSl7YS50YXJnZXQhPWIuZWxlbWVudC5nZXQoMCkmJmIuaGlkZVBhbGV0dGUoKX0pLm9uKFwia2V5dXAuXCIrYi5faWQsZnVuY3Rpb24oYSl7Mjc9PT1hLmtleUNvZGUmJmIuaGlkZVBhbGV0dGUoKX0pKX1yZXR1cm4gdGhpc30saGlkZVBhbGV0dGU6ZnVuY3Rpb24oKXtpZih0aGlzLl9pc1BvcHVwJiZ0aGlzLl9wYWxldHRlKXthKGRvY3VtZW50LmJvZHkpLm9mZihcImNsaWNrLlwiK3RoaXMuX2lkKTt2YXIgYj10aGlzO3RoaXMuX3BhbGV0dGUub2ZmKFwibW91c2VvdmVyIGNsaWNrXCIsXCJ0ZCwuZXZvLXRyYW5zcGFyZW50XCIpLmZhZGVPdXQoZnVuY3Rpb24oKXtiLl9wYWxldHRlLnJlbW92ZSgpLGIuX3BhbGV0dGU9Yi5fY1R4dD1udWxsfSkuZmluZChcIi5ldm8tbW9yZSBhXCIpLm9mZihcImNsaWNrXCIpfXJldHVybiB0aGlzfSxfYmluZENvbG9yczpmdW5jdGlvbigpe3ZhciBiPXRoaXMsYz10aGlzLm9wdGlvbnMsZD10aGlzLl9wYWxldHRlLmZpbmQoXCJkaXYuZXZvLWNvbG9yXCIpLGU9Yy5oaXN0b3J5P1widGQsLmV2by1jSGlzdD5kaXZcIjpcInRkXCI7Yy50cmFuc3BhcmVudENvbG9yJiYoZSs9XCIsLmV2by10cmFuc3BhcmVudFwiKSx0aGlzLl9jVHh0MT1kLmVxKDApLmNoaWxkcmVuKCkuZXEoMCksdGhpcy5fY1R4dDI9ZC5lcSgxKS5jaGlsZHJlbigpLmVxKDApLHRoaXMuX3BhbGV0dGUub24oXCJjbGlja1wiLGUsZnVuY3Rpb24oYyl7aWYoYi5fZW5hYmxlZCl7dmFyIGQ9YSh0aGlzKTtiLl9zZXRWYWx1ZShkLmhhc0NsYXNzKFwiZXZvLXRyYW5zcGFyZW50XCIpP206cShkLmF0dHIoXCJzdHlsZVwiKS5zdWJzdHJpbmcoMTcpKSksYi5fYWN0aXZlPSExfX0pLm9uKFwibW91c2VvdmVyXCIsZSxmdW5jdGlvbihjKXtpZihiLl9lbmFibGVkKXt2YXIgZD1hKHRoaXMpLGU9ZC5oYXNDbGFzcyhcImV2by10cmFuc3BhcmVudFwiKT9tOnEoZC5hdHRyKFwic3R5bGVcIikuc3Vic3RyaW5nKDE3KSk7Yi5vcHRpb25zLmRpc3BsYXlJbmRpY2F0b3ImJmIuX3NldENvbG9ySW5kKGUsMiksYi5fYWN0aXZlJiZiLmVsZW1lbnQudHJpZ2dlcihcIm1vdXNlb3Zlci5jb2xvclwiLGUpfX0pLmZpbmQoXCIuZXZvLW1vcmUgYVwiKS5vbihcImNsaWNrXCIsZnVuY3Rpb24oKXtiLl9zd2l0Y2hQYWxldHRlKHRoaXMpfSl9LHZhbDpmdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiPT10eXBlb2YgYT90aGlzLm9wdGlvbnMuY29sb3I6KHRoaXMuX3NldFZhbHVlKGEpLHRoaXMpfSxfc2V0VmFsdWU6ZnVuY3Rpb24oYSxiKXthPWEucmVwbGFjZSgvIC9nLFwiXCIpLHRoaXMub3B0aW9ucy5jb2xvcj1hLHRoaXMuX2lzUG9wdXA/KGJ8fHRoaXMuaGlkZVBhbGV0dGUoKSx0aGlzLl9zZXRCb3hDb2xvcih0aGlzLmVsZW1lbnQudmFsKGEpLm5leHQoKSxhKSk6dGhpcy5fc2V0Q29sb3JJbmQoYSwxKSx0aGlzLm9wdGlvbnMuaGlzdG9yeSYmdGhpcy5fcGFsZXR0ZUlkeD4wJiZ0aGlzLl9hZGQySGlzdG9yeShhKSx0aGlzLmVsZW1lbnQudHJpZ2dlcihcImNoYW5nZS5jb2xvclwiLGEpfSxfc2V0Q29sb3JJbmQ6ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzW1wiX2NUeHRcIitiXTt0aGlzLl9zZXRCb3hDb2xvcihjLGEpLGMubmV4dCgpLmh0bWwoYSl9LF9zZXRCb3hDb2xvcjpmdW5jdGlvbihhLGIpe2I9PT1tP2EuYWRkQ2xhc3MoXCJldm8tdHJhbnNwYXJlbnRcIikucmVtb3ZlQXR0cihcInN0eWxlXCIpOmEucmVtb3ZlQ2xhc3MoXCJldm8tdHJhbnNwYXJlbnRcIikuYXR0cihcInN0eWxlXCIsXCJiYWNrZ3JvdW5kLWNvbG9yOlwiK2IpfSxfc2V0T3B0aW9uOmZ1bmN0aW9uKGEsYil7XCJjb2xvclwiPT1hP3RoaXMuX3NldFZhbHVlKGIsITApOnRoaXMub3B0aW9uc1thXT1ifSxfYWRkMkhpc3Rvcnk6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPWgubGVuZ3RoLGM9MDtiPmM7YysrKWlmKGE9PWhbY10pcmV0dXJuO2I+MjcmJmguc2hpZnQoKSxoLnB1c2goYSl9LGNsZWFyOmZ1bmN0aW9uKCl7dGhpcy5oaWRlUGFsZXR0ZSgpLnZhbChcIlwiKX0sZW5hYmxlOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5lbGVtZW50O3JldHVybiB0aGlzLl9pc1BvcHVwP2EucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpOmEuY3NzKHtvcGFjaXR5OlwiMVwiLFwicG9pbnRlci1ldmVudHNcIjpcImF1dG9cIn0pLFwiZm9jdXNcIiE9PXRoaXMub3B0aW9ucy5zaG93T24mJnRoaXMuZWxlbWVudC5uZXh0KCkuYWRkQ2xhc3MoXCJldm8tcG9pbnRlclwiKSxhLnJlbW92ZUF0dHIoXCJhcmlhLWRpc2FibGVkXCIpLHRoaXMuX2VuYWJsZWQ9ITAsdGhpc30sZGlzYWJsZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZWxlbWVudDtyZXR1cm4gdGhpcy5faXNQb3B1cD9hLmF0dHIoXCJkaXNhYmxlZFwiLFwiZGlzYWJsZWRcIik6KHRoaXMuaGlkZVBhbGV0dGUoKSxhLmNzcyh7b3BhY2l0eTpcIjAuM1wiLFwicG9pbnRlci1ldmVudHNcIjpcIm5vbmVcIn0pKSxcImZvY3VzXCIhPT10aGlzLm9wdGlvbnMuc2hvd09uJiZ0aGlzLmVsZW1lbnQubmV4dCgpLnJlbW92ZUNsYXNzKFwiZXZvLXBvaW50ZXJcIiksYS5hdHRyKFwiYXJpYS1kaXNhYmxlZFwiLFwidHJ1ZVwiKSx0aGlzLl9lbmFibGVkPSExLHRoaXN9LGlzRGlzYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hdGhpcy5fZW5hYmxlZH0sZGVzdHJveTpmdW5jdGlvbigpe2EoZG9jdW1lbnQuYm9keSkub2ZmKFwiY2xpY2suXCIrdGhpcy5faWQpLHRoaXMuX3BhbGV0dGUmJih0aGlzLl9wYWxldHRlLm9mZihcIm1vdXNlb3ZlciBjbGlja1wiLFwidGQsLmV2by1jSGlzdD5kaXYsLmV2by10cmFuc3BhcmVudFwiKS5maW5kKFwiLmV2by1tb3JlIGFcIikub2ZmKFwiY2xpY2tcIiksdGhpcy5faXNQb3B1cCYmdGhpcy5fcGFsZXR0ZS5yZW1vdmUoKSx0aGlzLl9wYWxldHRlPXRoaXMuX2NUeHQ9bnVsbCksdGhpcy5faXNQb3B1cCYmdGhpcy5lbGVtZW50Lm5leHQoKS5vZmYoXCJjbGlja1wiKS5yZW1vdmUoKS5lbmQoKS5vZmYoXCJmb2N1c1wiKS51bndyYXAoKSx0aGlzLmVsZW1lbnQucmVtb3ZlQ2xhc3MoXCJjb2xvclBpY2tlciBcIit0aGlzLmlkKS5lbXB0eSgpLGEuV2lkZ2V0LnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyl9fSl9KGpRdWVyeSk7IiwiLy8gICAgIEphdmFTY3JpcHQgRXhwcmVzc2lvbiBQYXJzZXIgKEpTRVApIDwlPSB2ZXJzaW9uICU+XG4vLyAgICAgSlNFUCBtYXkgYmUgZnJlZWx5IGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuLy8gICAgIGh0dHA6Ly9qc2VwLmZyb20uc28vXG5cbi8qZ2xvYmFsIG1vZHVsZTogdHJ1ZSwgZXhwb3J0czogdHJ1ZSwgY29uc29sZTogdHJ1ZSAqL1xuKGZ1bmN0aW9uIChyb290KSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0Ly8gTm9kZSBUeXBlc1xuXHQvLyAtLS0tLS0tLS0tXG5cdFxuXHQvLyBUaGlzIGlzIHRoZSBmdWxsIHNldCBvZiB0eXBlcyB0aGF0IGFueSBKU0VQIG5vZGUgY2FuIGJlLlxuXHQvLyBTdG9yZSB0aGVtIGhlcmUgdG8gc2F2ZSBzcGFjZSB3aGVuIG1pbmlmaWVkXG5cdHZhciBDT01QT1VORCA9ICdDb21wb3VuZCcsXG5cdFx0SURFTlRJRklFUiA9ICdJZGVudGlmaWVyJyxcblx0XHRNRU1CRVJfRVhQID0gJ01lbWJlckV4cHJlc3Npb24nLFxuXHRcdExJVEVSQUwgPSAnTGl0ZXJhbCcsXG5cdFx0VEhJU19FWFAgPSAnVGhpc0V4cHJlc3Npb24nLFxuXHRcdENBTExfRVhQID0gJ0NhbGxFeHByZXNzaW9uJyxcblx0XHRVTkFSWV9FWFAgPSAnVW5hcnlFeHByZXNzaW9uJyxcblx0XHRCSU5BUllfRVhQID0gJ0JpbmFyeUV4cHJlc3Npb24nLFxuXHRcdExPR0lDQUxfRVhQID0gJ0xvZ2ljYWxFeHByZXNzaW9uJyxcblx0XHRDT05ESVRJT05BTF9FWFAgPSAnQ29uZGl0aW9uYWxFeHByZXNzaW9uJyxcblx0XHRBUlJBWV9FWFAgPSAnQXJyYXlFeHByZXNzaW9uJyxcblxuXHRcdFBFUklPRF9DT0RFID0gNDYsIC8vICcuJ1xuXHRcdENPTU1BX0NPREUgID0gNDQsIC8vICcsJ1xuXHRcdFNRVU9URV9DT0RFID0gMzksIC8vIHNpbmdsZSBxdW90ZVxuXHRcdERRVU9URV9DT0RFID0gMzQsIC8vIGRvdWJsZSBxdW90ZXNcblx0XHRPUEFSRU5fQ09ERSA9IDQwLCAvLyAoXG5cdFx0Q1BBUkVOX0NPREUgPSA0MSwgLy8gKVxuXHRcdE9CUkFDS19DT0RFID0gOTEsIC8vIFtcblx0XHRDQlJBQ0tfQ09ERSA9IDkzLCAvLyBdXG5cdFx0UVVNQVJLX0NPREUgPSA2MywgLy8gP1xuXHRcdFNFTUNPTF9DT0RFID0gNTksIC8vIDtcblx0XHRDT0xPTl9DT0RFICA9IDU4LCAvLyA6XG5cblx0XHR0aHJvd0Vycm9yID0gZnVuY3Rpb24obWVzc2FnZSwgaW5kZXgpIHtcblx0XHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlICsgJyBhdCBjaGFyYWN0ZXIgJyArIGluZGV4KTtcblx0XHRcdGVycm9yLmluZGV4ID0gaW5kZXg7XG5cdFx0XHRlcnJvci5kZXNjcmlwdGlvbiA9IG1lc3NhZ2U7XG5cdFx0XHR0aHJvdyBlcnJvcjtcblx0XHR9LFxuXG5cdC8vIE9wZXJhdGlvbnNcblx0Ly8gLS0tLS0tLS0tLVxuXHRcblx0Ly8gU2V0IGB0YCB0byBgdHJ1ZWAgdG8gc2F2ZSBzcGFjZSAod2hlbiBtaW5pZmllZCwgbm90IGd6aXBwZWQpXG5cdFx0dCA9IHRydWUsXG5cdC8vIFVzZSBhIHF1aWNrbHktYWNjZXNzaWJsZSBtYXAgdG8gc3RvcmUgYWxsIG9mIHRoZSB1bmFyeSBvcGVyYXRvcnNcblx0Ly8gVmFsdWVzIGFyZSBzZXQgdG8gYHRydWVgIChpdCByZWFsbHkgZG9lc24ndCBtYXR0ZXIpXG5cdFx0dW5hcnlfb3BzID0geyctJzogdCwgJyEnOiB0LCAnfic6IHQsICcrJzogdH0sXG5cdC8vIEFsc28gdXNlIGEgbWFwIGZvciB0aGUgYmluYXJ5IG9wZXJhdGlvbnMgYnV0IHNldCB0aGVpciB2YWx1ZXMgdG8gdGhlaXJcblx0Ly8gYmluYXJ5IHByZWNlZGVuY2UgZm9yIHF1aWNrIHJlZmVyZW5jZTpcblx0Ly8gc2VlIFtPcmRlciBvZiBvcGVyYXRpb25zXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL09yZGVyX29mX29wZXJhdGlvbnMjUHJvZ3JhbW1pbmdfbGFuZ3VhZ2UpXG5cdFx0YmluYXJ5X29wcyA9IHtcblx0XHRcdCd8fCc6IDEsICcmJic6IDIsICd8JzogMywgICdeJzogNCwgICcmJzogNSxcblx0XHRcdCc9PSc6IDYsICchPSc6IDYsICc9PT0nOiA2LCAnIT09JzogNixcblx0XHRcdCc8JzogNywgICc+JzogNywgICc8PSc6IDcsICAnPj0nOiA3LCBcblx0XHRcdCc8PCc6OCwgICc+Pic6IDgsICc+Pj4nOiA4LFxuXHRcdFx0JysnOiA5LCAnLSc6IDksXG5cdFx0XHQnKic6IDEwLCAnLyc6IDEwLCAnJSc6IDEwXG5cdFx0fSxcblx0Ly8gR2V0IHJldHVybiB0aGUgbG9uZ2VzdCBrZXkgbGVuZ3RoIG9mIGFueSBvYmplY3Rcblx0XHRnZXRNYXhLZXlMZW4gPSBmdW5jdGlvbihvYmopIHtcblx0XHRcdHZhciBtYXhfbGVuID0gMCwgbGVuO1xuXHRcdFx0Zm9yKHZhciBrZXkgaW4gb2JqKSB7XG5cdFx0XHRcdGlmKChsZW4gPSBrZXkubGVuZ3RoKSA+IG1heF9sZW4gJiYgb2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcblx0XHRcdFx0XHRtYXhfbGVuID0gbGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF4X2xlbjtcblx0XHR9LFxuXHRcdG1heF91bm9wX2xlbiA9IGdldE1heEtleUxlbih1bmFyeV9vcHMpLFxuXHRcdG1heF9iaW5vcF9sZW4gPSBnZXRNYXhLZXlMZW4oYmluYXJ5X29wcyksXG5cdC8vIExpdGVyYWxzXG5cdC8vIC0tLS0tLS0tLS1cblx0Ly8gU3RvcmUgdGhlIHZhbHVlcyB0byByZXR1cm4gZm9yIHRoZSB2YXJpb3VzIGxpdGVyYWxzIHdlIG1heSBlbmNvdW50ZXJcblx0XHRsaXRlcmFscyA9IHtcblx0XHRcdCd0cnVlJzogdHJ1ZSxcblx0XHRcdCdmYWxzZSc6IGZhbHNlLFxuXHRcdFx0J251bGwnOiBudWxsXG5cdFx0fSxcblx0Ly8gRXhjZXB0IGZvciBgdGhpc2AsIHdoaWNoIGlzIHNwZWNpYWwuIFRoaXMgY291bGQgYmUgY2hhbmdlZCB0byBzb21ldGhpbmcgbGlrZSBgJ3NlbGYnYCBhcyB3ZWxsXG5cdFx0dGhpc19zdHIgPSAndGhpcycsXG5cdC8vIFJldHVybnMgdGhlIHByZWNlZGVuY2Ugb2YgYSBiaW5hcnkgb3BlcmF0b3Igb3IgYDBgIGlmIGl0IGlzbid0IGEgYmluYXJ5IG9wZXJhdG9yXG5cdFx0YmluYXJ5UHJlY2VkZW5jZSA9IGZ1bmN0aW9uKG9wX3ZhbCkge1xuXHRcdFx0cmV0dXJuIGJpbmFyeV9vcHNbb3BfdmFsXSB8fCAwO1xuXHRcdH0sXG5cdC8vIFV0aWxpdHkgZnVuY3Rpb24gKGdldHMgY2FsbGVkIGZyb20gbXVsdGlwbGUgcGxhY2VzKVxuXHQvLyBBbHNvIG5vdGUgdGhhdCBgYSAmJiBiYCBhbmQgYGEgfHwgYmAgYXJlICpsb2dpY2FsKiBleHByZXNzaW9ucywgbm90IGJpbmFyeSBleHByZXNzaW9uc1xuXHRcdGNyZWF0ZUJpbmFyeUV4cHJlc3Npb24gPSBmdW5jdGlvbiAob3BlcmF0b3IsIGxlZnQsIHJpZ2h0KSB7XG5cdFx0XHR2YXIgdHlwZSA9IChvcGVyYXRvciA9PT0gJ3x8JyB8fCBvcGVyYXRvciA9PT0gJyYmJykgPyBMT0dJQ0FMX0VYUCA6IEJJTkFSWV9FWFA7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcGVyYXRvcjogb3BlcmF0b3IsXG5cdFx0XHRcdGxlZnQ6IGxlZnQsXG5cdFx0XHRcdHJpZ2h0OiByaWdodFxuXHRcdFx0fTtcblx0XHR9LFxuXHRcdC8vIGBjaGAgaXMgYSBjaGFyYWN0ZXIgY29kZSBpbiB0aGUgbmV4dCB0aHJlZSBmdW5jdGlvbnNcblx0XHRpc0RlY2ltYWxEaWdpdCA9IGZ1bmN0aW9uKGNoKSB7XG5cdFx0XHRyZXR1cm4gKGNoID49IDQ4ICYmIGNoIDw9IDU3KTsgLy8gMC4uLjlcblx0XHR9LFxuXHRcdGlzSWRlbnRpZmllclN0YXJ0ID0gZnVuY3Rpb24oY2gpIHtcblx0XHRcdHJldHVybiAoY2ggPT09IDM2KSB8fCAoY2ggPT09IDk1KSB8fCAvLyBgJGAgYW5kIGBfYFxuXHRcdFx0XHRcdChjaCA+PSA2NSAmJiBjaCA8PSA5MCkgfHwgLy8gQS4uLlpcblx0XHRcdFx0XHQoY2ggPj0gOTcgJiYgY2ggPD0gMTIyKTsgLy8gYS4uLnpcblx0XHR9LFxuXHRcdGlzSWRlbnRpZmllclBhcnQgPSBmdW5jdGlvbihjaCkge1xuXHRcdFx0cmV0dXJuIChjaCA9PT0gMzYpIHx8IChjaCA9PT0gOTUpIHx8IC8vIGAkYCBhbmQgYF9gXG5cdFx0XHRcdFx0KGNoID49IDY1ICYmIGNoIDw9IDkwKSB8fCAvLyBBLi4uWlxuXHRcdFx0XHRcdChjaCA+PSA5NyAmJiBjaCA8PSAxMjIpIHx8IC8vIGEuLi56XG5cdFx0XHRcdFx0KGNoID49IDQ4ICYmIGNoIDw9IDU3KTsgLy8gMC4uLjlcblx0XHR9LFxuXG5cdFx0Ly8gUGFyc2luZ1xuXHRcdC8vIC0tLS0tLS1cblx0XHQvLyBgZXhwcmAgaXMgYSBzdHJpbmcgd2l0aCB0aGUgcGFzc2VkIGluIGV4cHJlc3Npb25cblx0XHRqc2VwID0gZnVuY3Rpb24oZXhwcikge1xuXHRcdFx0Ly8gYGluZGV4YCBzdG9yZXMgdGhlIGNoYXJhY3RlciBudW1iZXIgd2UgYXJlIGN1cnJlbnRseSBhdCB3aGlsZSBgbGVuZ3RoYCBpcyBhIGNvbnN0YW50XG5cdFx0XHQvLyBBbGwgb2YgdGhlIGdvYmJsZXMgYmVsb3cgd2lsbCBtb2RpZnkgYGluZGV4YCBhcyB3ZSBtb3ZlIGFsb25nXG5cdFx0XHR2YXIgaW5kZXggPSAwLFxuXHRcdFx0XHRjaGFyQXRGdW5jID0gZXhwci5jaGFyQXQsXG5cdFx0XHRcdGNoYXJDb2RlQXRGdW5jID0gZXhwci5jaGFyQ29kZUF0LFxuXHRcdFx0XHRleHBySSA9IGZ1bmN0aW9uKGkpIHsgcmV0dXJuIGNoYXJBdEZ1bmMuY2FsbChleHByLCBpKTsgfSxcblx0XHRcdFx0ZXhwcklDb2RlID0gZnVuY3Rpb24oaSkgeyByZXR1cm4gY2hhckNvZGVBdEZ1bmMuY2FsbChleHByLCBpKTsgfSxcblx0XHRcdFx0bGVuZ3RoID0gZXhwci5sZW5ndGgsXG5cblx0XHRcdFx0Ly8gUHVzaCBgaW5kZXhgIHVwIHRvIHRoZSBuZXh0IG5vbi1zcGFjZSBjaGFyYWN0ZXJcblx0XHRcdFx0Z29iYmxlU3BhY2VzID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dmFyIGNoID0gZXhwcklDb2RlKGluZGV4KTtcblx0XHRcdFx0XHQvLyBzcGFjZSBvciB0YWJcblx0XHRcdFx0XHR3aGlsZShjaCA9PT0gMzIgfHwgY2ggPT09IDkpIHtcblx0XHRcdFx0XHRcdGNoID0gZXhwcklDb2RlKCsraW5kZXgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdFx0XG5cdFx0XHRcdC8vIFRoZSBtYWluIHBhcnNpbmcgZnVuY3Rpb24uIE11Y2ggb2YgdGhpcyBjb2RlIGlzIGRlZGljYXRlZCB0byB0ZXJuYXJ5IGV4cHJlc3Npb25zXG5cdFx0XHRcdGdvYmJsZUV4cHJlc3Npb24gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHR2YXIgdGVzdCA9IGdvYmJsZUJpbmFyeUV4cHJlc3Npb24oKSxcblx0XHRcdFx0XHRcdGNvbnNlcXVlbnQsIGFsdGVybmF0ZTtcblx0XHRcdFx0XHRnb2JibGVTcGFjZXMoKTtcblx0XHRcdFx0XHRpZihleHBySUNvZGUoaW5kZXgpID09PSBRVU1BUktfQ09ERSkge1xuXHRcdFx0XHRcdFx0Ly8gVGVybmFyeSBleHByZXNzaW9uOiB0ZXN0ID8gY29uc2VxdWVudCA6IGFsdGVybmF0ZVxuXHRcdFx0XHRcdFx0aW5kZXgrKztcblx0XHRcdFx0XHRcdGNvbnNlcXVlbnQgPSBnb2JibGVFeHByZXNzaW9uKCk7XG5cdFx0XHRcdFx0XHRpZighY29uc2VxdWVudCkge1xuXHRcdFx0XHRcdFx0XHR0aHJvd0Vycm9yKCdFeHBlY3RlZCBleHByZXNzaW9uJywgaW5kZXgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Z29iYmxlU3BhY2VzKCk7XG5cdFx0XHRcdFx0XHRpZihleHBySUNvZGUoaW5kZXgpID09PSBDT0xPTl9DT0RFKSB7XG5cdFx0XHRcdFx0XHRcdGluZGV4Kys7XG5cdFx0XHRcdFx0XHRcdGFsdGVybmF0ZSA9IGdvYmJsZUV4cHJlc3Npb24oKTtcblx0XHRcdFx0XHRcdFx0aWYoIWFsdGVybmF0ZSkge1xuXHRcdFx0XHRcdFx0XHRcdHRocm93RXJyb3IoJ0V4cGVjdGVkIGV4cHJlc3Npb24nLCBpbmRleCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHR0eXBlOiBDT05ESVRJT05BTF9FWFAsXG5cdFx0XHRcdFx0XHRcdFx0dGVzdDogdGVzdCxcblx0XHRcdFx0XHRcdFx0XHRjb25zZXF1ZW50OiBjb25zZXF1ZW50LFxuXHRcdFx0XHRcdFx0XHRcdGFsdGVybmF0ZTogYWx0ZXJuYXRlXG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHR0aHJvd0Vycm9yKCdFeHBlY3RlZCA6JywgaW5kZXgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGVzdDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU2VhcmNoIGZvciB0aGUgb3BlcmF0aW9uIHBvcnRpb24gb2YgdGhlIHN0cmluZyAoZS5nLiBgK2AsIGA9PT1gKVxuXHRcdFx0XHQvLyBTdGFydCBieSB0YWtpbmcgdGhlIGxvbmdlc3QgcG9zc2libGUgYmluYXJ5IG9wZXJhdGlvbnMgKDMgY2hhcmFjdGVyczogYD09PWAsIGAhPT1gLCBgPj4+YClcblx0XHRcdFx0Ly8gYW5kIG1vdmUgZG93biBmcm9tIDMgdG8gMiB0byAxIGNoYXJhY3RlciB1bnRpbCBhIG1hdGNoaW5nIGJpbmFyeSBvcGVyYXRpb24gaXMgZm91bmRcblx0XHRcdFx0Ly8gdGhlbiwgcmV0dXJuIHRoYXQgYmluYXJ5IG9wZXJhdGlvblxuXHRcdFx0XHRnb2JibGVCaW5hcnlPcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGdvYmJsZVNwYWNlcygpO1xuXHRcdFx0XHRcdHZhciBiaW9wLCB0b19jaGVjayA9IGV4cHIuc3Vic3RyKGluZGV4LCBtYXhfYmlub3BfbGVuKSwgdGNfbGVuID0gdG9fY2hlY2subGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlKHRjX2xlbiA+IDApIHtcblx0XHRcdFx0XHRcdGlmKGJpbmFyeV9vcHMuaGFzT3duUHJvcGVydHkodG9fY2hlY2spKSB7XG5cdFx0XHRcdFx0XHRcdGluZGV4ICs9IHRjX2xlbjtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRvX2NoZWNrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0dG9fY2hlY2sgPSB0b19jaGVjay5zdWJzdHIoMCwgLS10Y19sZW4pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gVGhpcyBmdW5jdGlvbiBpcyByZXNwb25zaWJsZSBmb3IgZ29iYmxpbmcgYW4gaW5kaXZpZHVhbCBleHByZXNzaW9uLFxuXHRcdFx0XHQvLyBlLmcuIGAxYCwgYDErMmAsIGBhKyhiKjIpLU1hdGguc3FydCgyKWBcblx0XHRcdFx0Z29iYmxlQmluYXJ5RXhwcmVzc2lvbiA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHZhciBjaF9pLCBub2RlLCBiaW9wLCBwcmVjLCBzdGFjaywgYmlvcF9pbmZvLCBsZWZ0LCByaWdodCwgaTtcblxuXHRcdFx0XHRcdC8vIEZpcnN0LCB0cnkgdG8gZ2V0IHRoZSBsZWZ0bW9zdCB0aGluZ1xuXHRcdFx0XHRcdC8vIFRoZW4sIGNoZWNrIHRvIHNlZSBpZiB0aGVyZSdzIGEgYmluYXJ5IG9wZXJhdG9yIG9wZXJhdGluZyBvbiB0aGF0IGxlZnRtb3N0IHRoaW5nXG5cdFx0XHRcdFx0bGVmdCA9IGdvYmJsZVRva2VuKCk7XG5cdFx0XHRcdFx0YmlvcCA9IGdvYmJsZUJpbmFyeU9wKCk7XG5cblx0XHRcdFx0XHQvLyBJZiB0aGVyZSB3YXNuJ3QgYSBiaW5hcnkgb3BlcmF0b3IsIGp1c3QgcmV0dXJuIHRoZSBsZWZ0bW9zdCBub2RlXG5cdFx0XHRcdFx0aWYoIWJpb3ApIHtcblx0XHRcdFx0XHRcdHJldHVybiBsZWZ0O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgd2UgbmVlZCB0byBzdGFydCBhIHN0YWNrIHRvIHByb3Blcmx5IHBsYWNlIHRoZSBiaW5hcnkgb3BlcmF0aW9ucyBpbiB0aGVpclxuXHRcdFx0XHRcdC8vIHByZWNlZGVuY2Ugc3RydWN0dXJlXG5cdFx0XHRcdFx0YmlvcF9pbmZvID0geyB2YWx1ZTogYmlvcCwgcHJlYzogYmluYXJ5UHJlY2VkZW5jZShiaW9wKX07XG5cblx0XHRcdFx0XHRyaWdodCA9IGdvYmJsZVRva2VuKCk7XG5cdFx0XHRcdFx0aWYoIXJpZ2h0KSB7XG5cdFx0XHRcdFx0XHR0aHJvd0Vycm9yKFwiRXhwZWN0ZWQgZXhwcmVzc2lvbiBhZnRlciBcIiArIGJpb3AsIGluZGV4KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0c3RhY2sgPSBbbGVmdCwgYmlvcF9pbmZvLCByaWdodF07XG5cblx0XHRcdFx0XHQvLyBQcm9wZXJseSBkZWFsIHdpdGggcHJlY2VkZW5jZSB1c2luZyBbcmVjdXJzaXZlIGRlc2NlbnRdKGh0dHA6Ly93d3cuZW5nci5tdW4uY2EvfnRoZW8vTWlzYy9leHBfcGFyc2luZy5odG0pXG5cdFx0XHRcdFx0d2hpbGUoKGJpb3AgPSBnb2JibGVCaW5hcnlPcCgpKSkge1xuXHRcdFx0XHRcdFx0cHJlYyA9IGJpbmFyeVByZWNlZGVuY2UoYmlvcCk7XG5cblx0XHRcdFx0XHRcdGlmKHByZWMgPT09IDApIHtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRiaW9wX2luZm8gPSB7IHZhbHVlOiBiaW9wLCBwcmVjOiBwcmVjIH07XG5cblx0XHRcdFx0XHRcdC8vIFJlZHVjZTogbWFrZSBhIGJpbmFyeSBleHByZXNzaW9uIGZyb20gdGhlIHRocmVlIHRvcG1vc3QgZW50cmllcy5cblx0XHRcdFx0XHRcdHdoaWxlICgoc3RhY2subGVuZ3RoID4gMikgJiYgKHByZWMgPD0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMl0ucHJlYykpIHtcblx0XHRcdFx0XHRcdFx0cmlnaHQgPSBzdGFjay5wb3AoKTtcblx0XHRcdFx0XHRcdFx0YmlvcCA9IHN0YWNrLnBvcCgpLnZhbHVlO1xuXHRcdFx0XHRcdFx0XHRsZWZ0ID0gc3RhY2sucG9wKCk7XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBjcmVhdGVCaW5hcnlFeHByZXNzaW9uKGJpb3AsIGxlZnQsIHJpZ2h0KTtcblx0XHRcdFx0XHRcdFx0c3RhY2sucHVzaChub2RlKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0bm9kZSA9IGdvYmJsZVRva2VuKCk7XG5cdFx0XHRcdFx0XHRpZighbm9kZSkge1xuXHRcdFx0XHRcdFx0XHR0aHJvd0Vycm9yKFwiRXhwZWN0ZWQgZXhwcmVzc2lvbiBhZnRlciBcIiArIGJpb3AsIGluZGV4KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHN0YWNrLnB1c2goYmlvcF9pbmZvLCBub2RlKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpID0gc3RhY2subGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRub2RlID0gc3RhY2tbaV07XG5cdFx0XHRcdFx0d2hpbGUoaSA+IDEpIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBjcmVhdGVCaW5hcnlFeHByZXNzaW9uKHN0YWNrW2kgLSAxXS52YWx1ZSwgc3RhY2tbaSAtIDJdLCBub2RlKTsgXG5cdFx0XHRcdFx0XHRpIC09IDI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBub2RlO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEFuIGluZGl2aWR1YWwgcGFydCBvZiBhIGJpbmFyeSBleHByZXNzaW9uOlxuXHRcdFx0XHQvLyBlLmcuIGBmb28uYmFyKGJheilgLCBgMWAsIGBcImFiY1wiYCwgYChhICUgMilgIChiZWNhdXNlIGl0J3MgaW4gcGFyZW50aGVzaXMpXG5cdFx0XHRcdGdvYmJsZVRva2VuID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dmFyIGNoLCB0b19jaGVjaywgdGNfbGVuO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGdvYmJsZVNwYWNlcygpO1xuXHRcdFx0XHRcdGNoID0gZXhwcklDb2RlKGluZGV4KTtcblxuXHRcdFx0XHRcdGlmKGlzRGVjaW1hbERpZ2l0KGNoKSB8fCBjaCA9PT0gUEVSSU9EX0NPREUpIHtcblx0XHRcdFx0XHRcdC8vIENoYXIgY29kZSA0NiBpcyBhIGRvdCBgLmAgd2hpY2ggY2FuIHN0YXJ0IG9mZiBhIG51bWVyaWMgbGl0ZXJhbFxuXHRcdFx0XHRcdFx0cmV0dXJuIGdvYmJsZU51bWVyaWNMaXRlcmFsKCk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmKGNoID09PSBTUVVPVEVfQ09ERSB8fCBjaCA9PT0gRFFVT1RFX0NPREUpIHtcblx0XHRcdFx0XHRcdC8vIFNpbmdsZSBvciBkb3VibGUgcXVvdGVzXG5cdFx0XHRcdFx0XHRyZXR1cm4gZ29iYmxlU3RyaW5nTGl0ZXJhbCgpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZihpc0lkZW50aWZpZXJTdGFydChjaCkgfHwgY2ggPT09IE9QQVJFTl9DT0RFKSB7IC8vIG9wZW4gcGFyZW50aGVzaXNcblx0XHRcdFx0XHRcdC8vIGBmb29gLCBgYmFyLmJhemBcblx0XHRcdFx0XHRcdHJldHVybiBnb2JibGVWYXJpYWJsZSgpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoY2ggPT09IE9CUkFDS19DT0RFKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZ29iYmxlQXJyYXkoKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dG9fY2hlY2sgPSBleHByLnN1YnN0cihpbmRleCwgbWF4X3Vub3BfbGVuKTtcblx0XHRcdFx0XHRcdHRjX2xlbiA9IHRvX2NoZWNrLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlKHRjX2xlbiA+IDApIHtcblx0XHRcdFx0XHRcdFx0aWYodW5hcnlfb3BzLmhhc093blByb3BlcnR5KHRvX2NoZWNrKSkge1xuXHRcdFx0XHRcdFx0XHRcdGluZGV4ICs9IHRjX2xlbjtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogVU5BUllfRVhQLFxuXHRcdFx0XHRcdFx0XHRcdFx0b3BlcmF0b3I6IHRvX2NoZWNrLFxuXHRcdFx0XHRcdFx0XHRcdFx0YXJndW1lbnQ6IGdvYmJsZVRva2VuKCksXG5cdFx0XHRcdFx0XHRcdFx0XHRwcmVmaXg6IHRydWVcblx0XHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHRvX2NoZWNrID0gdG9fY2hlY2suc3Vic3RyKDAsIC0tdGNfbGVuKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdFx0Ly8gUGFyc2Ugc2ltcGxlIG51bWVyaWMgbGl0ZXJhbHM6IGAxMmAsIGAzLjRgLCBgLjVgLiBEbyB0aGlzIGJ5IHVzaW5nIGEgc3RyaW5nIHRvXG5cdFx0XHRcdC8vIGtlZXAgdHJhY2sgb2YgZXZlcnl0aGluZyBpbiB0aGUgbnVtZXJpYyBsaXRlcmFsIGFuZCB0aGVuIGNhbGxpbmcgYHBhcnNlRmxvYXRgIG9uIHRoYXQgc3RyaW5nXG5cdFx0XHRcdGdvYmJsZU51bWVyaWNMaXRlcmFsID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dmFyIG51bWJlciA9ICcnLCBjaCwgY2hDb2RlO1xuXHRcdFx0XHRcdHdoaWxlKGlzRGVjaW1hbERpZ2l0KGV4cHJJQ29kZShpbmRleCkpKSB7XG5cdFx0XHRcdFx0XHRudW1iZXIgKz0gZXhwckkoaW5kZXgrKyk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYoZXhwcklDb2RlKGluZGV4KSA9PT0gUEVSSU9EX0NPREUpIHsgLy8gY2FuIHN0YXJ0IHdpdGggYSBkZWNpbWFsIG1hcmtlclxuXHRcdFx0XHRcdFx0bnVtYmVyICs9IGV4cHJJKGluZGV4KyspO1xuXG5cdFx0XHRcdFx0XHR3aGlsZShpc0RlY2ltYWxEaWdpdChleHBySUNvZGUoaW5kZXgpKSkge1xuXHRcdFx0XHRcdFx0XHRudW1iZXIgKz0gZXhwckkoaW5kZXgrKyk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGNoID0gZXhwckkoaW5kZXgpO1xuXHRcdFx0XHRcdGlmKGNoID09PSAnZScgfHwgY2ggPT09ICdFJykgeyAvLyBleHBvbmVudCBtYXJrZXJcblx0XHRcdFx0XHRcdG51bWJlciArPSBleHBySShpbmRleCsrKTtcblx0XHRcdFx0XHRcdGNoID0gZXhwckkoaW5kZXgpO1xuXHRcdFx0XHRcdFx0aWYoY2ggPT09ICcrJyB8fCBjaCA9PT0gJy0nKSB7IC8vIGV4cG9uZW50IHNpZ25cblx0XHRcdFx0XHRcdFx0bnVtYmVyICs9IGV4cHJJKGluZGV4KyspO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0d2hpbGUoaXNEZWNpbWFsRGlnaXQoZXhwcklDb2RlKGluZGV4KSkpIHsgLy9leHBvbmVudCBpdHNlbGZcblx0XHRcdFx0XHRcdFx0bnVtYmVyICs9IGV4cHJJKGluZGV4KyspO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYoIWlzRGVjaW1hbERpZ2l0KGV4cHJJQ29kZShpbmRleC0xKSkgKSB7XG5cdFx0XHRcdFx0XHRcdHRocm93RXJyb3IoJ0V4cGVjdGVkIGV4cG9uZW50ICgnICsgbnVtYmVyICsgZXhwckkoaW5kZXgpICsgJyknLCBpbmRleCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXG5cdFx0XHRcdFx0Y2hDb2RlID0gZXhwcklDb2RlKGluZGV4KTtcblx0XHRcdFx0XHQvLyBDaGVjayB0byBtYWtlIHN1cmUgdGhpcyBpc24ndCBhIHZhcmlhYmxlIG5hbWUgdGhhdCBzdGFydCB3aXRoIGEgbnVtYmVyICgxMjNhYmMpXG5cdFx0XHRcdFx0aWYoaXNJZGVudGlmaWVyU3RhcnQoY2hDb2RlKSkge1xuXHRcdFx0XHRcdFx0dGhyb3dFcnJvcignVmFyaWFibGUgbmFtZXMgY2Fubm90IHN0YXJ0IHdpdGggYSBudW1iZXIgKCcgK1xuXHRcdFx0XHRcdFx0XHRcdFx0bnVtYmVyICsgZXhwckkoaW5kZXgpICsgJyknLCBpbmRleCk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmKGNoQ29kZSA9PT0gUEVSSU9EX0NPREUpIHtcblx0XHRcdFx0XHRcdHRocm93RXJyb3IoJ1VuZXhwZWN0ZWQgcGVyaW9kJywgaW5kZXgpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHR0eXBlOiBMSVRFUkFMLFxuXHRcdFx0XHRcdFx0dmFsdWU6IHBhcnNlRmxvYXQobnVtYmVyKSxcblx0XHRcdFx0XHRcdHJhdzogbnVtYmVyXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBQYXJzZXMgYSBzdHJpbmcgbGl0ZXJhbCwgc3RhcmluZyB3aXRoIHNpbmdsZSBvciBkb3VibGUgcXVvdGVzIHdpdGggYmFzaWMgc3VwcG9ydCBmb3IgZXNjYXBlIGNvZGVzXG5cdFx0XHRcdC8vIGUuZy4gYFwiaGVsbG8gd29ybGRcImAsIGAndGhpcyBpc1xcbkpTRVAnYFxuXHRcdFx0XHRnb2JibGVTdHJpbmdMaXRlcmFsID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dmFyIHN0ciA9ICcnLCBxdW90ZSA9IGV4cHJJKGluZGV4KyspLCBjbG9zZWQgPSBmYWxzZSwgY2g7XG5cblx0XHRcdFx0XHR3aGlsZShpbmRleCA8IGxlbmd0aCkge1xuXHRcdFx0XHRcdFx0Y2ggPSBleHBySShpbmRleCsrKTtcblx0XHRcdFx0XHRcdGlmKGNoID09PSBxdW90ZSkge1xuXHRcdFx0XHRcdFx0XHRjbG9zZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH0gZWxzZSBpZihjaCA9PT0gJ1xcXFwnKSB7XG5cdFx0XHRcdFx0XHRcdC8vIENoZWNrIGZvciBhbGwgb2YgdGhlIGNvbW1vbiBlc2NhcGUgY29kZXNcblx0XHRcdFx0XHRcdFx0Y2ggPSBleHBySShpbmRleCsrKTtcblx0XHRcdFx0XHRcdFx0c3dpdGNoKGNoKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSAnbic6IHN0ciArPSAnXFxuJzsgYnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSAncic6IHN0ciArPSAnXFxyJzsgYnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSAndCc6IHN0ciArPSAnXFx0JzsgYnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSAnYic6IHN0ciArPSAnXFxiJzsgYnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSAnZic6IHN0ciArPSAnXFxmJzsgYnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSAndic6IHN0ciArPSAnXFx4MEInOyBicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0c3RyICs9IGNoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmKCFjbG9zZWQpIHtcblx0XHRcdFx0XHRcdHRocm93RXJyb3IoJ1VuY2xvc2VkIHF1b3RlIGFmdGVyIFwiJytzdHIrJ1wiJywgaW5kZXgpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHR0eXBlOiBMSVRFUkFMLFxuXHRcdFx0XHRcdFx0dmFsdWU6IHN0cixcblx0XHRcdFx0XHRcdHJhdzogcXVvdGUgKyBzdHIgKyBxdW90ZVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFxuXHRcdFx0XHQvLyBHb2JibGVzIG9ubHkgaWRlbnRpZmllcnNcblx0XHRcdFx0Ly8gZS5nLjogYGZvb2AsIGBfdmFsdWVgLCBgJHgxYFxuXHRcdFx0XHQvLyBBbHNvLCB0aGlzIGZ1bmN0aW9uIGNoZWNrcyBpZiB0aGF0IGlkZW50aWZpZXIgaXMgYSBsaXRlcmFsOlxuXHRcdFx0XHQvLyAoZS5nLiBgdHJ1ZWAsIGBmYWxzZWAsIGBudWxsYCkgb3IgYHRoaXNgXG5cdFx0XHRcdGdvYmJsZUlkZW50aWZpZXIgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHR2YXIgY2ggPSBleHBySUNvZGUoaW5kZXgpLCBzdGFydCA9IGluZGV4LCBpZGVudGlmaWVyO1xuXG5cdFx0XHRcdFx0aWYoaXNJZGVudGlmaWVyU3RhcnQoY2gpKSB7XG5cdFx0XHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0aHJvd0Vycm9yKCdVbmV4cGVjdGVkICcgKyBleHBySShpbmRleCksIGluZGV4KTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR3aGlsZShpbmRleCA8IGxlbmd0aCkge1xuXHRcdFx0XHRcdFx0Y2ggPSBleHBySUNvZGUoaW5kZXgpO1xuXHRcdFx0XHRcdFx0aWYoaXNJZGVudGlmaWVyUGFydChjaCkpIHtcblx0XHRcdFx0XHRcdFx0aW5kZXgrKztcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZGVudGlmaWVyID0gZXhwci5zbGljZShzdGFydCwgaW5kZXgpO1xuXG5cdFx0XHRcdFx0aWYobGl0ZXJhbHMuaGFzT3duUHJvcGVydHkoaWRlbnRpZmllcikpIHtcblx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdHR5cGU6IExJVEVSQUwsXG5cdFx0XHRcdFx0XHRcdHZhbHVlOiBsaXRlcmFsc1tpZGVudGlmaWVyXSxcblx0XHRcdFx0XHRcdFx0cmF3OiBpZGVudGlmaWVyXG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH0gZWxzZSBpZihpZGVudGlmaWVyID09PSB0aGlzX3N0cikge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHsgdHlwZTogVEhJU19FWFAgfTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0dHlwZTogSURFTlRJRklFUixcblx0XHRcdFx0XHRcdFx0bmFtZTogaWRlbnRpZmllclxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gR29iYmxlcyBhIGxpc3Qgb2YgYXJndW1lbnRzIHdpdGhpbiB0aGUgY29udGV4dCBvZiBhIGZ1bmN0aW9uIGNhbGxcblx0XHRcdFx0Ly8gb3IgYXJyYXkgbGl0ZXJhbC4gVGhpcyBmdW5jdGlvbiBhbHNvIGFzc3VtZXMgdGhhdCB0aGUgb3BlbmluZyBjaGFyYWN0ZXJcblx0XHRcdFx0Ly8gYChgIG9yIGBbYCBoYXMgYWxyZWFkeSBiZWVuIGdvYmJsZWQsIGFuZCBnb2JibGVzIGV4cHJlc3Npb25zIGFuZCBjb21tYXNcblx0XHRcdFx0Ly8gdW50aWwgdGhlIHRlcm1pbmF0b3IgY2hhcmFjdGVyIGApYCBvciBgXWAgaXMgZW5jb3VudGVyZWQuXG5cdFx0XHRcdC8vIGUuZy4gYGZvbyhiYXIsIGJheilgLCBgbXlfZnVuYygpYCwgb3IgYFtiYXIsIGJhel1gXG5cdFx0XHRcdGdvYmJsZUFyZ3VtZW50cyA9IGZ1bmN0aW9uKHRlcm1pbmF0aW9uKSB7XG5cdFx0XHRcdFx0dmFyIGNoX2ksIGFyZ3MgPSBbXSwgbm9kZTtcblx0XHRcdFx0XHR3aGlsZShpbmRleCA8IGxlbmd0aCkge1xuXHRcdFx0XHRcdFx0Z29iYmxlU3BhY2VzKCk7XG5cdFx0XHRcdFx0XHRjaF9pID0gZXhwcklDb2RlKGluZGV4KTtcblx0XHRcdFx0XHRcdGlmKGNoX2kgPT09IHRlcm1pbmF0aW9uKSB7IC8vIGRvbmUgcGFyc2luZ1xuXHRcdFx0XHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoY2hfaSA9PT0gQ09NTUFfQ09ERSkgeyAvLyBiZXR3ZWVuIGV4cHJlc3Npb25zXG5cdFx0XHRcdFx0XHRcdGluZGV4Kys7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRub2RlID0gZ29iYmxlRXhwcmVzc2lvbigpO1xuXHRcdFx0XHRcdFx0XHRpZighbm9kZSB8fCBub2RlLnR5cGUgPT09IENPTVBPVU5EKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhyb3dFcnJvcignRXhwZWN0ZWQgY29tbWEnLCBpbmRleCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0YXJncy5wdXNoKG5vZGUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gYXJncztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHb2JibGUgYSBub24tbGl0ZXJhbCB2YXJpYWJsZSBuYW1lLiBUaGlzIHZhcmlhYmxlIG5hbWUgbWF5IGluY2x1ZGUgcHJvcGVydGllc1xuXHRcdFx0XHQvLyBlLmcuIGBmb29gLCBgYmFyLmJhemAsIGBmb29bJ2JhciddLmJhemBcblx0XHRcdFx0Ly8gSXQgYWxzbyBnb2JibGVzIGZ1bmN0aW9uIGNhbGxzOlxuXHRcdFx0XHQvLyBlLmcuIGBNYXRoLmFjb3Mob2JqLmFuZ2xlKWBcblx0XHRcdFx0Z29iYmxlVmFyaWFibGUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHR2YXIgY2hfaSwgbm9kZTtcblx0XHRcdFx0XHRjaF9pID0gZXhwcklDb2RlKGluZGV4KTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKGNoX2kgPT09IE9QQVJFTl9DT0RFKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gZ29iYmxlR3JvdXAoKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGdvYmJsZUlkZW50aWZpZXIoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Z29iYmxlU3BhY2VzKCk7XG5cdFx0XHRcdFx0Y2hfaSA9IGV4cHJJQ29kZShpbmRleCk7XG5cdFx0XHRcdFx0d2hpbGUoY2hfaSA9PT0gUEVSSU9EX0NPREUgfHwgY2hfaSA9PT0gT0JSQUNLX0NPREUgfHwgY2hfaSA9PT0gT1BBUkVOX0NPREUpIHtcblx0XHRcdFx0XHRcdGluZGV4Kys7XG5cdFx0XHRcdFx0XHRpZihjaF9pID09PSBQRVJJT0RfQ09ERSkge1xuXHRcdFx0XHRcdFx0XHRnb2JibGVTcGFjZXMoKTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHtcblx0XHRcdFx0XHRcdFx0XHR0eXBlOiBNRU1CRVJfRVhQLFxuXHRcdFx0XHRcdFx0XHRcdGNvbXB1dGVkOiBmYWxzZSxcblx0XHRcdFx0XHRcdFx0XHRvYmplY3Q6IG5vZGUsXG5cdFx0XHRcdFx0XHRcdFx0cHJvcGVydHk6IGdvYmJsZUlkZW50aWZpZXIoKVxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmKGNoX2kgPT09IE9CUkFDS19DT0RFKSB7XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSB7XG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogTUVNQkVSX0VYUCxcblx0XHRcdFx0XHRcdFx0XHRjb21wdXRlZDogdHJ1ZSxcblx0XHRcdFx0XHRcdFx0XHRvYmplY3Q6IG5vZGUsXG5cdFx0XHRcdFx0XHRcdFx0cHJvcGVydHk6IGdvYmJsZUV4cHJlc3Npb24oKVxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0XHRnb2JibGVTcGFjZXMoKTtcblx0XHRcdFx0XHRcdFx0Y2hfaSA9IGV4cHJJQ29kZShpbmRleCk7XG5cdFx0XHRcdFx0XHRcdGlmKGNoX2kgIT09IENCUkFDS19DT0RFKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhyb3dFcnJvcignVW5jbG9zZWQgWycsIGluZGV4KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmKGNoX2kgPT09IE9QQVJFTl9DT0RFKSB7XG5cdFx0XHRcdFx0XHRcdC8vIEEgZnVuY3Rpb24gY2FsbCBpcyBiZWluZyBtYWRlOyBnb2JibGUgYWxsIHRoZSBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHtcblx0XHRcdFx0XHRcdFx0XHR0eXBlOiBDQUxMX0VYUCxcblx0XHRcdFx0XHRcdFx0XHQnYXJndW1lbnRzJzogZ29iYmxlQXJndW1lbnRzKENQQVJFTl9DT0RFKSxcblx0XHRcdFx0XHRcdFx0XHRjYWxsZWU6IG5vZGVcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGdvYmJsZVNwYWNlcygpO1xuXHRcdFx0XHRcdFx0Y2hfaSA9IGV4cHJJQ29kZShpbmRleCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBub2RlO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJlc3BvbnNpYmxlIGZvciBwYXJzaW5nIGEgZ3JvdXAgb2YgdGhpbmdzIHdpdGhpbiBwYXJlbnRoZXNlcyBgKClgXG5cdFx0XHRcdC8vIFRoaXMgZnVuY3Rpb24gYXNzdW1lcyB0aGF0IGl0IG5lZWRzIHRvIGdvYmJsZSB0aGUgb3BlbmluZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQvLyBhbmQgdGhlbiB0cmllcyB0byBnb2JibGUgZXZlcnl0aGluZyB3aXRoaW4gdGhhdCBwYXJlbnRoZXNpcywgYXNzdW1pbmdcblx0XHRcdFx0Ly8gdGhhdCB0aGUgbmV4dCB0aGluZyBpdCBzaG91bGQgc2VlIGlzIHRoZSBjbG9zZSBwYXJlbnRoZXNpcy4gSWYgbm90LFxuXHRcdFx0XHQvLyB0aGVuIHRoZSBleHByZXNzaW9uIHByb2JhYmx5IGRvZXNuJ3QgaGF2ZSBhIGApYFxuXHRcdFx0XHRnb2JibGVHcm91cCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGluZGV4Kys7XG5cdFx0XHRcdFx0dmFyIG5vZGUgPSBnb2JibGVFeHByZXNzaW9uKCk7XG5cdFx0XHRcdFx0Z29iYmxlU3BhY2VzKCk7XG5cdFx0XHRcdFx0aWYoZXhwcklDb2RlKGluZGV4KSA9PT0gQ1BBUkVOX0NPREUpIHtcblx0XHRcdFx0XHRcdGluZGV4Kys7XG5cdFx0XHRcdFx0XHRyZXR1cm4gbm9kZTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dGhyb3dFcnJvcignVW5jbG9zZWQgKCcsIGluZGV4KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmVzcG9uc2libGUgZm9yIHBhcnNpbmcgQXJyYXkgbGl0ZXJhbHMgYFsxLCAyLCAzXWBcblx0XHRcdFx0Ly8gVGhpcyBmdW5jdGlvbiBhc3N1bWVzIHRoYXQgaXQgbmVlZHMgdG8gZ29iYmxlIHRoZSBvcGVuaW5nIGJyYWNrZXRcblx0XHRcdFx0Ly8gYW5kIHRoZW4gdHJpZXMgdG8gZ29iYmxlIHRoZSBleHByZXNzaW9ucyBhcyBhcmd1bWVudHMuXG5cdFx0XHRcdGdvYmJsZUFycmF5ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aW5kZXgrKztcblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0dHlwZTogQVJSQVlfRVhQLFxuXHRcdFx0XHRcdFx0ZWxlbWVudHM6IGdvYmJsZUFyZ3VtZW50cyhDQlJBQ0tfQ09ERSlcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdG5vZGVzID0gW10sIGNoX2ksIG5vZGU7XG5cdFx0XHRcdFxuXHRcdFx0d2hpbGUoaW5kZXggPCBsZW5ndGgpIHtcblx0XHRcdFx0Y2hfaSA9IGV4cHJJQ29kZShpbmRleCk7XG5cblx0XHRcdFx0Ly8gRXhwcmVzc2lvbnMgY2FuIGJlIHNlcGFyYXRlZCBieSBzZW1pY29sb25zLCBjb21tYXMsIG9yIGp1c3QgaW5mZXJyZWQgd2l0aG91dCBhbnlcblx0XHRcdFx0Ly8gc2VwYXJhdG9yc1xuXHRcdFx0XHRpZihjaF9pID09PSBTRU1DT0xfQ09ERSB8fCBjaF9pID09PSBDT01NQV9DT0RFKSB7XG5cdFx0XHRcdFx0aW5kZXgrKzsgLy8gaWdub3JlIHNlcGFyYXRvcnNcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyBUcnkgdG8gZ29iYmxlIGVhY2ggZXhwcmVzc2lvbiBpbmRpdmlkdWFsbHlcblx0XHRcdFx0XHRpZigobm9kZSA9IGdvYmJsZUV4cHJlc3Npb24oKSkpIHtcblx0XHRcdFx0XHRcdG5vZGVzLnB1c2gobm9kZSk7XG5cdFx0XHRcdFx0Ly8gSWYgd2Ugd2VyZW4ndCBhYmxlIHRvIGZpbmQgYSBiaW5hcnkgZXhwcmVzc2lvbiBhbmQgYXJlIG91dCBvZiByb29tLCB0aGVuXG5cdFx0XHRcdFx0Ly8gdGhlIGV4cHJlc3Npb24gcGFzc2VkIGluIHByb2JhYmx5IGhhcyB0b28gbXVjaFxuXHRcdFx0XHRcdH0gZWxzZSBpZihpbmRleCA8IGxlbmd0aCkge1xuXHRcdFx0XHRcdFx0dGhyb3dFcnJvcignVW5leHBlY3RlZCBcIicgKyBleHBySShpbmRleCkgKyAnXCInLCBpbmRleCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoZXJlJ3Mgb25seSBvbmUgZXhwcmVzc2lvbiBqdXN0IHRyeSByZXR1cm5pbmcgdGhlIGV4cHJlc3Npb25cblx0XHRcdGlmKG5vZGVzLmxlbmd0aCA9PT0gMSkge1xuXHRcdFx0XHRyZXR1cm4gbm9kZXNbMF07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdHR5cGU6IENPTVBPVU5ELFxuXHRcdFx0XHRcdGJvZHk6IG5vZGVzXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fTtcblxuXHQvLyBUbyBiZSBmaWxsZWQgaW4gYnkgdGhlIHRlbXBsYXRlXG5cdGpzZXAudmVyc2lvbiA9ICc8JT0gdmVyc2lvbiAlPic7XG5cdGpzZXAudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuICdKYXZhU2NyaXB0IEV4cHJlc3Npb24gUGFyc2VyIChKU0VQKSB2JyArIGpzZXAudmVyc2lvbjsgfTtcblxuXHQvKipcblx0ICogQG1ldGhvZCBqc2VwLmFkZFVuYXJ5T3Bcblx0ICogQHBhcmFtIHtzdHJpbmd9IG9wX25hbWUgVGhlIG5hbWUgb2YgdGhlIHVuYXJ5IG9wIHRvIGFkZFxuXHQgKiBAcmV0dXJuIGpzZXBcblx0ICovXG5cdGpzZXAuYWRkVW5hcnlPcCA9IGZ1bmN0aW9uKG9wX25hbWUpIHtcblx0XHR1bmFyeV9vcHNbb3BfbmFtZV0gPSB0OyByZXR1cm4gdGhpcztcblx0fTtcblxuXHQvKipcblx0ICogQG1ldGhvZCBqc2VwLmFkZEJpbmFyeU9wXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBvcF9uYW1lIFRoZSBuYW1lIG9mIHRoZSBiaW5hcnkgb3AgdG8gYWRkXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBwcmVjZWRlbmNlIFRoZSBwcmVjZWRlbmNlIG9mIHRoZSBiaW5hcnkgb3AgKGNhbiBiZSBhIGZsb2F0KVxuXHQgKiBAcmV0dXJuIGpzZXBcblx0ICovXG5cdGpzZXAuYWRkQmluYXJ5T3AgPSBmdW5jdGlvbihvcF9uYW1lLCBwcmVjZWRlbmNlKSB7XG5cdFx0bWF4X2Jpbm9wX2xlbiA9IE1hdGgubWF4KG9wX25hbWUubGVuZ3RoLCBtYXhfYmlub3BfbGVuKTtcblx0XHRiaW5hcnlfb3BzW29wX25hbWVdID0gcHJlY2VkZW5jZTtcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQvKipcblx0ICogQG1ldGhvZCBqc2VwLnJlbW92ZVVuYXJ5T3Bcblx0ICogQHBhcmFtIHtzdHJpbmd9IG9wX25hbWUgVGhlIG5hbWUgb2YgdGhlIHVuYXJ5IG9wIHRvIHJlbW92ZVxuXHQgKiBAcmV0dXJuIGpzZXBcblx0ICovXG5cdGpzZXAucmVtb3ZlVW5hcnlPcCA9IGZ1bmN0aW9uKG9wX25hbWUpIHtcblx0XHRkZWxldGUgdW5hcnlfb3BzW29wX25hbWVdO1xuXHRcdGlmKG9wX25hbWUubGVuZ3RoID09PSBtYXhfdW5vcF9sZW4pIHtcblx0XHRcdG1heF91bm9wX2xlbiA9IGdldE1heEtleUxlbih1bmFyeV9vcHMpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQvKipcblx0ICogQG1ldGhvZCBqc2VwLnJlbW92ZUJpbmFyeU9wXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBvcF9uYW1lIFRoZSBuYW1lIG9mIHRoZSBiaW5hcnkgb3AgdG8gcmVtb3ZlXG5cdCAqIEByZXR1cm4ganNlcFxuXHQgKi9cblx0anNlcC5yZW1vdmVCaW5hcnlPcCA9IGZ1bmN0aW9uKG9wX25hbWUpIHtcblx0XHRkZWxldGUgYmluYXJ5X29wc1tvcF9uYW1lXTtcblx0XHRpZihvcF9uYW1lLmxlbmd0aCA9PT0gbWF4X2Jpbm9wX2xlbikge1xuXHRcdFx0bWF4X2Jpbm9wX2xlbiA9IGdldE1heEtleUxlbihiaW5hcnlfb3BzKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0Ly8gSW4gZGVza3RvcCBlbnZpcm9ubWVudHMsIGhhdmUgYSB3YXkgdG8gcmVzdG9yZSB0aGUgb2xkIHZhbHVlIGZvciBganNlcGBcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSAndW5kZWZpbmVkJykge1xuXHRcdHZhciBvbGRfanNlcCA9IHJvb3QuanNlcDtcblx0XHQvLyBUaGUgc3RhciBvZiB0aGUgc2hvdyEgSXQncyBhIGZ1bmN0aW9uIVxuXHRcdHJvb3QuanNlcCA9IGpzZXA7XG5cdFx0Ly8gQW5kIGEgY291cnRlb3VzIGZ1bmN0aW9uIHdpbGxpbmcgdG8gbW92ZSBvdXQgb2YgdGhlIHdheSBmb3Igb3RoZXIgc2ltaWxhcmx5LW5hbWVkIG9iamVjdHMhXG5cdFx0anNlcC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZihyb290LmpzZXAgPT09IGpzZXApIHtcblx0XHRcdFx0cm9vdC5qc2VwID0gb2xkX2pzZXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4ganNlcDtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdC8vIEluIE5vZGUuSlMgZW52aXJvbm1lbnRzXG5cdFx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0XHRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBqc2VwO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRleHBvcnRzLnBhcnNlID0ganNlcDtcblx0XHR9XG5cdH1cbn0odGhpcykpO1xuIiwiLy8ga25vY2tvdXQtc29ydGFibGUgMC4xMS4wIHwgKGMpIDIwMTUgUnlhbiBOaWVtZXllciB8ICBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlXG4hZnVuY3Rpb24oYSl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kKWRlZmluZShbXCJrbm9ja291dFwiLFwianF1ZXJ5XCIsXCJqcXVlcnktdWkvc29ydGFibGVcIixcImpxdWVyeS11aS9kcmFnZ2FibGVcIl0sYSk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSl7dmFyIGI9cmVxdWlyZShcImtub2Nrb3V0XCIpLGM9cmVxdWlyZShcImpxdWVyeVwiKTtyZXF1aXJlKFwianF1ZXJ5LXVpL3NvcnRhYmxlXCIpLHJlcXVpcmUoXCJqcXVlcnktdWkvZHJhZ2dhYmxlXCIpLGEoYixjKX1lbHNlIGEod2luZG93LmtvLHdpbmRvdy5qUXVlcnkpfShmdW5jdGlvbihhLGIpe3ZhciBjPVwia29fc29ydEl0ZW1cIixkPVwia29fc291cmNlSW5kZXhcIixlPVwia29fc29ydExpc3RcIixmPVwia29fcGFyZW50TGlzdFwiLGc9XCJrb19kcmFnSXRlbVwiLGg9YS51dGlscy51bndyYXBPYnNlcnZhYmxlLGk9YS51dGlscy5kb21EYXRhLmdldCxqPWEudXRpbHMuZG9tRGF0YS5zZXQsaz1iLnVpJiZiLnVpLnZlcnNpb24sbD1rJiZrLmluZGV4T2YoXCIxLjYuXCIpJiZrLmluZGV4T2YoXCIxLjcuXCIpJiYoay5pbmRleE9mKFwiMS44LlwiKXx8XCIxLjguMjRcIj09PWspLG09ZnVuY3Rpb24oYixkKXthLnV0aWxzLmFycmF5Rm9yRWFjaChiLGZ1bmN0aW9uKGEpezE9PT1hLm5vZGVUeXBlJiYoaihhLGMsZCksaihhLGYsaShhLnBhcmVudE5vZGUsZSkpKX0pfSxuPWZ1bmN0aW9uKGIsYyl7dmFyIGQsZT17fSxmPWgoYigpKXx8e307cmV0dXJuIGYuZGF0YT8oZVtjXT1mLmRhdGEsZS5uYW1lPWYudGVtcGxhdGUpOmVbY109YigpLGEudXRpbHMuYXJyYXlGb3JFYWNoKFtcImFmdGVyQWRkXCIsXCJhZnRlclJlbmRlclwiLFwiYXNcIixcImJlZm9yZVJlbW92ZVwiLFwiaW5jbHVkZURlc3Ryb3llZFwiLFwidGVtcGxhdGVFbmdpbmVcIixcInRlbXBsYXRlT3B0aW9uc1wiLFwibm9kZXNcIl0sZnVuY3Rpb24oYil7Zi5oYXNPd25Qcm9wZXJ0eShiKT9lW2JdPWZbYl06YS5iaW5kaW5nSGFuZGxlcnMuc29ydGFibGUuaGFzT3duUHJvcGVydHkoYikmJihlW2JdPWEuYmluZGluZ0hhbmRsZXJzLnNvcnRhYmxlW2JdKX0pLFwiZm9yZWFjaFwiPT09YyYmKGUuYWZ0ZXJSZW5kZXI/KGQ9ZS5hZnRlclJlbmRlcixlLmFmdGVyUmVuZGVyPWZ1bmN0aW9uKGEsYil7bS5jYWxsKGIsYSxiKSxkLmNhbGwoYixhLGIpfSk6ZS5hZnRlclJlbmRlcj1tKSxlfSxvPWZ1bmN0aW9uKGEsYil7dmFyIGM9aChiKTtpZihjKWZvcih2YXIgZD0wO2E+ZDtkKyspY1tkXSYmaChjW2RdLl9kZXN0cm95KSYmYSsrO3JldHVybiBhfSxwPWZ1bmN0aW9uKGMsZCl7dmFyIGUsZjtkPyhmPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGQpLGYmJihlPW5ldyBhLnRlbXBsYXRlU291cmNlcy5kb21FbGVtZW50KGYpLGUudGV4dChiLnRyaW0oZS50ZXh0KCkpKSkpOmIoYykuY29udGVudHMoKS5lYWNoKGZ1bmN0aW9uKCl7dGhpcyYmMSE9PXRoaXMubm9kZVR5cGUmJmMucmVtb3ZlQ2hpbGQodGhpcyl9KX07YS5iaW5kaW5nSGFuZGxlcnMuc29ydGFibGU9e2luaXQ6ZnVuY3Rpb24oayxtLHEscixzKXt2YXIgdCx1LHY9YihrKSx3PWgobSgpKXx8e30seD1uKG0sXCJmb3JlYWNoXCIpLHk9e307cChrLHgubmFtZSksYi5leHRlbmQoITAseSxhLmJpbmRpbmdIYW5kbGVycy5zb3J0YWJsZSksdy5vcHRpb25zJiZ5Lm9wdGlvbnMmJihhLnV0aWxzLmV4dGVuZCh5Lm9wdGlvbnMsdy5vcHRpb25zKSxkZWxldGUgdy5vcHRpb25zKSxhLnV0aWxzLmV4dGVuZCh5LHcpLHkuY29ubmVjdENsYXNzJiYoYS5pc09ic2VydmFibGUoeS5hbGxvd0Ryb3ApfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiB5LmFsbG93RHJvcCk/YS5jb21wdXRlZCh7cmVhZDpmdW5jdGlvbigpe3ZhciBiPWgoeS5hbGxvd0Ryb3ApLGM9XCJmdW5jdGlvblwiPT10eXBlb2YgYj9iLmNhbGwodGhpcyx4LmZvcmVhY2gpOmI7YS51dGlscy50b2dnbGVEb21Ob2RlQ3NzQ2xhc3Moayx5LmNvbm5lY3RDbGFzcyxjKX0sZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkOmt9LHRoaXMpOmEudXRpbHMudG9nZ2xlRG9tTm9kZUNzc0NsYXNzKGsseS5jb25uZWN0Q2xhc3MseS5hbGxvd0Ryb3ApLGEuYmluZGluZ0hhbmRsZXJzLnRlbXBsYXRlLmluaXQoayxmdW5jdGlvbigpe3JldHVybiB4fSxxLHIscyksdD15Lm9wdGlvbnMuc3RhcnQsdT15Lm9wdGlvbnMudXBkYXRlO3ZhciB6PXNldFRpbWVvdXQoZnVuY3Rpb24oKXt2YXIgbTt2LnNvcnRhYmxlKGEudXRpbHMuZXh0ZW5kKHkub3B0aW9ucyx7c3RhcnQ6ZnVuY3Rpb24oYixjKXt2YXIgZT1jLml0ZW1bMF07aihlLGQsYS51dGlscy5hcnJheUluZGV4T2YoYy5pdGVtLnBhcmVudCgpLmNoaWxkcmVuKCksZSkpLGMuaXRlbS5maW5kKFwiaW5wdXQ6Zm9jdXNcIikuY2hhbmdlKCksdCYmdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LHJlY2VpdmU6ZnVuY3Rpb24oYSxiKXttPWkoYi5pdGVtWzBdLGcpLG0mJihtLmNsb25lJiYobT1tLmNsb25lKCkpLHkuZHJhZ2dlZCYmKG09eS5kcmFnZ2VkLmNhbGwodGhpcyxtLGEsYil8fG0pKX0sdXBkYXRlOmZ1bmN0aW9uKGcsaCl7dmFyIGssbixwLHEscixzPWguaXRlbVswXSx0PWguaXRlbS5wYXJlbnQoKVswXSx2PWkocyxjKXx8bTtpZihtPW51bGwsdiYmdGhpcz09PXR8fCFsJiZiLmNvbnRhaW5zKHRoaXMsdCkpe2lmKGs9aShzLGYpLHA9aShzLGQpLG49aShzLnBhcmVudE5vZGUsZSkscT1hLnV0aWxzLmFycmF5SW5kZXhPZihoLml0ZW0ucGFyZW50KCkuY2hpbGRyZW4oKSxzKSx4LmluY2x1ZGVEZXN0cm95ZWR8fChwPW8ocCxrKSxxPW8ocSxuKSksKHkuYmVmb3JlTW92ZXx8eS5hZnRlck1vdmUpJiYocj17aXRlbTp2LHNvdXJjZVBhcmVudDprLHNvdXJjZVBhcmVudE5vZGU6ayYmaC5zZW5kZXJ8fHMucGFyZW50Tm9kZSxzb3VyY2VJbmRleDpwLHRhcmdldFBhcmVudDpuLHRhcmdldEluZGV4OnEsY2FuY2VsRHJvcDohMX0seS5iZWZvcmVNb3ZlJiZ5LmJlZm9yZU1vdmUuY2FsbCh0aGlzLHIsZyxoKSksaz9iKGs9PT1uP3RoaXM6aC5zZW5kZXJ8fHRoaXMpLnNvcnRhYmxlKFwiY2FuY2VsXCIpOmIocykucmVtb3ZlKCksciYmci5jYW5jZWxEcm9wKXJldHVybjtxPj0wJiYoayYmKGsuc3BsaWNlKHAsMSksYS5wcm9jZXNzQWxsRGVmZXJyZWRCaW5kaW5nVXBkYXRlcyYmYS5wcm9jZXNzQWxsRGVmZXJyZWRCaW5kaW5nVXBkYXRlcygpKSxuLnNwbGljZShxLDAsdikpLGoocyxjLG51bGwpLGEucHJvY2Vzc0FsbERlZmVycmVkQmluZGluZ1VwZGF0ZXMmJmEucHJvY2Vzc0FsbERlZmVycmVkQmluZGluZ1VwZGF0ZXMoKSx5LmFmdGVyTW92ZSYmeS5hZnRlck1vdmUuY2FsbCh0aGlzLHIsZyxoKX11JiZ1LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sY29ubmVjdFdpdGg6eS5jb25uZWN0Q2xhc3M/XCIuXCIreS5jb25uZWN0Q2xhc3M6ITF9KSksdm9pZCAwIT09eS5pc0VuYWJsZWQmJmEuY29tcHV0ZWQoe3JlYWQ6ZnVuY3Rpb24oKXt2LnNvcnRhYmxlKGgoeS5pc0VuYWJsZWQpP1wiZW5hYmxlXCI6XCJkaXNhYmxlXCIpfSxkaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQ6a30pfSwwKTtyZXR1cm4gYS51dGlscy5kb21Ob2RlRGlzcG9zYWwuYWRkRGlzcG9zZUNhbGxiYWNrKGssZnVuY3Rpb24oKXsodi5kYXRhKFwidWktc29ydGFibGVcIil8fHYuZGF0YShcInNvcnRhYmxlXCIpKSYmdi5zb3J0YWJsZShcImRlc3Ryb3lcIiksYS51dGlscy50b2dnbGVEb21Ob2RlQ3NzQ2xhc3Moayx5LmNvbm5lY3RDbGFzcywhMSksY2xlYXJUaW1lb3V0KHopfSkse2NvbnRyb2xzRGVzY2VuZGFudEJpbmRpbmdzOiEwfX0sdXBkYXRlOmZ1bmN0aW9uKGIsYyxkLGYsZyl7dmFyIGg9bihjLFwiZm9yZWFjaFwiKTtqKGIsZSxoLmZvcmVhY2gpLGEuYmluZGluZ0hhbmRsZXJzLnRlbXBsYXRlLnVwZGF0ZShiLGZ1bmN0aW9uKCl7cmV0dXJuIGh9LGQsZixnKX0sY29ubmVjdENsYXNzOlwia29fY29udGFpbmVyXCIsYWxsb3dEcm9wOiEwLGFmdGVyTW92ZTpudWxsLGJlZm9yZU1vdmU6bnVsbCxvcHRpb25zOnt9fSxhLmJpbmRpbmdIYW5kbGVycy5kcmFnZ2FibGU9e2luaXQ6ZnVuY3Rpb24oYyxkLGUsZixpKXt2YXIgaz1oKGQoKSl8fHt9LGw9ay5vcHRpb25zfHx7fSxtPWEudXRpbHMuZXh0ZW5kKHt9LGEuYmluZGluZ0hhbmRsZXJzLmRyYWdnYWJsZS5vcHRpb25zKSxvPW4oZCxcImRhdGFcIikscD1rLmNvbm5lY3RDbGFzc3x8YS5iaW5kaW5nSGFuZGxlcnMuZHJhZ2dhYmxlLmNvbm5lY3RDbGFzcyxxPXZvaWQgMCE9PWsuaXNFbmFibGVkP2suaXNFbmFibGVkOmEuYmluZGluZ0hhbmRsZXJzLmRyYWdnYWJsZS5pc0VuYWJsZWQ7cmV0dXJuIGs9XCJkYXRhXCJpbiBrP2suZGF0YTprLGooYyxnLGspLGEudXRpbHMuZXh0ZW5kKG0sbCksbS5jb25uZWN0VG9Tb3J0YWJsZT1wP1wiLlwiK3A6ITEsYihjKS5kcmFnZ2FibGUobSksdm9pZCAwIT09cSYmYS5jb21wdXRlZCh7cmVhZDpmdW5jdGlvbigpe2IoYykuZHJhZ2dhYmxlKGgocSk/XCJlbmFibGVcIjpcImRpc2FibGVcIil9LGRpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZDpjfSksYS51dGlscy5kb21Ob2RlRGlzcG9zYWwuYWRkRGlzcG9zZUNhbGxiYWNrKGMsZnVuY3Rpb24oKXtiKGMpLmRyYWdnYWJsZShcImRlc3Ryb3lcIil9KSxhLmJpbmRpbmdIYW5kbGVycy50ZW1wbGF0ZS5pbml0KGMsZnVuY3Rpb24oKXtyZXR1cm4gb30sZSxmLGkpfSx1cGRhdGU6ZnVuY3Rpb24oYixjLGQsZSxmKXt2YXIgZz1uKGMsXCJkYXRhXCIpO3JldHVybiBhLmJpbmRpbmdIYW5kbGVycy50ZW1wbGF0ZS51cGRhdGUoYixmdW5jdGlvbigpe3JldHVybiBnfSxkLGUsZil9LGNvbm5lY3RDbGFzczphLmJpbmRpbmdIYW5kbGVycy5zb3J0YWJsZS5jb25uZWN0Q2xhc3Msb3B0aW9uczp7aGVscGVyOlwiY2xvbmVcIn19fSk7IiwiLy8gS25vY2tvdXQgVW5kb01hbmFnZXIgdjAuMiB8IChjKSAyMDE1IFN0ZWZhbm8gQmFnbmFyYVxuLy8gTGljZW5zZTogTUlUIChodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlKSBcbi8vIHJlcXVpcmVzIFwia28ud2F0Y2hcIiBtZXRob2QgZnJvbSBrbm9ja291dC5yZWFjdG9yXG4oZnVuY3Rpb24gKGZhY3RvcnkpIHtcbiAgLy8gTW9kdWxlIHN5c3RlbXMgbWFnaWMgZGFuY2UuXG4gIGlmICh0eXBlb2YgcmVxdWlyZSA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAvLyBDb21tb25KUyBvciBOb2RlOiBoYXJkLWNvZGVkIGRlcGVuZGVuY3kgb24gXCJrbm9ja291dFwiXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCJrbm9ja291dFwiKSwgcmVxdWlyZShcImtub2Nrb3V0anMtcmVhY3RvclwiKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZVtcImFtZFwiXSkge1xuICAgIC8vIEFNRCBhbm9ueW1vdXMgbW9kdWxlIHdpdGggaGFyZC1jb2RlZCBkZXBlbmRlbmN5IG9uIFwia25vY2tvdXRcIlxuICAgIGRlZmluZShbXCJrbm9ja291dFwiLCBcImtub2Nrb3V0anMtcmVhY3RvclwiLCBcImV4cG9ydHNcIl0sIGZhY3RvcnkpO1xuICB9IGVsc2Uge1xuICAgIC8vIDxzY3JpcHQ+IHRhZzogdXNlIHRoZSBnbG9iYWwgYGtvYCBvYmplY3RcbiAgICBmYWN0b3J5KGtvLCBrby53YXRjaCk7XG4gIH1cbn0oZnVuY3Rpb24gKGtvLCByZWFjdG9yKSB7IFxuXG4gIC8vLyA8c3VtbWFyeT5cbiAgLy8vICAgICBUcmFjayBsYXN0IFwibGV2ZWxzXCIgY2hhbmdlcyB3aXRoaW4gdGhlIGNoYWluZWQgb2JzZXJ2YWJsZSBkb3duIHRvIGFueSBnaXZlbiBsZXZlbCBhbmRcbiAgLy8vICAgICBzdXBwb3J0cyB1bmRvaW5nL3JlZG9pbmcgdGhlIGNoYW5nZXMuXG4gIC8vLyA8L3N1bW1hcnk+XG4gIC8vLyA8cGFyYW0gbmFtZT1cIm9wdGlvbnNcIiB0eXBlPVwib2JqZWN0XCI+XG4gIC8vLyAgICAgeyBsZXZlbHM6IDIgfSAtPiBSZW1lbWJlciBvbmx5IGxhc3QgXCJsZXZlbHNcIiBjaGFuZ2VzPGJyLz5cbiAgLy8vICAgICB7IHVuZG9MYWJlbDogXCJVbmRvIGl0ICgjQ09VTlQpIVwiIH0gLT4gRGVmaW5lIGEgbGFiZWwgZm9yIHRoZSB1bmRvIGNvbW1hbmQuIFwiI0NPVU5UI1wiIHNlcXVlbmNlIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCB0aGUgc3RhY2sgbGVuZ3RoLjxici8+XG4gIC8vLyAgICAgeyByZWRvTGFiZWw6IFwiUmVkbyBpdCAoI0NPVU5UKSFcIiB9IC0+IERlZmluZSBhIGxhYmVsIGZvciB0aGUgcmVkbyBjb21tYW5kLiBcIiNDT1VOVCNcIiBzZXF1ZW5jZSB3aWxsIGJlIHJlcGxhY2VkIHdpdGggdGhlIHN0YWNrIGxlbmd0aC48YnIvPlxuICAvLy8gPC9wYXJhbT5cbiAgdmFyIHVuZG9NYW5hZ2VyID0gZnVuY3Rpb24gKG1vZGVsLCBvcHRpb25zKSB7XG4gICAgdmFyIHVuZG9TdGFjayA9IGtvLm9ic2VydmFibGVBcnJheSgpO1xuICAgIHZhciByZWRvU3RhY2sgPSBrby5vYnNlcnZhYmxlQXJyYXkoKTtcbiAgICB2YXIgbGFzdFB1c2hlZFN0YWNrO1xuICAgIHZhciBTVEFURV9ET0lORyA9IDA7XG4gICAgdmFyIFNUQVRFX1VORE9JTkcgPSAxO1xuICAgIHZhciBTVEFURV9SRURPSU5HID0gMjtcbiAgICB2YXIgc3RhdGUgPSBTVEFURV9ET0lORztcblxuICAgIHZhciBNT0RFX05PUk1BTCA9IDA7IC8vIGFkZCB0byBzdGFjayBldmVyeSBjaGFuZ2VcbiAgICB2YXIgTU9ERV9JR05PUkUgPSAxOyAvLyBkbyBub3QgYWRkIGFueXRoaW5nIHRvIHRoZSBzdGFja1xuICAgIHZhciBNT0RFX09OQ0UgPSAyOyAvLyBvbmx5IG9uZSBzZXF1ZW50aWFsIGNoYW5nZSBmb3IgZWFjaCBwcm9wZXJ0eSBpcyBhZGRlZCB0byB0aGUgc3RhY2tcbiAgICB2YXIgTU9ERV9NRVJHRSA9IDM7IC8vIG1lcmdlIG5leHQgY2hhbmdlIHdpdGggdGhlIGxhc3Qgb25lXG4gICAgdmFyIG1vZGUgPSBNT0RFX05PUk1BTDtcblxuICAgIHZhciBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICAgIGxldmVsczogMTAwLFxuICAgICAgdW5kb0xhYmVsOiBcInVuZG8gKCNDT1VOVCMpXCIsXG4gICAgICByZWRvTGFiZWw6IFwicmVkbyAoI0NPVU5UIylcIlxuICAgIH07XG4gICAgXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09ICdvYmplY3QnKSB7XG4gICAgICBvcHRpb25zID0ga28udXRpbHMuZXh0ZW5kKGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9ucyA9IGRlZmF1bHRPcHRpb25zO1xuICAgIH1cbiAgXG4gICAgdmFyIF9wdXNoID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgLy8gZHVyYW50ZSBVTkRPL1JFRE8gbGF2b3JpYW1vIHNlbXByZSBpbiBub3JtYWxlXG4gICAgICBpZiAoc3RhdGUgPT0gU1RBVEVfVU5ET0lORykge1xuICAgICAgICBfcHVzaEludChhY3Rpb24sIHJlZG9TdGFjayk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlID09IFNUQVRFX1JFRE9JTkcpIHtcbiAgICAgICAgX3B1c2hJbnQoYWN0aW9uLCB1bmRvU3RhY2spO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PSBTVEFURV9ET0lORykge1xuICAgICAgICBfcHVzaEludChhY3Rpb24sIHVuZG9TdGFjayk7XG4gICAgICAgIHJlZG9TdGFjay5yZW1vdmVBbGwoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIHZhciBfdHJ5TWVyZ2UgPSBmdW5jdGlvbiAocHJldiwgbmV3QWN0aW9uKSB7XG4gICAgICBpZiAodHlwZW9mIHByZXYubWVyZ2VkQWN0aW9uICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gcHJldi5tZXJnZWRBY3Rpb24obmV3QWN0aW9uKTtcbiAgICAgIH0gZWxzZSByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgdmFyIF9wdXNoSW50ID0gZnVuY3Rpb24gKGFjdGlvbiwgbXlTdGFjaykge1xuICAgICAgLyogZ2VzdGlvbmUgZGVsIG1lcmdlIGRpIGF6aW9uaTogc2UgbCd1bHRpbWEgYXppb25lIG5lbGxvIHN0YWNrIGhhIHVuIG1ldG9kbyBcIm1lcmdlZEFjdGlvblwiXG4gICAgICAgICBwcm92aWFtbyBhZCBpbnZvY2FybG8gZSBzZSBjaSByZXN0aXR1aXNjZSB1bmEgZnVuemlvbmUgbGEgdXNpYW1vIGFsIHBvc3RvIGRpIGVudHJhbWJlICovXG4gICAgICAvLyBjb25zb2xlLmxvZyhcIlVSXCIsIFwiX3B1c2hJbnRcIiwgbXlTdGFjaygpLmxlbmd0aCA+IDAgPyB0eXBlb2YgbXlTdGFjaygpW215U3RhY2soKS5sZW5ndGggLSAxXS5tZXJnZWRBY3Rpb24gOiBcIkVNUFRZXCIpO1xuICAgICAgaWYgKG15U3RhY2soKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciBtZXJnZWQgPSBfdHJ5TWVyZ2UobXlTdGFjaygpW215U3RhY2soKS5sZW5ndGggLSAxXSwgYWN0aW9uKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJVUlwiLCBcIl9wdXNoSW50Lm1lcmdlZFwiLCBtZXJnZWQsIFwiTVZcIiwgdHlwZW9mIGFjdGlvbi5tZXJnZWFibGVNb3ZlLCBcIk1BXCIsIHR5cGVvZiBhY3Rpb24ubWVyZ2VhYmxlQWN0aW9uLCBcIk1NXCIsIHR5cGVvZiBhY3Rpb24ubWVyZ2VNZSk7XG4gICAgICAgIGlmIChtZXJnZWQgIT09IG51bGwpIHtcbiAgICAgICAgICBteVN0YWNrKClbbXlTdGFjaygpLmxlbmd0aCAtIDFdID0gbWVyZ2VkO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG15U3RhY2soKS5sZW5ndGggPj0gb3B0aW9ucy5sZXZlbHMpIG15U3RhY2suc2hpZnQoKTtcbiAgICAgIGxhc3RQdXNoZWRTdGFjayA9IG15U3RhY2s7XG4gICAgICBteVN0YWNrLnB1c2goYWN0aW9uKTtcbiAgICB9O1xuICAgIFxuICAgIHZhciBfeGRvQ29tbWFuZCA9IGZ1bmN0aW9uKGxhYmVsLCB3b3JrU3RhdGUsIHN0YWNrKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShsYWJlbCkucmVwbGFjZSgvI0NPVU5UIy8sIHN0YWNrKCkubGVuZ3RoKTtcbiAgICAgICAgfSksXG4gICAgICAgIGVuYWJsZWQ6IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBzdGFjaygpLmxlbmd0aCAhPT0gMDtcbiAgICAgICAgfSksXG4gICAgICAgIGV4ZWN1dGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhY3Rpb24gPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICBpZiAoYWN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgcHJldlN0YXRlID0gc3RhdGU7XG4gICAgICAgICAgICBzdGF0ZSA9IHdvcmtTdGF0ZTtcbiAgICAgICAgICAgIHZhciBvbGRNb2RlID0gbW9kZTtcbiAgICAgICAgICAgIG1vZGUgPSBNT0RFX01FUkdFO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJYRE9cIiwgXCJiZWZvcmVcIiwgbGFiZWwpO1xuICAgICAgICAgICAgYWN0aW9uKCk7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlhET1wiLCBcImFmdGVyXCIsIGxhYmVsKTtcbiAgICAgICAgICAgIF9yZW1vdmVNZXJnZWRBY3Rpb24obGFzdFB1c2hlZFN0YWNrKTtcbiAgICAgICAgICAgIG1vZGUgPSBvbGRNb2RlO1xuICAgICAgICAgICAgc3RhdGUgPSBwcmV2U3RhdGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG5cbiAgICB2YXIgX3JlbW92ZU1lcmdlZEFjdGlvbiA9IGZ1bmN0aW9uKG15U3RhY2spIHtcbiAgICAgIGlmICh0eXBlb2YgbXlTdGFjayA9PSAndW5kZWZpbmVkJykgdGhyb3cgXCJVbmV4cGVjdGVkIG9wZXJhdGlvbjogc3RhY2sgY2xlYW5lciBjYWxsZWQgd2l0aCB1bmRlZmluZWQgc3RhY2tcIjtcbiAgICAgIFxuICAgICAgaWYgKG15U3RhY2soKS5sZW5ndGggPiAwICYmIHR5cGVvZiBteVN0YWNrKClbbXlTdGFjaygpLmxlbmd0aCAtIDFdLm1lcmdlZEFjdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJSZW1vdmluZyBtZXJnZWRBY3Rpb24gZnJvbSBzdGFja1wiKTtcbiAgICAgICAgZGVsZXRlIG15U3RhY2soKVtteVN0YWNrKCkubGVuZ3RoIC0gMV0ubWVyZ2VkQWN0aW9uO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgX2NvbWJpbmVkRnVuY3Rpb24gPSBmdW5jdGlvbihmaXJzdCwgc2Vjb25kKSB7XG4gICAgICB2YXIgcmVzID0gKGZ1bmN0aW9uKGYxLCBmMikge1xuICAgICAgICBmMSgpO1xuICAgICAgICBmMigpO1xuICAgICAgfSkuYmluZCh1bmRlZmluZWQsIGZpcnN0LCBzZWNvbmQpO1xuICAgICAgaWYgKHR5cGVvZiBmaXJzdC5tZXJnZWRBY3Rpb24gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJlcy5tZXJnZWRBY3Rpb24gPSBmaXJzdC5tZXJnZWRBY3Rpb247XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH07XG5cbiAgICB2YXIgZXhlY3V0ZVVuZG9BY3Rpb24gPSBmdW5jdGlvbihjaGlsZCwgdmFsdWUsIGl0ZW0pIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKFwiZXhlY3V0ZVVuZG9BY3Rpb25cIiwgY2hpbGQsIHZhbHVlLCBpdGVtKTtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNoaWxkKHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoaXRlbSkge1xuICAgICAgICBpZiAoaXRlbS5zdGF0dXMgPT0gJ2RlbGV0ZWQnKSB7XG4gICAgICAgICAgY2hpbGQuc3BsaWNlKGl0ZW0uaW5kZXgsIDAsIGl0ZW0udmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGl0ZW0uc3RhdHVzID09ICdhZGRlZCcpIHtcbiAgICAgICAgICBjaGlsZC5zcGxpY2UoaXRlbS5pbmRleCwgMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgXCJVbnN1cHByb3RlZCBpdGVtLnN0YXR1czogXCIraXRlbS5zdGF0dXM7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IFwiVW5leHBlY3RlZCBjb25kaXRpb246IG5vIGl0ZW0gYW5kIG5vIGNoaWxkLm9sZFZhbHVlcyFcIjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIG1ha2VVbmRvQWN0aW9uRGVmYXVsdCA9IGZ1bmN0aW9uKHVuZG9GdW5jLCBwYXJlbnRzLCBjaGlsZCwgb2xkVmFsLCBpdGVtKSB7XG4gICAgICByZXR1cm4gdW5kb0Z1bmMuYmluZCh1bmRlZmluZWQsIGNoaWxkLCBvbGRWYWwsIGl0ZW0pO1xuICAgIH07XG5cbiAgICB2YXIgbWFrZVVuZG9BY3Rpb24gPSBtYWtlVW5kb0FjdGlvbkRlZmF1bHQ7XG5cbiAgICB2YXIgY2hhbmdlUHVzaGVyID0gZnVuY3Rpb24ocGFyZW50cywgY2hpbGQsIGl0ZW0pIHtcbiAgICAgIHZhciBvbGRWYWwgPSB0eXBlb2YgY2hpbGQub2xkVmFsdWVzICE9ICd1bmRlZmluZWQnID8gY2hpbGQub2xkVmFsdWVzWzBdIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIGFjdCA9IG1ha2VVbmRvQWN0aW9uKGV4ZWN1dGVVbmRvQWN0aW9uLCBwYXJlbnRzLCBjaGlsZCwgb2xkVmFsLCBpdGVtKTtcblxuICAgICAgaWYgKG1vZGUgPT0gTU9ERV9JR05PUkUpIHJldHVybjtcblxuICAgICAgaWYgKG1vZGUgPT0gTU9ERV9NRVJHRSkge1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlVSXCIsIFwibWVyZ2Vtb2RlXCIpO1xuICAgICAgICBpZiAodHlwZW9mIGFjdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBhY3QubWVyZ2VkQWN0aW9uID0gZnVuY3Rpb24obmV3QWN0aW9uKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG5ld0FjdGlvbi5tZXJnZU1lICE9PSAndW5kZWZpbmVkJyAmJiBuZXdBY3Rpb24ubWVyZ2VNZSkge1xuICAgICAgICAgICAgICByZXR1cm4gX2NvbWJpbmVkRnVuY3Rpb24obmV3QWN0aW9uLCB0aGlzKTtcbiAgICAgICAgICAgIH0gZWxzZSByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGFjdC5tZXJnZU1lID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhY3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgaWYgKGNoaWxkLm9sZFZhbHVlcyAmJiBtb2RlID09IE1PREVfT05DRSkge1xuICAgICAgICAgICAgYWN0Lm1lcmdlZEFjdGlvbiA9IGZ1bmN0aW9uKG9sZENoaWxkLCBvbGRJdGVtLCBuZXdBY3Rpb24pIHtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBuZXdBY3Rpb24ubWVyZ2VhYmxlQWN0aW9uID09ICdvYmplY3QnICYmIG9sZENoaWxkID09IG5ld0FjdGlvbi5tZXJnZWFibGVBY3Rpb24uY2hpbGQpIHtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlVSXCIsIFwiaWdub3JlIHVwZGF0ZSBmb3IgcHJvcGVydHkgaW4gTU9ERV9PTkNFXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICB9IGVsc2UgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9LmJpbmQoYWN0LCBjaGlsZCwgaXRlbSk7XG4gICAgICAgICAgICBhY3QubWVyZ2VhYmxlQWN0aW9uID0geyBjaGlsZDogY2hpbGQsIGl0ZW06IGl0ZW0gfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coXCJVUlwiLCBcIml0ZW0uc3RhdHVzXCIsIGl0ZW0uc3RhdHVzKTtcbiAgICAgICAgICAvLyBcIml0ZW1cIiBpcyB2YWx1ZWQgd2hlbiBhbiBpdGVtIGlzIGFkZGVkL3JlbW92ZWQvcmV0ZWluZWQgaW4gYW4gYXJyYXlcbiAgICAgICAgICAvLyBzb21ldGltZXMgS08gZGV0ZWN0IFwibW92ZXNcIiBhbmQgYWRkIGEgXCJtb3ZlZFwiIHByb3BlcnR5IHdpdGggdGhlIGluZGV4IGJ1dFxuICAgICAgICAgIC8vIHRoaXMgZG9lc24ndCBoYXBwZW4gZm9yIGV4YW1wbGUgdXNpbmcga25vY2tvdXQtc29ydGFibGUgb3Igd2hlbiBtb3Zpbmcgb2JqZWN0c1xuICAgICAgICAgIC8vIGJldHdlZW4gYXJyYXlzLlxuICAgICAgICAgIC8vIFNvIHRoaXMgZW5kcyB1cCBoYW5kbGluZyB0aGlzIHdpdGggXCJtZXJnZWFibGVNb3ZlXCIgYW5kIFwibWVyZ2VkQWN0aW9uXCI6IFxuICAgICAgICAgIGlmIChpdGVtICYmIGl0ZW0uc3RhdHVzID09ICdkZWxldGVkJykge1xuICAgICAgICAgICAgLy8gVE9ETyBzZSBzb25vIGluIE1PREUgPSBNRVJHRSBkZXZvIG1ldHRlZXIgdW5hIGZ1bnppb25lIGRpIG1lcmdlIGNoZSBhY2NldHRhIHR1dHRvLlxuICAgICAgICAgICAgLy8gYWx0cmltZW50aSBsYXNjaW8gcXVlc3RhLlxuICAgICAgICAgICAgYWN0Lm1lcmdlZEFjdGlvbiA9IGZ1bmN0aW9uKG9sZENoaWxkLCBvbGRJdGVtLCBuZXdBY3Rpb24pIHtcbiAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJVUlwiLCBcImFjdC5tZXJnZWRBY3Rpb25cIiwgdHlwZW9mIG5ld0FjdGlvbi5tZXJnZWFibGVNb3ZlKTtcbiAgICAgICAgICAgICAgLy8gYSBkZWxldGVkIGFjdGlvbiBpcyBhYmxlIHRvIG1lcmdlIHdpdGggYSBhZGRlZCBhY3Rpb24gaWYgdGhleSBhcHBseSB0byB0aGUgc2FtZVxuICAgICAgICAgICAgICAvLyBvYmplY3QuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgbmV3QWN0aW9uLm1lcmdlYWJsZU1vdmUgPT0gJ29iamVjdCcgJiYgb2xkSXRlbS52YWx1ZSA9PSBuZXdBY3Rpb24ubWVyZ2VhYmxlTW92ZS5pdGVtLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgLy8gaW4gdGhpcyBjYXNlIEkgc2ltcGx5IHJldHVybiBhIHNpbmdsZSBhY3Rpb24gcnVubmluZyBib3RoIGFjdGlvbnMgaW4gc2VxdWVuY2UsXG4gICAgICAgICAgICAgICAgLy8gdGhpcyB3YXkgdGhlIFwidW5kb1wiIHdpbGwgbmVlZCB0byB1bmRvIG9ubHkgb25jZSBmb3IgYSBcIm1vdmVcIiBvcGVyYXRpb24uXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb21iaW5lZEZ1bmN0aW9uKG5ld0FjdGlvbiwgdGhpcyk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJVUlwiLCBcIm5vdCBtZXJnZWFibGVcIiwgdHlwZW9mIG5ld0FjdGlvbi5tZXJnZWFibGVNb3ZlKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfS5iaW5kKGFjdCwgY2hpbGQsIGl0ZW0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXRlbSAmJiBpdGVtLnN0YXR1cyA9PSAnYWRkZWQnKSB7XG4gICAgICAgICAgICAvLyBhZGQgYSBtZXJnZWFibGVNb3ZlIHByb3BlcnR5IHRoYXQgd2lsbCBiZSB1c2VkIGJ5IHRoZSBuZXh0IGFjdGlvbiBcIm1lcmdlZEFjdGlvblwiIHRvIHNlZSBpZiB0aGlzIGFjdGlvblxuICAgICAgICAgICAgLy8gY2FuIGJlIG1lcmdlZC5cbiAgICAgICAgICAgIGFjdC5tZXJnZWFibGVNb3ZlID0geyBjaGlsZDogY2hpbGQsIGl0ZW06IGl0ZW0gfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgYWN0ICE9PSAndW5kZWZpbmVkJykgX3B1c2goYWN0KTtcbiAgICB9O1xuXG4gICAgdmFyIHJlYWN0b3JPcHRpb25zID0geyBkZXB0aDogLTEsIG9sZFZhbHVlczogMSwgbXV0YWJsZTogdHJ1ZSwgLyogdGFnUGFyZW50c1dpdGhOYW1lOiB0cnVlICovIHRhZ0ZpZWxkczogdHJ1ZSB9O1xuXG4gICAgdmFyIGNvbnRleHQgPSB7fTtcbiAgICB2YXIgcmVhY3QgPSB0eXBlb2YgcmVhY3RvciA9PSAnZnVuY3Rpb24nID8gcmVhY3RvciA6IGtvLndhdGNoO1xuICAgIHZhciByZXMgPSByZWFjdChtb2RlbCwgcmVhY3Rvck9wdGlvbnMsIGNoYW5nZVB1c2hlciwgY29udGV4dCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgcHVzaDogX3B1c2gsIFxuICAgICAgdW5kb0NvbW1hbmQ6IF94ZG9Db21tYW5kKG9wdGlvbnMudW5kb0xhYmVsLCBTVEFURV9VTkRPSU5HLCB1bmRvU3RhY2spLFxuICAgICAgcmVkb0NvbW1hbmQ6IF94ZG9Db21tYW5kKG9wdGlvbnMucmVkb0xhYmVsLCBTVEFURV9SRURPSU5HLCByZWRvU3RhY2spLFxuICAgICAgcmVzZXQ6IGZ1bmN0aW9uKCkgeyB1bmRvU3RhY2sucmVtb3ZlQWxsKCk7IHJlZG9TdGFjay5yZW1vdmVBbGwoKTsgfSxcbiAgICAgIC8vIHNldE1vZGU6IGZ1bmN0aW9uKG5ld01vZGUpIHsgbW9kZSA9IG5ld01vZGU7IF9yZW1vdmVNZXJnZWRBY3Rpb24odW5kb1N0YWNrKTsgfSxcbiAgICAgIHNldE1vZGVPbmNlOiBmdW5jdGlvbigpIHsgbW9kZSA9IE1PREVfT05DRTsgX3JlbW92ZU1lcmdlZEFjdGlvbih1bmRvU3RhY2spOyB9LFxuICAgICAgc2V0TW9kZU1lcmdlOiBmdW5jdGlvbigpIHsgbW9kZSA9IE1PREVfTUVSR0U7IF9yZW1vdmVNZXJnZWRBY3Rpb24odW5kb1N0YWNrKTsgfSxcbiAgICAgIHNldE1vZGVOb3JtYWw6IGZ1bmN0aW9uKCkgeyBtb2RlID0gTU9ERV9OT1JNQUw7IF9yZW1vdmVNZXJnZWRBY3Rpb24odW5kb1N0YWNrKTsgfSxcbiAgICAgIHNldE1vZGVJZ25vcmU6IGZ1bmN0aW9uKCkgeyBtb2RlID0gTU9ERV9JR05PUkU7IF9yZW1vdmVNZXJnZWRBY3Rpb24odW5kb1N0YWNrKTsgfSxcbiAgICAgIHNldFVuZG9BY3Rpb25NYWtlcjogZnVuY3Rpb24obWFrZXIpIHsgbWFrZVVuZG9BY3Rpb24gPSBtYWtlcjsgfSxcbiAgICAgIGRpc3Bvc2U6IGZ1bmN0aW9uKCkgeyAvKiBrby51bndhdGNoKG1vZGVsLCByZWFjdG9yT3B0aW9ucywgY2hhbmdlUHVzaGVyKTsgKi8gcmVzLmRpc3Bvc2UoKTsgfVxuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIHVuZG9NYW5hZ2VyO1xuICBcbn0pKTsiLCIvLyBLbm9ja291dCBGYXN0IE1hcHBpbmcgdjAuMVxuLy8gTGljZW5zZTogTUlUIChodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocClcblxuKGZ1bmN0aW9uIChmYWN0b3J5KSB7XG5cdC8vIE1vZHVsZSBzeXN0ZW1zIG1hZ2ljIGRhbmNlLlxuXG5cdGlmICh0eXBlb2YgcmVxdWlyZSA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KUyBvciBOb2RlOiBoYXJkLWNvZGVkIGRlcGVuZGVuY3kgb24gXCJrbm9ja291dFwiXG5cdFx0ZmFjdG9yeShyZXF1aXJlKFwia25vY2tvdXRcIiksIGV4cG9ydHMpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmVbXCJhbWRcIl0pIHtcblx0XHQvLyBBTUQgYW5vbnltb3VzIG1vZHVsZSB3aXRoIGhhcmQtY29kZWQgZGVwZW5kZW5jeSBvbiBcImtub2Nrb3V0XCJcblx0XHRkZWZpbmUoW1wia25vY2tvdXRcIiwgXCJleHBvcnRzXCJdLCBmYWN0b3J5KTtcblx0fSBlbHNlIHtcblx0XHQvLyA8c2NyaXB0PiB0YWc6IHVzZSB0aGUgZ2xvYmFsIGBrb2Agb2JqZWN0LCBhdHRhY2hpbmcgYSBgd3JhcGAgcHJvcGVydHlcblx0XHRmYWN0b3J5KGtvLCBrby53cmFwID0ge30pO1xuXHR9XG59KGZ1bmN0aW9uIChrbywgZXhwb3J0cykge1xuICAgIFxuICAgIC8vIHRoaXMgZnVuY3Rpb24gbWltaWNzIGtvLm1hcHBpbmdcbiAgICBleHBvcnRzLmZyb21KUyA9IGZ1bmN0aW9uKGpzT2JqZWN0LCBjb21wdXRlZEZ1bmN0aW9ucywgb2JzZXJ2YWJsZU9iamVjdHMpXG4gICAge1xuICAgICAgICByZXNldCgpO1xuXHRyZXR1cm4gd3JhcChqc09iamVjdCwgY29tcHV0ZWRGdW5jdGlvbnMsIG9ic2VydmFibGVPYmplY3RzKTtcbiAgICB9XG5cbiAgICAvLyB0aGlzIGZ1bmN0aW9uIHVud3JhcHMgdGhlIG91dGVyIGZvciBhc3NpZ25pbmcgdGhlIHJlc3VsdCB0byBhbiBvYnNlcnZhYmxlXG4gICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9TdGV2ZVNhbmRlcnNvbi9rbm9ja291dC9pc3N1ZXMvNTE3XG4gICAgZXhwb3J0cy51cGRhdGVGcm9tSlMgPSBmdW5jdGlvbihvYnNlcnZhYmxlLCBqc09iamVjdCwgY29tcHV0ZWRGdW5jdGlvbnMsIG9ic2VydmFibGVPYmplY3RzKVxuICAgIHtcbiAgICAgICAgcmVzZXQoKTtcblx0cmV0dXJuIG9ic2VydmFibGUoa28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh3cmFwKGpzT2JqZWN0LCBjb21wdXRlZEZ1bmN0aW9ucywgb2JzZXJ2YWJsZU9iamVjdHMpKSk7XG4gICAgfVxuXG4gICAgZXhwb3J0cy5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uU3RyaW5nLCBjb21wdXRlZEZ1bmN0aW9ucywgb2JzZXJ2YWJsZU9iamVjdHMpIHtcblx0dmFyIHBhcnNlZCA9IGtvLnV0aWxzLnBhcnNlSnNvbihqc29uU3RyaW5nKTtcblx0YXJndW1lbnRzWzBdID0gcGFyc2VkO1xuXHRyZXR1cm4gZXhwb3J0cy5mcm9tSlMuYXBwbHkodGhpcywgY29tcHV0ZWRGdW5jdGlvbnMsIG9ic2VydmFibGVPYmplY3RzKTtcbiAgICB9O1xuICAgIFxuICAgIGV4cG9ydHMudG9KUyA9IGZ1bmN0aW9uIChvYnNlcnZhYmxlKSB7XG5cdHJldHVybiB1bndyYXAob2JzZXJ2YWJsZSk7XG4gICAgfVxuXG4gICAgZXhwb3J0cy50b0pTT04gPSBmdW5jdGlvbiAob2JzZXJ2YWJsZSkge1xuXHR2YXIgcGxhaW5KYXZhU2NyaXB0T2JqZWN0ID0gZXhwb3J0cy50b0pTKG9ic2VydmFibGUpO1xuXHRyZXR1cm4ga28udXRpbHMuc3RyaW5naWZ5SnNvbihwbGFpbkphdmFTY3JpcHRPYmplY3QpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiB0eXBlT2YodmFsdWUpIHtcblx0dmFyIHMgPSB0eXBlb2YgdmFsdWU7XG5cdGlmIChzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlLmNvbnN0cnVjdG9yID09IERhdGUpXG4gICAgICAgICAgICAgICAgICAgIHMgPSAnZGF0ZSc7XG5cdFx0ZWxzZSBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PSAnW29iamVjdCBBcnJheV0nKVxuICAgICAgICAgICAgICAgICAgICBzID0gJ2FycmF5JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG5cdFx0cyA9ICdudWxsJztcbiAgICAgICAgICAgIH1cblx0fVxuXHRyZXR1cm4gcztcbiAgICB9XG5cbiAgICAvLyB1bndyYXBwaW5nXG4gICAgZnVuY3Rpb24gdW53cmFwT2JqZWN0KG8pXG4gICAge1xuXHR2YXIgdCA9IHt9O1xuXG5cdGZvciAodmFyIGsgaW4gbylcblx0e1xuXHQgICAgdmFyIHYgPSBvW2tdO1xuXG5cdCAgICBpZiAoa28uaXNDb21wdXRlZCh2KSlcblx0XHRjb250aW51ZTtcblxuXHQgICAgdFtrXSA9IHVud3JhcCh2KTtcblx0fVxuXG5cdHJldHVybiB0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVud3JhcEFycmF5KGEpXG4gICAge1xuXHR2YXIgciA9IFtdO1xuXG5cdGlmICghYSB8fCBhLmxlbmd0aCA9PSAwKVxuXHQgICAgcmV0dXJuIHI7XG5cdFxuXHRmb3IgKHZhciBpID0gMCwgbCA9IGEubGVuZ3RoOyBpIDwgbDsgKytpKVxuXHQgICAgci5wdXNoKHVud3JhcChhW2ldKSk7XG5cblx0cmV0dXJuIHI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW53cmFwKHYpXG4gICAge1xuXHR2YXIgaXNPYnNlcnZhYmxlID0ga28uaXNPYnNlcnZhYmxlKHYpO1xuXG5cdGlmIChpc09ic2VydmFibGUpXG5cdHtcblx0ICAgIHZhciB2YWwgPSB2KCk7XG5cblx0ICAgIHJldHVybiB1bndyYXAodmFsKTtcblx0fVxuXHRlbHNlXG5cdHtcblx0ICAgIGlmICh0eXBlT2YodikgPT0gXCJhcnJheVwiKVxuXHQgICAge1xuXHRcdHJldHVybiB1bndyYXBBcnJheSh2KTtcblx0ICAgIH1cblx0ICAgIGVsc2UgaWYgKHR5cGVPZih2KSA9PSBcIm9iamVjdFwiKVxuXHQgICAge1xuXHRcdHJldHVybiB1bndyYXBPYmplY3Qodik7XG5cdCAgICB9XG5cdCAgICBlbHNlXG5cdCAgICB7XG5cdFx0cmV0dXJuIHY7XG5cdCAgICB9XG5cdH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNldCgpXG4gICAge1xuICAgICAgICBwYXJlbnRzID0gW3tvYmo6IG51bGwsIHdyYXBwZWQ6IG51bGwsIGx2bDogXCJcIn1dO1xuICAgIH0gICAgXG4gICAgXG4gICAgLy8gd3JhcHBpbmdcblxuICAgIGZ1bmN0aW9uIHdyYXBPYmplY3QobywgY29tcHV0ZWRGdW5jdGlvbnMsIG9ic2VydmFibGVPYmplY3RzKVxuICAgIHtcbiAgICAgICAgLy8gY2hlY2sgZm9yIGluZmluaXRlIHJlY3Vyc2lvblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGlmIChwYXJlbnRzW2ldLm9iaiA9PT0gbykge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnRzW2ldLndyYXBwZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuXHR2YXIgdCA9IHt9O1xuXG5cdGZvciAodmFyIGsgaW4gbylcblx0e1xuXHQgICAgdmFyIHYgPSBvW2tdO1xuXG4gICAgICAgICAgICBwYXJlbnRzLnB1c2goe29iajogbywgd3JhcHBlZDogdCwgbHZsOiBjdXJyZW50THZsKCkgKyBcIi9cIiArIGt9KTtcblxuXHQgICAgdFtrXSA9IHdyYXAodiwgY29tcHV0ZWRGdW5jdGlvbnMsIG9ic2VydmFibGVPYmplY3RzKTtcblxuICAgICAgICAgICAgcGFyZW50cy5wb3AoKTtcblx0fVxuXG5cdGlmIChjb21wdXRlZEZ1bmN0aW9ucyAmJiBjb21wdXRlZEZ1bmN0aW9uc1tjdXJyZW50THZsKCldKVxuXHQgICAgdCA9IGNvbXB1dGVkRnVuY3Rpb25zW2N1cnJlbnRMdmwoKV0odCk7XG5cbiAgICAgICAgaWYgKGhhc0VTNVBsdWdpbigpKVxuICAgICAgICAgICAga28udHJhY2sodCk7XG5cblx0aWYgKG9ic2VydmFibGVPYmplY3RzKSByZXR1cm4ga28ub2JzZXJ2YWJsZSh0KTtcblx0cmV0dXJuIHQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd3JhcEFycmF5KGEsIGNvbXB1dGVkRnVuY3Rpb25zLCBvYnNlcnZhYmxlT2JqZWN0cylcbiAgICB7XG5cdHZhciByID0ga28ub2JzZXJ2YWJsZUFycmF5KCk7XG5cblx0aWYgKCFhIHx8IGEubGVuZ3RoID09IDApXG5cdCAgICByZXR1cm4gcjtcblxuXHRmb3IgKHZhciBpID0gMCwgbCA9IGEubGVuZ3RoOyBpIDwgbDsgKytpKVxuXHQgICAgci5wdXNoKHdyYXAoYVtpXSwgY29tcHV0ZWRGdW5jdGlvbnMsIG9ic2VydmFibGVPYmplY3RzKSk7XG5cblx0cmV0dXJuIHI7XG4gICAgfVxuXG4gICAgLy8gYSBzdGFjaywgdXNlZCBmb3IgdHdvIHB1cnBvc2VzOlxuICAgIC8vICAtIGNpcmN1bGFyIHJlZmVyZW5jZSBjaGVja2luZ1xuICAgIC8vICAtIGNvbXB1dGVkIGZ1bmN0aW9uc1xuICAgIHZhciBwYXJlbnRzO1xuXG4gICAgZnVuY3Rpb24gY3VycmVudEx2bCgpXG4gICAge1xuXHRyZXR1cm4gcGFyZW50c1twYXJlbnRzLmxlbmd0aC0xXS5sdmw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd3JhcCh2LCBjb21wdXRlZEZ1bmN0aW9ucywgb2JzZXJ2YWJsZU9iamVjdHMpXG4gICAge1xuXHRpZiAodHlwZU9mKHYpID09IFwiYXJyYXlcIilcblx0e1xuXHQgICAgcmV0dXJuIHdyYXBBcnJheSh2LCBjb21wdXRlZEZ1bmN0aW9ucywgb2JzZXJ2YWJsZU9iamVjdHMpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVPZih2KSA9PSBcIm9iamVjdFwiKVxuXHR7XG5cdCAgICByZXR1cm4gd3JhcE9iamVjdCh2LCBjb21wdXRlZEZ1bmN0aW9ucywgb2JzZXJ2YWJsZU9iamVjdHMpO1xuXHR9XG5cdGVsc2Vcblx0e1xuICAgICAgICAgICAgaWYgKCFoYXNFUzVQbHVnaW4oKSAmJiB0eXBlb2YgdiAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIHtcblx0ICAgICAgICB2YXIgdCA9IGtvLm9ic2VydmFibGUoKTtcblx0ICAgICAgICB0KHYpO1xuXHQgICAgICAgIHJldHVybiB0O1xuICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgcmV0dXJuIHY7XG5cdH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYXNFUzVQbHVnaW4oKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIGtvLnRyYWNrICE9IG51bGw7XG4gICAgfVxufSkpO1xuIiwia28uc3Vic2NyaWJhYmxlLmZuLndhdGNoPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXR5cGVvZiBhO3JldHVyblwiYm9vbGVhblwiPT09ZXx8XCJ1bmRlZmluZWRcIj09PWU/a28ud2F0Y2godGhpcyx7ZW5hYmxlZDphIT09ITF9KTpcImZ1bmN0aW9uXCIhPT1lfHxrby5pc1N1YnNjcmliYWJsZShhKT9rby53YXRjaChhLGIsYyxkfHx0aGlzKTprby53YXRjaCh0aGlzLGJ8fHt9LGEsZHx8dGhpcyksdGhpc30sa28ud2F0Y2g9ZnVuY3Rpb24oYSxiLGMsZCl7ZnVuY3Rpb24gZShoLGksaixrLGwsbSl7aWYoaCYmMCE9PWIuZGVwdGgmJigtMT09PWIuZGVwdGh8fGoubGVuZ3RoPChiLmRlcHRofHwxKSkpe2lmKGIud2F0Y2hlZE9ubHkmJiFoLndhdGNoYWJsZSYmaCE9YSlyZXR1cm47aWYoKGIuZW5hYmxlZD09PSExfHxiLmVuYWJsZWQ9PT0hMCkmJihoLndhdGNoYWJsZT1iLmVuYWJsZWQpLGgud2F0Y2hhYmxlPT09ITEpcmV0dXJuO2Iuc2VhbD09PSEwJiYoaC53YXRjaGFibGU9ITEpO3ZhciBuPXR5cGVvZiBoO2lmKFwib2JqZWN0XCI9PT1ufHxcImZ1bmN0aW9uXCI9PT1uKXtpZihoLl93YXRjaGVyPT09ZClyZXR1cm47aWYoYi5oaWRlJiZrby51dGlscy5hcnJheUluZGV4T2YoYi5oaWRlLGgpPi0xKXJldHVybjt2YXIgbz1bXS5jb25jYXQoaixpJiZpIT09YT9pOltdKTtpZihcImZ1bmN0aW9uXCIhPT1uKXtpZihcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGgpKWtvLnV0aWxzLm9iamVjdEZvckVhY2goaCxmdW5jdGlvbihhLGMpe2lmKGM9Yi5nZXR0ZXI/Yi5nZXR0ZXIuY2FsbChkLG8saCxhKTpjKXtpZihiLndyYXApe3ZhciBmPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChjKTtcIltvYmplY3QgRnVuY3Rpb25dXCIhPT1mJiZcIltvYmplY3QgT2JqZWN0XVwiIT09ZiYmKGIuYmVmb3JlV3JhcCYmYi5iZWZvcmVXcmFwLmNhbGwoZCxvLGgsYyk9PT0hMXx8KGM9aFthXT1cIltvYmplY3QgQXJyYXldXCI9PT1mP2tvLm9ic2VydmFibGVBcnJheShjKTprby5vYnNlcnZhYmxlKGMpKSl9Yi51bmxvb3AmJihjLl93YXRjaGVyPWs/dm9pZCAwOmQpO3ZhciBnPWUoYyxsP251bGw6aCxvLGssbnVsbCxhKTtiLnRhZ0ZpZWxkcyYmdm9pZCAwPT09Yy5fZmllbGROYW1lJiYoZ3x8XCJwYXJlbnRzT25seVwiIT09Yi50YWdGaWVsZHMmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGN8fFwib2JqZWN0XCI9PXR5cGVvZiBjKSYmKGMuX2ZpZWxkTmFtZT1hKX19KTtlbHNlIGlmKGIuaGlkZUFycmF5cyE9PSEwKWZvcih2YXIgcD0wO3A8aC5sZW5ndGg7cCsrKWUoaFtwXSxsP251bGw6aCxvLGspO3JldHVybiEwfWlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGgubm90aWZ5U3Vic2NyaWJlcnMmJmMpe2lmKGIuZW5hYmxlZD09PSEwJiZoLndhdGNoYWJsZT09PSExKXJldHVybjtpZihrfHwhYi5iZWZvcmVXYXRjaHx8Yi5iZWZvcmVXYXRjaC5jYWxsKGQsbyxoLG0pIT09ITEpe3ZhciBxPVwiZnVuY3Rpb25cIj09dHlwZW9mIGgucG9wO2lmKGs/ZihoKTpnKGgscSxvLGwpLHEpcmV0dXJuIGUoaCgpLGw/bnVsbDpoLG8saywhMCksITA7aWYoYi5oaWRlV3JhcHBlZFZhbHVlcyE9PSEwKXJldHVybiBlKGgoKSxsP251bGw6aCxvLGssITApfX19fX1mdW5jdGlvbiBmKGEpe3ZhciBjPWFbaF07aWYoIWMpdGhyb3dcIlN1YnNjcmlwdGlvbnMgZmllbGQgKC5cIitoK1wiKSBub3QgZGVmaW5lZCBmb3Igb2JzZXJ2YWJsZSBjaGlsZCBcIisoYS5fZmllbGROYW1lfHxcIlwiKTtpZihjLmNoYW5nZSlmb3IodmFyIGU9Yy5jaGFuZ2UubGVuZ3RoLTE7ZT49MDtlLS0pYy5jaGFuZ2VbZV0uX3dhdGNoZXI9PT1kJiZjLmNoYW5nZVtlXS5kaXNwb3NlKCk7aWYoYy5iZWZvcmVDaGFuZ2UmJihiLm11dGFibGV8fGIub2xkVmFsdWVzPjApKWZvcih2YXIgZT1jLmJlZm9yZUNoYW5nZS5sZW5ndGgtMTtlPj0wO2UtLSljLmJlZm9yZUNoYW5nZVtlXS5fd2F0Y2hlcj09PWQmJmMuYmVmb3JlQ2hhbmdlW2VdLmRpc3Bvc2UoKTtpZihjLmFycmF5Q2hhbmdlKWZvcih2YXIgZT1jLmFycmF5Q2hhbmdlLmxlbmd0aC0xO2U+PTA7ZS0tKWMuYXJyYXlDaGFuZ2VbZV0uX3dhdGNoZXI9PT1kJiZjLmFycmF5Q2hhbmdlW2VdLmRpc3Bvc2UoKX1mdW5jdGlvbiBnKGEsZixnLGgpe2Y/YS5zdWJzY3JpYmUoZnVuY3Rpb24oYil7a28udXRpbHMuYXJyYXlGb3JFYWNoKGIsZnVuY3Rpb24oYil7dmFyIGY9Yy5jYWxsKGQsZyxhLGIpO3ZvaWQgMCE9PWYmJmQoZiksYi5tb3ZlZHx8c2V0VGltZW91dChmdW5jdGlvbigpe2UoYi52YWx1ZSxoP251bGw6YSxnLFwiZGVsZXRlZFwiPT09Yi5zdGF0dXMpfSwwKX0pfSx2b2lkIDAsXCJhcnJheUNoYW5nZVwiKS5fd2F0Y2hlcj1kOihhLnN1YnNjcmliZShmdW5jdGlvbigpe2lmKGEud2F0Y2hhYmxlIT09ITEpe3ZhciBmPWMuY2FsbChkLGcsYSk7dm9pZCAwIT09ZiYmZChmKSxiLm11dGFibGUmJlwib2JqZWN0XCI9PXR5cGVvZiBhKCkmJmUoYSgpLGg/bnVsbDphLGcpfX0sbnVsbCxcImNoYW5nZVwiKS5fd2F0Y2hlcj1kLChiLm9sZFZhbHVlcz4wfHxiLm11dGFibGUpJiYoYS5zdWJzY3JpYmUoZnVuY3Rpb24oYyl7aWYoYi5vbGRWYWx1ZXM+MCl7dmFyIGQ9YS5vbGRWYWx1ZXM/YS5vbGRWYWx1ZXM6YS5vbGRWYWx1ZXM9W107Zm9yKGQudW5zaGlmdChjKTtkLmxlbmd0aD5iLm9sZFZhbHVlczspZC5wb3AoKX1iLm11dGFibGUmJlwib2JqZWN0XCI9PXR5cGVvZiBjJiZlKGMsaD9udWxsOmEsZywhMSwhMCl9LG51bGwsXCJiZWZvcmVDaGFuZ2VcIikuX3dhdGNoZXI9ZCkpfVwiZnVuY3Rpb25cIj09dHlwZW9mIGImJihkPWR8fGMsYz1iLGI9e30pLGQ9ZHx8dGhpczt2YXIgaDtzd2l0Y2goa28uREVCVUd8fGtvLnZlcnNpb24pe2Nhc2UhMDpoPVwiX3N1YnNjcmlwdGlvbnNcIjticmVhaztjYXNlXCIzLjAuMFwiOmg9XCJGXCI7YnJlYWs7Y2FzZVwiMy4xLjBcIjpoPVwiSFwiO2JyZWFrO2Nhc2VcIjMuMi4wXCI6aD1cIk1cIjticmVhaztjYXNlXCIzLjMuMFwiOmg9XCJHXCI7Y2FzZVwiMy40LjBcIjpoPVwiS1wiO2JyZWFrO2RlZmF1bHQ6dGhyb3dcIlVuc3VwcG9ydGVkIEtub2Nrb3V0IHZlcnNpb24uIE9ubHkgdjMuMC4wIHRvIHYzLjQuMCBhcmUgc3VwcG9ydGVkIHdoZW4gbWluaWZpZWQuIEN1cnJlbnQgdmVyc2lvbiBpcyBcIitrby52ZXJzaW9ufXJldHVyblwiZnVuY3Rpb25cIiE9dHlwZW9mIGF8fGtvLmlzU3Vic2NyaWJhYmxlKGEpPyhlKGEsbnVsbCxbXSkse2Rpc3Bvc2U6ZnVuY3Rpb24oKXtlKGEsbnVsbCxbXSwhMCl9fSk6a28uY29tcHV0ZWQoYSxjLGIpfTt3aW5kb3cuZm9vID0gXCIxLjMuNlwiOyIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGRlYnVnO1xuXG5mdW5jdGlvbiBkZWJ1ZyhsYWJlbCkge1xuICByZXR1cm4gX2RlYnVnLmJpbmQobnVsbCwgbGFiZWwpO1xufVxuXG5mdW5jdGlvbiBfZGVidWcobGFiZWwpIHtcbiAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIGFyZ3MudW5zaGlmdCgnWycgKyBsYWJlbCArICddJyk7XG4gIHByb2Nlc3Muc3RkZXJyLndyaXRlKGFyZ3Muam9pbignICcpICsgJ1xcbicpO1xufSIsInZhciBERUJVRyA9IGZhbHNlOyAvLyBgdHJ1ZWAgdG8gcHJpbnQgZGVidWdnaW5nIGluZm8uXG52YXIgVElNRVIgPSBmYWxzZTsgLy8gYHRydWVgIHRvIHRpbWUgY2FsbHMgdG8gYGxleCgpYCBhbmQgcHJpbnQgdGhlIHJlc3VsdHMuXG5cbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJy4vZGVidWcnKSgnbGV4Jyk7XG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGxleDtcblxuLyoqXG4gKiBDb252ZXJ0IGEgQ1NTIHN0cmluZyBpbnRvIGFuIGFycmF5IG9mIGxleGljYWwgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBjc3MgQ1NTXG4gKiBAcmV0dXJucyB7QXJyYXl9IGxleGljYWwgdG9rZW5zXG4gKi9cbmZ1bmN0aW9uIGxleChjc3MpIHtcbiAgdmFyIHN0YXJ0OyAvLyBEZWJ1ZyB0aW1lciBzdGFydC5cblxuICB2YXIgYnVmZmVyID0gJyc7ICAgICAgLy8gQ2hhcmFjdGVyIGFjY3VtdWxhdG9yXG4gIHZhciBjaDsgICAgICAgICAgICAgICAvLyBDdXJyZW50IGNoYXJhY3RlclxuICB2YXIgY29sdW1uID0gMDsgICAgICAgLy8gQ3VycmVudCBzb3VyY2UgY29sdW1uIG51bWJlclxuICB2YXIgY3Vyc29yID0gLTE7ICAgICAgLy8gQ3VycmVudCBzb3VyY2UgY3Vyc29yIHBvc2l0aW9uXG4gIHZhciBkZXB0aCA9IDA7ICAgICAgICAvLyBDdXJyZW50IG5lc3RpbmcgZGVwdGhcbiAgdmFyIGxpbmUgPSAxOyAgICAgICAgIC8vIEN1cnJlbnQgc291cmNlIGxpbmUgbnVtYmVyXG4gIHZhciBzdGF0ZSA9ICdiZWZvcmUtc2VsZWN0b3InOyAvLyBDdXJyZW50IHN0YXRlXG4gIHZhciBzdGFjayA9IFtzdGF0ZV07ICAvLyBTdGF0ZSBzdGFja1xuICB2YXIgdG9rZW4gPSB7fTsgICAgICAgLy8gQ3VycmVudCB0b2tlblxuICB2YXIgdG9rZW5zID0gW107ICAgICAgLy8gVG9rZW4gYWNjdW11bGF0b3JcblxuICAvLyBTdXBwb3J0ZWQgQC1ydWxlcywgaW4gcm91Z2hseSBkZXNjZW5kaW5nIG9yZGVyIG9mIHVzYWdlIHByb2JhYmlsaXR5LlxuICB2YXIgYXRSdWxlcyA9IFtcbiAgICAnbWVkaWEnLFxuICAgICdrZXlmcmFtZXMnLFxuICAgIHsgbmFtZTogJy13ZWJraXQta2V5ZnJhbWVzJywgdHlwZTogJ2tleWZyYW1lcycsIHByZWZpeDogJy13ZWJraXQtJyB9LFxuICAgIHsgbmFtZTogJy1tb3ota2V5ZnJhbWVzJywgdHlwZTogJ2tleWZyYW1lcycsIHByZWZpeDogJy1tb3otJyB9LFxuICAgIHsgbmFtZTogJy1tcy1rZXlmcmFtZXMnLCB0eXBlOiAna2V5ZnJhbWVzJywgcHJlZml4OiAnLW1zLScgfSxcbiAgICB7IG5hbWU6ICctby1rZXlmcmFtZXMnLCB0eXBlOiAna2V5ZnJhbWVzJywgcHJlZml4OiAnLW8tJyB9LFxuICAgICdmb250LWZhY2UnLFxuICAgIHsgbmFtZTogJ2ltcG9ydCcsIHN0YXRlOiAnYmVmb3JlLWF0LXZhbHVlJyB9LFxuICAgIHsgbmFtZTogJ2NoYXJzZXQnLCBzdGF0ZTogJ2JlZm9yZS1hdC12YWx1ZScgfSxcbiAgICAnc3VwcG9ydHMnLFxuICAgICd2aWV3cG9ydCcsXG4gICAgeyBuYW1lOiAnbmFtZXNwYWNlJywgc3RhdGU6ICdiZWZvcmUtYXQtdmFsdWUnIH0sXG4gICAgJ2RvY3VtZW50JyxcbiAgICB7IG5hbWU6ICctbW96LWRvY3VtZW50JywgdHlwZTogJ2RvY3VtZW50JywgcHJlZml4OiAnLW1vei0nIH0sXG4gICAgJ3BhZ2UnXG4gIF07XG5cbiAgLy8gLS0gRnVuY3Rpb25zIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBBZHZhbmNlIHRoZSBjaGFyYWN0ZXIgY3Vyc29yIGFuZCByZXR1cm4gdGhlIG5leHQgY2hhcmFjdGVyLlxuICAgKlxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgbmV4dCBjaGFyYWN0ZXIuXG4gICAqL1xuICBmdW5jdGlvbiBnZXRDaCgpIHtcbiAgICBza2lwKCk7XG4gICAgcmV0dXJuIGNzc1tjdXJzb3JdO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgc3RhdGUgYXQgdGhlIGdpdmVuIGluZGV4IGluIHRoZSBzdGFjay5cbiAgICogVGhlIHN0YWNrIGlzIExJRk8gc28gaW5kZXhpbmcgaXMgZnJvbSB0aGUgcmlnaHQuXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbaW5kZXg9MF0gSW5kZXggdG8gcmV0dXJuLlxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBzdGF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoaW5kZXgpIHtcbiAgICByZXR1cm4gaW5kZXggPyBzdGFja1tzdGFjay5sZW5ndGggLSAxIC0gaW5kZXhdIDogc3RhdGU7XG4gIH1cblxuICAvKipcbiAgICogTG9vayBhaGVhZCBmb3IgYSBzdHJpbmcgYmVnaW5uaW5nIGZyb20gdGhlIG5leHQgcG9zaXRpb24uIFRoZSBzdHJpbmdcbiAgICogYmVpbmcgbG9va2VkIGZvciBtdXN0IHN0YXJ0IGF0IHRoZSBuZXh0IHBvc2l0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gbG9vayBmb3IuXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBXaGV0aGVyIHRoZSBzdHJpbmcgd2FzIGZvdW5kLlxuICAgKi9cbiAgZnVuY3Rpb24gaXNOZXh0U3RyaW5nKHN0cikge1xuICAgIHZhciBzdGFydCA9IGN1cnNvciArIDE7XG4gICAgcmV0dXJuIChzdHIgPT09IGNzcy5zbGljZShzdGFydCwgc3RhcnQgKyBzdHIubGVuZ3RoKSk7XG4gIH1cblxuICAvKipcbiAgICogRmluZCB0aGUgc3RhcnQgcG9zaXRpb24gb2YgYSBzdWJzdHJpbmcgYmVnaW5uaW5nIGZyb20gdGhlIG5leHRcbiAgICogcG9zaXRpb24uIFRoZSBzdHJpbmcgYmVpbmcgbG9va2VkIGZvciBtYXkgYmVnaW4gYW55d2hlcmUuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIHN1YnN0cmluZyB0byBsb29rIGZvci5cbiAgICogQHJldHVybnMge051bWJlcnxmYWxzZX0gVGhlIHBvc2l0aW9uLCBvciBgZmFsc2VgIGlmIG5vdCBmb3VuZC5cbiAgICovXG4gIGZ1bmN0aW9uIGZpbmQoc3RyKSB7XG4gICAgdmFyIHBvcyA9IGNzcy5zbGljZShjdXJzb3IpLmluZGV4T2Yoc3RyKTtcblxuICAgIHJldHVybiBwb3MgPiAwID8gcG9zIDogZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lIHdoZXRoZXIgYSBjaGFyYWN0ZXIgaXMgbmV4dC5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGNoIENoYXJhY3Rlci5cbiAgICogQHJldHVybnMge0Jvb2xlYW59IFdoZXRoZXIgdGhlIGNoYXJhY3RlciBpcyBuZXh0LlxuICAgKi9cbiAgZnVuY3Rpb24gaXNOZXh0Q2hhcihjaCkge1xuICAgIHJldHVybiBjaCA9PT0gcGVlaygxKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIGNoYXJhY3RlciBhdCB0aGUgZ2l2ZW4gY3Vyc29yIG9mZnNldC4gVGhlIG9mZnNldCBpcyByZWxhdGl2ZVxuICAgKiB0byB0aGUgY3Vyc29yLCBzbyBuZWdhdGl2ZSB2YWx1ZXMgbW92ZSBiYWNrd2FyZHMuXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbb2Zmc2V0PTFdIEN1cnNvciBvZmZzZXQuXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IENoYXJhY3Rlci5cbiAgICovXG4gIGZ1bmN0aW9uIHBlZWsob2Zmc2V0KSB7XG4gICAgcmV0dXJuIGNzc1tjdXJzb3IgKyAob2Zmc2V0IHx8IDEpXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgdGhlIGN1cnJlbnQgc3RhdGUgZnJvbSB0aGUgc3RhY2sgYW5kIHNldCB0aGUgbmV3IGN1cnJlbnQgc3RhdGUuXG4gICAqXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSByZW1vdmVkIHN0YXRlLlxuICAgKi9cbiAgZnVuY3Rpb24gcG9wU3RhdGUoKSB7XG4gICAgdmFyIHJlbW92ZWQgPSBzdGFjay5wb3AoKTtcbiAgICBzdGF0ZSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuXG4gICAgcmV0dXJuIHJlbW92ZWQ7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBjdXJyZW50IHN0YXRlIGFuZCBhZGQgaXQgdG8gdGhlIHN0YWNrLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmV3U3RhdGUgVGhlIG5ldyBzdGF0ZS5cbiAgICogQHJldHVybnMge051bWJlcn0gVGhlIG5ldyBzdGFjayBsZW5ndGguXG4gICAqL1xuICBmdW5jdGlvbiBwdXNoU3RhdGUobmV3U3RhdGUpIHtcbiAgICBzdGF0ZSA9IG5ld1N0YXRlO1xuICAgIHN0YWNrLnB1c2goc3RhdGUpO1xuXG4gICAgcmV0dXJuIHN0YWNrLmxlbmd0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBsYWNlIHRoZSBjdXJyZW50IHN0YXRlIHdpdGggYSBuZXcgc3RhdGUuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuZXdTdGF0ZSBUaGUgbmV3IHN0YXRlLlxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgcmVwbGFjZWQgc3RhdGUuXG4gICAqL1xuICBmdW5jdGlvbiByZXBsYWNlU3RhdGUobmV3U3RhdGUpIHtcbiAgICB2YXIgcHJldmlvdXNTdGF0ZSA9IHN0YXRlO1xuICAgIHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdID0gc3RhdGUgPSBuZXdTdGF0ZTtcblxuICAgIHJldHVybiBwcmV2aW91c1N0YXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIE1vdmUgdGhlIGNoYXJhY3RlciBjdXJzb3IuIFBvc2l0aXZlIG51bWJlcnMgbW92ZSB0aGUgY3Vyc29yIGZvcndhcmQuXG4gICAqIE5lZ2F0aXZlIG51bWJlcnMgYXJlIG5vdCBzdXBwb3J0ZWQhXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbbj0xXSBOdW1iZXIgb2YgY2hhcmFjdGVycyB0byBza2lwLlxuICAgKi9cbiAgZnVuY3Rpb24gc2tpcChuKSB7XG4gICAgaWYgKChuIHx8IDEpID09IDEpIHtcbiAgICAgIGlmIChjc3NbY3Vyc29yXSA9PSAnXFxuJykge1xuICAgICAgICBsaW5lKys7XG4gICAgICAgIGNvbHVtbiA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb2x1bW4rKztcbiAgICAgIH1cbiAgICAgIGN1cnNvcisrO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc2tpcFN0ciA9IGNzcy5zbGljZShjdXJzb3IsIGN1cnNvciArIG4pLnNwbGl0KCdcXG4nKTtcbiAgICAgIGlmIChza2lwU3RyLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgbGluZSArPSBza2lwU3RyLmxlbmd0aCAtIDE7XG4gICAgICAgIGNvbHVtbiA9IDE7XG4gICAgICB9XG4gICAgICBjb2x1bW4gKz0gc2tpcFN0cltza2lwU3RyLmxlbmd0aCAtIDFdLmxlbmd0aDtcbiAgICAgIGN1cnNvciA9IGN1cnNvciArIG47XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZCB0aGUgY3VycmVudCB0b2tlbiB0byB0aGUgcGlsZSBhbmQgcmVzZXQgdGhlIGJ1ZmZlci5cbiAgICovXG4gIGZ1bmN0aW9uIGFkZFRva2VuKCkge1xuICAgIHRva2VuLmVuZCA9IHtcbiAgICAgIGxpbmU6IGxpbmUsXG4gICAgICBjb2w6IGNvbHVtblxuICAgIH07XG5cbiAgICBERUJVRyAmJiBkZWJ1ZygnYWRkVG9rZW46JywgSlNPTi5zdHJpbmdpZnkodG9rZW4sIG51bGwsIDIpKTtcblxuICAgIHRva2Vucy5wdXNoKHRva2VuKTtcblxuICAgIGJ1ZmZlciA9ICcnO1xuICAgIHRva2VuID0ge307XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBjdXJyZW50IHRva2VuLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUb2tlbiB0eXBlLlxuICAgKi9cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZVRva2VuKHR5cGUpIHtcbiAgICB0b2tlbiA9IHtcbiAgICAgIHR5cGU6IHR5cGUsXG4gICAgICBzdGFydDoge1xuICAgICAgICBsaW5lOiBsaW5lLFxuICAgICAgICBjb2wgOiBjb2x1bW5cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gLS0gTWFpbiBMb29wIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qXG4gIFRoZSBtYWluIGxvb3AgaXMgYSBzdGF0ZSBtYWNoaW5lIHRoYXQgcmVhZHMgaW4gb25lIGNoYXJhY3RlciBhdCBhIHRpbWUsXG4gIGFuZCBkZXRlcm1pbmVzIHdoYXQgdG8gZG8gYmFzZWQgb24gdGhlIGN1cnJlbnQgc3RhdGUgYW5kIGNoYXJhY3Rlci5cbiAgVGhpcyBpcyBpbXBsZW1lbnRlZCBhcyBhIHNlcmllcyBvZiBuZXN0ZWQgYHN3aXRjaGAgc3RhdGVtZW50cyBhbmQgdGhlXG4gIGNhc2Ugb3JkZXJzIGhhdmUgYmVlbiBtaWxkbHkgb3B0aW1pemVkIGJhc2VkIG9uIHJvdWdoIHByb2JhYmlsaXRpZXNcbiAgY2FsY3VsYXRlZCBieSBwcm9jZXNzaW5nIGEgc21hbGwgc2FtcGxlIG9mIHJlYWwtd29ybGQgQ1NTLlxuXG4gIEZ1cnRoZXIgb3B0aW1pemF0aW9uIChzdWNoIGFzIGEgZGlzcGF0Y2ggdGFibGUpIHNob3VsZG4ndCBiZSBuZWNlc3NhcnlcbiAgc2luY2UgdGhlIHRvdGFsIG51bWJlciBvZiBjYXNlcyBpcyB2ZXJ5IGxvdy5cbiAgKi9cblxuICBUSU1FUiAmJiAoc3RhcnQgPSBEYXRlLm5vdygpKTtcblxuICB3aGlsZSAoY2ggPSBnZXRDaCgpKSB7XG4gICAgREVCVUcgJiYgZGVidWcoY2gsIGdldFN0YXRlKCkpO1xuXG4gICAgLy8gY29sdW1uICs9IDE7XG5cbiAgICBzd2l0Y2ggKGNoKSB7XG4gICAgLy8gU3BhY2VcbiAgICBjYXNlICcgJzpcbiAgICAgIHN3aXRjaCAoZ2V0U3RhdGUoKSkge1xuICAgICAgY2FzZSAnc2VsZWN0b3InOlxuICAgICAgY2FzZSAndmFsdWUnOlxuICAgICAgY2FzZSAndmFsdWUtcGFyZW4nOlxuICAgICAgY2FzZSAnYXQtZ3JvdXAnOlxuICAgICAgY2FzZSAnYXQtdmFsdWUnOlxuICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICBjYXNlICdkb3VibGUtc3RyaW5nJzpcbiAgICAgIGNhc2UgJ3NpbmdsZS1zdHJpbmcnOlxuICAgICAgICBidWZmZXIgKz0gY2g7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG5cbiAgICAvLyBOZXdsaW5lIG9yIHRhYlxuICAgIGNhc2UgJ1xcbic6XG4gICAgY2FzZSAnXFx0JzpcbiAgICBjYXNlICdcXHInOlxuICAgIGNhc2UgJ1xcZic6XG4gICAgICBzd2l0Y2ggKGdldFN0YXRlKCkpIHtcbiAgICAgIGNhc2UgJ3ZhbHVlJzpcbiAgICAgIGNhc2UgJ3ZhbHVlLXBhcmVuJzpcbiAgICAgIGNhc2UgJ2F0LWdyb3VwJzpcbiAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgY2FzZSAnc2luZ2xlLXN0cmluZyc6XG4gICAgICBjYXNlICdkb3VibGUtc3RyaW5nJzpcbiAgICAgIGNhc2UgJ3NlbGVjdG9yJzpcbiAgICAgICAgYnVmZmVyICs9IGNoO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnYXQtdmFsdWUnOlxuICAgICAgICAvLyBUb2tlbml6ZSBhbiBALXJ1bGUgaWYgYSBzZW1pLWNvbG9uIHdhcyBvbWl0dGVkLlxuICAgICAgICBpZiAoJ1xcbicgPT09IGNoKSB7XG4gICAgICAgICAgdG9rZW4udmFsdWUgPSBidWZmZXIudHJpbSgpO1xuICAgICAgICAgIGFkZFRva2VuKCk7XG4gICAgICAgICAgcG9wU3RhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgLy8gaWYgKCdcXG4nID09PSBjaCkge1xuICAgICAgLy8gICBjb2x1bW4gPSAwO1xuICAgICAgLy8gICBsaW5lICs9IDE7XG4gICAgICAvLyB9XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJzonOlxuICAgICAgc3dpdGNoIChnZXRTdGF0ZSgpKSB7XG4gICAgICBjYXNlICduYW1lJzpcbiAgICAgICAgdG9rZW4ubmFtZSA9IGJ1ZmZlci50cmltKCk7XG4gICAgICAgIGJ1ZmZlciA9ICcnO1xuXG4gICAgICAgIHJlcGxhY2VTdGF0ZSgnYmVmb3JlLXZhbHVlJyk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdiZWZvcmUtc2VsZWN0b3InOlxuICAgICAgICBidWZmZXIgKz0gY2g7XG5cbiAgICAgICAgaW5pdGlhbGl6ZVRva2VuKCdzZWxlY3RvcicpO1xuICAgICAgICBwdXNoU3RhdGUoJ3NlbGVjdG9yJyk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBidWZmZXIgKz0gY2g7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICc7JzpcbiAgICAgIHN3aXRjaCAoZ2V0U3RhdGUoKSkge1xuICAgICAgY2FzZSAnbmFtZSc6XG4gICAgICBjYXNlICdiZWZvcmUtdmFsdWUnOlxuICAgICAgY2FzZSAndmFsdWUnOlxuICAgICAgICAvLyBUb2tlbml6ZSBhIGRlY2xhcmF0aW9uXG4gICAgICAgIC8vIGlmIHZhbHVlIGlzIGVtcHR5IHNraXAgdGhlIGRlY2xhcmF0aW9uXG4gICAgICAgIGlmIChidWZmZXIudHJpbSgpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB0b2tlbi52YWx1ZSA9IGJ1ZmZlci50cmltKCksXG4gICAgICAgICAgYWRkVG9rZW4oKTtcbiAgICAgICAgfVxuICAgICAgICByZXBsYWNlU3RhdGUoJ2JlZm9yZS1uYW1lJyk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICd2YWx1ZS1wYXJlbic6XG4gICAgICAgIC8vIEluc2lnbmlmaWNhbnQgc2VtaS1jb2xvblxuICAgICAgICBidWZmZXIgKz0gY2g7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdhdC12YWx1ZSc6XG4gICAgICAgIC8vIFRva2VuaXplIGFuIEAtcnVsZVxuICAgICAgICB0b2tlbi52YWx1ZSA9IGJ1ZmZlci50cmltKCk7XG4gICAgICAgIGFkZFRva2VuKCk7XG4gICAgICAgIHBvcFN0YXRlKCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdiZWZvcmUtbmFtZSc6XG4gICAgICAgIC8vIEV4dHJhbmVvdXMgc2VtaS1jb2xvblxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnVmZmVyICs9IGNoO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAneyc6XG4gICAgICBzd2l0Y2ggKGdldFN0YXRlKCkpIHtcbiAgICAgIGNhc2UgJ3NlbGVjdG9yJzpcbiAgICAgICAgLy8gSWYgdGhlIHNlcXVlbmNlIGlzIGBcXHtgIHRoZW4gYXNzdW1lIHRoYXQgdGhlIGJyYWNlIHNob3VsZCBiZSBlc2NhcGVkLlxuICAgICAgICBpZiAocGVlaygtMSkgPT09ICdcXFxcJykge1xuICAgICAgICAgICAgYnVmZmVyICs9IGNoO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUb2tlbml6ZSBhIHNlbGVjdG9yXG4gICAgICAgIHRva2VuLnRleHQgPSBidWZmZXIudHJpbSgpO1xuICAgICAgICBhZGRUb2tlbigpO1xuICAgICAgICByZXBsYWNlU3RhdGUoJ2JlZm9yZS1uYW1lJyk7XG4gICAgICAgIGRlcHRoID0gZGVwdGggKyAxO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnYXQtZ3JvdXAnOlxuICAgICAgICAvLyBUb2tlbml6ZSBhbiBALWdyb3VwXG4gICAgICAgIHRva2VuLm5hbWUgPSBidWZmZXIudHJpbSgpO1xuXG4gICAgICAgIC8vIFhYWDogQC1ydWxlcyBhcmUgc3RhcnRpbmcgdG8gZ2V0IGhhaXJ5XG4gICAgICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICBjYXNlICdmb250LWZhY2UnOlxuICAgICAgICBjYXNlICd2aWV3cG9ydCcgOlxuICAgICAgICBjYXNlICdwYWdlJyAgICAgOlxuICAgICAgICAgIHB1c2hTdGF0ZSgnYmVmb3JlLW5hbWUnKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHB1c2hTdGF0ZSgnYmVmb3JlLXNlbGVjdG9yJyk7XG4gICAgICAgIH1cblxuICAgICAgICBhZGRUb2tlbigpO1xuICAgICAgICBkZXB0aCA9IGRlcHRoICsgMTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ25hbWUnOlxuICAgICAgY2FzZSAnYXQtcnVsZSc6XG4gICAgICAgIC8vIFRva2VuaXplIGEgZGVjbGFyYXRpb24gb3IgYW4gQC1ydWxlXG4gICAgICAgIHRva2VuLm5hbWUgPSBidWZmZXIudHJpbSgpO1xuICAgICAgICBhZGRUb2tlbigpO1xuICAgICAgICBwdXNoU3RhdGUoJ2JlZm9yZS1uYW1lJyk7XG4gICAgICAgIGRlcHRoID0gZGVwdGggKyAxO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICBjYXNlICdkb3VibGUtc3RyaW5nJzpcbiAgICAgIGNhc2UgJ3NpbmdsZS1zdHJpbmcnOlxuICAgICAgICAvLyBJZ25vcmUgYnJhY2VzIGluIGNvbW1lbnRzIGFuZCBzdHJpbmdzXG4gICAgICAgIGJ1ZmZlciArPSBjaDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnfSc6XG4gICAgICBzd2l0Y2ggKGdldFN0YXRlKCkpIHtcbiAgICAgIGNhc2UgJ2JlZm9yZS1uYW1lJzpcbiAgICAgIGNhc2UgJ25hbWUnOlxuICAgICAgY2FzZSAnYmVmb3JlLXZhbHVlJzpcbiAgICAgIGNhc2UgJ3ZhbHVlJzpcbiAgICAgICAgLy8gSWYgdGhlIGJ1ZmZlciBjb250YWlucyBhbnl0aGluZywgaXQgaXMgYSB2YWx1ZVxuICAgICAgICBpZiAoYnVmZmVyKSB7XG4gICAgICAgICAgdG9rZW4udmFsdWUgPSBidWZmZXIudHJpbSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgdGhlIGN1cnJlbnQgdG9rZW4gaGFzIGEgbmFtZSBhbmQgYSB2YWx1ZSBpdCBzaG91bGQgYmUgdG9rZW5pemVkLlxuICAgICAgICBpZiAodG9rZW4ubmFtZSAmJiB0b2tlbi52YWx1ZSkge1xuICAgICAgICAgIGFkZFRva2VuKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBMZWF2ZSB0aGUgYmxvY2tcbiAgICAgICAgaW5pdGlhbGl6ZVRva2VuKCdlbmQnKTtcbiAgICAgICAgYWRkVG9rZW4oKTtcbiAgICAgICAgcG9wU3RhdGUoKTtcblxuICAgICAgICAvLyBXZSBtaWdodCBuZWVkIHRvIGxlYXZlIGFnYWluLlxuICAgICAgICAvLyBYWFg6IFdoYXQgYWJvdXQgMyBsZXZlbHMgZGVlcD9cbiAgICAgICAgaWYgKCdhdC1ncm91cCcgPT09IGdldFN0YXRlKCkpIHtcbiAgICAgICAgICBpbml0aWFsaXplVG9rZW4oJ2F0LWdyb3VwLWVuZCcpO1xuICAgICAgICAgIGFkZFRva2VuKCk7XG4gICAgICAgICAgcG9wU3RhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKGRlcHRoID4gMCkge1xuICAgICAgICAgIGRlcHRoID0gZGVwdGggLSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2F0LWdyb3VwJzpcbiAgICAgIGNhc2UgJ2JlZm9yZS1zZWxlY3Rvcic6XG4gICAgICBjYXNlICdzZWxlY3Rvcic6XG4gICAgICAgIC8vIElmIHRoZSBzZXF1ZW5jZSBpcyBgXFx9YCB0aGVuIGFzc3VtZSB0aGF0IHRoZSBicmFjZSBzaG91bGQgYmUgZXNjYXBlZC5cbiAgICAgICAgaWYgKHBlZWsoLTEpID09PSAnXFxcXCcpIHtcbiAgICAgICAgICAgIGJ1ZmZlciArPSBjaDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRlcHRoID4gMCkge1xuICAgICAgICAgIC8vIExlYXZlIGJsb2NrIGlmIGluIGFuIGF0LWdyb3VwXG4gICAgICAgICAgaWYgKCdhdC1ncm91cCcgPT09IGdldFN0YXRlKDEpKSB7XG4gICAgICAgICAgICBpbml0aWFsaXplVG9rZW4oJ2F0LWdyb3VwLWVuZCcpO1xuICAgICAgICAgICAgYWRkVG9rZW4oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGVwdGggPiAxKSB7XG4gICAgICAgICAgcG9wU3RhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkZXB0aCA+IDApIHtcbiAgICAgICAgICBkZXB0aCA9IGRlcHRoIC0gMTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnZG91YmxlLXN0cmluZyc6XG4gICAgICBjYXNlICdzaW5nbGUtc3RyaW5nJzpcbiAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAvLyBJZ25vcmUgYnJhY2VzIGluIGNvbW1lbnRzIGFuZCBzdHJpbmdzLlxuICAgICAgICBidWZmZXIgKz0gY2g7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcblxuICAgIC8vIFN0cmluZ3NcbiAgICBjYXNlICdcIic6XG4gICAgY2FzZSBcIidcIjpcbiAgICAgIHN3aXRjaCAoZ2V0U3RhdGUoKSkge1xuICAgICAgY2FzZSAnZG91YmxlLXN0cmluZyc6XG4gICAgICAgIGlmICgnXCInID09PSBjaCAmJiAnXFxcXCcgIT09IHBlZWsoLTEpKSB7XG4gICAgICAgICAgcG9wU3RhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnc2luZ2xlLXN0cmluZyc6XG4gICAgICAgIGlmIChcIidcIiA9PT0gY2ggJiYgJ1xcXFwnICE9PSBwZWVrKC0xKSkge1xuICAgICAgICAgIHBvcFN0YXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2JlZm9yZS1hdC12YWx1ZSc6XG4gICAgICAgIHJlcGxhY2VTdGF0ZSgnYXQtdmFsdWUnKTtcbiAgICAgICAgcHVzaFN0YXRlKCdcIicgPT09IGNoID8gJ2RvdWJsZS1zdHJpbmcnIDogJ3NpbmdsZS1zdHJpbmcnKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2JlZm9yZS12YWx1ZSc6XG4gICAgICAgIHJlcGxhY2VTdGF0ZSgndmFsdWUnKTtcbiAgICAgICAgcHVzaFN0YXRlKCdcIicgPT09IGNoID8gJ2RvdWJsZS1zdHJpbmcnIDogJ3NpbmdsZS1zdHJpbmcnKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAvLyBJZ25vcmUgc3RyaW5ncyB3aXRoaW4gY29tbWVudHMuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoJ1xcXFwnICE9PSBwZWVrKC0xKSkge1xuICAgICAgICAgIHB1c2hTdGF0ZSgnXCInID09PSBjaCA/ICdkb3VibGUtc3RyaW5nJyA6ICdzaW5nbGUtc3RyaW5nJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYnVmZmVyICs9IGNoO1xuICAgICAgYnJlYWs7XG5cbiAgICAvLyBDb21tZW50c1xuICAgIGNhc2UgJy8nOlxuICAgICAgc3dpdGNoIChnZXRTdGF0ZSgpKSB7XG4gICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgIGNhc2UgJ2RvdWJsZS1zdHJpbmcnOlxuICAgICAgY2FzZSAnc2luZ2xlLXN0cmluZyc6XG4gICAgICAgIC8vIElnbm9yZVxuICAgICAgICBidWZmZXIgKz0gY2g7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdiZWZvcmUtdmFsdWUnOlxuICAgICAgY2FzZSAnc2VsZWN0b3InOlxuICAgICAgY2FzZSAnbmFtZSc6XG4gICAgICBjYXNlICd2YWx1ZSc6XG4gICAgICAgIGlmIChpc05leHRDaGFyKCcqJykpIHtcbiAgICAgICAgICAvLyBJZ25vcmUgY29tbWVudHMgaW4gc2VsZWN0b3JzLCBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMuIFRoZXkgYXJlXG4gICAgICAgICAgLy8gZGlmZmljdWx0IHRvIHJlcHJlc2VudCBpbiB0aGUgQVNULlxuICAgICAgICAgIHZhciBwb3MgPSBmaW5kKCcqLycpO1xuXG4gICAgICAgICAgaWYgKHBvcykge1xuICAgICAgICAgICAgc2tpcChwb3MgKyAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnVmZmVyICs9IGNoO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoaXNOZXh0Q2hhcignKicpKSB7XG4gICAgICAgICAgLy8gQ3JlYXRlIGEgY29tbWVudCB0b2tlblxuICAgICAgICAgIGluaXRpYWxpemVUb2tlbignY29tbWVudCcpO1xuICAgICAgICAgIHB1c2hTdGF0ZSgnY29tbWVudCcpO1xuICAgICAgICAgIHNraXAoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBidWZmZXIgKz0gY2g7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBicmVhaztcblxuICAgIC8vIENvbW1lbnQgZW5kIG9yIHVuaXZlcnNhbCBzZWxlY3RvclxuICAgIGNhc2UgJyonOlxuICAgICAgc3dpdGNoIChnZXRTdGF0ZSgpKSB7XG4gICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgICAgaWYgKGlzTmV4dENoYXIoJy8nKSkge1xuICAgICAgICAgIC8vIFRva2VuaXplIGEgY29tbWVudFxuICAgICAgICAgIHRva2VuLnRleHQgPSBidWZmZXI7IC8vIERvbid0IHRyaW0oKSFcbiAgICAgICAgICBza2lwKCk7XG4gICAgICAgICAgYWRkVG9rZW4oKTtcbiAgICAgICAgICBwb3BTdGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGJ1ZmZlciArPSBjaDtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnYmVmb3JlLXNlbGVjdG9yJzpcbiAgICAgICAgYnVmZmVyICs9IGNoO1xuICAgICAgICBpbml0aWFsaXplVG9rZW4oJ3NlbGVjdG9yJyk7XG4gICAgICAgIHB1c2hTdGF0ZSgnc2VsZWN0b3InKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJ1ZmZlciArPSBjaDtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuXG4gICAgLy8gQC1ydWxlc1xuICAgIGNhc2UgJ0AnOlxuICAgICAgc3dpdGNoIChnZXRTdGF0ZSgpKSB7XG4gICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgIGNhc2UgJ2RvdWJsZS1zdHJpbmcnOlxuICAgICAgY2FzZSAnc2luZ2xlLXN0cmluZyc6XG4gICAgICAgIGJ1ZmZlciArPSBjaDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIC8vIEl0ZXJhdGUgb3ZlciB0aGUgc3VwcG9ydGVkIEAtcnVsZXMgYW5kIGF0dGVtcHQgdG8gdG9rZW5pemUgb25lLlxuICAgICAgICB2YXIgdG9rZW5pemVkID0gZmFsc2U7XG4gICAgICAgIHZhciBuYW1lO1xuICAgICAgICB2YXIgcnVsZTtcblxuICAgICAgICBmb3IgKHZhciBqID0gMCwgbGVuID0gYXRSdWxlcy5sZW5ndGg7ICF0b2tlbml6ZWQgJiYgaiA8IGxlbjsgKytqKSB7XG4gICAgICAgICAgcnVsZSA9IGF0UnVsZXNbal07XG4gICAgICAgICAgbmFtZSA9IHJ1bGUubmFtZSB8fCBydWxlO1xuXG4gICAgICAgICAgaWYgKCFpc05leHRTdHJpbmcobmFtZSkpIHsgY29udGludWU7IH1cblxuICAgICAgICAgIHRva2VuaXplZCA9IHRydWU7XG5cbiAgICAgICAgICBpbml0aWFsaXplVG9rZW4obmFtZSk7XG4gICAgICAgICAgcHVzaFN0YXRlKHJ1bGUuc3RhdGUgfHwgJ2F0LWdyb3VwJyk7XG4gICAgICAgICAgc2tpcChuYW1lLmxlbmd0aCk7XG5cbiAgICAgICAgICBpZiAocnVsZS5wcmVmaXgpIHtcbiAgICAgICAgICAgIHRva2VuLnByZWZpeCA9IHJ1bGUucHJlZml4O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChydWxlLnR5cGUpIHtcbiAgICAgICAgICAgIHRva2VuLnR5cGUgPSBydWxlLnR5cGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0b2tlbml6ZWQpIHtcbiAgICAgICAgICAvLyBLZWVwIG9uIHRydWNraW4nIEFtZXJpY2EhXG4gICAgICAgICAgYnVmZmVyICs9IGNoO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG5cbiAgICAvLyBQYXJlbnRoZXNlcyBhcmUgdHJhY2tlZCB0byBkaXNhbWJpZ3VhdGUgc2VtaS1jb2xvbnMsIHN1Y2ggYXMgd2l0aGluIGFcbiAgICAvLyBkYXRhIFVSSS5cbiAgICBjYXNlICcoJzpcbiAgICAgIHN3aXRjaCAoZ2V0U3RhdGUoKSkge1xuICAgICAgY2FzZSAndmFsdWUnOlxuICAgICAgICBwdXNoU3RhdGUoJ3ZhbHVlLXBhcmVuJyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBidWZmZXIgKz0gY2g7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJyknOlxuICAgICAgc3dpdGNoIChnZXRTdGF0ZSgpKSB7XG4gICAgICBjYXNlICd2YWx1ZS1wYXJlbic6XG4gICAgICAgIHBvcFN0YXRlKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBidWZmZXIgKz0gY2g7XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBzd2l0Y2ggKGdldFN0YXRlKCkpIHtcbiAgICAgIGNhc2UgJ2JlZm9yZS1zZWxlY3Rvcic6XG4gICAgICAgIGluaXRpYWxpemVUb2tlbignc2VsZWN0b3InKTtcbiAgICAgICAgcHVzaFN0YXRlKCdzZWxlY3RvcicpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnYmVmb3JlLW5hbWUnOlxuICAgICAgICBpbml0aWFsaXplVG9rZW4oJ3Byb3BlcnR5Jyk7XG4gICAgICAgIHJlcGxhY2VTdGF0ZSgnbmFtZScpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnYmVmb3JlLXZhbHVlJzpcbiAgICAgICAgcmVwbGFjZVN0YXRlKCd2YWx1ZScpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnYmVmb3JlLWF0LXZhbHVlJzpcbiAgICAgICAgcmVwbGFjZVN0YXRlKCdhdC12YWx1ZScpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgYnVmZmVyICs9IGNoO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgVElNRVIgJiYgZGVidWcoJ3JhbiBpbicsIChEYXRlLm5vdygpIC0gc3RhcnQpICsgJ21zJyk7XG5cbiAgcmV0dXJuIHRva2Vucztcbn1cbiIsInZhciBERUJVRyA9IGZhbHNlOyAvLyBgdHJ1ZWAgdG8gcHJpbnQgZGVidWdnaW5nIGluZm8uXG52YXIgVElNRVIgPSBmYWxzZTsgLy8gYHRydWVgIHRvIHRpbWUgY2FsbHMgdG8gYHBhcnNlKClgIGFuZCBwcmludCB0aGUgcmVzdWx0cy5cblxudmFyIGRlYnVnID0gcmVxdWlyZSgnLi9kZWJ1ZycpKCdwYXJzZScpO1xudmFyIGxleCA9IHJlcXVpcmUoJy4vbGV4ZXInKTtcblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcGFyc2U7XG5cbnZhciBfY29tbWVudHM7ICAgLy8gV2hldGhlciBjb21tZW50cyBhcmUgYWxsb3dlZC5cbnZhciBfZGVwdGg7ICAgICAgLy8gQ3VycmVudCBibG9jayBuZXN0aW5nIGRlcHRoLlxudmFyIF9wb3NpdGlvbjsgICAvLyBXaGV0aGVyIHRvIGluY2x1ZGUgbGluZS9jb2x1bW4gcG9zaXRpb24uXG52YXIgX3Rva2VuczsgICAgIC8vIEFycmF5IG9mIGxleGljYWwgdG9rZW5zLlxuXG4vKipcbiAqIENvbnZlcnQgYSBDU1Mgc3RyaW5nIG9yIGFycmF5IG9mIGxleGljYWwgdG9rZW5zIGludG8gYSBgc3RyaW5naWZ5YC1hYmxlIEFTVC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gY3NzIENTUyBzdHJpbmcgb3IgYXJyYXkgb2YgbGV4aWNhbCB0b2tlblxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5jb21tZW50cz1mYWxzZV0gYWxsb3cgY29tbWVudCBub2RlcyBpbiB0aGUgQVNUXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBgc3RyaW5naWZ5YC1hYmxlIEFTVFxuICovXG5mdW5jdGlvbiBwYXJzZShjc3MsIG9wdGlvbnMpIHtcbiAgdmFyIHN0YXJ0OyAvLyBEZWJ1ZyB0aW1lciBzdGFydC5cblxuICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pO1xuICBfY29tbWVudHMgPSAhIW9wdGlvbnMuY29tbWVudHM7XG4gIF9wb3NpdGlvbiA9ICEhb3B0aW9ucy5wb3NpdGlvbjtcblxuICBfZGVwdGggPSAwO1xuXG4gIC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHRoZSBnaXZlbiB0b2tlbnMsIG9yIHRoZSBsZXgoKSdkIENTUyBzdHJpbmcuXG4gIF90b2tlbnMgPSBBcnJheS5pc0FycmF5KGNzcykgPyBjc3Muc2xpY2UoKSA6IGxleChjc3MpO1xuXG4gIHZhciBydWxlO1xuICB2YXIgcnVsZXMgPSBbXTtcbiAgdmFyIHRva2VuO1xuXG4gIFRJTUVSICYmIChzdGFydCA9IERhdGUubm93KCkpO1xuXG4gIHdoaWxlICgodG9rZW4gPSBuZXh0KCkpKSB7XG4gICAgcnVsZSA9IHBhcnNlVG9rZW4odG9rZW4pO1xuICAgIHJ1bGUgJiYgcnVsZXMucHVzaChydWxlKTtcbiAgfVxuXG4gIFRJTUVSICYmIGRlYnVnKCdyYW4gaW4nLCAoRGF0ZS5ub3coKSAtIHN0YXJ0KSArICdtcycpO1xuXG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJzdHlsZXNoZWV0XCIsXG4gICAgc3R5bGVzaGVldDoge1xuICAgICAgcnVsZXM6IHJ1bGVzXG4gICAgfVxuICB9O1xufVxuXG4vLyAtLSBGdW5jdGlvbnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiBCdWlsZCBhbiBBU1Qgbm9kZSBmcm9tIGEgbGV4aWNhbCB0b2tlbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdG9rZW4gbGV4aWNhbCB0b2tlblxuICogQHBhcmFtIHtPYmplY3R9IFtvdmVycmlkZV0gb2JqZWN0IGhhc2ggb2YgcHJvcGVydGllcyB0aGF0IG92ZXJyaWRlIHRob3NlXG4gKiAgIGFscmVhZHkgaW4gdGhlIHRva2VuLCBvciB0aGF0IHdpbGwgYmUgYWRkZWQgdG8gdGhlIHRva2VuLlxuICogQHJldHVybnMge09iamVjdH0gQVNUIG5vZGVcbiAqL1xuZnVuY3Rpb24gYXN0Tm9kZSh0b2tlbiwgb3ZlcnJpZGUpIHtcbiAgb3ZlcnJpZGUgfHwgKG92ZXJyaWRlID0ge30pO1xuXG4gIHZhciBrZXk7XG4gIHZhciBrZXlzID0gWyd0eXBlJywgJ25hbWUnLCAndmFsdWUnXTtcbiAgdmFyIG5vZGUgPSB7fTtcblxuICAvLyBBdm9pZGluZyBbXS5mb3JFYWNoIGZvciBwZXJmb3JtYW5jZSByZWFzb25zLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuXG4gICAgaWYgKHRva2VuW2tleV0pIHtcbiAgICAgIG5vZGVba2V5XSA9IG92ZXJyaWRlW2tleV0gfHwgdG9rZW5ba2V5XTtcbiAgICB9XG4gIH1cblxuICBrZXlzID0gT2JqZWN0LmtleXMob3ZlcnJpZGUpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcblxuICAgIGlmICghbm9kZVtrZXldKSB7XG4gICAgICBub2RlW2tleV0gPSBvdmVycmlkZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIGlmIChfcG9zaXRpb24pIHtcbiAgICBub2RlLnBvc2l0aW9uID0ge1xuICAgICAgc3RhcnQ6IHRva2VuLnN0YXJ0LFxuICAgICAgZW5kOiB0b2tlbi5lbmRcbiAgICB9O1xuICB9XG5cbiAgREVCVUcgJiYgZGVidWcoJ2FzdE5vZGU6JywgSlNPTi5zdHJpbmdpZnkobm9kZSwgbnVsbCwgMikpO1xuXG4gIHJldHVybiBub2RlO1xufVxuXG4vKipcbiAqIFJlbW92ZSBhIGxleGljYWwgdG9rZW4gZnJvbSB0aGUgc3RhY2sgYW5kIHJldHVybiB0aGUgcmVtb3ZlZCB0b2tlbi5cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBsZXhpY2FsIHRva2VuXG4gKi9cbmZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciB0b2tlbiA9IF90b2tlbnMuc2hpZnQoKTtcbiAgREVCVUcgJiYgZGVidWcoJ25leHQ6JywgSlNPTi5zdHJpbmdpZnkodG9rZW4sIG51bGwsIDIpKTtcbiAgcmV0dXJuIHRva2VuO1xufVxuXG4vLyAtLSBQYXJzZSogRnVuY3Rpb25zIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAqIENvbnZlcnQgYW4gQC1ncm91cCBsZXhpY2FsIHRva2VuIHRvIGFuIEFTVCBub2RlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB0b2tlbiBALWdyb3VwIGxleGljYWwgdG9rZW5cbiAqIEByZXR1cm5zIHtPYmplY3R9IEAtZ3JvdXAgQVNUIG5vZGVcbiAqL1xuZnVuY3Rpb24gcGFyc2VBdEdyb3VwKHRva2VuKSB7XG4gIF9kZXB0aCA9IF9kZXB0aCArIDE7XG5cbiAgLy8gQXMgdGhlIEAtZ3JvdXAgdG9rZW4gaXMgYXNzZW1ibGVkLCByZWxldmFudCB0b2tlbiB2YWx1ZXMgYXJlIGNhcHR1cmVkIGhlcmVcbiAgLy8gdGVtcG9yYXJpbHkuIFRoZXkgd2lsbCBsYXRlciBiZSB1c2VkIGFzIGB0b2tlbml6ZSgpYCBvdmVycmlkZXMuXG4gIHZhciBvdmVycmlkZXMgPSB7fTtcblxuICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgY2FzZSAnZm9udC1mYWNlJzpcbiAgY2FzZSAndmlld3BvcnQnIDpcbiAgICBvdmVycmlkZXMuZGVjbGFyYXRpb25zID0gcGFyc2VEZWNsYXJhdGlvbnMoKTtcbiAgICBicmVhaztcblxuICBjYXNlICdwYWdlJzpcbiAgICBvdmVycmlkZXMucHJlZml4ID0gdG9rZW4ucHJlZml4O1xuICAgIG92ZXJyaWRlcy5kZWNsYXJhdGlvbnMgPSBwYXJzZURlY2xhcmF0aW9ucygpO1xuICAgIGJyZWFrO1xuXG4gIGRlZmF1bHQ6XG4gICAgb3ZlcnJpZGVzLnByZWZpeCA9IHRva2VuLnByZWZpeDtcbiAgICBvdmVycmlkZXMucnVsZXMgPSBwYXJzZVJ1bGVzKCk7XG4gIH1cblxuICByZXR1cm4gYXN0Tm9kZSh0b2tlbiwgb3ZlcnJpZGVzKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGFuIEBpbXBvcnQgbGV4aWNhbCB0b2tlbiB0byBhbiBBU1Qgbm9kZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdG9rZW4gQGltcG9ydCBsZXhpY2FsIHRva2VuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBAaW1wb3J0IEFTVCBub2RlXG4gKi9cbmZ1bmN0aW9uIHBhcnNlQXRJbXBvcnQodG9rZW4pIHtcbiAgcmV0dXJuIGFzdE5vZGUodG9rZW4pO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYW4gQGNoYXJzZXQgdG9rZW4gdG8gYW4gQVNUIG5vZGUuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHRva2VuIEBjaGFyc2V0IGxleGljYWwgdG9rZW5cbiAqIEByZXR1cm5zIHtPYmplY3R9IEBjaGFyc2V0IG5vZGVcbiAqL1xuZnVuY3Rpb24gcGFyc2VDaGFyc2V0KHRva2VuKSB7XG4gIHJldHVybiBhc3ROb2RlKHRva2VuKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGEgY29tbWVudCB0b2tlbiB0byBhbiBBU1QgTm9kZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdG9rZW4gY29tbWVudCBsZXhpY2FsIHRva2VuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBjb21tZW50IG5vZGVcbiAqL1xuZnVuY3Rpb24gcGFyc2VDb21tZW50KHRva2VuKSB7XG4gIHJldHVybiBhc3ROb2RlKHRva2VuLCB7dGV4dDogdG9rZW4udGV4dH0pO1xufVxuXG5mdW5jdGlvbiBwYXJzZU5hbWVzcGFjZSh0b2tlbikge1xuICByZXR1cm4gYXN0Tm9kZSh0b2tlbik7XG59XG5cbi8qKlxuICogQ29udmVydCBhIHByb3BlcnR5IGxleGljYWwgdG9rZW4gdG8gYSBwcm9wZXJ0eSBBU1Qgbm9kZS5cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBwcm9wZXJ0eSBub2RlXG4gKi9cbmZ1bmN0aW9uIHBhcnNlUHJvcGVydHkodG9rZW4pIHtcbiAgcmV0dXJuIGFzdE5vZGUodG9rZW4pO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYSBzZWxlY3RvciBsZXhpY2FsIHRva2VuIHRvIGEgc2VsZWN0b3IgQVNUIG5vZGUuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHRva2VuIHNlbGVjdG9yIGxleGljYWwgdG9rZW5cbiAqIEByZXR1cm5zIHtPYmplY3R9IHNlbGVjdG9yIG5vZGVcbiAqL1xuZnVuY3Rpb24gcGFyc2VTZWxlY3Rvcih0b2tlbikge1xuICBmdW5jdGlvbiB0cmltKHN0cikge1xuICAgIHJldHVybiBzdHIudHJpbSgpO1xuICB9XG5cbiAgcmV0dXJuIGFzdE5vZGUodG9rZW4sIHtcbiAgICB0eXBlOiAncnVsZScsXG4gICAgc2VsZWN0b3JzOiB0b2tlbi50ZXh0LnNwbGl0KCcsJykubWFwKHRyaW0pLFxuICAgIGRlY2xhcmF0aW9uczogcGFyc2VEZWNsYXJhdGlvbnModG9rZW4pXG4gIH0pO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYSBsZXhpY2FsIHRva2VuIHRvIGFuIEFTVCBub2RlLlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R8dW5kZWZpbmVkfSBBU1Qgbm9kZVxuICovXG5mdW5jdGlvbiBwYXJzZVRva2VuKHRva2VuKSB7XG4gIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAvLyBDYXNlcyBhcmUgbGlzdGVkIGluIHJvdWdobHkgZGVzY2VuZGluZyBvcmRlciBvZiBwcm9iYWJpbGl0eS5cbiAgY2FzZSAncHJvcGVydHknOiByZXR1cm4gcGFyc2VQcm9wZXJ0eSh0b2tlbik7XG5cbiAgY2FzZSAnc2VsZWN0b3InOiByZXR1cm4gcGFyc2VTZWxlY3Rvcih0b2tlbik7XG5cbiAgY2FzZSAnYXQtZ3JvdXAtZW5kJzogX2RlcHRoID0gX2RlcHRoIC0gMTsgcmV0dXJuO1xuXG4gIGNhc2UgJ21lZGlhJyAgICAgOlxuICBjYXNlICdrZXlmcmFtZXMnIDpyZXR1cm4gcGFyc2VBdEdyb3VwKHRva2VuKTtcblxuICBjYXNlICdjb21tZW50JzogaWYgKF9jb21tZW50cykgeyByZXR1cm4gcGFyc2VDb21tZW50KHRva2VuKTsgfSBicmVhaztcblxuICBjYXNlICdjaGFyc2V0JzogcmV0dXJuIHBhcnNlQ2hhcnNldCh0b2tlbik7XG4gIGNhc2UgJ2ltcG9ydCc6IHJldHVybiBwYXJzZUF0SW1wb3J0KHRva2VuKTtcblxuICBjYXNlICduYW1lc3BhY2UnOiByZXR1cm4gcGFyc2VOYW1lc3BhY2UodG9rZW4pO1xuXG4gIGNhc2UgJ2ZvbnQtZmFjZSc6XG4gIGNhc2UgJ3N1cHBvcnRzJyA6XG4gIGNhc2UgJ3ZpZXdwb3J0JyA6XG4gIGNhc2UgJ2RvY3VtZW50JyA6XG4gIGNhc2UgJ3BhZ2UnICAgICA6IHJldHVybiBwYXJzZUF0R3JvdXAodG9rZW4pO1xuICB9XG5cbiAgREVCVUcgJiYgZGVidWcoJ3BhcnNlVG9rZW46IHVuZXhwZWN0ZWQgdG9rZW46JywgSlNPTi5zdHJpbmdpZnkodG9rZW4pKTtcbn1cblxuLy8gLS0gUGFyc2UgSGVscGVyIEZ1bmN0aW9ucyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiBJdGVyYXRpdmVseSBwYXJzZXMgbGV4aWNhbCB0b2tlbnMgZnJvbSB0aGUgc3RhY2sgaW50byBBU1Qgbm9kZXMgdW50aWwgYVxuICogY29uZGl0aW9uYWwgZnVuY3Rpb24gcmV0dXJucyBgZmFsc2VgLCBhdCB3aGljaCBwb2ludCBpdGVyYXRpb24gdGVybWluYXRlc1xuICogYW5kIGFueSBBU1Qgbm9kZXMgY29sbGVjdGVkIGFyZSByZXR1cm5lZC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25kaXRpb25GblxuICogICBAcGFyYW0ge09iamVjdH0gdG9rZW4gdGhlIGxleGljYWwgdG9rZW4gYmVpbmcgcGFyc2VkXG4gKiAgIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIHRva2VuIHNob3VsZCBiZSBwYXJzZWQsIGBmYWxzZWAgb3RoZXJ3aXNlXG4gKiBAcmV0dXJuIHtBcnJheX0gQVNUIG5vZGVzXG4gKi9cbmZ1bmN0aW9uIHBhcnNlVG9rZW5zV2hpbGUoY29uZGl0aW9uRm4pIHtcbiAgdmFyIG5vZGU7XG4gIHZhciBub2RlcyA9IFtdO1xuICB2YXIgdG9rZW47XG5cbiAgd2hpbGUgKCh0b2tlbiA9IG5leHQoKSkgJiYgKGNvbmRpdGlvbkZuICYmIGNvbmRpdGlvbkZuKHRva2VuKSkpIHtcbiAgICBub2RlID0gcGFyc2VUb2tlbih0b2tlbik7XG4gICAgbm9kZSAmJiBub2Rlcy5wdXNoKG5vZGUpO1xuICB9XG5cbiAgLy8gUGxhY2UgYW4gdW51c2VkIG5vbi1gZW5kYCBsZXhpY2FsIHRva2VuIGJhY2sgb250byB0aGUgc3RhY2suXG4gIGlmICh0b2tlbiAmJiB0b2tlbi50eXBlICE9PSAnZW5kJykge1xuICAgIF90b2tlbnMudW5zaGlmdCh0b2tlbik7XG4gIH1cblxuICByZXR1cm4gbm9kZXM7XG59XG5cbi8qKlxuICogQ29udmVydCBhIHNlcmllcyBvZiB0b2tlbnMgaW50byBhIHNlcXVlbmNlIG9mIGRlY2xhcmF0aW9uIEFTVCBub2Rlcy5cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXl9IGRlY2xhcmF0aW9uIG5vZGVzXG4gKi9cbmZ1bmN0aW9uIHBhcnNlRGVjbGFyYXRpb25zKCkge1xuICByZXR1cm4gcGFyc2VUb2tlbnNXaGlsZShmdW5jdGlvbiAodG9rZW4pIHtcbiAgICByZXR1cm4gKHRva2VuLnR5cGUgPT09ICdwcm9wZXJ0eScgfHwgdG9rZW4udHlwZSA9PT0gJ2NvbW1lbnQnKTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ29udmVydCBhIHNlcmllcyBvZiB0b2tlbnMgaW50byBhIHNlcXVlbmNlIG9mIHJ1bGUgbm9kZXMuXG4gKlxuICogQHJldHVybnMge0FycmF5fSBydWxlIG5vZGVzXG4gKi9cbmZ1bmN0aW9uIHBhcnNlUnVsZXMoKSB7XG4gIHJldHVybiBwYXJzZVRva2Vuc1doaWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9kZXB0aDsgfSk7XG59XG4iLCIvLyBUaW55Q29sb3IgdjEuMi4xXG4vLyBodHRwczovL2dpdGh1Yi5jb20vYmdyaW5zL1RpbnlDb2xvclxuLy8gQnJpYW4gR3JpbnN0ZWFkLCBNSVQgTGljZW5zZVxuXG4oZnVuY3Rpb24oKSB7XG5cbnZhciB0cmltTGVmdCA9IC9eW1xccywjXSsvLFxuICAgIHRyaW1SaWdodCA9IC9cXHMrJC8sXG4gICAgdGlueUNvdW50ZXIgPSAwLFxuICAgIG1hdGggPSBNYXRoLFxuICAgIG1hdGhSb3VuZCA9IG1hdGgucm91bmQsXG4gICAgbWF0aE1pbiA9IG1hdGgubWluLFxuICAgIG1hdGhNYXggPSBtYXRoLm1heCxcbiAgICBtYXRoUmFuZG9tID0gbWF0aC5yYW5kb207XG5cbmZ1bmN0aW9uIHRpbnljb2xvciAoY29sb3IsIG9wdHMpIHtcblxuICAgIGNvbG9yID0gKGNvbG9yKSA/IGNvbG9yIDogJyc7XG4gICAgb3B0cyA9IG9wdHMgfHwgeyB9O1xuXG4gICAgLy8gSWYgaW5wdXQgaXMgYWxyZWFkeSBhIHRpbnljb2xvciwgcmV0dXJuIGl0c2VsZlxuICAgIGlmIChjb2xvciBpbnN0YW5jZW9mIHRpbnljb2xvcikge1xuICAgICAgIHJldHVybiBjb2xvcjtcbiAgICB9XG4gICAgLy8gSWYgd2UgYXJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLCBjYWxsIHVzaW5nIG5ldyBpbnN0ZWFkXG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIHRpbnljb2xvcikpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0aW55Y29sb3IoY29sb3IsIG9wdHMpO1xuICAgIH1cblxuICAgIHZhciByZ2IgPSBpbnB1dFRvUkdCKGNvbG9yKTtcbiAgICB0aGlzLl9vcmlnaW5hbElucHV0ID0gY29sb3IsXG4gICAgdGhpcy5fciA9IHJnYi5yLFxuICAgIHRoaXMuX2cgPSByZ2IuZyxcbiAgICB0aGlzLl9iID0gcmdiLmIsXG4gICAgdGhpcy5fYSA9IHJnYi5hLFxuICAgIHRoaXMuX3JvdW5kQSA9IG1hdGhSb3VuZCgxMDAqdGhpcy5fYSkgLyAxMDAsXG4gICAgdGhpcy5fZm9ybWF0ID0gb3B0cy5mb3JtYXQgfHwgcmdiLmZvcm1hdDtcbiAgICB0aGlzLl9ncmFkaWVudFR5cGUgPSBvcHRzLmdyYWRpZW50VHlwZTtcblxuICAgIC8vIERvbid0IGxldCB0aGUgcmFuZ2Ugb2YgWzAsMjU1XSBjb21lIGJhY2sgaW4gWzAsMV0uXG4gICAgLy8gUG90ZW50aWFsbHkgbG9zZSBhIGxpdHRsZSBiaXQgb2YgcHJlY2lzaW9uIGhlcmUsIGJ1dCB3aWxsIGZpeCBpc3N1ZXMgd2hlcmVcbiAgICAvLyAuNSBnZXRzIGludGVycHJldGVkIGFzIGhhbGYgb2YgdGhlIHRvdGFsLCBpbnN0ZWFkIG9mIGhhbGYgb2YgMVxuICAgIC8vIElmIGl0IHdhcyBzdXBwb3NlZCB0byBiZSAxMjgsIHRoaXMgd2FzIGFscmVhZHkgdGFrZW4gY2FyZSBvZiBieSBgaW5wdXRUb1JnYmBcbiAgICBpZiAodGhpcy5fciA8IDEpIHsgdGhpcy5fciA9IG1hdGhSb3VuZCh0aGlzLl9yKTsgfVxuICAgIGlmICh0aGlzLl9nIDwgMSkgeyB0aGlzLl9nID0gbWF0aFJvdW5kKHRoaXMuX2cpOyB9XG4gICAgaWYgKHRoaXMuX2IgPCAxKSB7IHRoaXMuX2IgPSBtYXRoUm91bmQodGhpcy5fYik7IH1cblxuICAgIHRoaXMuX29rID0gcmdiLm9rO1xuICAgIHRoaXMuX3RjX2lkID0gdGlueUNvdW50ZXIrKztcbn1cblxudGlueWNvbG9yLnByb3RvdHlwZSA9IHtcbiAgICBpc0Rhcms6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRCcmlnaHRuZXNzKCkgPCAxMjg7XG4gICAgfSxcbiAgICBpc0xpZ2h0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmlzRGFyaygpO1xuICAgIH0sXG4gICAgaXNWYWxpZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vaztcbiAgICB9LFxuICAgIGdldE9yaWdpbmFsSW5wdXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX29yaWdpbmFsSW5wdXQ7XG4gICAgfSxcbiAgICBnZXRGb3JtYXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZm9ybWF0O1xuICAgIH0sXG4gICAgZ2V0QWxwaGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYTtcbiAgICB9LFxuICAgIGdldEJyaWdodG5lc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAvL2h0dHA6Ly93d3cudzMub3JnL1RSL0FFUlQjY29sb3ItY29udHJhc3RcbiAgICAgICAgdmFyIHJnYiA9IHRoaXMudG9SZ2IoKTtcbiAgICAgICAgcmV0dXJuIChyZ2IuciAqIDI5OSArIHJnYi5nICogNTg3ICsgcmdiLmIgKiAxMTQpIC8gMTAwMDtcbiAgICB9LFxuICAgIGdldEx1bWluYW5jZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vaHR0cDovL3d3dy53My5vcmcvVFIvMjAwOC9SRUMtV0NBRzIwLTIwMDgxMjExLyNyZWxhdGl2ZWx1bWluYW5jZWRlZlxuICAgICAgICB2YXIgcmdiID0gdGhpcy50b1JnYigpO1xuICAgICAgICB2YXIgUnNSR0IsIEdzUkdCLCBCc1JHQiwgUiwgRywgQjtcbiAgICAgICAgUnNSR0IgPSByZ2Iuci8yNTU7XG4gICAgICAgIEdzUkdCID0gcmdiLmcvMjU1O1xuICAgICAgICBCc1JHQiA9IHJnYi5iLzI1NTtcblxuICAgICAgICBpZiAoUnNSR0IgPD0gMC4wMzkyOCkge1IgPSBSc1JHQiAvIDEyLjkyO30gZWxzZSB7UiA9IE1hdGgucG93KCgoUnNSR0IgKyAwLjA1NSkgLyAxLjA1NSksIDIuNCk7fVxuICAgICAgICBpZiAoR3NSR0IgPD0gMC4wMzkyOCkge0cgPSBHc1JHQiAvIDEyLjkyO30gZWxzZSB7RyA9IE1hdGgucG93KCgoR3NSR0IgKyAwLjA1NSkgLyAxLjA1NSksIDIuNCk7fVxuICAgICAgICBpZiAoQnNSR0IgPD0gMC4wMzkyOCkge0IgPSBCc1JHQiAvIDEyLjkyO30gZWxzZSB7QiA9IE1hdGgucG93KCgoQnNSR0IgKyAwLjA1NSkgLyAxLjA1NSksIDIuNCk7fVxuICAgICAgICByZXR1cm4gKDAuMjEyNiAqIFIpICsgKDAuNzE1MiAqIEcpICsgKDAuMDcyMiAqIEIpO1xuICAgIH0sXG4gICAgc2V0QWxwaGE6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2EgPSBib3VuZEFscGhhKHZhbHVlKTtcbiAgICAgICAgdGhpcy5fcm91bmRBID0gbWF0aFJvdW5kKDEwMCp0aGlzLl9hKSAvIDEwMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICB0b0hzdjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBoc3YgPSByZ2JUb0hzdih0aGlzLl9yLCB0aGlzLl9nLCB0aGlzLl9iKTtcbiAgICAgICAgcmV0dXJuIHsgaDogaHN2LmggKiAzNjAsIHM6IGhzdi5zLCB2OiBoc3YudiwgYTogdGhpcy5fYSB9O1xuICAgIH0sXG4gICAgdG9Ic3ZTdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaHN2ID0gcmdiVG9Ic3YodGhpcy5fciwgdGhpcy5fZywgdGhpcy5fYik7XG4gICAgICAgIHZhciBoID0gbWF0aFJvdW5kKGhzdi5oICogMzYwKSwgcyA9IG1hdGhSb3VuZChoc3YucyAqIDEwMCksIHYgPSBtYXRoUm91bmQoaHN2LnYgKiAxMDApO1xuICAgICAgICByZXR1cm4gKHRoaXMuX2EgPT0gMSkgP1xuICAgICAgICAgIFwiaHN2KFwiICArIGggKyBcIiwgXCIgKyBzICsgXCIlLCBcIiArIHYgKyBcIiUpXCIgOlxuICAgICAgICAgIFwiaHN2YShcIiArIGggKyBcIiwgXCIgKyBzICsgXCIlLCBcIiArIHYgKyBcIiUsIFwiKyB0aGlzLl9yb3VuZEEgKyBcIilcIjtcbiAgICB9LFxuICAgIHRvSHNsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGhzbCA9IHJnYlRvSHNsKHRoaXMuX3IsIHRoaXMuX2csIHRoaXMuX2IpO1xuICAgICAgICByZXR1cm4geyBoOiBoc2wuaCAqIDM2MCwgczogaHNsLnMsIGw6IGhzbC5sLCBhOiB0aGlzLl9hIH07XG4gICAgfSxcbiAgICB0b0hzbFN0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBoc2wgPSByZ2JUb0hzbCh0aGlzLl9yLCB0aGlzLl9nLCB0aGlzLl9iKTtcbiAgICAgICAgdmFyIGggPSBtYXRoUm91bmQoaHNsLmggKiAzNjApLCBzID0gbWF0aFJvdW5kKGhzbC5zICogMTAwKSwgbCA9IG1hdGhSb3VuZChoc2wubCAqIDEwMCk7XG4gICAgICAgIHJldHVybiAodGhpcy5fYSA9PSAxKSA/XG4gICAgICAgICAgXCJoc2woXCIgICsgaCArIFwiLCBcIiArIHMgKyBcIiUsIFwiICsgbCArIFwiJSlcIiA6XG4gICAgICAgICAgXCJoc2xhKFwiICsgaCArIFwiLCBcIiArIHMgKyBcIiUsIFwiICsgbCArIFwiJSwgXCIrIHRoaXMuX3JvdW5kQSArIFwiKVwiO1xuICAgIH0sXG4gICAgdG9IZXg6IGZ1bmN0aW9uKGFsbG93M0NoYXIpIHtcbiAgICAgICAgcmV0dXJuIHJnYlRvSGV4KHRoaXMuX3IsIHRoaXMuX2csIHRoaXMuX2IsIGFsbG93M0NoYXIpO1xuICAgIH0sXG4gICAgdG9IZXhTdHJpbmc6IGZ1bmN0aW9uKGFsbG93M0NoYXIpIHtcbiAgICAgICAgcmV0dXJuICcjJyArIHRoaXMudG9IZXgoYWxsb3czQ2hhcik7XG4gICAgfSxcbiAgICB0b0hleDg6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcmdiYVRvSGV4KHRoaXMuX3IsIHRoaXMuX2csIHRoaXMuX2IsIHRoaXMuX2EpO1xuICAgIH0sXG4gICAgdG9IZXg4U3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICcjJyArIHRoaXMudG9IZXg4KCk7XG4gICAgfSxcbiAgICB0b1JnYjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7IHI6IG1hdGhSb3VuZCh0aGlzLl9yKSwgZzogbWF0aFJvdW5kKHRoaXMuX2cpLCBiOiBtYXRoUm91bmQodGhpcy5fYiksIGE6IHRoaXMuX2EgfTtcbiAgICB9LFxuICAgIHRvUmdiU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLl9hID09IDEpID9cbiAgICAgICAgICBcInJnYihcIiAgKyBtYXRoUm91bmQodGhpcy5fcikgKyBcIiwgXCIgKyBtYXRoUm91bmQodGhpcy5fZykgKyBcIiwgXCIgKyBtYXRoUm91bmQodGhpcy5fYikgKyBcIilcIiA6XG4gICAgICAgICAgXCJyZ2JhKFwiICsgbWF0aFJvdW5kKHRoaXMuX3IpICsgXCIsIFwiICsgbWF0aFJvdW5kKHRoaXMuX2cpICsgXCIsIFwiICsgbWF0aFJvdW5kKHRoaXMuX2IpICsgXCIsIFwiICsgdGhpcy5fcm91bmRBICsgXCIpXCI7XG4gICAgfSxcbiAgICB0b1BlcmNlbnRhZ2VSZ2I6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4geyByOiBtYXRoUm91bmQoYm91bmQwMSh0aGlzLl9yLCAyNTUpICogMTAwKSArIFwiJVwiLCBnOiBtYXRoUm91bmQoYm91bmQwMSh0aGlzLl9nLCAyNTUpICogMTAwKSArIFwiJVwiLCBiOiBtYXRoUm91bmQoYm91bmQwMSh0aGlzLl9iLCAyNTUpICogMTAwKSArIFwiJVwiLCBhOiB0aGlzLl9hIH07XG4gICAgfSxcbiAgICB0b1BlcmNlbnRhZ2VSZ2JTdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuX2EgPT0gMSkgP1xuICAgICAgICAgIFwicmdiKFwiICArIG1hdGhSb3VuZChib3VuZDAxKHRoaXMuX3IsIDI1NSkgKiAxMDApICsgXCIlLCBcIiArIG1hdGhSb3VuZChib3VuZDAxKHRoaXMuX2csIDI1NSkgKiAxMDApICsgXCIlLCBcIiArIG1hdGhSb3VuZChib3VuZDAxKHRoaXMuX2IsIDI1NSkgKiAxMDApICsgXCIlKVwiIDpcbiAgICAgICAgICBcInJnYmEoXCIgKyBtYXRoUm91bmQoYm91bmQwMSh0aGlzLl9yLCAyNTUpICogMTAwKSArIFwiJSwgXCIgKyBtYXRoUm91bmQoYm91bmQwMSh0aGlzLl9nLCAyNTUpICogMTAwKSArIFwiJSwgXCIgKyBtYXRoUm91bmQoYm91bmQwMSh0aGlzLl9iLCAyNTUpICogMTAwKSArIFwiJSwgXCIgKyB0aGlzLl9yb3VuZEEgKyBcIilcIjtcbiAgICB9LFxuICAgIHRvTmFtZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9hID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJ0cmFuc3BhcmVudFwiO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2EgPCAxKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaGV4TmFtZXNbcmdiVG9IZXgodGhpcy5fciwgdGhpcy5fZywgdGhpcy5fYiwgdHJ1ZSldIHx8IGZhbHNlO1xuICAgIH0sXG4gICAgdG9GaWx0ZXI6IGZ1bmN0aW9uKHNlY29uZENvbG9yKSB7XG4gICAgICAgIHZhciBoZXg4U3RyaW5nID0gJyMnICsgcmdiYVRvSGV4KHRoaXMuX3IsIHRoaXMuX2csIHRoaXMuX2IsIHRoaXMuX2EpO1xuICAgICAgICB2YXIgc2Vjb25kSGV4OFN0cmluZyA9IGhleDhTdHJpbmc7XG4gICAgICAgIHZhciBncmFkaWVudFR5cGUgPSB0aGlzLl9ncmFkaWVudFR5cGUgPyBcIkdyYWRpZW50VHlwZSA9IDEsIFwiIDogXCJcIjtcblxuICAgICAgICBpZiAoc2Vjb25kQ29sb3IpIHtcbiAgICAgICAgICAgIHZhciBzID0gdGlueWNvbG9yKHNlY29uZENvbG9yKTtcbiAgICAgICAgICAgIHNlY29uZEhleDhTdHJpbmcgPSBzLnRvSGV4OFN0cmluZygpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFwicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LmdyYWRpZW50KFwiK2dyYWRpZW50VHlwZStcInN0YXJ0Q29sb3JzdHI9XCIraGV4OFN0cmluZytcIixlbmRDb2xvcnN0cj1cIitzZWNvbmRIZXg4U3RyaW5nK1wiKVwiO1xuICAgIH0sXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKGZvcm1hdCkge1xuICAgICAgICB2YXIgZm9ybWF0U2V0ID0gISFmb3JtYXQ7XG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCB0aGlzLl9mb3JtYXQ7XG5cbiAgICAgICAgdmFyIGZvcm1hdHRlZFN0cmluZyA9IGZhbHNlO1xuICAgICAgICB2YXIgaGFzQWxwaGEgPSB0aGlzLl9hIDwgMSAmJiB0aGlzLl9hID49IDA7XG4gICAgICAgIHZhciBuZWVkc0FscGhhRm9ybWF0ID0gIWZvcm1hdFNldCAmJiBoYXNBbHBoYSAmJiAoZm9ybWF0ID09PSBcImhleFwiIHx8IGZvcm1hdCA9PT0gXCJoZXg2XCIgfHwgZm9ybWF0ID09PSBcImhleDNcIiB8fCBmb3JtYXQgPT09IFwibmFtZVwiKTtcblxuICAgICAgICBpZiAobmVlZHNBbHBoYUZvcm1hdCkge1xuICAgICAgICAgICAgLy8gU3BlY2lhbCBjYXNlIGZvciBcInRyYW5zcGFyZW50XCIsIGFsbCBvdGhlciBub24tYWxwaGEgZm9ybWF0c1xuICAgICAgICAgICAgLy8gd2lsbCByZXR1cm4gcmdiYSB3aGVuIHRoZXJlIGlzIHRyYW5zcGFyZW5jeS5cbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09IFwibmFtZVwiICYmIHRoaXMuX2EgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b05hbWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvUmdiU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gXCJyZ2JcIikge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b1JnYlN0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IFwicHJnYlwiKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvUGVyY2VudGFnZVJnYlN0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IFwiaGV4XCIgfHwgZm9ybWF0ID09PSBcImhleDZcIikge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b0hleFN0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IFwiaGV4M1wiKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvSGV4U3RyaW5nKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IFwiaGV4OFwiKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvSGV4OFN0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IFwibmFtZVwiKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvTmFtZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IFwiaHNsXCIpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHRoaXMudG9Ic2xTdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSBcImhzdlwiKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvSHN2U3RyaW5nKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZm9ybWF0dGVkU3RyaW5nIHx8IHRoaXMudG9IZXhTdHJpbmcoKTtcbiAgICB9LFxuXG4gICAgX2FwcGx5TW9kaWZpY2F0aW9uOiBmdW5jdGlvbihmbiwgYXJncykge1xuICAgICAgICB2YXIgY29sb3IgPSBmbi5hcHBseShudWxsLCBbdGhpc10uY29uY2F0KFtdLnNsaWNlLmNhbGwoYXJncykpKTtcbiAgICAgICAgdGhpcy5fciA9IGNvbG9yLl9yO1xuICAgICAgICB0aGlzLl9nID0gY29sb3IuX2c7XG4gICAgICAgIHRoaXMuX2IgPSBjb2xvci5fYjtcbiAgICAgICAgdGhpcy5zZXRBbHBoYShjb2xvci5fYSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgbGlnaHRlbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBseU1vZGlmaWNhdGlvbihsaWdodGVuLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgYnJpZ2h0ZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24oYnJpZ2h0ZW4sIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBkYXJrZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24oZGFya2VuLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZGVzYXR1cmF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBseU1vZGlmaWNhdGlvbihkZXNhdHVyYXRlLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgc2F0dXJhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24oc2F0dXJhdGUsIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBncmV5c2NhbGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24oZ3JleXNjYWxlLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgc3BpbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBseU1vZGlmaWNhdGlvbihzcGluLCBhcmd1bWVudHMpO1xuICAgIH0sXG5cbiAgICBfYXBwbHlDb21iaW5hdGlvbjogZnVuY3Rpb24oZm4sIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KG51bGwsIFt0aGlzXS5jb25jYXQoW10uc2xpY2UuY2FsbChhcmdzKSkpO1xuICAgIH0sXG4gICAgYW5hbG9nb3VzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGx5Q29tYmluYXRpb24oYW5hbG9nb3VzLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgY29tcGxlbWVudDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBseUNvbWJpbmF0aW9uKGNvbXBsZW1lbnQsIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBtb25vY2hyb21hdGljOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGx5Q29tYmluYXRpb24obW9ub2Nocm9tYXRpYywgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHNwbGl0Y29tcGxlbWVudDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBseUNvbWJpbmF0aW9uKHNwbGl0Y29tcGxlbWVudCwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHRyaWFkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGx5Q29tYmluYXRpb24odHJpYWQsIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICB0ZXRyYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlDb21iaW5hdGlvbih0ZXRyYWQsIGFyZ3VtZW50cyk7XG4gICAgfVxufTtcblxuLy8gSWYgaW5wdXQgaXMgYW4gb2JqZWN0LCBmb3JjZSAxIGludG8gXCIxLjBcIiB0byBoYW5kbGUgcmF0aW9zIHByb3Blcmx5XG4vLyBTdHJpbmcgaW5wdXQgcmVxdWlyZXMgXCIxLjBcIiBhcyBpbnB1dCwgc28gMSB3aWxsIGJlIHRyZWF0ZWQgYXMgMVxudGlueWNvbG9yLmZyb21SYXRpbyA9IGZ1bmN0aW9uKGNvbG9yLCBvcHRzKSB7XG4gICAgaWYgKHR5cGVvZiBjb2xvciA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHZhciBuZXdDb2xvciA9IHt9O1xuICAgICAgICBmb3IgKHZhciBpIGluIGNvbG9yKSB7XG4gICAgICAgICAgICBpZiAoY29sb3IuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gXCJhXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3Q29sb3JbaV0gPSBjb2xvcltpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0NvbG9yW2ldID0gY29udmVydFRvUGVyY2VudGFnZShjb2xvcltpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbG9yID0gbmV3Q29sb3I7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRpbnljb2xvcihjb2xvciwgb3B0cyk7XG59O1xuXG4vLyBHaXZlbiBhIHN0cmluZyBvciBvYmplY3QsIGNvbnZlcnQgdGhhdCBpbnB1dCB0byBSR0Jcbi8vIFBvc3NpYmxlIHN0cmluZyBpbnB1dHM6XG4vL1xuLy8gICAgIFwicmVkXCJcbi8vICAgICBcIiNmMDBcIiBvciBcImYwMFwiXG4vLyAgICAgXCIjZmYwMDAwXCIgb3IgXCJmZjAwMDBcIlxuLy8gICAgIFwiI2ZmMDAwMDAwXCIgb3IgXCJmZjAwMDAwMFwiXG4vLyAgICAgXCJyZ2IgMjU1IDAgMFwiIG9yIFwicmdiICgyNTUsIDAsIDApXCJcbi8vICAgICBcInJnYiAxLjAgMCAwXCIgb3IgXCJyZ2IgKDEsIDAsIDApXCJcbi8vICAgICBcInJnYmEgKDI1NSwgMCwgMCwgMSlcIiBvciBcInJnYmEgMjU1LCAwLCAwLCAxXCJcbi8vICAgICBcInJnYmEgKDEuMCwgMCwgMCwgMSlcIiBvciBcInJnYmEgMS4wLCAwLCAwLCAxXCJcbi8vICAgICBcImhzbCgwLCAxMDAlLCA1MCUpXCIgb3IgXCJoc2wgMCAxMDAlIDUwJVwiXG4vLyAgICAgXCJoc2xhKDAsIDEwMCUsIDUwJSwgMSlcIiBvciBcImhzbGEgMCAxMDAlIDUwJSwgMVwiXG4vLyAgICAgXCJoc3YoMCwgMTAwJSwgMTAwJSlcIiBvciBcImhzdiAwIDEwMCUgMTAwJVwiXG4vL1xuZnVuY3Rpb24gaW5wdXRUb1JHQihjb2xvcikge1xuXG4gICAgdmFyIHJnYiA9IHsgcjogMCwgZzogMCwgYjogMCB9O1xuICAgIHZhciBhID0gMTtcbiAgICB2YXIgb2sgPSBmYWxzZTtcbiAgICB2YXIgZm9ybWF0ID0gZmFsc2U7XG5cbiAgICBpZiAodHlwZW9mIGNvbG9yID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgY29sb3IgPSBzdHJpbmdJbnB1dFRvT2JqZWN0KGNvbG9yKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNvbG9yID09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgaWYgKGNvbG9yLmhhc093blByb3BlcnR5KFwiclwiKSAmJiBjb2xvci5oYXNPd25Qcm9wZXJ0eShcImdcIikgJiYgY29sb3IuaGFzT3duUHJvcGVydHkoXCJiXCIpKSB7XG4gICAgICAgICAgICByZ2IgPSByZ2JUb1JnYihjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iKTtcbiAgICAgICAgICAgIG9rID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvcm1hdCA9IFN0cmluZyhjb2xvci5yKS5zdWJzdHIoLTEpID09PSBcIiVcIiA/IFwicHJnYlwiIDogXCJyZ2JcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb2xvci5oYXNPd25Qcm9wZXJ0eShcImhcIikgJiYgY29sb3IuaGFzT3duUHJvcGVydHkoXCJzXCIpICYmIGNvbG9yLmhhc093blByb3BlcnR5KFwidlwiKSkge1xuICAgICAgICAgICAgY29sb3IucyA9IGNvbnZlcnRUb1BlcmNlbnRhZ2UoY29sb3Iucyk7XG4gICAgICAgICAgICBjb2xvci52ID0gY29udmVydFRvUGVyY2VudGFnZShjb2xvci52KTtcbiAgICAgICAgICAgIHJnYiA9IGhzdlRvUmdiKGNvbG9yLmgsIGNvbG9yLnMsIGNvbG9yLnYpO1xuICAgICAgICAgICAgb2sgPSB0cnVlO1xuICAgICAgICAgICAgZm9ybWF0ID0gXCJoc3ZcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb2xvci5oYXNPd25Qcm9wZXJ0eShcImhcIikgJiYgY29sb3IuaGFzT3duUHJvcGVydHkoXCJzXCIpICYmIGNvbG9yLmhhc093blByb3BlcnR5KFwibFwiKSkge1xuICAgICAgICAgICAgY29sb3IucyA9IGNvbnZlcnRUb1BlcmNlbnRhZ2UoY29sb3Iucyk7XG4gICAgICAgICAgICBjb2xvci5sID0gY29udmVydFRvUGVyY2VudGFnZShjb2xvci5sKTtcbiAgICAgICAgICAgIHJnYiA9IGhzbFRvUmdiKGNvbG9yLmgsIGNvbG9yLnMsIGNvbG9yLmwpO1xuICAgICAgICAgICAgb2sgPSB0cnVlO1xuICAgICAgICAgICAgZm9ybWF0ID0gXCJoc2xcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb2xvci5oYXNPd25Qcm9wZXJ0eShcImFcIikpIHtcbiAgICAgICAgICAgIGEgPSBjb2xvci5hO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYSA9IGJvdW5kQWxwaGEoYSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBvazogb2ssXG4gICAgICAgIGZvcm1hdDogY29sb3IuZm9ybWF0IHx8IGZvcm1hdCxcbiAgICAgICAgcjogbWF0aE1pbigyNTUsIG1hdGhNYXgocmdiLnIsIDApKSxcbiAgICAgICAgZzogbWF0aE1pbigyNTUsIG1hdGhNYXgocmdiLmcsIDApKSxcbiAgICAgICAgYjogbWF0aE1pbigyNTUsIG1hdGhNYXgocmdiLmIsIDApKSxcbiAgICAgICAgYTogYVxuICAgIH07XG59XG5cblxuLy8gQ29udmVyc2lvbiBGdW5jdGlvbnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIGByZ2JUb0hzbGAsIGByZ2JUb0hzdmAsIGBoc2xUb1JnYmAsIGBoc3ZUb1JnYmAgbW9kaWZpZWQgZnJvbTpcbi8vIDxodHRwOi8vbWppamFja3Nvbi5jb20vMjAwOC8wMi9yZ2ItdG8taHNsLWFuZC1yZ2ItdG8taHN2LWNvbG9yLW1vZGVsLWNvbnZlcnNpb24tYWxnb3JpdGhtcy1pbi1qYXZhc2NyaXB0PlxuXG4vLyBgcmdiVG9SZ2JgXG4vLyBIYW5kbGUgYm91bmRzIC8gcGVyY2VudGFnZSBjaGVja2luZyB0byBjb25mb3JtIHRvIENTUyBjb2xvciBzcGVjXG4vLyA8aHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1jb2xvci8+XG4vLyAqQXNzdW1lczoqIHIsIGcsIGIgaW4gWzAsIDI1NV0gb3IgWzAsIDFdXG4vLyAqUmV0dXJuczoqIHsgciwgZywgYiB9IGluIFswLCAyNTVdXG5mdW5jdGlvbiByZ2JUb1JnYihyLCBnLCBiKXtcbiAgICByZXR1cm4ge1xuICAgICAgICByOiBib3VuZDAxKHIsIDI1NSkgKiAyNTUsXG4gICAgICAgIGc6IGJvdW5kMDEoZywgMjU1KSAqIDI1NSxcbiAgICAgICAgYjogYm91bmQwMShiLCAyNTUpICogMjU1XG4gICAgfTtcbn1cblxuLy8gYHJnYlRvSHNsYFxuLy8gQ29udmVydHMgYW4gUkdCIGNvbG9yIHZhbHVlIHRvIEhTTC5cbi8vICpBc3N1bWVzOiogciwgZywgYW5kIGIgYXJlIGNvbnRhaW5lZCBpbiBbMCwgMjU1XSBvciBbMCwgMV1cbi8vICpSZXR1cm5zOiogeyBoLCBzLCBsIH0gaW4gWzAsMV1cbmZ1bmN0aW9uIHJnYlRvSHNsKHIsIGcsIGIpIHtcblxuICAgIHIgPSBib3VuZDAxKHIsIDI1NSk7XG4gICAgZyA9IGJvdW5kMDEoZywgMjU1KTtcbiAgICBiID0gYm91bmQwMShiLCAyNTUpO1xuXG4gICAgdmFyIG1heCA9IG1hdGhNYXgociwgZywgYiksIG1pbiA9IG1hdGhNaW4ociwgZywgYik7XG4gICAgdmFyIGgsIHMsIGwgPSAobWF4ICsgbWluKSAvIDI7XG5cbiAgICBpZihtYXggPT0gbWluKSB7XG4gICAgICAgIGggPSBzID0gMDsgLy8gYWNocm9tYXRpY1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIGQgPSBtYXggLSBtaW47XG4gICAgICAgIHMgPSBsID4gMC41ID8gZCAvICgyIC0gbWF4IC0gbWluKSA6IGQgLyAobWF4ICsgbWluKTtcbiAgICAgICAgc3dpdGNoKG1heCkge1xuICAgICAgICAgICAgY2FzZSByOiBoID0gKGcgLSBiKSAvIGQgKyAoZyA8IGIgPyA2IDogMCk7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBnOiBoID0gKGIgLSByKSAvIGQgKyAyOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgYjogaCA9IChyIC0gZykgLyBkICsgNDsgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBoIC89IDY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgaDogaCwgczogcywgbDogbCB9O1xufVxuXG4vLyBgaHNsVG9SZ2JgXG4vLyBDb252ZXJ0cyBhbiBIU0wgY29sb3IgdmFsdWUgdG8gUkdCLlxuLy8gKkFzc3VtZXM6KiBoIGlzIGNvbnRhaW5lZCBpbiBbMCwgMV0gb3IgWzAsIDM2MF0gYW5kIHMgYW5kIGwgYXJlIGNvbnRhaW5lZCBbMCwgMV0gb3IgWzAsIDEwMF1cbi8vICpSZXR1cm5zOiogeyByLCBnLCBiIH0gaW4gdGhlIHNldCBbMCwgMjU1XVxuZnVuY3Rpb24gaHNsVG9SZ2IoaCwgcywgbCkge1xuICAgIHZhciByLCBnLCBiO1xuXG4gICAgaCA9IGJvdW5kMDEoaCwgMzYwKTtcbiAgICBzID0gYm91bmQwMShzLCAxMDApO1xuICAgIGwgPSBib3VuZDAxKGwsIDEwMCk7XG5cbiAgICBmdW5jdGlvbiBodWUycmdiKHAsIHEsIHQpIHtcbiAgICAgICAgaWYodCA8IDApIHQgKz0gMTtcbiAgICAgICAgaWYodCA+IDEpIHQgLT0gMTtcbiAgICAgICAgaWYodCA8IDEvNikgcmV0dXJuIHAgKyAocSAtIHApICogNiAqIHQ7XG4gICAgICAgIGlmKHQgPCAxLzIpIHJldHVybiBxO1xuICAgICAgICBpZih0IDwgMi8zKSByZXR1cm4gcCArIChxIC0gcCkgKiAoMi8zIC0gdCkgKiA2O1xuICAgICAgICByZXR1cm4gcDtcbiAgICB9XG5cbiAgICBpZihzID09PSAwKSB7XG4gICAgICAgIHIgPSBnID0gYiA9IGw7IC8vIGFjaHJvbWF0aWNcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBxID0gbCA8IDAuNSA/IGwgKiAoMSArIHMpIDogbCArIHMgLSBsICogcztcbiAgICAgICAgdmFyIHAgPSAyICogbCAtIHE7XG4gICAgICAgIHIgPSBodWUycmdiKHAsIHEsIGggKyAxLzMpO1xuICAgICAgICBnID0gaHVlMnJnYihwLCBxLCBoKTtcbiAgICAgICAgYiA9IGh1ZTJyZ2IocCwgcSwgaCAtIDEvMyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgcjogciAqIDI1NSwgZzogZyAqIDI1NSwgYjogYiAqIDI1NSB9O1xufVxuXG4vLyBgcmdiVG9Ic3ZgXG4vLyBDb252ZXJ0cyBhbiBSR0IgY29sb3IgdmFsdWUgdG8gSFNWXG4vLyAqQXNzdW1lczoqIHIsIGcsIGFuZCBiIGFyZSBjb250YWluZWQgaW4gdGhlIHNldCBbMCwgMjU1XSBvciBbMCwgMV1cbi8vICpSZXR1cm5zOiogeyBoLCBzLCB2IH0gaW4gWzAsMV1cbmZ1bmN0aW9uIHJnYlRvSHN2KHIsIGcsIGIpIHtcblxuICAgIHIgPSBib3VuZDAxKHIsIDI1NSk7XG4gICAgZyA9IGJvdW5kMDEoZywgMjU1KTtcbiAgICBiID0gYm91bmQwMShiLCAyNTUpO1xuXG4gICAgdmFyIG1heCA9IG1hdGhNYXgociwgZywgYiksIG1pbiA9IG1hdGhNaW4ociwgZywgYik7XG4gICAgdmFyIGgsIHMsIHYgPSBtYXg7XG5cbiAgICB2YXIgZCA9IG1heCAtIG1pbjtcbiAgICBzID0gbWF4ID09PSAwID8gMCA6IGQgLyBtYXg7XG5cbiAgICBpZihtYXggPT0gbWluKSB7XG4gICAgICAgIGggPSAwOyAvLyBhY2hyb21hdGljXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzd2l0Y2gobWF4KSB7XG4gICAgICAgICAgICBjYXNlIHI6IGggPSAoZyAtIGIpIC8gZCArIChnIDwgYiA/IDYgOiAwKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGc6IGggPSAoYiAtIHIpIC8gZCArIDI7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBiOiBoID0gKHIgLSBnKSAvIGQgKyA0OyBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBoIC89IDY7XG4gICAgfVxuICAgIHJldHVybiB7IGg6IGgsIHM6IHMsIHY6IHYgfTtcbn1cblxuLy8gYGhzdlRvUmdiYFxuLy8gQ29udmVydHMgYW4gSFNWIGNvbG9yIHZhbHVlIHRvIFJHQi5cbi8vICpBc3N1bWVzOiogaCBpcyBjb250YWluZWQgaW4gWzAsIDFdIG9yIFswLCAzNjBdIGFuZCBzIGFuZCB2IGFyZSBjb250YWluZWQgaW4gWzAsIDFdIG9yIFswLCAxMDBdXG4vLyAqUmV0dXJuczoqIHsgciwgZywgYiB9IGluIHRoZSBzZXQgWzAsIDI1NV1cbiBmdW5jdGlvbiBoc3ZUb1JnYihoLCBzLCB2KSB7XG5cbiAgICBoID0gYm91bmQwMShoLCAzNjApICogNjtcbiAgICBzID0gYm91bmQwMShzLCAxMDApO1xuICAgIHYgPSBib3VuZDAxKHYsIDEwMCk7XG5cbiAgICB2YXIgaSA9IG1hdGguZmxvb3IoaCksXG4gICAgICAgIGYgPSBoIC0gaSxcbiAgICAgICAgcCA9IHYgKiAoMSAtIHMpLFxuICAgICAgICBxID0gdiAqICgxIC0gZiAqIHMpLFxuICAgICAgICB0ID0gdiAqICgxIC0gKDEgLSBmKSAqIHMpLFxuICAgICAgICBtb2QgPSBpICUgNixcbiAgICAgICAgciA9IFt2LCBxLCBwLCBwLCB0LCB2XVttb2RdLFxuICAgICAgICBnID0gW3QsIHYsIHYsIHEsIHAsIHBdW21vZF0sXG4gICAgICAgIGIgPSBbcCwgcCwgdCwgdiwgdiwgcV1bbW9kXTtcblxuICAgIHJldHVybiB7IHI6IHIgKiAyNTUsIGc6IGcgKiAyNTUsIGI6IGIgKiAyNTUgfTtcbn1cblxuLy8gYHJnYlRvSGV4YFxuLy8gQ29udmVydHMgYW4gUkdCIGNvbG9yIHRvIGhleFxuLy8gQXNzdW1lcyByLCBnLCBhbmQgYiBhcmUgY29udGFpbmVkIGluIHRoZSBzZXQgWzAsIDI1NV1cbi8vIFJldHVybnMgYSAzIG9yIDYgY2hhcmFjdGVyIGhleFxuZnVuY3Rpb24gcmdiVG9IZXgociwgZywgYiwgYWxsb3czQ2hhcikge1xuXG4gICAgdmFyIGhleCA9IFtcbiAgICAgICAgcGFkMihtYXRoUm91bmQocikudG9TdHJpbmcoMTYpKSxcbiAgICAgICAgcGFkMihtYXRoUm91bmQoZykudG9TdHJpbmcoMTYpKSxcbiAgICAgICAgcGFkMihtYXRoUm91bmQoYikudG9TdHJpbmcoMTYpKVxuICAgIF07XG5cbiAgICAvLyBSZXR1cm4gYSAzIGNoYXJhY3RlciBoZXggaWYgcG9zc2libGVcbiAgICBpZiAoYWxsb3czQ2hhciAmJiBoZXhbMF0uY2hhckF0KDApID09IGhleFswXS5jaGFyQXQoMSkgJiYgaGV4WzFdLmNoYXJBdCgwKSA9PSBoZXhbMV0uY2hhckF0KDEpICYmIGhleFsyXS5jaGFyQXQoMCkgPT0gaGV4WzJdLmNoYXJBdCgxKSkge1xuICAgICAgICByZXR1cm4gaGV4WzBdLmNoYXJBdCgwKSArIGhleFsxXS5jaGFyQXQoMCkgKyBoZXhbMl0uY2hhckF0KDApO1xuICAgIH1cblxuICAgIHJldHVybiBoZXguam9pbihcIlwiKTtcbn1cblxuLy8gYHJnYmFUb0hleGBcbi8vIENvbnZlcnRzIGFuIFJHQkEgY29sb3IgcGx1cyBhbHBoYSB0cmFuc3BhcmVuY3kgdG8gaGV4XG4vLyBBc3N1bWVzIHIsIGcsIGIgYW5kIGEgYXJlIGNvbnRhaW5lZCBpbiB0aGUgc2V0IFswLCAyNTVdXG4vLyBSZXR1cm5zIGFuIDggY2hhcmFjdGVyIGhleFxuZnVuY3Rpb24gcmdiYVRvSGV4KHIsIGcsIGIsIGEpIHtcblxuICAgIHZhciBoZXggPSBbXG4gICAgICAgIHBhZDIoY29udmVydERlY2ltYWxUb0hleChhKSksXG4gICAgICAgIHBhZDIobWF0aFJvdW5kKHIpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIobWF0aFJvdW5kKGcpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIobWF0aFJvdW5kKGIpLnRvU3RyaW5nKDE2KSlcbiAgICBdO1xuXG4gICAgcmV0dXJuIGhleC5qb2luKFwiXCIpO1xufVxuXG4vLyBgZXF1YWxzYFxuLy8gQ2FuIGJlIGNhbGxlZCB3aXRoIGFueSB0aW55Y29sb3IgaW5wdXRcbnRpbnljb2xvci5lcXVhbHMgPSBmdW5jdGlvbiAoY29sb3IxLCBjb2xvcjIpIHtcbiAgICBpZiAoIWNvbG9yMSB8fCAhY29sb3IyKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIHJldHVybiB0aW55Y29sb3IoY29sb3IxKS50b1JnYlN0cmluZygpID09IHRpbnljb2xvcihjb2xvcjIpLnRvUmdiU3RyaW5nKCk7XG59O1xuXG50aW55Y29sb3IucmFuZG9tID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRpbnljb2xvci5mcm9tUmF0aW8oe1xuICAgICAgICByOiBtYXRoUmFuZG9tKCksXG4gICAgICAgIGc6IG1hdGhSYW5kb20oKSxcbiAgICAgICAgYjogbWF0aFJhbmRvbSgpXG4gICAgfSk7XG59O1xuXG5cbi8vIE1vZGlmaWNhdGlvbiBGdW5jdGlvbnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFRoYW5rcyB0byBsZXNzLmpzIGZvciBzb21lIG9mIHRoZSBiYXNpY3MgaGVyZVxuLy8gPGh0dHBzOi8vZ2l0aHViLmNvbS9jbG91ZGhlYWQvbGVzcy5qcy9ibG9iL21hc3Rlci9saWIvbGVzcy9mdW5jdGlvbnMuanM+XG5cbmZ1bmN0aW9uIGRlc2F0dXJhdGUoY29sb3IsIGFtb3VudCkge1xuICAgIGFtb3VudCA9IChhbW91bnQgPT09IDApID8gMCA6IChhbW91bnQgfHwgMTApO1xuICAgIHZhciBoc2wgPSB0aW55Y29sb3IoY29sb3IpLnRvSHNsKCk7XG4gICAgaHNsLnMgLT0gYW1vdW50IC8gMTAwO1xuICAgIGhzbC5zID0gY2xhbXAwMShoc2wucyk7XG4gICAgcmV0dXJuIHRpbnljb2xvcihoc2wpO1xufVxuXG5mdW5jdGlvbiBzYXR1cmF0ZShjb2xvciwgYW1vdW50KSB7XG4gICAgYW1vdW50ID0gKGFtb3VudCA9PT0gMCkgPyAwIDogKGFtb3VudCB8fCAxMCk7XG4gICAgdmFyIGhzbCA9IHRpbnljb2xvcihjb2xvcikudG9Ic2woKTtcbiAgICBoc2wucyArPSBhbW91bnQgLyAxMDA7XG4gICAgaHNsLnMgPSBjbGFtcDAxKGhzbC5zKTtcbiAgICByZXR1cm4gdGlueWNvbG9yKGhzbCk7XG59XG5cbmZ1bmN0aW9uIGdyZXlzY2FsZShjb2xvcikge1xuICAgIHJldHVybiB0aW55Y29sb3IoY29sb3IpLmRlc2F0dXJhdGUoMTAwKTtcbn1cblxuZnVuY3Rpb24gbGlnaHRlbiAoY29sb3IsIGFtb3VudCkge1xuICAgIGFtb3VudCA9IChhbW91bnQgPT09IDApID8gMCA6IChhbW91bnQgfHwgMTApO1xuICAgIHZhciBoc2wgPSB0aW55Y29sb3IoY29sb3IpLnRvSHNsKCk7XG4gICAgaHNsLmwgKz0gYW1vdW50IC8gMTAwO1xuICAgIGhzbC5sID0gY2xhbXAwMShoc2wubCk7XG4gICAgcmV0dXJuIHRpbnljb2xvcihoc2wpO1xufVxuXG5mdW5jdGlvbiBicmlnaHRlbihjb2xvciwgYW1vdW50KSB7XG4gICAgYW1vdW50ID0gKGFtb3VudCA9PT0gMCkgPyAwIDogKGFtb3VudCB8fCAxMCk7XG4gICAgdmFyIHJnYiA9IHRpbnljb2xvcihjb2xvcikudG9SZ2IoKTtcbiAgICByZ2IuciA9IG1hdGhNYXgoMCwgbWF0aE1pbigyNTUsIHJnYi5yIC0gbWF0aFJvdW5kKDI1NSAqIC0gKGFtb3VudCAvIDEwMCkpKSk7XG4gICAgcmdiLmcgPSBtYXRoTWF4KDAsIG1hdGhNaW4oMjU1LCByZ2IuZyAtIG1hdGhSb3VuZCgyNTUgKiAtIChhbW91bnQgLyAxMDApKSkpO1xuICAgIHJnYi5iID0gbWF0aE1heCgwLCBtYXRoTWluKDI1NSwgcmdiLmIgLSBtYXRoUm91bmQoMjU1ICogLSAoYW1vdW50IC8gMTAwKSkpKTtcbiAgICByZXR1cm4gdGlueWNvbG9yKHJnYik7XG59XG5cbmZ1bmN0aW9uIGRhcmtlbiAoY29sb3IsIGFtb3VudCkge1xuICAgIGFtb3VudCA9IChhbW91bnQgPT09IDApID8gMCA6IChhbW91bnQgfHwgMTApO1xuICAgIHZhciBoc2wgPSB0aW55Y29sb3IoY29sb3IpLnRvSHNsKCk7XG4gICAgaHNsLmwgLT0gYW1vdW50IC8gMTAwO1xuICAgIGhzbC5sID0gY2xhbXAwMShoc2wubCk7XG4gICAgcmV0dXJuIHRpbnljb2xvcihoc2wpO1xufVxuXG4vLyBTcGluIHRha2VzIGEgcG9zaXRpdmUgb3IgbmVnYXRpdmUgYW1vdW50IHdpdGhpbiBbLTM2MCwgMzYwXSBpbmRpY2F0aW5nIHRoZSBjaGFuZ2Ugb2YgaHVlLlxuLy8gVmFsdWVzIG91dHNpZGUgb2YgdGhpcyByYW5nZSB3aWxsIGJlIHdyYXBwZWQgaW50byB0aGlzIHJhbmdlLlxuZnVuY3Rpb24gc3Bpbihjb2xvciwgYW1vdW50KSB7XG4gICAgdmFyIGhzbCA9IHRpbnljb2xvcihjb2xvcikudG9Ic2woKTtcbiAgICB2YXIgaHVlID0gKG1hdGhSb3VuZChoc2wuaCkgKyBhbW91bnQpICUgMzYwO1xuICAgIGhzbC5oID0gaHVlIDwgMCA/IDM2MCArIGh1ZSA6IGh1ZTtcbiAgICByZXR1cm4gdGlueWNvbG9yKGhzbCk7XG59XG5cbi8vIENvbWJpbmF0aW9uIEZ1bmN0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBUaGFua3MgdG8galF1ZXJ5IHhDb2xvciBmb3Igc29tZSBvZiB0aGUgaWRlYXMgYmVoaW5kIHRoZXNlXG4vLyA8aHR0cHM6Ly9naXRodWIuY29tL2luZnVzaW9uL2pRdWVyeS14Y29sb3IvYmxvYi9tYXN0ZXIvanF1ZXJ5Lnhjb2xvci5qcz5cblxuZnVuY3Rpb24gY29tcGxlbWVudChjb2xvcikge1xuICAgIHZhciBoc2wgPSB0aW55Y29sb3IoY29sb3IpLnRvSHNsKCk7XG4gICAgaHNsLmggPSAoaHNsLmggKyAxODApICUgMzYwO1xuICAgIHJldHVybiB0aW55Y29sb3IoaHNsKTtcbn1cblxuZnVuY3Rpb24gdHJpYWQoY29sb3IpIHtcbiAgICB2YXIgaHNsID0gdGlueWNvbG9yKGNvbG9yKS50b0hzbCgpO1xuICAgIHZhciBoID0gaHNsLmg7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgdGlueWNvbG9yKGNvbG9yKSxcbiAgICAgICAgdGlueWNvbG9yKHsgaDogKGggKyAxMjApICUgMzYwLCBzOiBoc2wucywgbDogaHNsLmwgfSksXG4gICAgICAgIHRpbnljb2xvcih7IGg6IChoICsgMjQwKSAlIDM2MCwgczogaHNsLnMsIGw6IGhzbC5sIH0pXG4gICAgXTtcbn1cblxuZnVuY3Rpb24gdGV0cmFkKGNvbG9yKSB7XG4gICAgdmFyIGhzbCA9IHRpbnljb2xvcihjb2xvcikudG9Ic2woKTtcbiAgICB2YXIgaCA9IGhzbC5oO1xuICAgIHJldHVybiBbXG4gICAgICAgIHRpbnljb2xvcihjb2xvciksXG4gICAgICAgIHRpbnljb2xvcih7IGg6IChoICsgOTApICUgMzYwLCBzOiBoc2wucywgbDogaHNsLmwgfSksXG4gICAgICAgIHRpbnljb2xvcih7IGg6IChoICsgMTgwKSAlIDM2MCwgczogaHNsLnMsIGw6IGhzbC5sIH0pLFxuICAgICAgICB0aW55Y29sb3IoeyBoOiAoaCArIDI3MCkgJSAzNjAsIHM6IGhzbC5zLCBsOiBoc2wubCB9KVxuICAgIF07XG59XG5cbmZ1bmN0aW9uIHNwbGl0Y29tcGxlbWVudChjb2xvcikge1xuICAgIHZhciBoc2wgPSB0aW55Y29sb3IoY29sb3IpLnRvSHNsKCk7XG4gICAgdmFyIGggPSBoc2wuaDtcbiAgICByZXR1cm4gW1xuICAgICAgICB0aW55Y29sb3IoY29sb3IpLFxuICAgICAgICB0aW55Y29sb3IoeyBoOiAoaCArIDcyKSAlIDM2MCwgczogaHNsLnMsIGw6IGhzbC5sfSksXG4gICAgICAgIHRpbnljb2xvcih7IGg6IChoICsgMjE2KSAlIDM2MCwgczogaHNsLnMsIGw6IGhzbC5sfSlcbiAgICBdO1xufVxuXG5mdW5jdGlvbiBhbmFsb2dvdXMoY29sb3IsIHJlc3VsdHMsIHNsaWNlcykge1xuICAgIHJlc3VsdHMgPSByZXN1bHRzIHx8IDY7XG4gICAgc2xpY2VzID0gc2xpY2VzIHx8IDMwO1xuXG4gICAgdmFyIGhzbCA9IHRpbnljb2xvcihjb2xvcikudG9Ic2woKTtcbiAgICB2YXIgcGFydCA9IDM2MCAvIHNsaWNlcztcbiAgICB2YXIgcmV0ID0gW3Rpbnljb2xvcihjb2xvcildO1xuXG4gICAgZm9yIChoc2wuaCA9ICgoaHNsLmggLSAocGFydCAqIHJlc3VsdHMgPj4gMSkpICsgNzIwKSAlIDM2MDsgLS1yZXN1bHRzOyApIHtcbiAgICAgICAgaHNsLmggPSAoaHNsLmggKyBwYXJ0KSAlIDM2MDtcbiAgICAgICAgcmV0LnB1c2godGlueWNvbG9yKGhzbCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBtb25vY2hyb21hdGljKGNvbG9yLCByZXN1bHRzKSB7XG4gICAgcmVzdWx0cyA9IHJlc3VsdHMgfHwgNjtcbiAgICB2YXIgaHN2ID0gdGlueWNvbG9yKGNvbG9yKS50b0hzdigpO1xuICAgIHZhciBoID0gaHN2LmgsIHMgPSBoc3YucywgdiA9IGhzdi52O1xuICAgIHZhciByZXQgPSBbXTtcbiAgICB2YXIgbW9kaWZpY2F0aW9uID0gMSAvIHJlc3VsdHM7XG5cbiAgICB3aGlsZSAocmVzdWx0cy0tKSB7XG4gICAgICAgIHJldC5wdXNoKHRpbnljb2xvcih7IGg6IGgsIHM6IHMsIHY6IHZ9KSk7XG4gICAgICAgIHYgPSAodiArIG1vZGlmaWNhdGlvbikgJSAxO1xuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG59XG5cbi8vIFV0aWxpdHkgRnVuY3Rpb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudGlueWNvbG9yLm1peCA9IGZ1bmN0aW9uKGNvbG9yMSwgY29sb3IyLCBhbW91bnQpIHtcbiAgICBhbW91bnQgPSAoYW1vdW50ID09PSAwKSA/IDAgOiAoYW1vdW50IHx8IDUwKTtcblxuICAgIHZhciByZ2IxID0gdGlueWNvbG9yKGNvbG9yMSkudG9SZ2IoKTtcbiAgICB2YXIgcmdiMiA9IHRpbnljb2xvcihjb2xvcjIpLnRvUmdiKCk7XG5cbiAgICB2YXIgcCA9IGFtb3VudCAvIDEwMDtcbiAgICB2YXIgdyA9IHAgKiAyIC0gMTtcbiAgICB2YXIgYSA9IHJnYjIuYSAtIHJnYjEuYTtcblxuICAgIHZhciB3MTtcblxuICAgIGlmICh3ICogYSA9PSAtMSkge1xuICAgICAgICB3MSA9IHc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdzEgPSAodyArIGEpIC8gKDEgKyB3ICogYSk7XG4gICAgfVxuXG4gICAgdzEgPSAodzEgKyAxKSAvIDI7XG5cbiAgICB2YXIgdzIgPSAxIC0gdzE7XG5cbiAgICB2YXIgcmdiYSA9IHtcbiAgICAgICAgcjogcmdiMi5yICogdzEgKyByZ2IxLnIgKiB3MixcbiAgICAgICAgZzogcmdiMi5nICogdzEgKyByZ2IxLmcgKiB3MixcbiAgICAgICAgYjogcmdiMi5iICogdzEgKyByZ2IxLmIgKiB3MixcbiAgICAgICAgYTogcmdiMi5hICogcCAgKyByZ2IxLmEgKiAoMSAtIHApXG4gICAgfTtcblxuICAgIHJldHVybiB0aW55Y29sb3IocmdiYSk7XG59O1xuXG5cbi8vIFJlYWRhYmlsaXR5IEZ1bmN0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyA8aHR0cDovL3d3dy53My5vcmcvVFIvMjAwOC9SRUMtV0NBRzIwLTIwMDgxMjExLyNjb250cmFzdC1yYXRpb2RlZiAoV0NBRyBWZXJzaW9uIDIpXG5cbi8vIGBjb250cmFzdGBcbi8vIEFuYWx5emUgdGhlIDIgY29sb3JzIGFuZCByZXR1cm5zIHRoZSBjb2xvciBjb250cmFzdCBkZWZpbmVkIGJ5IChXQ0FHIFZlcnNpb24gMilcbnRpbnljb2xvci5yZWFkYWJpbGl0eSA9IGZ1bmN0aW9uKGNvbG9yMSwgY29sb3IyKSB7XG4gICAgdmFyIGMxID0gdGlueWNvbG9yKGNvbG9yMSk7XG4gICAgdmFyIGMyID0gdGlueWNvbG9yKGNvbG9yMik7XG4gICAgcmV0dXJuIChNYXRoLm1heChjMS5nZXRMdW1pbmFuY2UoKSxjMi5nZXRMdW1pbmFuY2UoKSkrMC4wNSkgLyAoTWF0aC5taW4oYzEuZ2V0THVtaW5hbmNlKCksYzIuZ2V0THVtaW5hbmNlKCkpKzAuMDUpO1xufTtcblxuLy8gYGlzUmVhZGFibGVgXG4vLyBFbnN1cmUgdGhhdCBmb3JlZ3JvdW5kIGFuZCBiYWNrZ3JvdW5kIGNvbG9yIGNvbWJpbmF0aW9ucyBtZWV0IFdDQUcyIGd1aWRlbGluZXMuXG4vLyBUaGUgdGhpcmQgYXJndW1lbnQgaXMgYW4gb3B0aW9uYWwgT2JqZWN0LlxuLy8gICAgICB0aGUgJ2xldmVsJyBwcm9wZXJ0eSBzdGF0ZXMgJ0FBJyBvciAnQUFBJyAtIGlmIG1pc3Npbmcgb3IgaW52YWxpZCwgaXQgZGVmYXVsdHMgdG8gJ0FBJztcbi8vICAgICAgdGhlICdzaXplJyBwcm9wZXJ0eSBzdGF0ZXMgJ2xhcmdlJyBvciAnc21hbGwnIC0gaWYgbWlzc2luZyBvciBpbnZhbGlkLCBpdCBkZWZhdWx0cyB0byAnc21hbGwnLlxuLy8gSWYgdGhlIGVudGlyZSBvYmplY3QgaXMgYWJzZW50LCBpc1JlYWRhYmxlIGRlZmF1bHRzIHRvIHtsZXZlbDpcIkFBXCIsc2l6ZTpcInNtYWxsXCJ9LlxuXG4vLyAqRXhhbXBsZSpcbi8vICAgIHRpbnljb2xvci5pc1JlYWRhYmxlKFwiIzAwMFwiLCBcIiMxMTFcIikgPT4gZmFsc2Vcbi8vICAgIHRpbnljb2xvci5pc1JlYWRhYmxlKFwiIzAwMFwiLCBcIiMxMTFcIix7bGV2ZWw6XCJBQVwiLHNpemU6XCJsYXJnZVwifSkgPT4gZmFsc2VcbnRpbnljb2xvci5pc1JlYWRhYmxlID0gZnVuY3Rpb24oY29sb3IxLCBjb2xvcjIsIHdjYWcyKSB7XG4gICAgdmFyIHJlYWRhYmlsaXR5ID0gdGlueWNvbG9yLnJlYWRhYmlsaXR5KGNvbG9yMSwgY29sb3IyKTtcbiAgICB2YXIgd2NhZzJQYXJtcywgb3V0O1xuXG4gICAgb3V0ID0gZmFsc2U7XG5cbiAgICB3Y2FnMlBhcm1zID0gdmFsaWRhdGVXQ0FHMlBhcm1zKHdjYWcyKTtcbiAgICBzd2l0Y2ggKHdjYWcyUGFybXMubGV2ZWwgKyB3Y2FnMlBhcm1zLnNpemUpIHtcbiAgICAgICAgY2FzZSBcIkFBc21hbGxcIjpcbiAgICAgICAgY2FzZSBcIkFBQWxhcmdlXCI6XG4gICAgICAgICAgICBvdXQgPSByZWFkYWJpbGl0eSA+PSA0LjU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIkFBbGFyZ2VcIjpcbiAgICAgICAgICAgIG91dCA9IHJlYWRhYmlsaXR5ID49IDM7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIkFBQXNtYWxsXCI6XG4gICAgICAgICAgICBvdXQgPSByZWFkYWJpbGl0eSA+PSA3O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG5cbn07XG5cbi8vIGBtb3N0UmVhZGFibGVgXG4vLyBHaXZlbiBhIGJhc2UgY29sb3IgYW5kIGEgbGlzdCBvZiBwb3NzaWJsZSBmb3JlZ3JvdW5kIG9yIGJhY2tncm91bmRcbi8vIGNvbG9ycyBmb3IgdGhhdCBiYXNlLCByZXR1cm5zIHRoZSBtb3N0IHJlYWRhYmxlIGNvbG9yLlxuLy8gT3B0aW9uYWxseSByZXR1cm5zIEJsYWNrIG9yIFdoaXRlIGlmIHRoZSBtb3N0IHJlYWRhYmxlIGNvbG9yIGlzIHVucmVhZGFibGUuXG4vLyAqRXhhbXBsZSpcbi8vICAgIHRpbnljb2xvci5tb3N0UmVhZGFibGUodGlueWNvbG9yLm1vc3RSZWFkYWJsZShcIiMxMjNcIiwgW1wiIzEyNFwiLCBcIiMxMjVcIl0se2luY2x1ZGVGYWxsYmFja0NvbG9yczpmYWxzZX0pLnRvSGV4U3RyaW5nKCk7IC8vIFwiIzExMjI1NVwiXG4vLyAgICB0aW55Y29sb3IubW9zdFJlYWRhYmxlKHRpbnljb2xvci5tb3N0UmVhZGFibGUoXCIjMTIzXCIsIFtcIiMxMjRcIiwgXCIjMTI1XCJdLHtpbmNsdWRlRmFsbGJhY2tDb2xvcnM6dHJ1ZX0pLnRvSGV4U3RyaW5nKCk7ICAvLyBcIiNmZmZmZmZcIlxuLy8gICAgdGlueWNvbG9yLm1vc3RSZWFkYWJsZShcIiNhODAxNWFcIiwgW1wiI2ZhZjNmM1wiXSx7aW5jbHVkZUZhbGxiYWNrQ29sb3JzOnRydWUsbGV2ZWw6XCJBQUFcIixzaXplOlwibGFyZ2VcIn0pLnRvSGV4U3RyaW5nKCk7IC8vIFwiI2ZhZjNmM1wiXG4vLyAgICB0aW55Y29sb3IubW9zdFJlYWRhYmxlKFwiI2E4MDE1YVwiLCBbXCIjZmFmM2YzXCJdLHtpbmNsdWRlRmFsbGJhY2tDb2xvcnM6dHJ1ZSxsZXZlbDpcIkFBQVwiLHNpemU6XCJzbWFsbFwifSkudG9IZXhTdHJpbmcoKTsgLy8gXCIjZmZmZmZmXCJcbnRpbnljb2xvci5tb3N0UmVhZGFibGUgPSBmdW5jdGlvbihiYXNlQ29sb3IsIGNvbG9yTGlzdCwgYXJncykge1xuICAgIHZhciBiZXN0Q29sb3IgPSBudWxsO1xuICAgIHZhciBiZXN0U2NvcmUgPSAwO1xuICAgIHZhciByZWFkYWJpbGl0eTtcbiAgICB2YXIgaW5jbHVkZUZhbGxiYWNrQ29sb3JzLCBsZXZlbCwgc2l6ZSA7XG4gICAgYXJncyA9IGFyZ3MgfHwge307XG4gICAgaW5jbHVkZUZhbGxiYWNrQ29sb3JzID0gYXJncy5pbmNsdWRlRmFsbGJhY2tDb2xvcnMgO1xuICAgIGxldmVsID0gYXJncy5sZXZlbDtcbiAgICBzaXplID0gYXJncy5zaXplO1xuXG4gICAgZm9yICh2YXIgaT0gMDsgaSA8IGNvbG9yTGlzdC5sZW5ndGggOyBpKyspIHtcbiAgICAgICAgcmVhZGFiaWxpdHkgPSB0aW55Y29sb3IucmVhZGFiaWxpdHkoYmFzZUNvbG9yLCBjb2xvckxpc3RbaV0pO1xuICAgICAgICBpZiAocmVhZGFiaWxpdHkgPiBiZXN0U2NvcmUpIHtcbiAgICAgICAgICAgIGJlc3RTY29yZSA9IHJlYWRhYmlsaXR5O1xuICAgICAgICAgICAgYmVzdENvbG9yID0gdGlueWNvbG9yKGNvbG9yTGlzdFtpXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGlueWNvbG9yLmlzUmVhZGFibGUoYmFzZUNvbG9yLCBiZXN0Q29sb3IsIHtcImxldmVsXCI6bGV2ZWwsXCJzaXplXCI6c2l6ZX0pIHx8ICFpbmNsdWRlRmFsbGJhY2tDb2xvcnMpIHtcbiAgICAgICAgcmV0dXJuIGJlc3RDb2xvcjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGFyZ3MuaW5jbHVkZUZhbGxiYWNrQ29sb3JzPWZhbHNlO1xuICAgICAgICByZXR1cm4gdGlueWNvbG9yLm1vc3RSZWFkYWJsZShiYXNlQ29sb3IsW1wiI2ZmZlwiLCBcIiMwMDBcIl0sYXJncyk7XG4gICAgfVxufTtcblxuXG4vLyBCaWcgTGlzdCBvZiBDb2xvcnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gPGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtY29sb3IvI3N2Zy1jb2xvcj5cbnZhciBuYW1lcyA9IHRpbnljb2xvci5uYW1lcyA9IHtcbiAgICBhbGljZWJsdWU6IFwiZjBmOGZmXCIsXG4gICAgYW50aXF1ZXdoaXRlOiBcImZhZWJkN1wiLFxuICAgIGFxdWE6IFwiMGZmXCIsXG4gICAgYXF1YW1hcmluZTogXCI3ZmZmZDRcIixcbiAgICBhenVyZTogXCJmMGZmZmZcIixcbiAgICBiZWlnZTogXCJmNWY1ZGNcIixcbiAgICBiaXNxdWU6IFwiZmZlNGM0XCIsXG4gICAgYmxhY2s6IFwiMDAwXCIsXG4gICAgYmxhbmNoZWRhbG1vbmQ6IFwiZmZlYmNkXCIsXG4gICAgYmx1ZTogXCIwMGZcIixcbiAgICBibHVldmlvbGV0OiBcIjhhMmJlMlwiLFxuICAgIGJyb3duOiBcImE1MmEyYVwiLFxuICAgIGJ1cmx5d29vZDogXCJkZWI4ODdcIixcbiAgICBidXJudHNpZW5uYTogXCJlYTdlNWRcIixcbiAgICBjYWRldGJsdWU6IFwiNWY5ZWEwXCIsXG4gICAgY2hhcnRyZXVzZTogXCI3ZmZmMDBcIixcbiAgICBjaG9jb2xhdGU6IFwiZDI2OTFlXCIsXG4gICAgY29yYWw6IFwiZmY3ZjUwXCIsXG4gICAgY29ybmZsb3dlcmJsdWU6IFwiNjQ5NWVkXCIsXG4gICAgY29ybnNpbGs6IFwiZmZmOGRjXCIsXG4gICAgY3JpbXNvbjogXCJkYzE0M2NcIixcbiAgICBjeWFuOiBcIjBmZlwiLFxuICAgIGRhcmtibHVlOiBcIjAwMDA4YlwiLFxuICAgIGRhcmtjeWFuOiBcIjAwOGI4YlwiLFxuICAgIGRhcmtnb2xkZW5yb2Q6IFwiYjg4NjBiXCIsXG4gICAgZGFya2dyYXk6IFwiYTlhOWE5XCIsXG4gICAgZGFya2dyZWVuOiBcIjAwNjQwMFwiLFxuICAgIGRhcmtncmV5OiBcImE5YTlhOVwiLFxuICAgIGRhcmtraGFraTogXCJiZGI3NmJcIixcbiAgICBkYXJrbWFnZW50YTogXCI4YjAwOGJcIixcbiAgICBkYXJrb2xpdmVncmVlbjogXCI1NTZiMmZcIixcbiAgICBkYXJrb3JhbmdlOiBcImZmOGMwMFwiLFxuICAgIGRhcmtvcmNoaWQ6IFwiOTkzMmNjXCIsXG4gICAgZGFya3JlZDogXCI4YjAwMDBcIixcbiAgICBkYXJrc2FsbW9uOiBcImU5OTY3YVwiLFxuICAgIGRhcmtzZWFncmVlbjogXCI4ZmJjOGZcIixcbiAgICBkYXJrc2xhdGVibHVlOiBcIjQ4M2Q4YlwiLFxuICAgIGRhcmtzbGF0ZWdyYXk6IFwiMmY0ZjRmXCIsXG4gICAgZGFya3NsYXRlZ3JleTogXCIyZjRmNGZcIixcbiAgICBkYXJrdHVycXVvaXNlOiBcIjAwY2VkMVwiLFxuICAgIGRhcmt2aW9sZXQ6IFwiOTQwMGQzXCIsXG4gICAgZGVlcHBpbms6IFwiZmYxNDkzXCIsXG4gICAgZGVlcHNreWJsdWU6IFwiMDBiZmZmXCIsXG4gICAgZGltZ3JheTogXCI2OTY5NjlcIixcbiAgICBkaW1ncmV5OiBcIjY5Njk2OVwiLFxuICAgIGRvZGdlcmJsdWU6IFwiMWU5MGZmXCIsXG4gICAgZmlyZWJyaWNrOiBcImIyMjIyMlwiLFxuICAgIGZsb3JhbHdoaXRlOiBcImZmZmFmMFwiLFxuICAgIGZvcmVzdGdyZWVuOiBcIjIyOGIyMlwiLFxuICAgIGZ1Y2hzaWE6IFwiZjBmXCIsXG4gICAgZ2FpbnNib3JvOiBcImRjZGNkY1wiLFxuICAgIGdob3N0d2hpdGU6IFwiZjhmOGZmXCIsXG4gICAgZ29sZDogXCJmZmQ3MDBcIixcbiAgICBnb2xkZW5yb2Q6IFwiZGFhNTIwXCIsXG4gICAgZ3JheTogXCI4MDgwODBcIixcbiAgICBncmVlbjogXCIwMDgwMDBcIixcbiAgICBncmVlbnllbGxvdzogXCJhZGZmMmZcIixcbiAgICBncmV5OiBcIjgwODA4MFwiLFxuICAgIGhvbmV5ZGV3OiBcImYwZmZmMFwiLFxuICAgIGhvdHBpbms6IFwiZmY2OWI0XCIsXG4gICAgaW5kaWFucmVkOiBcImNkNWM1Y1wiLFxuICAgIGluZGlnbzogXCI0YjAwODJcIixcbiAgICBpdm9yeTogXCJmZmZmZjBcIixcbiAgICBraGFraTogXCJmMGU2OGNcIixcbiAgICBsYXZlbmRlcjogXCJlNmU2ZmFcIixcbiAgICBsYXZlbmRlcmJsdXNoOiBcImZmZjBmNVwiLFxuICAgIGxhd25ncmVlbjogXCI3Y2ZjMDBcIixcbiAgICBsZW1vbmNoaWZmb246IFwiZmZmYWNkXCIsXG4gICAgbGlnaHRibHVlOiBcImFkZDhlNlwiLFxuICAgIGxpZ2h0Y29yYWw6IFwiZjA4MDgwXCIsXG4gICAgbGlnaHRjeWFuOiBcImUwZmZmZlwiLFxuICAgIGxpZ2h0Z29sZGVucm9keWVsbG93OiBcImZhZmFkMlwiLFxuICAgIGxpZ2h0Z3JheTogXCJkM2QzZDNcIixcbiAgICBsaWdodGdyZWVuOiBcIjkwZWU5MFwiLFxuICAgIGxpZ2h0Z3JleTogXCJkM2QzZDNcIixcbiAgICBsaWdodHBpbms6IFwiZmZiNmMxXCIsXG4gICAgbGlnaHRzYWxtb246IFwiZmZhMDdhXCIsXG4gICAgbGlnaHRzZWFncmVlbjogXCIyMGIyYWFcIixcbiAgICBsaWdodHNreWJsdWU6IFwiODdjZWZhXCIsXG4gICAgbGlnaHRzbGF0ZWdyYXk6IFwiNzg5XCIsXG4gICAgbGlnaHRzbGF0ZWdyZXk6IFwiNzg5XCIsXG4gICAgbGlnaHRzdGVlbGJsdWU6IFwiYjBjNGRlXCIsXG4gICAgbGlnaHR5ZWxsb3c6IFwiZmZmZmUwXCIsXG4gICAgbGltZTogXCIwZjBcIixcbiAgICBsaW1lZ3JlZW46IFwiMzJjZDMyXCIsXG4gICAgbGluZW46IFwiZmFmMGU2XCIsXG4gICAgbWFnZW50YTogXCJmMGZcIixcbiAgICBtYXJvb246IFwiODAwMDAwXCIsXG4gICAgbWVkaXVtYXF1YW1hcmluZTogXCI2NmNkYWFcIixcbiAgICBtZWRpdW1ibHVlOiBcIjAwMDBjZFwiLFxuICAgIG1lZGl1bW9yY2hpZDogXCJiYTU1ZDNcIixcbiAgICBtZWRpdW1wdXJwbGU6IFwiOTM3MGRiXCIsXG4gICAgbWVkaXVtc2VhZ3JlZW46IFwiM2NiMzcxXCIsXG4gICAgbWVkaXVtc2xhdGVibHVlOiBcIjdiNjhlZVwiLFxuICAgIG1lZGl1bXNwcmluZ2dyZWVuOiBcIjAwZmE5YVwiLFxuICAgIG1lZGl1bXR1cnF1b2lzZTogXCI0OGQxY2NcIixcbiAgICBtZWRpdW12aW9sZXRyZWQ6IFwiYzcxNTg1XCIsXG4gICAgbWlkbmlnaHRibHVlOiBcIjE5MTk3MFwiLFxuICAgIG1pbnRjcmVhbTogXCJmNWZmZmFcIixcbiAgICBtaXN0eXJvc2U6IFwiZmZlNGUxXCIsXG4gICAgbW9jY2FzaW46IFwiZmZlNGI1XCIsXG4gICAgbmF2YWpvd2hpdGU6IFwiZmZkZWFkXCIsXG4gICAgbmF2eTogXCIwMDAwODBcIixcbiAgICBvbGRsYWNlOiBcImZkZjVlNlwiLFxuICAgIG9saXZlOiBcIjgwODAwMFwiLFxuICAgIG9saXZlZHJhYjogXCI2YjhlMjNcIixcbiAgICBvcmFuZ2U6IFwiZmZhNTAwXCIsXG4gICAgb3JhbmdlcmVkOiBcImZmNDUwMFwiLFxuICAgIG9yY2hpZDogXCJkYTcwZDZcIixcbiAgICBwYWxlZ29sZGVucm9kOiBcImVlZThhYVwiLFxuICAgIHBhbGVncmVlbjogXCI5OGZiOThcIixcbiAgICBwYWxldHVycXVvaXNlOiBcImFmZWVlZVwiLFxuICAgIHBhbGV2aW9sZXRyZWQ6IFwiZGI3MDkzXCIsXG4gICAgcGFwYXlhd2hpcDogXCJmZmVmZDVcIixcbiAgICBwZWFjaHB1ZmY6IFwiZmZkYWI5XCIsXG4gICAgcGVydTogXCJjZDg1M2ZcIixcbiAgICBwaW5rOiBcImZmYzBjYlwiLFxuICAgIHBsdW06IFwiZGRhMGRkXCIsXG4gICAgcG93ZGVyYmx1ZTogXCJiMGUwZTZcIixcbiAgICBwdXJwbGU6IFwiODAwMDgwXCIsXG4gICAgcmViZWNjYXB1cnBsZTogXCI2NjMzOTlcIixcbiAgICByZWQ6IFwiZjAwXCIsXG4gICAgcm9zeWJyb3duOiBcImJjOGY4ZlwiLFxuICAgIHJveWFsYmx1ZTogXCI0MTY5ZTFcIixcbiAgICBzYWRkbGVicm93bjogXCI4YjQ1MTNcIixcbiAgICBzYWxtb246IFwiZmE4MDcyXCIsXG4gICAgc2FuZHlicm93bjogXCJmNGE0NjBcIixcbiAgICBzZWFncmVlbjogXCIyZThiNTdcIixcbiAgICBzZWFzaGVsbDogXCJmZmY1ZWVcIixcbiAgICBzaWVubmE6IFwiYTA1MjJkXCIsXG4gICAgc2lsdmVyOiBcImMwYzBjMFwiLFxuICAgIHNreWJsdWU6IFwiODdjZWViXCIsXG4gICAgc2xhdGVibHVlOiBcIjZhNWFjZFwiLFxuICAgIHNsYXRlZ3JheTogXCI3MDgwOTBcIixcbiAgICBzbGF0ZWdyZXk6IFwiNzA4MDkwXCIsXG4gICAgc25vdzogXCJmZmZhZmFcIixcbiAgICBzcHJpbmdncmVlbjogXCIwMGZmN2ZcIixcbiAgICBzdGVlbGJsdWU6IFwiNDY4MmI0XCIsXG4gICAgdGFuOiBcImQyYjQ4Y1wiLFxuICAgIHRlYWw6IFwiMDA4MDgwXCIsXG4gICAgdGhpc3RsZTogXCJkOGJmZDhcIixcbiAgICB0b21hdG86IFwiZmY2MzQ3XCIsXG4gICAgdHVycXVvaXNlOiBcIjQwZTBkMFwiLFxuICAgIHZpb2xldDogXCJlZTgyZWVcIixcbiAgICB3aGVhdDogXCJmNWRlYjNcIixcbiAgICB3aGl0ZTogXCJmZmZcIixcbiAgICB3aGl0ZXNtb2tlOiBcImY1ZjVmNVwiLFxuICAgIHllbGxvdzogXCJmZjBcIixcbiAgICB5ZWxsb3dncmVlbjogXCI5YWNkMzJcIlxufTtcblxuLy8gTWFrZSBpdCBlYXN5IHRvIGFjY2VzcyBjb2xvcnMgdmlhIGBoZXhOYW1lc1toZXhdYFxudmFyIGhleE5hbWVzID0gdGlueWNvbG9yLmhleE5hbWVzID0gZmxpcChuYW1lcyk7XG5cblxuLy8gVXRpbGl0aWVzXG4vLyAtLS0tLS0tLS1cblxuLy8gYHsgJ25hbWUxJzogJ3ZhbDEnIH1gIGJlY29tZXMgYHsgJ3ZhbDEnOiAnbmFtZTEnIH1gXG5mdW5jdGlvbiBmbGlwKG8pIHtcbiAgICB2YXIgZmxpcHBlZCA9IHsgfTtcbiAgICBmb3IgKHZhciBpIGluIG8pIHtcbiAgICAgICAgaWYgKG8uaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICAgIGZsaXBwZWRbb1tpXV0gPSBpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmbGlwcGVkO1xufVxuXG4vLyBSZXR1cm4gYSB2YWxpZCBhbHBoYSB2YWx1ZSBbMCwxXSB3aXRoIGFsbCBpbnZhbGlkIHZhbHVlcyBiZWluZyBzZXQgdG8gMVxuZnVuY3Rpb24gYm91bmRBbHBoYShhKSB7XG4gICAgYSA9IHBhcnNlRmxvYXQoYSk7XG5cbiAgICBpZiAoaXNOYU4oYSkgfHwgYSA8IDAgfHwgYSA+IDEpIHtcbiAgICAgICAgYSA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG59XG5cbi8vIFRha2UgaW5wdXQgZnJvbSBbMCwgbl0gYW5kIHJldHVybiBpdCBhcyBbMCwgMV1cbmZ1bmN0aW9uIGJvdW5kMDEobiwgbWF4KSB7XG4gICAgaWYgKGlzT25lUG9pbnRaZXJvKG4pKSB7IG4gPSBcIjEwMCVcIjsgfVxuXG4gICAgdmFyIHByb2Nlc3NQZXJjZW50ID0gaXNQZXJjZW50YWdlKG4pO1xuICAgIG4gPSBtYXRoTWluKG1heCwgbWF0aE1heCgwLCBwYXJzZUZsb2F0KG4pKSk7XG5cbiAgICAvLyBBdXRvbWF0aWNhbGx5IGNvbnZlcnQgcGVyY2VudGFnZSBpbnRvIG51bWJlclxuICAgIGlmIChwcm9jZXNzUGVyY2VudCkge1xuICAgICAgICBuID0gcGFyc2VJbnQobiAqIG1heCwgMTApIC8gMTAwO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBmbG9hdGluZyBwb2ludCByb3VuZGluZyBlcnJvcnNcbiAgICBpZiAoKG1hdGguYWJzKG4gLSBtYXgpIDwgMC4wMDAwMDEpKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH1cblxuICAgIC8vIENvbnZlcnQgaW50byBbMCwgMV0gcmFuZ2UgaWYgaXQgaXNuJ3QgYWxyZWFkeVxuICAgIHJldHVybiAobiAlIG1heCkgLyBwYXJzZUZsb2F0KG1heCk7XG59XG5cbi8vIEZvcmNlIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgMVxuZnVuY3Rpb24gY2xhbXAwMSh2YWwpIHtcbiAgICByZXR1cm4gbWF0aE1pbigxLCBtYXRoTWF4KDAsIHZhbCkpO1xufVxuXG4vLyBQYXJzZSBhIGJhc2UtMTYgaGV4IHZhbHVlIGludG8gYSBiYXNlLTEwIGludGVnZXJcbmZ1bmN0aW9uIHBhcnNlSW50RnJvbUhleCh2YWwpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodmFsLCAxNik7XG59XG5cbi8vIE5lZWQgdG8gaGFuZGxlIDEuMCBhcyAxMDAlLCBzaW5jZSBvbmNlIGl0IGlzIGEgbnVtYmVyLCB0aGVyZSBpcyBubyBkaWZmZXJlbmNlIGJldHdlZW4gaXQgYW5kIDFcbi8vIDxodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzc0MjIwNzIvamF2YXNjcmlwdC1ob3ctdG8tZGV0ZWN0LW51bWJlci1hcy1hLWRlY2ltYWwtaW5jbHVkaW5nLTEtMD5cbmZ1bmN0aW9uIGlzT25lUG9pbnRaZXJvKG4pIHtcbiAgICByZXR1cm4gdHlwZW9mIG4gPT0gXCJzdHJpbmdcIiAmJiBuLmluZGV4T2YoJy4nKSAhPSAtMSAmJiBwYXJzZUZsb2F0KG4pID09PSAxO1xufVxuXG4vLyBDaGVjayB0byBzZWUgaWYgc3RyaW5nIHBhc3NlZCBpbiBpcyBhIHBlcmNlbnRhZ2VcbmZ1bmN0aW9uIGlzUGVyY2VudGFnZShuKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBuID09PSBcInN0cmluZ1wiICYmIG4uaW5kZXhPZignJScpICE9IC0xO1xufVxuXG4vLyBGb3JjZSBhIGhleCB2YWx1ZSB0byBoYXZlIDIgY2hhcmFjdGVyc1xuZnVuY3Rpb24gcGFkMihjKSB7XG4gICAgcmV0dXJuIGMubGVuZ3RoID09IDEgPyAnMCcgKyBjIDogJycgKyBjO1xufVxuXG4vLyBSZXBsYWNlIGEgZGVjaW1hbCB3aXRoIGl0J3MgcGVyY2VudGFnZSB2YWx1ZVxuZnVuY3Rpb24gY29udmVydFRvUGVyY2VudGFnZShuKSB7XG4gICAgaWYgKG4gPD0gMSkge1xuICAgICAgICBuID0gKG4gKiAxMDApICsgXCIlXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIG47XG59XG5cbi8vIENvbnZlcnRzIGEgZGVjaW1hbCB0byBhIGhleCB2YWx1ZVxuZnVuY3Rpb24gY29udmVydERlY2ltYWxUb0hleChkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQocGFyc2VGbG9hdChkKSAqIDI1NSkudG9TdHJpbmcoMTYpO1xufVxuLy8gQ29udmVydHMgYSBoZXggdmFsdWUgdG8gYSBkZWNpbWFsXG5mdW5jdGlvbiBjb252ZXJ0SGV4VG9EZWNpbWFsKGgpIHtcbiAgICByZXR1cm4gKHBhcnNlSW50RnJvbUhleChoKSAvIDI1NSk7XG59XG5cbnZhciBtYXRjaGVycyA9IChmdW5jdGlvbigpIHtcblxuICAgIC8vIDxodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXZhbHVlcy8jaW50ZWdlcnM+XG4gICAgdmFyIENTU19JTlRFR0VSID0gXCJbLVxcXFwrXT9cXFxcZCslP1wiO1xuXG4gICAgLy8gPGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtdmFsdWVzLyNudW1iZXItdmFsdWU+XG4gICAgdmFyIENTU19OVU1CRVIgPSBcIlstXFxcXCtdP1xcXFxkKlxcXFwuXFxcXGQrJT9cIjtcblxuICAgIC8vIEFsbG93IHBvc2l0aXZlL25lZ2F0aXZlIGludGVnZXIvbnVtYmVyLiAgRG9uJ3QgY2FwdHVyZSB0aGUgZWl0aGVyL29yLCBqdXN0IHRoZSBlbnRpcmUgb3V0Y29tZS5cbiAgICB2YXIgQ1NTX1VOSVQgPSBcIig/OlwiICsgQ1NTX05VTUJFUiArIFwiKXwoPzpcIiArIENTU19JTlRFR0VSICsgXCIpXCI7XG5cbiAgICAvLyBBY3R1YWwgbWF0Y2hpbmcuXG4gICAgLy8gUGFyZW50aGVzZXMgYW5kIGNvbW1hcyBhcmUgb3B0aW9uYWwsIGJ1dCBub3QgcmVxdWlyZWQuXG4gICAgLy8gV2hpdGVzcGFjZSBjYW4gdGFrZSB0aGUgcGxhY2Ugb2YgY29tbWFzIG9yIG9wZW5pbmcgcGFyZW5cbiAgICB2YXIgUEVSTUlTU0lWRV9NQVRDSDMgPSBcIltcXFxcc3xcXFxcKF0rKFwiICsgQ1NTX1VOSVQgKyBcIilbLHxcXFxcc10rKFwiICsgQ1NTX1VOSVQgKyBcIilbLHxcXFxcc10rKFwiICsgQ1NTX1VOSVQgKyBcIilcXFxccypcXFxcKT9cIjtcbiAgICB2YXIgUEVSTUlTU0lWRV9NQVRDSDQgPSBcIltcXFxcc3xcXFxcKF0rKFwiICsgQ1NTX1VOSVQgKyBcIilbLHxcXFxcc10rKFwiICsgQ1NTX1VOSVQgKyBcIilbLHxcXFxcc10rKFwiICsgQ1NTX1VOSVQgKyBcIilbLHxcXFxcc10rKFwiICsgQ1NTX1VOSVQgKyBcIilcXFxccypcXFxcKT9cIjtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHJnYjogbmV3IFJlZ0V4cChcInJnYlwiICsgUEVSTUlTU0lWRV9NQVRDSDMpLFxuICAgICAgICByZ2JhOiBuZXcgUmVnRXhwKFwicmdiYVwiICsgUEVSTUlTU0lWRV9NQVRDSDQpLFxuICAgICAgICBoc2w6IG5ldyBSZWdFeHAoXCJoc2xcIiArIFBFUk1JU1NJVkVfTUFUQ0gzKSxcbiAgICAgICAgaHNsYTogbmV3IFJlZ0V4cChcImhzbGFcIiArIFBFUk1JU1NJVkVfTUFUQ0g0KSxcbiAgICAgICAgaHN2OiBuZXcgUmVnRXhwKFwiaHN2XCIgKyBQRVJNSVNTSVZFX01BVENIMyksXG4gICAgICAgIGhzdmE6IG5ldyBSZWdFeHAoXCJoc3ZhXCIgKyBQRVJNSVNTSVZFX01BVENINCksXG4gICAgICAgIGhleDM6IC9eKFswLTlhLWZBLUZdezF9KShbMC05YS1mQS1GXXsxfSkoWzAtOWEtZkEtRl17MX0pJC8sXG4gICAgICAgIGhleDY6IC9eKFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkoWzAtOWEtZkEtRl17Mn0pJC8sXG4gICAgICAgIGhleDg6IC9eKFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkoWzAtOWEtZkEtRl17Mn0pKFswLTlhLWZBLUZdezJ9KSQvXG4gICAgfTtcbn0pKCk7XG5cbi8vIGBzdHJpbmdJbnB1dFRvT2JqZWN0YFxuLy8gUGVybWlzc2l2ZSBzdHJpbmcgcGFyc2luZy4gIFRha2UgaW4gYSBudW1iZXIgb2YgZm9ybWF0cywgYW5kIG91dHB1dCBhbiBvYmplY3Rcbi8vIGJhc2VkIG9uIGRldGVjdGVkIGZvcm1hdC4gIFJldHVybnMgYHsgciwgZywgYiB9YCBvciBgeyBoLCBzLCBsIH1gIG9yIGB7IGgsIHMsIHZ9YFxuZnVuY3Rpb24gc3RyaW5nSW5wdXRUb09iamVjdChjb2xvcikge1xuXG4gICAgY29sb3IgPSBjb2xvci5yZXBsYWNlKHRyaW1MZWZ0LCcnKS5yZXBsYWNlKHRyaW1SaWdodCwgJycpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFyIG5hbWVkID0gZmFsc2U7XG4gICAgaWYgKG5hbWVzW2NvbG9yXSkge1xuICAgICAgICBjb2xvciA9IG5hbWVzW2NvbG9yXTtcbiAgICAgICAgbmFtZWQgPSB0cnVlO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb2xvciA9PSAndHJhbnNwYXJlbnQnKSB7XG4gICAgICAgIHJldHVybiB7IHI6IDAsIGc6IDAsIGI6IDAsIGE6IDAsIGZvcm1hdDogXCJuYW1lXCIgfTtcbiAgICB9XG5cbiAgICAvLyBUcnkgdG8gbWF0Y2ggc3RyaW5nIGlucHV0IHVzaW5nIHJlZ3VsYXIgZXhwcmVzc2lvbnMuXG4gICAgLy8gS2VlcCBtb3N0IG9mIHRoZSBudW1iZXIgYm91bmRpbmcgb3V0IG9mIHRoaXMgZnVuY3Rpb24gLSBkb24ndCB3b3JyeSBhYm91dCBbMCwxXSBvciBbMCwxMDBdIG9yIFswLDM2MF1cbiAgICAvLyBKdXN0IHJldHVybiBhbiBvYmplY3QgYW5kIGxldCB0aGUgY29udmVyc2lvbiBmdW5jdGlvbnMgaGFuZGxlIHRoYXQuXG4gICAgLy8gVGhpcyB3YXkgdGhlIHJlc3VsdCB3aWxsIGJlIHRoZSBzYW1lIHdoZXRoZXIgdGhlIHRpbnljb2xvciBpcyBpbml0aWFsaXplZCB3aXRoIHN0cmluZyBvciBvYmplY3QuXG4gICAgdmFyIG1hdGNoO1xuICAgIGlmICgobWF0Y2ggPSBtYXRjaGVycy5yZ2IuZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7IHI6IG1hdGNoWzFdLCBnOiBtYXRjaFsyXSwgYjogbWF0Y2hbM10gfTtcbiAgICB9XG4gICAgaWYgKChtYXRjaCA9IG1hdGNoZXJzLnJnYmEuZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7IHI6IG1hdGNoWzFdLCBnOiBtYXRjaFsyXSwgYjogbWF0Y2hbM10sIGE6IG1hdGNoWzRdIH07XG4gICAgfVxuICAgIGlmICgobWF0Y2ggPSBtYXRjaGVycy5oc2wuZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7IGg6IG1hdGNoWzFdLCBzOiBtYXRjaFsyXSwgbDogbWF0Y2hbM10gfTtcbiAgICB9XG4gICAgaWYgKChtYXRjaCA9IG1hdGNoZXJzLmhzbGEuZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7IGg6IG1hdGNoWzFdLCBzOiBtYXRjaFsyXSwgbDogbWF0Y2hbM10sIGE6IG1hdGNoWzRdIH07XG4gICAgfVxuICAgIGlmICgobWF0Y2ggPSBtYXRjaGVycy5oc3YuZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7IGg6IG1hdGNoWzFdLCBzOiBtYXRjaFsyXSwgdjogbWF0Y2hbM10gfTtcbiAgICB9XG4gICAgaWYgKChtYXRjaCA9IG1hdGNoZXJzLmhzdmEuZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7IGg6IG1hdGNoWzFdLCBzOiBtYXRjaFsyXSwgdjogbWF0Y2hbM10sIGE6IG1hdGNoWzRdIH07XG4gICAgfVxuICAgIGlmICgobWF0Y2ggPSBtYXRjaGVycy5oZXg4LmV4ZWMoY29sb3IpKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYTogY29udmVydEhleFRvRGVjaW1hbChtYXRjaFsxXSksXG4gICAgICAgICAgICByOiBwYXJzZUludEZyb21IZXgobWF0Y2hbMl0pLFxuICAgICAgICAgICAgZzogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzNdKSxcbiAgICAgICAgICAgIGI6IHBhcnNlSW50RnJvbUhleChtYXRjaFs0XSksXG4gICAgICAgICAgICBmb3JtYXQ6IG5hbWVkID8gXCJuYW1lXCIgOiBcImhleDhcIlxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoKG1hdGNoID0gbWF0Y2hlcnMuaGV4Ni5leGVjKGNvbG9yKSkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHI6IHBhcnNlSW50RnJvbUhleChtYXRjaFsxXSksXG4gICAgICAgICAgICBnOiBwYXJzZUludEZyb21IZXgobWF0Y2hbMl0pLFxuICAgICAgICAgICAgYjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzNdKSxcbiAgICAgICAgICAgIGZvcm1hdDogbmFtZWQgPyBcIm5hbWVcIiA6IFwiaGV4XCJcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKChtYXRjaCA9IG1hdGNoZXJzLmhleDMuZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByOiBwYXJzZUludEZyb21IZXgobWF0Y2hbMV0gKyAnJyArIG1hdGNoWzFdKSxcbiAgICAgICAgICAgIGc6IHBhcnNlSW50RnJvbUhleChtYXRjaFsyXSArICcnICsgbWF0Y2hbMl0pLFxuICAgICAgICAgICAgYjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzNdICsgJycgKyBtYXRjaFszXSksXG4gICAgICAgICAgICBmb3JtYXQ6IG5hbWVkID8gXCJuYW1lXCIgOiBcImhleFwiXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVdDQUcyUGFybXMocGFybXMpIHtcbiAgICAvLyByZXR1cm4gdmFsaWQgV0NBRzIgcGFybXMgZm9yIGlzUmVhZGFibGUuXG4gICAgLy8gSWYgaW5wdXQgcGFybXMgYXJlIGludmFsaWQsIHJldHVybiB7XCJsZXZlbFwiOlwiQUFcIiwgXCJzaXplXCI6XCJzbWFsbFwifVxuICAgIHZhciBsZXZlbCwgc2l6ZTtcbiAgICBwYXJtcyA9IHBhcm1zIHx8IHtcImxldmVsXCI6XCJBQVwiLCBcInNpemVcIjpcInNtYWxsXCJ9O1xuICAgIGxldmVsID0gKHBhcm1zLmxldmVsIHx8IFwiQUFcIikudG9VcHBlckNhc2UoKTtcbiAgICBzaXplID0gKHBhcm1zLnNpemUgfHwgXCJzbWFsbFwiKS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChsZXZlbCAhPT0gXCJBQVwiICYmIGxldmVsICE9PSBcIkFBQVwiKSB7XG4gICAgICAgIGxldmVsID0gXCJBQVwiO1xuICAgIH1cbiAgICBpZiAoc2l6ZSAhPT0gXCJzbWFsbFwiICYmIHNpemUgIT09IFwibGFyZ2VcIikge1xuICAgICAgICBzaXplID0gXCJzbWFsbFwiO1xuICAgIH1cbiAgICByZXR1cm4ge1wibGV2ZWxcIjpsZXZlbCwgXCJzaXplXCI6c2l6ZX07XG59XG5cbi8vIE5vZGU6IEV4cG9ydCBmdW5jdGlvblxuaWYgKHR5cGVvZiBtb2R1bGUgIT09IFwidW5kZWZpbmVkXCIgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHRpbnljb2xvcjtcbn1cbi8vIEFNRC9yZXF1aXJlanM6IERlZmluZSB0aGUgbW9kdWxlXG5lbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoZnVuY3Rpb24gKCkge3JldHVybiB0aW55Y29sb3I7fSk7XG59XG4vLyBCcm93c2VyOiBFeHBvc2UgdG8gd2luZG93XG5lbHNlIHtcbiAgICB3aW5kb3cudGlueWNvbG9yID0gdGlueWNvbG9yO1xufVxuXG59KSgpO1xuIiwiLypcbiAqIFRvYXN0clxuICogQ29weXJpZ2h0IDIwMTItMjAxNVxuICogQXV0aG9yczogSm9obiBQYXBhLCBIYW5zIEZqw6RsbGVtYXJrLCBhbmQgVGltIEZlcnJlbGwuXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVXNlLCByZXByb2R1Y3Rpb24sIGRpc3RyaWJ1dGlvbiwgYW5kIG1vZGlmaWNhdGlvbiBvZiB0aGlzIGNvZGUgaXMgc3ViamVjdCB0byB0aGUgdGVybXMgYW5kXG4gKiBjb25kaXRpb25zIG9mIHRoZSBNSVQgbGljZW5zZSwgYXZhaWxhYmxlIGF0IGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gKlxuICogQVJJQSBTdXBwb3J0OiBHcmV0YSBLcmFmc2lnXG4gKlxuICogUHJvamVjdDogaHR0cHM6Ly9naXRodWIuY29tL0NvZGVTZXZlbi90b2FzdHJcbiAqL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuOyAoZnVuY3Rpb24gKGRlZmluZSkge1xuICAgIGRlZmluZShbJ2pxdWVyeSddLCBmdW5jdGlvbiAoJCkge1xuICAgICAgICByZXR1cm4gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciAkY29udGFpbmVyO1xuICAgICAgICAgICAgdmFyIGxpc3RlbmVyO1xuICAgICAgICAgICAgdmFyIHRvYXN0SWQgPSAwO1xuICAgICAgICAgICAgdmFyIHRvYXN0VHlwZSA9IHtcbiAgICAgICAgICAgICAgICBlcnJvcjogJ2Vycm9yJyxcbiAgICAgICAgICAgICAgICBpbmZvOiAnaW5mbycsXG4gICAgICAgICAgICAgICAgc3VjY2VzczogJ3N1Y2Nlc3MnLFxuICAgICAgICAgICAgICAgIHdhcm5pbmc6ICd3YXJuaW5nJ1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIHRvYXN0ciA9IHtcbiAgICAgICAgICAgICAgICBjbGVhcjogY2xlYXIsXG4gICAgICAgICAgICAgICAgcmVtb3ZlOiByZW1vdmUsXG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgICAgIGdldENvbnRhaW5lcjogZ2V0Q29udGFpbmVyLFxuICAgICAgICAgICAgICAgIGluZm86IGluZm8sXG4gICAgICAgICAgICAgICAgb3B0aW9uczoge30sXG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgICAgICAgICAgICAgc3VjY2Vzczogc3VjY2VzcyxcbiAgICAgICAgICAgICAgICB2ZXJzaW9uOiAnMi4xLjInLFxuICAgICAgICAgICAgICAgIHdhcm5pbmc6IHdhcm5pbmdcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciBwcmV2aW91c1RvYXN0O1xuXG4gICAgICAgICAgICByZXR1cm4gdG9hc3RyO1xuXG4gICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGVycm9yKG1lc3NhZ2UsIHRpdGxlLCBvcHRpb25zT3ZlcnJpZGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm90aWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogdG9hc3RUeXBlLmVycm9yLFxuICAgICAgICAgICAgICAgICAgICBpY29uQ2xhc3M6IGdldE9wdGlvbnMoKS5pY29uQ2xhc3Nlcy5lcnJvcixcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uc092ZXJyaWRlOiBvcHRpb25zT3ZlcnJpZGUsXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRDb250YWluZXIob3B0aW9ucywgY3JlYXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zKSB7IG9wdGlvbnMgPSBnZXRPcHRpb25zKCk7IH1cbiAgICAgICAgICAgICAgICAkY29udGFpbmVyID0gJCgnIycgKyBvcHRpb25zLmNvbnRhaW5lcklkKTtcbiAgICAgICAgICAgICAgICBpZiAoJGNvbnRhaW5lci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRjb250YWluZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjcmVhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgJGNvbnRhaW5lciA9IGNyZWF0ZUNvbnRhaW5lcihvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICRjb250YWluZXI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGluZm8obWVzc2FnZSwgdGl0bGUsIG9wdGlvbnNPdmVycmlkZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBub3RpZnkoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiB0b2FzdFR5cGUuaW5mbyxcbiAgICAgICAgICAgICAgICAgICAgaWNvbkNsYXNzOiBnZXRPcHRpb25zKCkuaWNvbkNsYXNzZXMuaW5mbyxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uc092ZXJyaWRlOiBvcHRpb25zT3ZlcnJpZGUsXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lciA9IGNhbGxiYWNrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBzdWNjZXNzKG1lc3NhZ2UsIHRpdGxlLCBvcHRpb25zT3ZlcnJpZGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm90aWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogdG9hc3RUeXBlLnN1Y2Nlc3MsXG4gICAgICAgICAgICAgICAgICAgIGljb25DbGFzczogZ2V0T3B0aW9ucygpLmljb25DbGFzc2VzLnN1Y2Nlc3MsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnNPdmVycmlkZTogb3B0aW9uc092ZXJyaWRlLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogdGl0bGVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlLCB0aXRsZSwgb3B0aW9uc092ZXJyaWRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vdGlmeSh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHRvYXN0VHlwZS53YXJuaW5nLFxuICAgICAgICAgICAgICAgICAgICBpY29uQ2xhc3M6IGdldE9wdGlvbnMoKS5pY29uQ2xhc3Nlcy53YXJuaW5nLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zT3ZlcnJpZGU6IG9wdGlvbnNPdmVycmlkZSxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNsZWFyKCR0b2FzdEVsZW1lbnQsIGNsZWFyT3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHZhciBvcHRpb25zID0gZ2V0T3B0aW9ucygpO1xuICAgICAgICAgICAgICAgIGlmICghJGNvbnRhaW5lcikgeyBnZXRDb250YWluZXIob3B0aW9ucyk7IH1cbiAgICAgICAgICAgICAgICBpZiAoIWNsZWFyVG9hc3QoJHRvYXN0RWxlbWVudCwgb3B0aW9ucywgY2xlYXJPcHRpb25zKSkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhckNvbnRhaW5lcihvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlbW92ZSgkdG9hc3RFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBnZXRPcHRpb25zKCk7XG4gICAgICAgICAgICAgICAgaWYgKCEkY29udGFpbmVyKSB7IGdldENvbnRhaW5lcihvcHRpb25zKTsgfVxuICAgICAgICAgICAgICAgIGlmICgkdG9hc3RFbGVtZW50ICYmICQoJzpmb2N1cycsICR0b2FzdEVsZW1lbnQpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVUb2FzdCgkdG9hc3RFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoJGNvbnRhaW5lci5jaGlsZHJlbigpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAkY29udGFpbmVyLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaW50ZXJuYWwgZnVuY3Rpb25zXG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNsZWFyQ29udGFpbmVyIChvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRvYXN0c1RvQ2xlYXIgPSAkY29udGFpbmVyLmNoaWxkcmVuKCk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHRvYXN0c1RvQ2xlYXIubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUb2FzdCgkKHRvYXN0c1RvQ2xlYXJbaV0pLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNsZWFyVG9hc3QgKCR0b2FzdEVsZW1lbnQsIG9wdGlvbnMsIGNsZWFyT3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHZhciBmb3JjZSA9IGNsZWFyT3B0aW9ucyAmJiBjbGVhck9wdGlvbnMuZm9yY2UgPyBjbGVhck9wdGlvbnMuZm9yY2UgOiBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoJHRvYXN0RWxlbWVudCAmJiAoZm9yY2UgfHwgJCgnOmZvY3VzJywgJHRvYXN0RWxlbWVudCkubGVuZ3RoID09PSAwKSkge1xuICAgICAgICAgICAgICAgICAgICAkdG9hc3RFbGVtZW50W29wdGlvbnMuaGlkZU1ldGhvZF0oe1xuICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IG9wdGlvbnMuaGlkZUR1cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgZWFzaW5nOiBvcHRpb25zLmhpZGVFYXNpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkgeyByZW1vdmVUb2FzdCgkdG9hc3RFbGVtZW50KTsgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlQ29udGFpbmVyKG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAkY29udGFpbmVyID0gJCgnPGRpdi8+JylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2lkJywgb3B0aW9ucy5jb250YWluZXJJZClcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKG9wdGlvbnMucG9zaXRpb25DbGFzcylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtbGl2ZScsICdwb2xpdGUnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cigncm9sZScsICdhbGVydCcpO1xuXG4gICAgICAgICAgICAgICAgJGNvbnRhaW5lci5hcHBlbmRUbygkKG9wdGlvbnMudGFyZ2V0KSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICRjb250YWluZXI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldERlZmF1bHRzKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHRhcFRvRGlzbWlzczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RDbGFzczogJ3RvYXN0JyxcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVySWQ6ICd0b2FzdC1jb250YWluZXInLFxuICAgICAgICAgICAgICAgICAgICBkZWJ1ZzogZmFsc2UsXG5cbiAgICAgICAgICAgICAgICAgICAgc2hvd01ldGhvZDogJ2ZhZGVJbicsIC8vZmFkZUluLCBzbGlkZURvd24sIGFuZCBzaG93IGFyZSBidWlsdCBpbnRvIGpRdWVyeVxuICAgICAgICAgICAgICAgICAgICBzaG93RHVyYXRpb246IDMwMCxcbiAgICAgICAgICAgICAgICAgICAgc2hvd0Vhc2luZzogJ3N3aW5nJywgLy9zd2luZyBhbmQgbGluZWFyIGFyZSBidWlsdCBpbnRvIGpRdWVyeVxuICAgICAgICAgICAgICAgICAgICBvblNob3duOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIGhpZGVNZXRob2Q6ICdmYWRlT3V0JyxcbiAgICAgICAgICAgICAgICAgICAgaGlkZUR1cmF0aW9uOiAxMDAwLFxuICAgICAgICAgICAgICAgICAgICBoaWRlRWFzaW5nOiAnc3dpbmcnLFxuICAgICAgICAgICAgICAgICAgICBvbkhpZGRlbjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBjbG9zZU1ldGhvZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGNsb3NlRHVyYXRpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBjbG9zZUVhc2luZzogZmFsc2UsXG5cbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kZWRUaW1lT3V0OiAxMDAwLFxuICAgICAgICAgICAgICAgICAgICBpY29uQ2xhc3Nlczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6ICd0b2FzdC1lcnJvcicsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmZvOiAndG9hc3QtaW5mbycsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiAndG9hc3Qtc3VjY2VzcycsXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nOiAndG9hc3Qtd2FybmluZydcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgaWNvbkNsYXNzOiAndG9hc3QtaW5mbycsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uQ2xhc3M6ICd0b2FzdC10b3AtcmlnaHQnLFxuICAgICAgICAgICAgICAgICAgICB0aW1lT3V0OiA1MDAwLCAvLyBTZXQgdGltZU91dCBhbmQgZXh0ZW5kZWRUaW1lT3V0IHRvIDAgdG8gbWFrZSBpdCBzdGlja3lcbiAgICAgICAgICAgICAgICAgICAgdGl0bGVDbGFzczogJ3RvYXN0LXRpdGxlJyxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUNsYXNzOiAndG9hc3QtbWVzc2FnZScsXG4gICAgICAgICAgICAgICAgICAgIGVzY2FwZUh0bWw6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICdib2R5JyxcbiAgICAgICAgICAgICAgICAgICAgY2xvc2VIdG1sOiAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCI+JnRpbWVzOzwvYnV0dG9uPicsXG4gICAgICAgICAgICAgICAgICAgIG5ld2VzdE9uVG9wOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBwcmV2ZW50RHVwbGljYXRlczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHByb2dyZXNzQmFyOiBmYWxzZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHB1Ymxpc2goYXJncykge1xuICAgICAgICAgICAgICAgIGlmICghbGlzdGVuZXIpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIoYXJncyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIG5vdGlmeShtYXApIHtcbiAgICAgICAgICAgICAgICB2YXIgb3B0aW9ucyA9IGdldE9wdGlvbnMoKTtcbiAgICAgICAgICAgICAgICB2YXIgaWNvbkNsYXNzID0gbWFwLmljb25DbGFzcyB8fCBvcHRpb25zLmljb25DbGFzcztcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKG1hcC5vcHRpb25zT3ZlcnJpZGUpICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zID0gJC5leHRlbmQob3B0aW9ucywgbWFwLm9wdGlvbnNPdmVycmlkZSk7XG4gICAgICAgICAgICAgICAgICAgIGljb25DbGFzcyA9IG1hcC5vcHRpb25zT3ZlcnJpZGUuaWNvbkNsYXNzIHx8IGljb25DbGFzcztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkRXhpdChvcHRpb25zLCBtYXApKSB7IHJldHVybjsgfVxuXG4gICAgICAgICAgICAgICAgdG9hc3RJZCsrO1xuXG4gICAgICAgICAgICAgICAgJGNvbnRhaW5lciA9IGdldENvbnRhaW5lcihvcHRpb25zLCB0cnVlKTtcblxuICAgICAgICAgICAgICAgIHZhciBpbnRlcnZhbElkID0gbnVsbDtcbiAgICAgICAgICAgICAgICB2YXIgJHRvYXN0RWxlbWVudCA9ICQoJzxkaXYvPicpO1xuICAgICAgICAgICAgICAgIHZhciAkdGl0bGVFbGVtZW50ID0gJCgnPGRpdi8+Jyk7XG4gICAgICAgICAgICAgICAgdmFyICRtZXNzYWdlRWxlbWVudCA9ICQoJzxkaXYvPicpO1xuICAgICAgICAgICAgICAgIHZhciAkcHJvZ3Jlc3NFbGVtZW50ID0gJCgnPGRpdi8+Jyk7XG4gICAgICAgICAgICAgICAgdmFyICRjbG9zZUVsZW1lbnQgPSAkKG9wdGlvbnMuY2xvc2VIdG1sKTtcbiAgICAgICAgICAgICAgICB2YXIgcHJvZ3Jlc3NCYXIgPSB7XG4gICAgICAgICAgICAgICAgICAgIGludGVydmFsSWQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGhpZGVFdGE6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1heEhpZGVUaW1lOiBudWxsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgICAgICAgICAgICAgIHRvYXN0SWQ6IHRvYXN0SWQsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlOiAndmlzaWJsZScsXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0VGltZTogbmV3IERhdGUoKSxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogb3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgbWFwOiBtYXBcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgcGVyc29uYWxpemVUb2FzdCgpO1xuXG4gICAgICAgICAgICAgICAgZGlzcGxheVRvYXN0KCk7XG5cbiAgICAgICAgICAgICAgICBoYW5kbGVFdmVudHMoKTtcblxuICAgICAgICAgICAgICAgIHB1Ymxpc2gocmVzcG9uc2UpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZGVidWcgJiYgY29uc29sZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuICR0b2FzdEVsZW1lbnQ7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBlc2NhcGVIdG1sKHNvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlID09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UgPSBcIlwiO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU3RyaW5nKHNvdXJjZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8mL2csICcmYW1wOycpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCAnJiMzOTsnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBwZXJzb25hbGl6ZVRvYXN0KCkge1xuICAgICAgICAgICAgICAgICAgICBzZXRJY29uKCk7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpdGxlKCk7XG4gICAgICAgICAgICAgICAgICAgIHNldE1lc3NhZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0Q2xvc2VCdXR0b24oKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0UHJvZ3Jlc3NCYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0U2VxdWVuY2UoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBoYW5kbGVFdmVudHMoKSB7XG4gICAgICAgICAgICAgICAgICAgICR0b2FzdEVsZW1lbnQuaG92ZXIoc3RpY2tBcm91bmQsIGRlbGF5ZWRIaWRlVG9hc3QpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMub25jbGljayAmJiBvcHRpb25zLnRhcFRvRGlzbWlzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHRvYXN0RWxlbWVudC5jbGljayhoaWRlVG9hc3QpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuY2xvc2VCdXR0b24gJiYgJGNsb3NlRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJGNsb3NlRWxlbWVudC5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQuY2FuY2VsQnViYmxlICE9PSB1bmRlZmluZWQgJiYgZXZlbnQuY2FuY2VsQnViYmxlICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZGVUb2FzdCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMub25jbGljaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHRvYXN0RWxlbWVudC5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm9uY2xpY2soZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZGVUb2FzdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBkaXNwbGF5VG9hc3QoKSB7XG4gICAgICAgICAgICAgICAgICAgICR0b2FzdEVsZW1lbnQuaGlkZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICR0b2FzdEVsZW1lbnRbb3B0aW9ucy5zaG93TWV0aG9kXShcbiAgICAgICAgICAgICAgICAgICAgICAgIHtkdXJhdGlvbjogb3B0aW9ucy5zaG93RHVyYXRpb24sIGVhc2luZzogb3B0aW9ucy5zaG93RWFzaW5nLCBjb21wbGV0ZTogb3B0aW9ucy5vblNob3dufVxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnRpbWVPdXQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcnZhbElkID0gc2V0VGltZW91dChoaWRlVG9hc3QsIG9wdGlvbnMudGltZU91dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9ncmVzc0Jhci5tYXhIaWRlVGltZSA9IHBhcnNlRmxvYXQob3B0aW9ucy50aW1lT3V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2dyZXNzQmFyLmhpZGVFdGEgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSArIHByb2dyZXNzQmFyLm1heEhpZGVUaW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMucHJvZ3Jlc3NCYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9ncmVzc0Jhci5pbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwodXBkYXRlUHJvZ3Jlc3MsIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNldEljb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXAuaWNvbkNsYXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkdG9hc3RFbGVtZW50LmFkZENsYXNzKG9wdGlvbnMudG9hc3RDbGFzcykuYWRkQ2xhc3MoaWNvbkNsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNldFNlcXVlbmNlKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5uZXdlc3RPblRvcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnRhaW5lci5wcmVwZW5kKCR0b2FzdEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnRhaW5lci5hcHBlbmQoJHRvYXN0RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzZXRUaXRsZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hcC50aXRsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHRpdGxlRWxlbWVudC5hcHBlbmQoIW9wdGlvbnMuZXNjYXBlSHRtbCA/IG1hcC50aXRsZSA6IGVzY2FwZUh0bWwobWFwLnRpdGxlKSkuYWRkQ2xhc3Mob3B0aW9ucy50aXRsZUNsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICR0b2FzdEVsZW1lbnQuYXBwZW5kKCR0aXRsZUVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc2V0TWVzc2FnZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hcC5tZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkbWVzc2FnZUVsZW1lbnQuYXBwZW5kKCFvcHRpb25zLmVzY2FwZUh0bWwgPyBtYXAubWVzc2FnZSA6IGVzY2FwZUh0bWwobWFwLm1lc3NhZ2UpKS5hZGRDbGFzcyhvcHRpb25zLm1lc3NhZ2VDbGFzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkdG9hc3RFbGVtZW50LmFwcGVuZCgkbWVzc2FnZUVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc2V0Q2xvc2VCdXR0b24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmNsb3NlQnV0dG9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkY2xvc2VFbGVtZW50LmFkZENsYXNzKCd0b2FzdC1jbG9zZS1idXR0b24nKS5hdHRyKCdyb2xlJywgJ2J1dHRvbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHRvYXN0RWxlbWVudC5wcmVwZW5kKCRjbG9zZUVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc2V0UHJvZ3Jlc3NCYXIoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnByb2dyZXNzQmFyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkcHJvZ3Jlc3NFbGVtZW50LmFkZENsYXNzKCd0b2FzdC1wcm9ncmVzcycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHRvYXN0RWxlbWVudC5wcmVwZW5kKCRwcm9ncmVzc0VsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc2hvdWxkRXhpdChvcHRpb25zLCBtYXApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMucHJldmVudER1cGxpY2F0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXAubWVzc2FnZSA9PT0gcHJldmlvdXNUb2FzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1RvYXN0ID0gbWFwLm1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGhpZGVUb2FzdChvdmVycmlkZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWV0aG9kID0gb3ZlcnJpZGUgJiYgb3B0aW9ucy5jbG9zZU1ldGhvZCAhPT0gZmFsc2UgPyBvcHRpb25zLmNsb3NlTWV0aG9kIDogb3B0aW9ucy5oaWRlTWV0aG9kO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZHVyYXRpb24gPSBvdmVycmlkZSAmJiBvcHRpb25zLmNsb3NlRHVyYXRpb24gIT09IGZhbHNlID9cbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuY2xvc2VEdXJhdGlvbiA6IG9wdGlvbnMuaGlkZUR1cmF0aW9uO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWFzaW5nID0gb3ZlcnJpZGUgJiYgb3B0aW9ucy5jbG9zZUVhc2luZyAhPT0gZmFsc2UgPyBvcHRpb25zLmNsb3NlRWFzaW5nIDogb3B0aW9ucy5oaWRlRWFzaW5nO1xuICAgICAgICAgICAgICAgICAgICBpZiAoJCgnOmZvY3VzJywgJHRvYXN0RWxlbWVudCkubGVuZ3RoICYmICFvdmVycmlkZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChwcm9ncmVzc0Jhci5pbnRlcnZhbElkKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICR0b2FzdEVsZW1lbnRbbWV0aG9kXSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBlYXNpbmc6IGVhc2luZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlVG9hc3QoJHRvYXN0RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMub25IaWRkZW4gJiYgcmVzcG9uc2Uuc3RhdGUgIT09ICdoaWRkZW4nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMub25IaWRkZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2Uuc3RhdGUgPSAnaGlkZGVuJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5lbmRUaW1lID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdWJsaXNoKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZGVsYXllZEhpZGVUb2FzdCgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMudGltZU91dCA+IDAgfHwgb3B0aW9ucy5leHRlbmRlZFRpbWVPdXQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcnZhbElkID0gc2V0VGltZW91dChoaWRlVG9hc3QsIG9wdGlvbnMuZXh0ZW5kZWRUaW1lT3V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2dyZXNzQmFyLm1heEhpZGVUaW1lID0gcGFyc2VGbG9hdChvcHRpb25zLmV4dGVuZGVkVGltZU91dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9ncmVzc0Jhci5oaWRlRXRhID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgKyBwcm9ncmVzc0Jhci5tYXhIaWRlVGltZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHN0aWNrQXJvdW5kKCkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoaW50ZXJ2YWxJZCk7XG4gICAgICAgICAgICAgICAgICAgIHByb2dyZXNzQmFyLmhpZGVFdGEgPSAwO1xuICAgICAgICAgICAgICAgICAgICAkdG9hc3RFbGVtZW50LnN0b3AodHJ1ZSwgdHJ1ZSlbb3B0aW9ucy5zaG93TWV0aG9kXShcbiAgICAgICAgICAgICAgICAgICAgICAgIHtkdXJhdGlvbjogb3B0aW9ucy5zaG93RHVyYXRpb24sIGVhc2luZzogb3B0aW9ucy5zaG93RWFzaW5nfVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVByb2dyZXNzKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGVyY2VudGFnZSA9ICgocHJvZ3Jlc3NCYXIuaGlkZUV0YSAtIChuZXcgRGF0ZSgpLmdldFRpbWUoKSkpIC8gcHJvZ3Jlc3NCYXIubWF4SGlkZVRpbWUpICogMTAwO1xuICAgICAgICAgICAgICAgICAgICAkcHJvZ3Jlc3NFbGVtZW50LndpZHRoKHBlcmNlbnRhZ2UgKyAnJScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0T3B0aW9ucygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJC5leHRlbmQoe30sIGdldERlZmF1bHRzKCksIHRvYXN0ci5vcHRpb25zKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gcmVtb3ZlVG9hc3QoJHRvYXN0RWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGlmICghJGNvbnRhaW5lcikgeyAkY29udGFpbmVyID0gZ2V0Q29udGFpbmVyKCk7IH1cbiAgICAgICAgICAgICAgICBpZiAoJHRvYXN0RWxlbWVudC5pcygnOnZpc2libGUnKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICR0b2FzdEVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgJHRvYXN0RWxlbWVudCA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKCRjb250YWluZXIuY2hpbGRyZW4oKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgJGNvbnRhaW5lci5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNUb2FzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSkoKTtcbiAgICB9KTtcbn0odHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lIDogZnVuY3Rpb24gKGRlcHMsIGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHsgLy9Ob2RlXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LnRvYXN0ciA9IGZhY3Rvcnkod2luZG93LmpRdWVyeSk7XG4gICAgfVxufSkpO1xuIiwidmFyIHRlbXBsYXRlU3lzdGVtID0gcmVxdWlyZSgnLi4vc3JjL2pzL2JpbmRpbmdzL2Nob29zZS10ZW1wbGF0ZS5qcycpO1xuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG50ZW1wbGF0ZVN5c3RlbS5hZGRUZW1wbGF0ZShcImFycmF5XCIsIFwiPCEtLSBrbyBmb3JlYWNoOiAkZGF0YSAtLT48IS0tIGtvIGJsb2NrOiAkZGF0YSAtLT48IS0tIC9rbyAtLT48IS0tIC9rbyAtLT5cIik7XG50ZW1wbGF0ZVN5c3RlbS5hZGRUZW1wbGF0ZShcImJsb2NrLXNob3dcIiwgXCI8IS0tIGtvIGJsb2NrOiAkZGF0YSwgc2Nyb2xsSW50b1ZpZXc6ICRyb290LnNlbGVjdGVkQmxvY2soKSA9PT0gJGRhdGEgLS0+PCEtLSAva28gLS0+XCIpO1xudGVtcGxhdGVTeXN0ZW0uYWRkVGVtcGxhdGUoXCJibG9jay13eXNpd3lnXCIsIFwiPGRpdiBjbGFzcz1cXHgyMmVkaXRhYmxlIGJsb2NrXFx4MjIgZGF0YS1kcm9wLWNvbnRlbnQ9XFx4MjJEcm9wIGhlcmVcXHgyMiBkYXRhLWJpbmQ9XFx4MjJhdHRyOiB7ICdkYXRhLWRyb3AtY29udGVudCc6ICRyb290LnQoJ0Ryb3AgaGVyZScpIH0sIGNsaWNrOiBmdW5jdGlvbihvYmosIGV2dCkgeyAkcm9vdC5zZWxlY3RCbG9jayhvYmopOyByZXR1cm4gdHJ1ZSB9LCBjbGlja0J1YmJsZTogZmFsc2UsIGNzczogeyBzZWxlY3RlZDogJHJvb3Quc2VsZWN0ZWRCbG9jaygpID09PSAkZGF0YSB9LCBzY3JvbGxJbnRvVmlldzogJHJvb3Quc2VsZWN0ZWRCbG9jaygpID09PSAkZGF0YVxceDIyPiAgPGRpdiBjbGFzcz1cXHgyMm1vLWJsb2Nrc2VsZWN0aW9uaGVscGVyXFx4MjI+PC9kaXY+ICA8ZGl2IGNsYXNzPVxceDIydG9vbHNcXHgyMiBkYXRhLWJpbmQ9XFx4MjJ0b29sdGlwczoge31cXHgyMj4gICAgPCEtLSBrbyBpZjogdHlwZW9mICRpbmRleCAhPSAndW5kZWZpbmVkJyAtLT4gICAgPGRpdiB0aXRsZT1cXHgyMkRyYWcgdGhpcyBoYW5kbGUgdG8gbW92ZSB0aGUgYmxvY2tcXHgyMiBkYXRhLWJpbmQ9XFx4MjJhdHRyOiB7IHRpdGxlOiAkcm9vdC50KCdEcmFnIHRoaXMgaGFuZGxlIHRvIG1vdmUgdGhlIGJsb2NrJykgfVxceDIyIGNsYXNzPVxceDIydG9vbCBoYW5kbGVcXHgyMj48aSBjbGFzcz1cXHgyMmZhIGZhLWZ3IGZhLXNvcnRcXHgyMj48L2k+PC9kaXY+ICAgIDwhLS0ga28gaWY6ICRpbmRleCgpID4gMCAtLT4gICAgPGRpdiB0aXRsZT1cXHgyMk1vdmUgdGhpcyBibG9jayB1cHNpZGVcXHgyMiBkYXRhLWJpbmQ9XFx4MjJhdHRyOiB7IHRpdGxlOiAkcm9vdC50KCdNb3ZlIHRoaXMgYmxvY2sgdXBzaWRlJykgfVxceDIyIGNsYXNzPVxceDIydG9vbCBtb3ZldXBcXHgyMj48aSBjbGFzcz1cXHgyMmZhIGZhLWZ3IGZhLXNvcnQtYXNjXFx4MjIgZGF0YS1iaW5kPSdjbGljazogJHJvb3QubW92ZUJsb2NrLmJpbmQoJGVsZW1lbnQsICRpbmRleCwgJHBhcmVudCwgdHJ1ZSknPjwvaT48L2Rpdj4gICAgPCEtLSAva28gLS0+ICAgIDwhLS0ga28gaWY6ICRpbmRleCgpIDwgJHBhcmVudC5ibG9ja3MoKS5sZW5ndGggLTEgLS0+ICAgIDxkaXYgdGl0bGU9XFx4MjJNb3ZlIHRoaXMgYmxvY2sgZG93bnNpZGVcXHgyMiBkYXRhLWJpbmQ9XFx4MjJhdHRyOiB7IHRpdGxlOiAkcm9vdC50KCdNb3ZlIHRoaXMgYmxvY2sgZG93bnNpZGUnKSB9XFx4MjIgY2xhc3M9XFx4MjJ0b29sIG1vdmVkb3duXFx4MjI+PGkgY2xhc3M9XFx4MjJmYSBmYS1mdyBmYS1zb3J0LWRlc2NcXHgyMiBkYXRhLWJpbmQ9J2NsaWNrOiAkcm9vdC5tb3ZlQmxvY2suYmluZCgkZWxlbWVudCwgJGluZGV4LCAkcGFyZW50LCBmYWxzZSknPjwvaT48L2Rpdj4gICAgPCEtLSAva28gLS0+ICAgIDxkaXYgdGl0bGU9XFx4MjJEZWxldGUgYmxvY2tcXHgyMiBjbGFzcz1cXHgyMnRvb2wgZGVsZXRlXFx4MjIgZGF0YS1iaW5kPVxceDIyYXR0cjogeyB0aXRsZTogJHJvb3QudCgnRGVsZXRlIGJsb2NrJykgfSwgY2xpY2s6ICRyb290LnJlbW92ZUJsb2NrLmJpbmQoJGVsZW1lbnQsICRyYXdEYXRhLCAkcGFyZW50KVxceDIyPjxpIGNsYXNzPVxceDIyZmEgZmEtZncgZmEtdHJhc2gtb1xceDIyPjwvaT48L2Rpdj4gICAgPGRpdiB0aXRsZT1cXHgyMkR1cGxpY2F0ZSBibG9ja1xceDIyIGNsYXNzPVxceDIydG9vbCBjbG9uZVxceDIyIGRhdGEtYmluZD1cXHgyMmF0dHI6IHsgdGl0bGU6ICRyb290LnQoJ0R1cGxpY2F0ZSBibG9jaycpIH0sIGNsaWNrOiAkcm9vdC5kdXBsaWNhdGVCbG9jay5iaW5kKCRlbGVtZW50LCAkaW5kZXgsICRwYXJlbnQpXFx4MjI+PGkgY2xhc3M9XFx4MjJmYSBmYS1mdyBmYS1maWxlcy1vXFx4MjI+PC9pPjwvZGl2PiAgICA8IS0tIC9rbyAtLT4gICAgPCEtLSBrbyBpZjogdHlwZW9mICRkYXRhLl9uZXh0VmFyaWFudCAhPSAndW5kZWZpbmVkJyAtLT48ZGl2IHRpdGxlPVxceDIyU3dpdGNoIGJsb2NrIHZhcmlhbnRcXHgyMiBjbGFzcz1cXHgyMnRvb2wgdmFyaWFudFxceDIyIGRhdGEtYmluZD1cXHgyMmF0dHI6IHsgdGl0bGU6ICRyb290LnQoJ1N3aXRjaCBibG9jayB2YXJpYW50JykgfSwgY2xpY2s6ICRkYXRhLl9uZXh0VmFyaWFudFxceDIyPjxpIGNsYXNzPVxceDIyZmEgZmEtZncgZmEtbWFnaWNcXHgyMj48L2k+PC9kaXY+PCEtLSAva28gLS0+ICA8L2Rpdj4gIDwhLS0ga28gYmxvY2s6ICRkYXRhIC0tPjwhLS0gL2tvIC0tPjwvZGl2PlwiKTtcbnRlbXBsYXRlU3lzdGVtLmFkZFRlbXBsYXRlKFwiYmxvY2tzLXNob3dcIiwgXCI8IS0tIGtvIHRlbXBsYXRlOiB7IG5hbWU6ICdibG9jay1zaG93JywgZm9yZWFjaDogYmxvY2tzIH0gLS0+PCEtLSAva28gLS0+XCIpO1xudGVtcGxhdGVTeXN0ZW0uYWRkVGVtcGxhdGUoXCJibG9ja3Mtd3lzaXd5Z1wiLCBcIjxkaXYgY2xhc3M9XFx4MjJzb3J0YWJsZS1ibG9ja3MtZWRpdFxceDIyIGRhdGEtZHJvcC1jb250ZW50PVxceDIyRHJvcCBoZXJlXFx4MjIgZGF0YS1lbXB0eS1jb250ZW50PVxceDIyRHJvcCBoZXJlIGJsb2NrcyBmcm9tIHRoZSBCbG9ja3MgdGFiXFx4MjIgZGF0YS1iaW5kPVxceDIyYXR0cjogeyAnZGF0YS1kcm9wLWNvbnRlbnQnOiAkcm9vdC50KCdEcm9wIGhlcmUnKSwgJ2RhdGEtZW1wdHktY29udGVudCc6ICRyb290LnQoJ0Ryb3AgaGVyZSBibG9ja3MgZnJvbSB0aGUgJnF1b3Q7QmxvY2tzJnF1b3Q7IHRhYicpIH0sIGNzczogeyAnZW1wdHknOiBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKGJsb2NrcykubGVuZ3RoID09IDAgfSwgZXh0c29ydGFibGU6IHsgY29ubmVjdENsYXNzOiAnc29ydGFibGUtYmxvY2tzLWVkaXQnLCB0ZW1wbGF0ZTogJ2Jsb2NrLXd5c2l3eWcnLCBkYXRhOiBibG9ja3MsIGRyYWdnaW5nOiAkcm9vdC5kcmFnZ2luZywgYmVmb3JlTW92ZTogJHJvb3Quc3RhcnRNdWx0aXBsZSwgYWZ0ZXJNb3ZlOiAkcm9vdC5zdG9wTXVsdGlwbGUsIG9wdGlvbnM6IHsgaGFuZGxlOiAnLmhhbmRsZScsIHBsYWNlaG9sZGVyOiAkcm9vdC5wbGFjZWhvbGRlckhlbHBlciB9IH1cXHgyMj48L2Rpdj5cIik7XG50ZW1wbGF0ZVN5c3RlbS5hZGRUZW1wbGF0ZShcImN1c3RvbXN0eWxlXCIsIFwiPGRpdiBjbGFzcz1cXHgyMmN1c3RvbVN0eWxlSGVscFxceDIyIGRhdGEtYmluZD1cXHgyMmh0bWw6ICRyb290LnQoJ0N1c3RvbWl6ZWQgYmxvY2suPHVsPjxsaT5JbiB0aGlzIHN0YXR1cyBjaGFuZ2VzIHRvIHByb3BlcnRpZXMgd2lsbCBiZSBzcGVjaWZpYyB0byB0aGUgY3VycmVudCBibG9jayAoaW5zdGVhZCBvZiBiZWluZyBnbG9iYWwgdG8gYWxsIGJsb2NrcyBpbiB0aGUgc2FtZSBzZWN0aW9uKTwvbGk+PGxpPkEgPHNwYW4gY2xhc3M9JnF1b3Q7Y3VzdG9tU3R5bGVkJnF1b3Q7PjxzcGFuPiZxdW90O3NtYWxsIGN1YmUmcXVvdDsgPC9zcGFuPjwvc3Bhbj4gaWNvbiBiZXNpZGUgdGhlIHByb3BlcnR5IHdpbGwgbWFyayB0aGUgY3VzdG9taXphdGlvbi4gQnkgY2xpY2tpbmcgdGhpcyBpY29uIHRoZSBwcm9wZXJ0eSB2YWx1ZSB3aWxsIGJlIHJldmVydGVkIHRvIHRoZSB2YWx1ZSBkZWZpbmVkIGZvciB0aGUgc2VjdGlvbi48L2xpPjwvdWw+JylcXHgyMj5DdXN0b21pemVkIGJsb2NrLjx1bD48bGk+SW4gdGhpcyBzdGF0dXMgY2hhbmdlcyB0byBwcm9wZXJ0aWVzIHdpbGwgYmUgc3BlY2lmaWMgdG8gdGhlIGN1cnJlbnQgYmxvY2sgKGluc3RlYWQgb2YgYmVpbmcgZ2xvYmFsIHRvIGFsbCBibG9ja3MgaW4gdGhlIHNhbWUgc2VjdGlvbik8L2xpPjxsaT5BIDxzcGFuIGNsYXNzPVxceDIyY3VzdG9tU3R5bGVkXFx4MjI+PHNwYW4+XFx4MjJzbWFsbCBjdWJlXFx4MjIgPC9zcGFuPjwvc3Bhbj4gaWNvbiBiZXNpZGUgdGhlIHByb3BlcnR5IHdpbGwgbWFyayB0aGUgY3VzdG9taXphdGlvbi4gQnkgY2xpY2tpbmcgdGhpcyBpY29uIHRoZSBwcm9wZXJ0eSB2YWx1ZSB3aWxsIGJlIHJldmVydGVkIHRvIHRoZSB2YWx1ZSBkZWZpbmVkIGZvciB0aGUgc2VjdGlvbi48L2xpPjwvdWw+PC9kaXY+XCIpO1xudGVtcGxhdGVTeXN0ZW0uYWRkVGVtcGxhdGUoXCJlbXB0eVwiLCBcIlwiKTtcbnRlbXBsYXRlU3lzdGVtLmFkZFRlbXBsYXRlKFwiZXJyb3JcIiwgXCJbPGRpdiBzdHlsZT1cXHgyMmJhY2tncm91bmQtY29sb3I6ICNmZmYwZjBcXHgyMiBkYXRhLWJpbmQ9XFx4MjJ0ZXh0OiBrby50b0pTKCRkYXRhKVxceDIyPjwvZGl2Pl1cIik7XG50ZW1wbGF0ZVN5c3RlbS5hZGRUZW1wbGF0ZShcImdhbGxlcnktaW1hZ2VzXCIsIFwiPGRpdiBkYXRhLWJpbmQ9XFx4MjJmb3JlYWNoOiBpdGVtcy5jdXJyZW50UGFnZURhdGFcXHgyMj4gIDxkaXYgY2xhc3M9XFx4MjJkcmFnZ2FibGUtaXRlbVxceDIyIGRhdGEtYmluZD1cXHgyMmlmOiB0eXBlb2YgdGh1bWJuYWlsVXJsICE9ICd1bmRlZmluZWQnXFx4MjI+ICAgIDxkaXYgY2xhc3M9XFx4MjJkcmFnZ2FibGUgaW1hZ2VcXHgyMiBkYXRhLWJpbmQ9XFx4MjJjbGljazogJHJvb3QuYWRkSW1hZ2UsIGV4dGRyYWdnYWJsZTogeyBkYXRhOiAkZGF0YSwgZHJvcENvbnRhaW5lcjogJyNtYWluLXd5c2l3eWctYXJlYScsIGRyYWdnaW5nOiAkcm9vdC5kcmFnZ2luZ0ltYWdlLCAnb3B0aW9ucyc6IHsgJ2FwcGVuZFRvJzogJyNwYWdlJyB9IH0sIHN0eWxlOiB7IGJhY2tncm91bmRJbWFnZTogJ3VybChcXFxcJycgKyB0aHVtYm5haWxVcmwgKyAnXFxcXCcpJyB9XFx4MjI+ICAgICAgPGltZyB0aXRsZT1cXHgyMlRyYXNjaW5hIHF1ZXN0YSBpbW1hZ2luZSBzdWxsYSBwb3NpemlvbmUgaW4gY3VpIHZ1b2kgaW5zZXJpcmxhXFx4MjIgc3R5bGU9XFx4MjJkaXNwbGF5OiBibG9jaztcXHgyMiBkYXRhLWJpbmQ9XFx4MjJ0b29sdGlwczoge30sIGF0dHI6IHsgc3JjOiB0aHVtYm5haWxVcmwgfVxceDIyLz4gICAgPC9kaXY+ICA8L2Rpdj48L2Rpdj48IS0tIGtvIGlmOiBpdGVtcy5wYWdlQ291bnQoKSA+IDEgLS0+PGRpdiBjbGFzcz1cXHgyMmdhbGxlcnlQYWdlclxceDIyIGRhdGEtYmluZD1cXHgyMmJ1dHRvbnNldDoge31cXHgyMj4gIDxhIGhyZWY9XFx4MjIjXFx4MjIgZGF0YS1iaW5kPVxceDIyY2xpY2s6IGl0ZW1zLm1vdmVGaXJzdCwgYnV0dG9uOiB7IGRpc2FibGVkOiBpdGVtcy5jdXJyZW50UGFnZSgpID09IDEsIGljb25zOiB7IHByaW1hcnk6ICdmYSBmYS1mYXN0LWJhY2t3YXJkJyB9LCB0ZXh0OiBmYWxzZSB9XFx4MjI+Rmlyc3Q8L2E+ICA8YSBocmVmPVxceDIyI1xceDIyIGRhdGEtYmluZD1cXHgyMmNsaWNrOiBpdGVtcy5tb3ZlUHJldmlvdXMsIGJ1dHRvbjogeyBkaXNhYmxlZDogaXRlbXMuY3VycmVudFBhZ2UoKSA9PSAxLCBpY29uczogeyBwcmltYXJ5OiAnZmEgZmEtYmFja3dhcmQnIH0sIHRleHQ6IGZhbHNlIH1cXHgyMj5QcmV2aW91czwvYT4gIDxzcGFuIGRhdGEtYmluZD1cXHgyMmJ1dHRvbjogeyBkaXNhYmxlZDogdHJ1ZSwgdGV4dDogdHJ1ZSwgbGFiZWw6ICcgJytpdGVtcy5jdXJyZW50UGFnZSgpKycgZGkgJytpdGVtcy5wYWdlQ291bnQoKSsnICcgfVxceDIyPiBYIGRpIFkgPC9zcGFuPiAgPGEgaHJlZj1cXHgyMiNcXHgyMiBkYXRhLWJpbmQ9XFx4MjJjbGljazogaXRlbXMubW92ZU5leHQsIGJ1dHRvbjogeyBkaXNhYmxlZDogaXRlbXMuY3VycmVudFBhZ2UoKSA9PSBpdGVtcy5wYWdlQ291bnQoKSwgaWNvbnM6IHsgcHJpbWFyeTogJ2ZhIGZhLWZvcndhcmQnIH0sIHRleHQ6IGZhbHNlIH1cXHgyMj5OZXh0PC9hPiAgPGEgaHJlZj1cXHgyMiNcXHgyMiBkYXRhLWJpbmQ9XFx4MjJjbGljazogaXRlbXMubW92ZUxhc3QsIGJ1dHRvbjogeyBkaXNhYmxlZDogaXRlbXMuY3VycmVudFBhZ2UoKSA9PSBpdGVtcy5wYWdlQ291bnQoKSwgaWNvbnM6IHsgcHJpbWFyeTogJ2ZhIGZhLWZhc3QtZm9yd2FyZCcgfSwgdGV4dDogZmFsc2UgfVxceDIyPkxhc3Q8L2E+PC9kaXY+PCEtLSAva28gLS0+XCIpO1xudGVtcGxhdGVTeXN0ZW0uYWRkVGVtcGxhdGUoXCJpbWctd3lzaXd5Z1wiLCBcIjx0YWJsZSB0YWJmb2N1cz1cXHgyMjBcXHgyMiBjZWxsc3BhY2luZz1cXHgyMjBcXHgyMiBjZWxscGFkZGluZz1cXHgyMjBcXHgyMiBkYXRhLWRyb3AtY29udGVudD1cXHgyMkRyb3AgaGVyZVxceDIyIGRhdGEtYmluZD1cXHgyMnN0eWxlOiBfc3R5bGViaW5kLCBjbGljazogZnVuY3Rpb24ob2JqLCBldnQpIHsgJHJvb3Quc2VsZWN0SXRlbShfaXRlbSwgX2RhdGEpOyByZXR1cm4gdHJ1ZTsgfSwgY2xpY2tCdWJibGU6IGZhbHNlLCBmdWRyb3BwYWJsZTogeyBhY3RpdmVDbGFzczogJ3VpLXN0YXRlLWhpZ2hsaWdodCcsIGhvdmVyQ2xhc3M6ICd1aS1zdGF0ZS1kcmFnaG92ZXInIH0sIGRyb3BwYWJsZTogeyBvcHRpb25zOiB7IGFjY2VwdDogJy5pbWFnZScsIGFjdGl2ZUNsYXNzOiAndWktc3RhdGUtaGlnaGxpZ2h0JywgaG92ZXJDbGFzczogJ3VpLXN0YXRlLWRyYWdob3ZlcicgfSwgZGF0YTogX3NyYywgZHJhZ2dlZDogJHJvb3QuZmlsZVRvSW1hZ2UgfSwgY3NzOiB7IHNlbGVjdGVkaXRlbTogJHJvb3QuaXNTZWxlY3RlZEl0ZW0oX2l0ZW0pIH0sIHNjcm9sbEludG9WaWV3OiAkcm9vdC5pc1NlbGVjdGVkSXRlbShfaXRlbSksIGF0dHI6IHsgJ2RhdGEtZHJvcC1jb250ZW50JzogJHJvb3QudCgnRHJvcCBoZXJlJyksIHdpZHRoOiBfd2lkdGgsIGhlaWdodDogX2hlaWdodCwgYWxpZ246IF9hbGlnbiB9XFx4MjIgIGNsYXNzPVxceDIyaW1nLXd5c2l3eWcgc2VsZWN0YWJsZS1pbWdcXHgyMiBzdHlsZT1cXHgyMmRpc3BsYXk6IHRhYmxlO1xceDIyPjx0cj48dGQgY2xhc3M9XFx4MjJ1cGxvYWR6b25lXFx4MjI+ICA8ZGl2IGNsYXNzPVxceDIybW8taW1nc2VsZWN0aW9uaGVscGVyXFx4MjI+PC9kaXY+ICA8ZGl2IGNsYXNzPVxceDIybW8tdXBsb2Fkem9uZVxceDIyPjwvZGl2PiAgPGRpdiBjbGFzcz1cXHgyMmltZy1zaXplXFx4MjIgZGF0YS1iaW5kPVxceDIydGV4dDogX3NpemVcXHgyMj5zaXplPC9kaXY+ICA8ZGl2IGNsYXNzPVxceDIybWlkdG9vbHNcXHgyMiBkYXRhLWJpbmQ9XFx4MjJ0b29sdGlwczoge31cXHgyMj4gICAgPCEtLSBrbyBpZjogX3NyYygpICE9ICcnIC0tPiAgICA8ZGl2IHRpdGxlPVxceDIyUmVtb3ZlIGltYWdlXFx4MjIgY2xhc3M9XFx4MjJ0b29sIGRlbGV0ZVxceDIyIGRhdGEtYmluZD1cXHgyMmF0dHI6IHsgdGl0bGU6ICRyb290LnQoJ1JlbW92ZSBpbWFnZScpIH0sIGNsaWNrOiBfc3JjLmJpbmQoX3NyYywgJycpLCBjbGlja0J1YmJsZTogZmFsc2VcXHgyMj48aSBjbGFzcz1cXHgyMmZhIGZhLWZ3IGZhLXRyYXNoLW9cXHgyMj48L2k+PC9kaXY+ICAgIDwhLS0ga28gaWY6IHR5cGVvZiAkcm9vdC5lZGl0SW1hZ2UgIT09ICd1bmRlZmluZWQnIC0tPiAgICA8ZGl2IHRpdGxlPVxceDIyT3BlbiB0aGUgaW1hZ2UgZWRpdGluZyB0b29sXFx4MjIgY2xhc3M9XFx4MjJ0b29sIGVkaXRcXHgyMiBkYXRhLWJpbmQ9XFx4MjJhdHRyOiB7IHRpdGxlOiAkcm9vdC50KCdPcGVuIHRoZSBpbWFnZSBlZGl0aW5nIHRvb2wnKSB9LCBjbGljazogJHJvb3QuZWRpdEltYWdlLmJpbmQoJGVsZW1lbnQsIF9zcmMpLCBjbGlja0J1YmJsZTogZmFsc2VcXHgyMj48aSBjbGFzcz1cXHgyMmZhIGZhLWZ3IGZhLXBlbmNpbFxceDIyPjwvaT48L2Rpdj4gICAgPCEtLSAva28gLS0+ICAgIDwhLS0gL2tvIC0tPiAgICA8IS0tIGtvIGlmOiBfc3JjKCkgPT0gJycgLS0+ICAgIDxkaXYgdGl0bGU9XFx4MjJVcGxvYWQgYSBuZXcgaW1hZ2VcXHgyMiBkYXRhLWJpbmQ9XFx4MjJhdHRyOiB7IHRpdGxlOiAkcm9vdC50KCdVcGxvYWQgYSBuZXcgaW1hZ2UnKSB9XFx4MjIgY2xhc3M9XFx4MjJ0b29sIHVwbG9hZFxceDIyIHN0eWxlPVxceDIycG9zaXRpb246IHJlbGF0aXZlOyBvdmVyZmxvdzogaGlkZGVuO1xceDIyPjxpIGNsYXNzPVxceDIyZmEgZmEtZncgZmEtdXBsb2FkXFx4MjI+PC9pPiAgICAgIDxpbnB1dCBjbGFzcz1cXHgyMmZpbGV1cGxvYWQgbm9maWxlXFx4MjIgdHlwZT1cXHgyMmZpbGVcXHgyMiBuYW1lPVxceDIyZmlsZXNbXVxceDIyIGRhdGEtYmluZD1cXHgyMmZpbGV1cGxvYWQ6IHsgZGF0YTogX3NyYywgb25lcnJvcjogJHJvb3Qubm90aWZpZXIuZXJyb3IsIG9uZmlsZTogJHJvb3QubG9hZEltYWdlLCBjYW52YXNQcmV2aWV3OiB0cnVlIH1cXHgyMiBzdHlsZT1cXHgyMnotaW5kZXg6IDIwOyBwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogMDsgbGVmdDogMDsgcmlnaHQ6IDA7IGJvdHRvbTogMDsgbWluLXdpZHRoOiAxMDAlOyBtaW4taGVpZ2h0OiAxMDAlOyBmb250LXNpemU6IDk5OXB4OyB0ZXh0LWFsaWduOiByaWdodDsgZmlsdGVyOiBhbHBoYShvcGFjaXR5PTApOyBvcGFjaXR5OiAwOyBvdXRsaW5lOiBub25lOyBjdXJzb3I6IGluaGVyaXQ7IGRpc3BsYXk6IGJsb2NrXFx4MjI+ICAgIDwvZGl2PiAgICA8IS0tIC9rbyAtLT4gIDwvZGl2PiAgPCEtLSBrbyB0ZW1wbGF0ZTogX3RlbXBsYXRlIC0tPjwhLS0gL2tvIC0tPiAgPCEtLSBrbyBpZjogX3NyYygpID09ICcnIC0tPiAgICA8IS0tICAgIDxpbWcgc3R5bGU9XFx4MjJkaXNwbGF5OiBibG9jaztcXHgyMiBjbGFzcz1cXHgyMmltZ3BsYWNlaG9sZGVyXFx4MjIgd2lkdGg9XFx4MjIyMDBcXHgyMiBzcmM9XFx4MjJcXHgyMiBhbHQ9XFx4MjJJbnNlcnQgYW4gaW1hZ2UgaGVyZVxceDIyIGRhdGEtYmluZD1cXHgyMnd5c2l3eWdTcmM6IHsgc3JjOiBfc3JjLnByZWxvYWRlZCwgcGxhY2Vob2xkZXI6IF9wbGFjZWhvbGRlcnNyYywgd2lkdGg6IF93aWR0aCwgaGVpZ2h0OiBfaGVpZ2h0LCBtZXRob2Q6IF9tZXRob2QgfVxceDIyIC8+ICAgIC0tPiAgICA8c3BhbiBjbGFzcz1cXHgyMmZpbGV1cGxvYWR0ZXh0XFx4MjIgc3R5bGU9XFx4MjJ0ZXh0LWFsaWduOiBjZW50ZXI7IGRpc3BsYXk6IC1tcy1mbGV4Ym94OyBkaXNwbGF5OiBmbGV4OyBhbGlnbi1pdGVtczogY2VudGVyOyBmbGV4LWFsaWduOiBjZW50ZXI7IGp1c3RpZnktY29udGVudDogY2VudGVyOyBwYWRkaW5nOiAxZW07IHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAwOyBsZWZ0OiAwOyByaWdodDogMDsgYm90dG9tOiAwO1xceDIyPjxzcGFuIGNsYXNzPVxceDIydGV4dE1pZGRsZVxceDIyIHN0eWxlPVxceDIyIHRleHQtc2hhZG93OiAxcHggMXB4IDAgI0ZGRkZGRiwgMCAwIDEwcHggI0ZGRkZGRjsgZm9udC13ZWlnaHQ6IGJvbGQ7XFx4MjIgZGF0YS1iaW5kPVxceDIydGV4dDogJHJvb3QudCgnRHJvcCBhbiBpbWFnZSBoZXJlJylcXHgyMj5Ecm9wIGFuIGltYWdlIGhlcmU8L3NwYW4+PC9zcGFuPiAgPCEtLSAva28gLS0+ICA8IS0tIGtvIGlmOiBfc3JjKCkgIT0gJycgLS0+ICA8IS0tICAgIDxpbWcgc3R5bGU9XFx4MjJkaXNwbGF5OiBibG9jaztcXHgyMiB3aWR0aD1cXHgyMjIwMFxceDIyIHNyYz1cXHgyMlxceDIyIGRhdGEtYmluZD1cXHgyMnByZWxvYWRlcjogX3NyYywgd3lzaXd5Z1NyYzogeyBzcmM6IF9zcmMucHJlbG9hZGVkLCBwbGFjZWhvbGRlcjogX3BsYWNlaG9sZGVyc3JjLCB3aWR0aDogX3dpZHRoLCBoZWlnaHQ6IF9oZWlnaHQsIG1ldGhvZDogX21ldGhvZCB9XFx4MjIgLz4gICAgLS0+ICA8IS0tIC9rbyAtLT4gIDwhLS0gcHVsc2FudGUgcGVyIGxhIGNhbmNlbGxhemlvbmUgLS0+ICA8ZGl2IHRpdGxlPVxceDIyRHJvcCBhbiBpbWFnZSBoZXJlIG9yIGNsaWNrIHRoZSB1cGxvYWQgYnV0dG9uXFx4MjIgZGF0YS1iaW5kPVxceDIyYXR0cjogeyB0aXRsZTogJHJvb3QudCgnRHJvcCBhbiBpbWFnZSBoZXJlIG9yIGNsaWNrIHRoZSB1cGxvYWQgYnV0dG9uJykgfSwgdG9vbHRpcHM6IHt9XFx4MjIgY2xhc3M9XFx4MjJ3b3Jrem9uZVxceDIyIHN0eWxlPVxceDIycG9zaXRpb246IGFic29sdXRlOyB0b3A6IDA7IGxlZnQ6IDA7IHJpZ2h0OiAwOyBib3R0b206IDA7IG92ZXJmbG93OiBoaWRkZW47XFx4MjI+ICAgIDwhLS0ga28gaWY6IF9zcmMucHJlbG9hZGVkICYmIF9zcmMoKSAhPSBfc3JjLnByZWxvYWRlZCgpIC0tPlBSRUxPQURJTkcuLi4uPCEtLSAva28gLS0+ICAgIDwhLS0ga28gaWY6IF9zcmMoKSAhPSAnJyAtLT4gICAgICA8aW5wdXQgY2xhc3M9XFx4MjJmaWxldXBsb2FkIHdpdGhmaWxlXFx4MjIgdHlwZT1cXHgyMmZpbGVcXHgyMiBuYW1lPVxceDIyZmlsZXNbXVxceDIyIGRhdGEtYmluZD1cXHgyMmZpbGV1cGxvYWQ6IHsgZGF0YTogX3NyYywgb25lcnJvcjogJHJvb3Qubm90aWZpZXIuZXJyb3IsIG9uZmlsZTogJHJvb3QuZ2FsbGVyeVJlY2VudC51bnNoaWZ0LmJpbmQoJHJvb3QuZ2FsbGVyeVJlY2VudCksIGNhbnZhc1ByZXZpZXc6IHRydWUgfVxceDIyIHN0eWxlPVxceDIyei1pbmRleDogLTIwOyBwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogMDsgbGVmdDogMDsgcmlnaHQ6IDA7IGJvdHRvbTogMDsgbWluLXdpZHRoOiAxMDAlOyBtaW4taGVpZ2h0OiAxMDAlOyBmb250LXppZTogOTk5cHg7IHRleHQtYWxpZ246IHJpZ2h0OyBmaWx0ZXI6IGFscGhhKG9wYWNpdHk9MCk7IG9wYWNpdHk6IDA7IG91dGxpbmU6IG5vbmU7IGN1cnNvcjogaW5oZXJpdDsgZGlzcGxheTogYmxvY2tcXHgyMj4gICAgPCEtLSAva28gLS0+ICAgIDxkaXYgY2xhc3M9XFx4MjJwcm9ncmVzc1xceDIyIHN0eWxlPVxceDIyb3BhY2l0eTogLjU7IHdpZHRoOiA4MCU7IG1hcmdpbi1sZWZ0OiAxMCU7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgYm90dG9tOiAzMCU7IGhlaWdodDogMjBweDsgYm9yZGVyOiAycHggc29saWQgYmxhY2s7XFx4MjI+ICAgICAgPGRpdiBjbGFzcz1cXHgyMnByb2dyZXNzLWJhciBwcm9ncmVzcy1iYXItc3VjY2Vzc1xceDIyIHN0eWxlPVxceDIyaGVpZ2h0OiAyMHB4OyBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjazsgXFx4MjI+PC9kaXY+ICAgIDwvZGl2PiAgPC9kaXY+PC90YWJsZT5cIik7XG50ZW1wbGF0ZVN5c3RlbS5hZGRUZW1wbGF0ZShcIm1haW5cIiwgXCI8ZGl2IGlkPVxceDIycGFnZVxceDIyIHN0eWxlPVxceDIyZGlzcGxheTogbm9uZTtcXHgyMiBkYXRhLWJpbmQ9XFx4MjJ2aXNpYmxlOiB0cnVlLCBjc3M6IHsgd2l0aFRvb2xib3g6ICRyb290LnNob3dUb29sYm94LCB3aXRoUHJldmlld0ZyYW1lOiBzaG93UHJldmlld0ZyYW1lIH1cXHgyMj4gIDxkaXYgaWQ9XFx4MjJtYWluLWVkaXQtYXJlYVxceDIyIGRhdGEtYmluZD1cXHgyMmNsaWNrOiBmdW5jdGlvbihvYmosIGV2dCkgeyAkcm9vdC5zZWxlY3RCbG9jayhudWxsKTsgcmV0dXJuIHRydWU7IH0sIGNsaWNrQnViYmxlOiBmYWxzZVxceDIyPiAgICA8IS0tIGtvIHdpdGhQcm9wZXJ0aWVzOiB7IHRlbXBsYXRlTW9kZTogJ3d5c2l3eWcnLCB0ZW1wbGF0ZU1vZGVGYWxsYmFjazogJ3Nob3cnIH0gLS0+ICAgIDxkaXYgaWQ9XFx4MjJtYWluLXd5c2l3eWctYXJlYVxceDIyIGRhdGEtYmluZD1cXHgyMnd5c2l3eWdTY3JvbGxmaXg6IHRydWUsIHNjcm9sbGFibGU6IHRydWUsIGZ1ZHJvcHBhYmxlOiB7IGFjdGl2ZTogZHJhZ2dpbmdJbWFnZSB9LCBjc3M6IHsgaXNkcmFnZ2luZzogZHJhZ2dpbmcsIGlzZHJhZ2dpbmdpbWc6IGRyYWdnaW5nSW1hZ2UgfSwgYmxvY2s6IGNvbnRlbnRcXHgyMj48L2Rpdj4gICAgPCEtLSAva28gLS0+ICA8L2Rpdj4gIDxkaXYgaWQ9XFx4MjJ0b29sYmFyXFx4MjIgY2xhc3M9XFx4MjJtb1xceDIyIGRhdGEtYmluZD1cXHgyMnRvb2x0aXBzOiB7fVxceDIyPiAgICA8IS0tIGtvIGlmOiB0eXBlb2YgJHJvb3QudW5kbyAhPSAndW5kZWZpbmVkJyAtLT4gICAgPHNwYW4gZGF0YS1iaW5kPVxceDIyYnV0dG9uc2V0OiB7IH1cXHgyMiBjbGFzcz1cXHgyMmxlZnRCdXR0b25zXFx4MjI+ICAgIDxhIHRpdGxlPVxceDIyVW5kbyBsYXN0IG9wZXJhdGlvblxceDIyIGhyZWY9XFx4MjIjXFx4MjIgZGF0YS1iaW5kPVxceDIyYXR0cjogeyB0aXRsZTogJHJvb3QudCgnVW5kbyBsYXN0IG9wZXJhdGlvbicpIH0sIGNsaWNrOiAkcm9vdC51bmRvLmV4ZWN1dGUsIGNsaWNrQnViYmxlOiBmYWxzZSwgYnV0dG9uOiB7IGRpc2FibGVkOiAhJHJvb3QudW5kby5lbmFibGVkKCksIGljb25zOiB7IHByaW1hcnk6ICdmYSBmYS1yZXBseScgfSwgbGFiZWw6ICRyb290LnVuZG8ubmFtZSwgdGV4dDogdHJ1ZSB9XFx4MjI+VU5ETzwvYT4gICAgPGEgdGl0bGU9XFx4MjJSZWRvIGxhc3Qgb3BlcmF0aW9uXFx4MjIgaHJlZj1cXHgyMiNcXHgyMiBkYXRhLWJpbmQ9XFx4MjJhdHRyOiB7IHRpdGxlOiAkcm9vdC50KCdSZWRvIGxhc3Qgb3BlcmF0aW9uJykgfSwgY2xpY2s6ICRyb290LnJlZG8uZXhlY3V0ZSwgY2xpY2tCdWJibGU6IGZhbHNlLCBidXR0b246IHsgZGlzYWJsZWQ6ICEkcm9vdC5yZWRvLmVuYWJsZWQoKSwgaWNvbnM6IHsgcHJpbWFyeTogJ2ZhIGZhLXNoYXJlJyB9LCBsYWJlbDogJHJvb3QucmVkby5uYW1lLCB0ZXh0OiB0cnVlIH1cXHgyMj5SRURPPC9hPiAgICA8L3NwYW4+ICAgIDwhLS0ga28gaWY6ICRyb290LmRlYnVnIC0tPiAgICA8YSBocmVmPVxceDIyI1xceDIyIGRhdGEtYmluZD1cXHgyMmNsaWNrOiAkcm9vdC51bmRvUmVzZXQsIGNsaWNrQnViYmxlOiBmYWxzZSwgYnV0dG9uOiB7IGRpc2FibGVkOiAhJHJvb3QudW5kby5lbmFibGVkKCkgJiYgISRyb290LnJlZG8uZW5hYmxlZCgpLCBsYWJlbDogJ3Jlc2V0JywgdGV4dDogdHJ1ZSB9XFx4MjI+UkVTRVQ8L2E+ICAgIDwhLS0gL2tvIC0tPiAgICA8IS0tIC9rbyAtLT4gICAgPHNwYW4+ICAgIDxpbnB1dCBpZD1cXHgyMnNob3dHYWxsZXJ5XFx4MjIgdHlwZT1cXHgyMmNoZWNrYm94XFx4MjIgZGF0YS1iaW5kPVxceDIyY2hlY2tlZDogJHJvb3Quc2hvd0dhbGxlcnksIGJ1dHRvbjogeyByZWZyZXNoT246ICRyb290LnNob3dHYWxsZXJ5LCAgICAgaWNvbnM6IHsgcHJpbWFyeTogJ2ZhIGZhLWZ3IGZhLXBpY3R1cmUtbycsIHNlY29uZGFyeTogbnVsbCB9LCB0ZXh0OiB0cnVlLCBsYWJlbDogJHJvb3QudCgnR2FsbGVyeScpIH1cXHgyMj48bGFiZWwgdGl0bGU9XFx4MjJTaG93IGltYWdlIGdhbGxlcnlcXHgyMiBmb3I9XFx4MjJzaG93R2FsbGVyeVxceDIyIGRhdGEtYmluZD1cXHgyMmF0dHI6IHsgdGl0bGU6ICRyb290LnQoJ1Nob3cgaW1hZ2UgZ2FsbGVyeScpIH1cXHgyMj5zaG93IGdhbGxlcnk8L2xhYmVsPjwvaW5wdXQ+ICAgIDwvc3Bhbj4gICAgPGlucHV0IGlkPVxceDIycHJldmlld0ZyYW1lVG9nZ2xlXFx4MjIgdHlwZT1cXHgyMmNoZWNrYm94XFx4MjIgZGF0YS1iaW5kPVxceDIyY2hlY2tlZDogJHJvb3Quc2hvd1ByZXZpZXdGcmFtZSwgYnV0dG9uOiB7IHJlZnJlc2hPbjogJHJvb3Quc2hvd1ByZXZpZXdGcmFtZSwgaWNvbnM6IHsgcHJpbWFyeTogJ2ZhIGZhLWZ3IGZhLXRhYmxldCcsIHNlY29uZGFyeTogbnVsbCB9LCB0ZXh0OiBmYWxzZSwgbGFiZWw6ICRyb290LnQoJ1ByZXZpZXcnKSB9XFx4MjI+PGxhYmVsIHRpdGxlPVxceDIyU2hvdyBsaXZlIHByZXZpZXdcXHgyMiBmb3I9XFx4MjJwcmV2aWV3RnJhbWVUb2dnbGVcXHgyMiBkYXRhLWJpbmQ9XFx4MjJhdHRyOiB7IHRpdGxlOiAkcm9vdC50KCdTaG93IGxpdmUgcHJldmlldycpIH1cXHgyMj5QUkVWSUVXPC9sYWJlbD48L2lucHV0PiAgICA8IS0tIGtvIGlmOiAkcm9vdC5kZWJ1ZyAtLT4gICAgPGEgaHJlZj1cXHgyMiNcXHgyMiBkYXRhLWJpbmQ9XFx4MjJjbGljazogJHJvb3QuZXhwb3J0LCBjbGlja0J1YmJsZTogZmFsc2UsIGJ1dHRvbjogeyBsYWJlbDogJ2V4cG9ydCcsIHRleHQ6IHRydWUgfVxceDIyPkVYUE9SVDwvYT4gICAgPGlucHV0IHR5cGU9XFx4MjJjaGVja2JveFxceDIyIGRhdGEtYmluZD1cXHgyMmNoZWNrZWQ6ICRyb290LmRlYnVnXFx4MjIgLz4gZGVidWcgICAgPGEgaHJlZj1cXHgyMiNcXHgyMiBkYXRhLWJpbmQ9XFx4MjJjbGljazogJHJvb3QubG9hZERlZmF1bHRCbG9ja3MsIGNsaWNrQnViYmxlOiBmYWxzZSwgYnV0dG9uOiB7IGljb25zOiB7IHByaW1hcnk6ICdmYSBmYS1mdyBmYS11cGxvYWQnIH0sIGxhYmVsOiAnRGVmYXVsdCcsIHRleHQ6IHRydWUgfVxceDIyPkxPQUQgQkxPQ0tTPC9hPiAgICBbPGEgaWQ9XFx4MjJzdWJzY3JpcHRpb25zQ291bnRcXHgyMiBocmVmPVxceDIyamF2YXNjcmlwdDp2aWV3TW9kZWwubG9vcFN1YnNjcmlwdGlvbnNDb3VudCgpXFx4MjI+c3ViczwvYT5dICAgIDwhLS0gL2tvIC0tPiAgICA8c3BhbiBkYXRhLWJpbmQ9XFx4MjJ2aXNpYmxlOiBmYWxzZVxceDIyPiAgICA8aW5wdXQgdHlwZT1cXHgyMmNoZWNrYm94XFx4MjIgZGF0YS1iaW5kPVxceDIyY2hlY2tlZDogJHJvb3Quc2hvd1Rvb2xib3hcXHgyMiAvPiB0b29sYm94ICAgIDwvc3Bhbj4gICAgPGRpdiBjbGFzcz1cXHgyMnJpZ2h0QnV0dG9uc1xceDIyPiAgICA8bGFiZWwgZm9yPVxceDIydGVtcGxhdGVUaXRsZVxceDIyIHN0eWxlPVxceDIyY29sb3I6I2VlZTsgZm9udC13ZWlnaHQ6NzAwOyBtYXJnaW4tcmlnaHQ6NXB4O1xceDIyPlRZVFXFgTwvbGFiZWw+ICAgIDxpbnB1dCB0eXBlPVxceDIydGV4dFxceDIyIG5hbWU9XFx4MjJ0ZW1wbGF0ZV90aXRsZVxceDIyIGlkPVxceDIydGVtcGxhdGVUaXRsZVxceDIyIHN0eWxlPVxceDIybWFyZ2luLXJpZ2h0OjIwcHg7IHdpZHRoOjIwMHB4OyBoZWlnaHQ6MjZweDtcXHgyMiAvPiAgICA8IS0tIGtvIGlmOiB0eXBlb2YgJHJvb3Quc2F2ZSAhPT0gJ3VuZGVmaW5lZCcgLS0+ICAgIDxhIHRpdGxlPVxceDIyU2F2ZSB0ZW1wbGF0ZVxceDIyIGhyZWY9XFx4MjIjXFx4MjIgZGF0YS1iaW5kPVxceDIyYXR0cjogeyB0aXRsZTogJHJvb3QudCgnU2F2ZSB0ZW1wbGF0ZScpIH0sIGNsaWNrOiAkcm9vdC5zYXZlLmV4ZWN1dGUsIGNsaWNrQnViYmxlOiBmYWxzZSwgYnV0dG9uOiB7IGRpc2FibGVkOiAhJHJvb3Quc2F2ZS5lbmFibGVkKCksIGljb25zOiB7IHByaW1hcnk6ICdmYSBmYS1mdyBmYS1jbG91ZC11cGxvYWQnIH0sIGxhYmVsOiAkcm9vdC50KCRyb290LnNhdmUubmFtZSksIHRleHQ6IHRydWUgfVxceDIyPlpBUElTWjwvYT4gICAgPCEtLSAva28gLS0+ICAgIDwhLS0ga28gaWY6IHR5cGVvZiAkcm9vdC50ZXN0ICE9PSAndW5kZWZpbmVkJyAtLT4gICAgPGEgdGl0bGU9XFx4MjJTaG93IHByZXZpZXcgYW5kIHNlbmQgdGVzdFxceDIyIGhyZWY9XFx4MjIjXFx4MjIgZGF0YS1iaW5kPVxceDIyYXR0cjogeyB0aXRsZTogJHJvb3QudCgnU2hvdyBwcmV2aWV3IGFuZCBzZW5kIHRlc3QnKSB9LCBjbGljazogJHJvb3QudGVzdC5leGVjdXRlLCBjbGlja0J1YmJsZTogZmFsc2UsIGJ1dHRvbjogeyBkaXNhYmxlZDogISRyb290LnRlc3QuZW5hYmxlZCgpLCBpY29uczogeyBwcmltYXJ5OiAnZmEgZmEtZncgZmEtcGFwZXItcGxhbmUnIH0sIGxhYmVsOiAkcm9vdC50KCRyb290LnRlc3QubmFtZSksIHRleHQ6IHRydWUgfVxceDIyPlRFU1Q8L2E+ICAgIDwhLS0gL2tvIC0tPiAgICA8IS0tIGtvIGlmOiB0eXBlb2YgJHJvb3QuZG93bmxvYWQgIT09ICd1bmRlZmluZWQnIC0tPiAgICA8Zm9ybSBpZD1cXHgyMmRvd25sb2FkRm9ybVxceDIyIGFjdGlvbj1cXHgyMiNcXHgyMiBtZXRob2Q9XFx4MjJQT1NUXFx4MjI+ICAgIDxpbnB1dCB0eXBlPVxceDIyaGlkZGVuXFx4MjIgbmFtZT1cXHgyMmFjdGlvblxceDIyIHZhbHVlPVxceDIyZG93bmxvYWRcXHgyMiAvPiAgICA8aW5wdXQgdHlwZT1cXHgyMmhpZGRlblxceDIyIG5hbWU9XFx4MjJmaWxlbmFtZVxceDIyIHZhbHVlPVxceDIyZW1haWwuaHRtbFxceDIyIC8+ICAgIDxpbnB1dCB0eXBlPVxceDIyaGlkZGVuXFx4MjIgbmFtZT1cXHgyMmh0bWxcXHgyMiBpZD1cXHgyMmRvd25sb2FkSHRtbFRleHRhcmVhXFx4MjIgLz4gICAgPGEgdGl0bGU9XFx4MjJEb3dubG9hZCB0ZW1wbGF0ZVxceDIyIGhyZWY9XFx4MjIjXFx4MjIgZGF0YS1iaW5kPVxceDIyYXR0cjogeyB0aXRsZTogJHJvb3QudCgnRG93bmxvYWQgdGVtcGxhdGUnKSB9LCBjbGljazogJHJvb3QuZG93bmxvYWQuZXhlY3V0ZSwgY2xpY2tCdWJibGU6IGZhbHNlLCBidXR0b246IHsgZGlzYWJsZWQ6ICEkcm9vdC5kb3dubG9hZC5lbmFibGVkKCksIGljb25zOiB7IHByaW1hcnk6ICdmYSBmYS1mdyBmYS1kb3dubG9hZCcgfSwgbGFiZWw6ICRyb290LnQoJHJvb3QuZG93bmxvYWQubmFtZSksIHRleHQ6IHRydWUgfVxceDIyPlpBUElTWiBOQSBEWVNLPC9hPiAgICA8L2Zvcm0+ICAgIDwhLS0gL2tvIC0tPiAgICA8L2Rpdj4gIDwvZGl2PiAgPCEtLSBrbyBpZjogJHJvb3Quc2hvd1Rvb2xib3ggLS0+ICA8ZGl2IGlkPVxceDIybWFpbi10b29sYm94XFx4MjIgY2xhc3M9XFx4MjJtb1xceDIyIGRhdGEtYmluZD1cXHgyMnNjcm9sbGFibGU6IHRydWUsIHdpdGhQcm9wZXJ0aWVzOiB7IHRlbXBsYXRlTW9kZTogJ2VkaXQnIH1cXHgyMj4gICAgPGRpdiBkYXRhLWJpbmQ9XFx4MjJ0ZW1wbGF0ZTogeyBuYW1lOiAndG9vbGJveCcgfVxceDIyPjwvZGl2PiAgPC9kaXY+ICA8IS0tIC9rbyAtLT4gICAgPGRpdiBpZD1cXHgyMm1haW4tcHJldmlld1xceDIyIGNsYXNzPVxceDIybW9cXHgyMiBkYXRhLWJpbmQ9XFx4MjJzY3JvbGxhYmxlOiB0cnVlLCBpZjogJHJvb3Quc2hvd1ByZXZpZXdGcmFtZVxceDIyPiAgICA8ZGl2IGlkPVxceDIycHJldmlldy10b29sYmFyXFx4MjI+ICAgICAgPGRpdiBkYXRhLWJpbmQ9XFx4MjJ2aXNpYmxlOiAkcm9vdC5zaG93UHJldmlld0ZyYW1lLCBidXR0b25zZXQ6IHsgfVxceDIyIHN0eWxlPVxceDIyZGlzcGxheTogaW5saW5lLWJsb2NrXFx4MjI+ICAgICAgICA8aW5wdXQgaWQ9XFx4MjJwcmV2aWV3TGFyZ2VcXHgyMiB0eXBlPVxceDIycmFkaW9cXHgyMiBuYW1lPVxceDIycHJldmlld01vZGVcXHgyMiB2YWx1ZT1cXHgyMmxhcmdlXFx4MjIgZGF0YS1iaW5kPVxceDIyY2hlY2tlZDogJHJvb3QucHJldmlld01vZGUsIGJ1dHRvbjogeyB0ZXh0OiBmYWxzZSwgbGFiZWw6ICdsYXJnZScsIGljb25zOiB7IHByaW1hcnk6ICdmYSBmYS1mdyBmYS1kZXNrdG9wJyB9IH1cXHgyMiAvPiAgICAgICAgPGxhYmVsIGZvcj1cXHgyMnByZXZpZXdMYXJnZVxceDIyIHRpdGxlPVxceDIyTGFyZ2Ugc2NyZWVuXFx4MjIgZGF0YS1iaW5kPVxceDIyYXR0cjogeyB0aXRsZTogJHJvb3QudCgnTGFyZ2Ugc2NyZWVuJykgfVxceDIyPkxhcmdlIHNjcmVlbjwvbGFiZWw+ICAgICAgICA8aW5wdXQgaWQ9XFx4MjJwcmV2aWV3RGVza3RvcFxceDIyIHR5cGU9XFx4MjJyYWRpb1xceDIyIG5hbWU9XFx4MjJwcmV2aWV3TW9kZVxceDIyIHZhbHVlPVxceDIyZGVza3RvcFxceDIyIGRhdGEtYmluZD1cXHgyMmNoZWNrZWQ6ICRyb290LnByZXZpZXdNb2RlLCBidXR0b246IHsgdGV4dDogZmFsc2UsIGxhYmVsOiAnZGVza3RvcCcsIGljb25zOiB7IHByaW1hcnk6ICdmYSBmYS1mdyBmYS10YWJsZXQnIH0gfVxceDIyIC8+ICAgICAgICA8bGFiZWwgZm9yPVxceDIycHJldmlld0Rlc2t0b3BcXHgyMiB0aXRsZT1cXHgyMlRhYmxldFxceDIyIGRhdGEtYmluZD1cXHgyMmF0dHI6IHsgdGl0bGU6ICRyb290LnQoJ1RhYmxldCcpIH1cXHgyMj5UYWJsZXQ8L2xhYmVsPiAgICAgICAgPGlucHV0IGlkPVxceDIycHJldmlld01vYmlsZVxceDIyIHR5cGU9XFx4MjJyYWRpb1xceDIyIG5hbWU9XFx4MjJwcmV2aWV3TW9kZVxceDIyIHZhbHVlPVxceDIybW9iaWxlXFx4MjIgZGF0YS1iaW5kPVxceDIyY2hlY2tlZDogJHJvb3QucHJldmlld01vZGUsIGJ1dHRvbjogeyB0ZXh0OiBmYWxzZSwgbGFiZWw6ICdtb2JpbGUnLCBpY29uczogeyBwcmltYXJ5OiAnZmEgZmEtZncgZmEtbW9iaWxlJyB9IH1cXHgyMiAvPiAgICAgICAgPGxhYmVsIGZvcj1cXHgyMnByZXZpZXdNb2JpbGVcXHgyMiB0aXRsZT1cXHgyMlNtYXJ0cGhvbmVcXHgyMiBkYXRhLWJpbmQ9XFx4MjJhdHRyOiB7IHRpdGxlOiAkcm9vdC50KCdTbWFydHBob25lJykgfVxceDIyPlNtYXJ0cGhvbmU8L2xhYmVsPiAgICAgIDwvZGl2PiAgICA8L2Rpdj4gICAgPGRpdiBpZD1cXHgyMmZyYW1lLWNvbnRhaW5lclxceDIyIGRhdGEtYmluZD1cXHgyMmNzczogeyBkZXNrdG9wOiAkcm9vdC5wcmV2aWV3TW9kZSgpID09ICdkZXNrdG9wJywgbW9iaWxlOiAkcm9vdC5wcmV2aWV3TW9kZSgpID09ICdtb2JpbGUnLCBsYXJnZTogJHJvb3QucHJldmlld01vZGUoKSA9PSAnbGFyZ2UnIH1cXHgyMj4gICAgICA8aWZyYW1lIGRhdGEtYmluZD1cXHgyMmJpbmRJZnJhbWU6ICRkYXRhXFx4MjI+PC9pZnJhbWU+ICAgIDwvZGl2PiAgPC9kaXY+ICA8ZGl2IGNsYXNzPVxceDIybW9cXHgyMiBpZD1cXHgyMm1vLWJvZHlcXHgyMj48L2Rpdj4gIDwhLS0gVE9ETyBSRU1PVkUgTUUgIDxkaXYgaWQ9XFx4MjJpbmNvbXBhdGlibGUtYnJvd3NlclxceDIyIHRpdGxlPVxceDIyVW5zdXBwb3J0ZWQgYnJvd3NlclxceDIyIHN0eWxlPVxceDIyZGlzcGxheTogbm9uZVxceDIyIGRhdGEtYmluZD1cXHgyMmF0dHI6IHsgdGl0bGU6ICRyb290LnQoJ1VzdXBwb3J0ZWQgYnJvd3NlcicpIH0sIGh0bWw6ICc8cD5Zb3VyIGJyb3dzZXIgaXMgbm90IHN1cHBvcnRlZC48L3A+PHA+VXNlIGEgZGlmZmVyZW50IGJyb3dzZXIgb3IgdHJ5IHVwZGFyaW5nIHlvdXIgYnJvd3Nlci48L3A+PHA+U3VwcG9ydGVkIGJyb3dzZXJzOiA8dWw+PGxpPkludGVybmV0IEV4cGxvcmVyICZndDs9IDEwPC9saT48bGk+R29vZ2xlIENocm9tZSAmZ3Q7PSAzMDwvbGk+PGxpPkFwcGxlIFNhZmFyaSAmZ3Q7PSA1PC9saT48bGk+TW96aWxsYSBGaXJlZml4ICZndDs9IDIwPC9saT48L3VsPjwvcD4nXFx4MjI+ICAgIFVuc3VwcG9ydGVkIGJyb3dzZXIgIDwvZGl2PiAgLS0+ICA8ZGl2IGlkPVxceDIyaW5jb21wYXRpYmxlLXRlbXBsYXRlXFx4MjIgdGl0bGU9XFx4MjJTYXZlZCBtb2RlbCBpcyBvYnNvbGV0ZVxceDIyIHN0eWxlPVxceDIyZGlzcGxheTogbm9uZVxceDIyIGRhdGEtYmluZD1cXHgyMmF0dHI6IHsgdGl0bGU6ICRyb290LnQoJ1NhdmVkIG1vZGVsIGlzIG9ic29sZXRlJykgfSwgaHRtbDogJHJvb3QudCgnPHA+VGhlIHNhdmVkIG1vZGVsIGhhcyBiZWVuIGNyZWF0ZWQgd2l0aCBhIHByZXZpb3VzLCBub24gY29tcGxldGVseSBjb21wYXRpYmxlIHZlcnNpb24sIG9mIHRoZSB0ZW1wbGF0ZTwvcD48cD5Tb21lIGNvbnRlbnQgb3Igc3R5bGUgaW4gdGhlIG1vZGVsIDxiPkNPVUxEIEJFIExPU1Q8L2I+IGlmIHlvdSB3aWxsIDxiPnNhdmU8L2I+PC9wPjxwPkNvbnRhY3QgdXMgZm9yIG1vcmUgaW5mb3JtYXRpb25zITwvcD4nKVxceDIyPiAgICBJbmNvbXBhdGlibGUgdGVtcGxhdGUgIDwvZGl2PiAgPGRpdiBpZD1cXHgyMmZha2UtaW1hZ2UtZWRpdG9yXFx4MjIgdGl0bGU9XFx4MjJGYWtlIGltYWdlIGVkaXRvclxceDIyIHN0eWxlPVxceDIyZGlzcGxheTogbm9uZVxceDIyIGRhdGEtYmluZD1cXHgyMmF0dHI6IHsgdGl0bGU6ICRyb290LnQoJ0Zha2UgaW1hZ2UgZWRpdG9yJykgfSwgaHRtbDogJHJvb3QudCgnPHA+RmFrZSBpbWFnZSBlZGl0b3I8L3A+JylcXHgyMj4gICAgPHA+RmFrZSBpbWFnZSBlZGl0b3I8L3A+ICA8L2Rpdj48L2Rpdj48IS0tIGtvIGlmOiAkcm9vdC5sb2dvUGF0aCAtLT48ZGl2IGlkPVxceDIybG9hZGluZ1xceDIyIGNsYXNzPVxceDIybG9hZGluZ1xceDIyIHN0eWxlPVxceDIyZGlzcGxheTogYmxvY2s7IHdpZHRoOiAzMDBweDsgdGV4dC1hbGlnbjogY2VudGVyOyBoZWlnaHQ6IDMycHg7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOjA7IGJvdHRvbTogMDsgbGVmdDogMDsgcmlnaHQ6IDA7ICBtYXJnaW46IGF1dG87XFx4MjIgZGF0YS1iaW5kPVxceDIyYXR0cjogeyBzdHlsZTogJ3Bvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiA1cHg7IGxlZnQ6IDZweDsgei1pbmRleDogMTUwOyd9LCBjc3M6IHsgbG9hZGluZzogZmFsc2UgfVxceDIyPiAgPGEgaHJlZj1cXHgyMi9cXHgyMiBkYXRhLWJpbmQ9XFx4MjJhdHRyOiB7IGhyZWY6ICRyb290LmxvZ29VcmwsIGFsdDogJHJvb3QubG9nb0FsdCB9XFx4MjI+PGltZyBkYXRhLWJpbmQ9XFx4MjJhdHRyOiB7IHNyYzogJHJvb3QubG9nb1BhdGggfVxceDIyIHdpZHRoPVxceDIyMzJcXHgyMiBoZWlnaHQ9XFx4MjIzMlxceDIyIGFsdD1cXHgyMm1vc2FpY29cXHgyMiBib3JkZXI9XFx4MjIwXFx4MjIgLz48L2E+ICA8ZGl2IHN0eWxlPVxceDIyb3BhY2l0eTogMFxceDIyIGRhdGEtYmluZD1cXHgyMnZpc2libGU6IGZhbHNlXFx4MjI+T3BwcHMuLi4gISE8L2Rpdj48L2Rpdj48IS0tIC9rbyAtLT5cIik7XG50ZW1wbGF0ZVN5c3RlbS5hZGRUZW1wbGF0ZShcInRvb2xib3hcIiwgXCI8ZGl2IGlkPVxceDIydG9vbHRhYnNcXHgyMiBjbGFzcz1cXHgyMnRhYnNfaG9yaXpvbnRhbCBidXR0b25fY29sb3JcXHgyMiBkYXRhLWJpbmQ9XFx4MjJ0YWJzOiB7IGFjdGl2ZTogJHJvb3Quc2VsZWN0ZWRUb29sIH1cXHgyMj4gIDx1bD4gICAgPGxpIGRhdGEtYmluZD1cXHgyMnRvb2x0aXBzOiB7fVxceDIyPjxhIHRpdGxlPVxceDIyQmxvY2tzIHJlYWR5IHRvIGJlIGFkZGVkIHRvIHRoZSB0ZW1wbGF0ZVxceDIyIGRhdGEtbG9jYWw9XFx4MjJ0cnVlXFx4MjIgaHJlZj1cXHgyMiN0b29sYmxvY2tzXFx4MjIgZGF0YS1iaW5kPVxceDIyYXR0cjogeyB0aXRsZTogJHJvb3QudCgnQmxvY2tzIHJlYWR5IHRvIGJlIGFkZGVkIHRvIHRoZSB0ZW1wbGF0ZScpIH1cXHgyMj48aSBjbGFzcz1cXHgyMmZhIGZhLWZ3IGZhLWN1YmVzXFx4MjI+PC9pPiA8c3BhbiBkYXRhLWJpbmQ9XFx4MjJodG1sOiAkcm9vdC50KCdCbG9ja3MnKVxceDIyPkJsb2Nrczwvc3Bhbj48L2E+PC9saT4gICAgPGxpIGRhdGEtYmluZD1cXHgyMnRvb2x0aXBzOiB7fVxceDIyPjxhIHRpdGxlPVxceDIyRWRpdCBjb250ZW50IG9wdGlvbnNcXHgyMiBocmVmPVxceDIyI3Rvb2xjb250ZW50c1xceDIyIGRhdGEtbG9jYWw9XFx4MjJ0cnVlXFx4MjIgZGF0YS1iaW5kPVxceDIyYXR0cjogeyB0aXRsZTogJHJvb3QudCgnRWRpdCBjb250ZW50IG9wdGlvbnMnKSB9XFx4MjI+PGkgY2xhc3M9XFx4MjJmYSBmYS1mdyBmYS1wZW5jaWxcXHgyMj48L2k+IDxzcGFuIGRhdGEtYmluZD1cXHgyMmh0bWw6ICRyb290LnQoJ0NvbnRlbnQnKVxceDIyPkNvbnRlbnQ8L3NwYW4+PC9hPjwvbGk+ICAgIDxsaSBkYXRhLWJpbmQ9XFx4MjJ0b29sdGlwczoge31cXHgyMj48YSB0aXRsZT1cXHgyMkVkaXQgc3R5bGUgb3B0aW9uc1xceDIyIGhyZWY9XFx4MjIjdG9vbHN0eWxlc1xceDIyIGRhdGEtbG9jYWw9XFx4MjJ0cnVlXFx4MjIgZGF0YS1iaW5kPVxceDIyYXR0cjogeyB0aXRsZTogJHJvb3QudCgnRWRpdCBzdHlsZSBvcHRpb25zJykgfVxceDIyPjxpIGNsYXNzPVxceDIyZmEgZmEtZncgZmEtcGFpbnQtYnJ1c2hcXHgyMj48L2k+IDxzcGFuIGRhdGEtYmluZD1cXHgyMmh0bWw6ICRyb290LnQoJ1N0eWxlJylcXHgyMj5TdHlsZTwvc3Bhbj48L2E+PC9saT4gIDwvdWw+ICA8ZGl2IGlkPVxceDIydG9vbGJsb2Nrc1xceDIyIGRhdGEtYmluZD1cXHgyMnNjcm9sbGFibGU6IHRydWVcXHgyMj4gICAgPGRpdiBjbGFzcz1cXHgyMmJsb2NrLWxpc3RcXHgyMiBkYXRhLWJpbmQ9XFx4MjJmb3JlYWNoOiBibG9ja0RlZnNcXHgyMiBzdHlsZT1cXHgyMnRleHQtYWxpZ246IGNlbnRlclxceDIyPiAgICAgIDxkaXYgY2xhc3M9XFx4MjJkcmFnZ2FibGUtaXRlbVxceDIyIGRhdGEtYmluZD1cXHgyMndpdGhQcm9wZXJ0aWVzOiB7IHRlbXBsYXRlTW9kZTogJ3Nob3cnIH1cXHgyMj4gICAgICAgIDxkaXYgY2xhc3M9XFx4MjJibG9ja1xceDIyIGRhdGEtYmluZD1cXHgyMmV4dGRyYWdnYWJsZTogeyBjb25uZWN0Q2xhc3M6ICdzb3J0YWJsZS1ibG9ja3MtZWRpdCcsIGRhdGE6ICRkYXRhLCBkcm9wQ29udGFpbmVyOiAnI21haW4td3lzaXd5Zy1hcmVhJywgZHJhZ2dpbmc6ICRyb290LmRyYWdnaW5nLCAnb3B0aW9ucyc6IHsgaGFuZGxlOiAnLmhhbmRsZScsIGRpc3RhbmNlOiAxMCwgJ2FwcGVuZFRvJzogJyNwYWdlJyB9IH0sIGNsaWNrOiAkcm9vdC5hZGRCbG9ja1xceDIyIHN0eWxlPVxceDIycG9zaXRpb246IHJlbGF0aXZlO1xceDIyPiAgICAgICAgICA8ZGl2IHRpdGxlPVxceDIyQ2xpY2sgb3IgZHJhZyB0byBhZGQgdGhpcyBibG9jayB0byB0aGUgdGVtcGxhdGVcXHgyMiBjbGFzcz1cXHgyMmhhbmRsZVxceDIyIGRhdGEtYmluZD1cXHgyMmF0dHI6IHsgdGl0bGU6ICRyb290LnQoJ0NsaWNrIG9yIGRyYWcgdG8gYWRkIHRoaXMgYmxvY2sgdG8gdGhlIHRlbXBsYXRlJykgfSwgdG9vbHRpcHM6IHt9XFx4MjI+PC9kaXY+ICAgICAgICAgIDxpbWcgZGF0YS1iaW5kPVxceDIyYXR0cjogeyBhbHQ6ICRyb290LnQoJ0Jsb2NrIF9fbmFtZV9fJywgeyBuYW1lOiBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHR5cGUpIH0pLCBzcmM6ICRyb290LnRlbXBsYXRlUGF0aCgnZWRyZXMvJytrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHR5cGUpKycucG5nJykgfVxceDIyIGFsdD1cXHgyMkJsb2NrIF9fbmFtZV9fXFx4MjIgLz4gICAgICAgIDwvZGl2PiAgICAgICAgPGEgaHJlZj1cXHgyMiNcXHgyMiBjbGFzcz1cXHgyMmFkZGJsb2NrYnV0dG9uXFx4MjIgZGF0YS1iaW5kPVxceDIyY2xpY2s6ICRyb290LmFkZEJsb2NrLCBidXR0b246IHsgbGFiZWw6ICRyb290LnQoJ0FkZCcpIH1cXHgyMj5BZGQ8L2E+ICAgICAgPC9kaXY+ICAgIDwvZGl2PiAgPC9kaXY+ICA8ZGl2IGlkPVxceDIydG9vbGNvbnRlbnRzXFx4MjIgZGF0YS1iaW5kPVxceDIyc2Nyb2xsYWJsZTogdHJ1ZVxceDIyPiAgICA8IS0tIGtvIGlmOiAkcm9vdC5zZWxlY3RlZEJsb2NrKCkgIT09IG51bGwgLS0+ICAgIDxkaXYgZGF0YS1iaW5kPVxceDIyYmxvY2s6ICRyb290LnNlbGVjdGVkQmxvY2tcXHgyMj48L2Rpdj4gICAgPCEtLSAva28gLS0+ICAgIDwhLS0ga28gaWY6ICRyb290LnNlbGVjdGVkQmxvY2soKSA9PSBudWxsIC0tPiAgICA8ZGl2IGNsYXNzPVxceDIybm9TZWxlY3RlZEJsb2NrXFx4MjIgZGF0YS1iaW5kPVxceDIydGV4dDogJHJvb3QudCgnQnkgY2xpY2tpbmcgb24gbWVzc2FnZSBwYXJ0cyB5b3Ugd2lsbCBzZWxlY3QgYSBibG9jayBhbmQgY29udGVudCBvcHRpb25zLCBpZiBhbnksIHdpbGwgc2hvdyBoZXJlJylcXHgyMj5CeSBjbGlja2luZyBvbiBtZXNzYWdlIHBhcnRzIHlvdSB3aWxsIHNlbGVjdCBhIGJsb2NrIGFuZCBjb250ZW50IG9wdGlvbnMsIGlmIGFueSwgd2lsbCBzaG93IGhlcmU8L2Rpdj4gICAgPCEtLSAva28gLS0+ICAgIDwhLS0ga28gYmxvY2s6IGNvbnRlbnQgLS0+PCEtLSAva28gLS0+ICA8L2Rpdj4gICAgPGRpdiBpZD1cXHgyMnRvb2xzdHlsZXNcXHgyMiBkYXRhLWJpbmQ9XFx4MjJzY3JvbGxhYmxlOiB0cnVlLCB3aXRoUHJvcGVydGllczogeyB0ZW1wbGF0ZU1vZGU6ICdzdHlsZXInIH1cXHgyMj4gICAgPCEtLSBrbyBpZjogdHlwZW9mICRyb290LmNvbnRlbnQoKS50aGVtZSA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mICRyb290LmNvbnRlbnQoKS50aGVtZSgpLnNjaGVtZSA9PT0gJ3VuZGVmaW5lZCcgfHwgJHJvb3QuY29udGVudCgpLnRoZW1lKCkuc2NoZW1lKCkgPT09ICdjdXN0b20nIC0tPiAgICAgIDwhLS0ga28gaWY6ICRyb290LnNlbGVjdGVkQmxvY2soKSAhPT0gbnVsbCAtLT4gICAgICA8ZGl2IGRhdGEtYmluZD1cXHgyMmJsb2NrOiAkcm9vdC5zZWxlY3RlZEJsb2NrLCBjc3M6IHsgd29ya0xvY2FsOiAkcm9vdC5zZWxlY3RlZEJsb2NrKCkuY3VzdG9tU3R5bGUsIHdvcmtHbG9iYWw6IHR5cGVvZiAkcm9vdC5zZWxlY3RlZEJsb2NrKCkuY3VzdG9tU3R5bGUgPT09ICd1bmRlZmluZWQnIHx8ICEkcm9vdC5zZWxlY3RlZEJsb2NrKCkuY3VzdG9tU3R5bGUoKSB9XFx4MjI+PC9kaXY+ICAgICAgPCEtLSAva28gLS0+ICAgICAgPCEtLSBrbyBpZjogJHJvb3Quc2VsZWN0ZWRCbG9jaygpID09IG51bGwgLS0+ICAgICAgPGRpdiBjbGFzcz1cXHgyMm5vU2VsZWN0ZWRCbG9ja1xceDIyIGRhdGEtYmluZD1cXHgyMnRleHQ6ICRyb290LnQoJ0J5IGNsaWNraW5nIG9uIG1lc3NhZ2UgcGFydHMgeW91IHdpbGwgc2VsZWN0IGEgYmxvY2sgYW5kIHN0eWxlIG9wdGlvbnMsIGlmIGF2YWlsYWJsZSwgd2lsbCBzaG93IGhlcmUnKVxceDIyPkJ5IGNsaWNraW5nIG9uIG1lc3NhZ2UgcGFydHMgeW91IHdpbGwgc2VsZWN0IGEgYmxvY2sgYW5kIHN0eWxlIG9wdGlvbnMsIGlmIGF2YWlsYWJsZSwgd2lsbCBzaG93IGhlcmU8L2Rpdj4gICAgICA8IS0tIC9rbyAtLT4gICAgICA8ZGl2IGNsYXNzPVxceDIyd29ya0dsb2JhbENvbnRlbnRcXHgyMj4gICAgICA8IS0tIGtvIGJsb2NrOiBjb250ZW50IC0tPjwhLS0gL2tvIC0tPiAgICAgIDwvZGl2PiAgICA8IS0tIC9rbyAtLT4gIDwvZGl2PjwvZGl2PiAgICAgICAgPGRpdiBpZD1cXHgyMnRvb2xpbWFnZXNcXHgyMiBjbGFzcz1cXHgyMnNsaWRlYmFyXFx4MjIgZGF0YS1iaW5kPVxceDIyc2Nyb2xsYWJsZTogdHJ1ZSwgY3NzOiB7IGhpZGRlbjogJHJvb3Quc2hvd0dhbGxlcnkoKSA9PT0gZmFsc2UgfVxceDIyPiAgPGRpdiBjbGFzcz1cXHgyMmNsb3NlXFx4MjIgZGF0YS1iaW5kPVxceDIyY2xpY2s6ICRyb290LnNob3dHYWxsZXJ5LmJpbmQoJGVsZW1lbnQsIGZhbHNlKTtcXHgyMj5YPC9kaXY+ICA8c3BhbiBjbGFzcz1cXHgyMnBhbmUtdGl0bGVcXHgyMiBkYXRhLWJpbmQ9XFx4MjJ0ZXh0OiAkcm9vdC50KCdHYWxsZXJ5OicpXFx4MjI+R2FsbGVyeTo8L3NwYW4+ICA8ZGl2IGRhdGEtZHJvcC1jb250ZW50PVxceDIyRHJvcCBoZXJlXFx4MjIgY2xhc3M9XFx4MjJpbWctZHJvcHpvbmUgcGFuZSB1cGxvYWR6b25lXFx4MjIgZGF0YS1iaW5kPVxceDIyYXR0cjogeyAnZGF0YS1kcm9wLWNvbnRlbnQnOiAkcm9vdC50KCdEcm9wIGhlcmUnKSB9LCBmdWRyb3BwYWJsZTogeyBhY3RpdmVDbGFzczogJ3VpLXN0YXRlLWhpZ2hsaWdodCcsIGhvdmVyQ2xhc3M6ICd1aS1zdGF0ZS1kcmFnaG92ZXInIH1cXHgyMj4gIDxkaXYgY2xhc3M9XFx4MjJtby11cGxvYWR6b25lXFx4MjIgc3R5bGU9XFx4MjJwb3NpdGlvbjogcmVsYXRpdmU7IHBhZGRpbmc6IDJlbTsgYm9yZGVyOiAycHggZG90dGVkICM4MDgwODBcXHgyMj4gICAgIDxpbnB1dCBjbGFzcz1cXHgyMmZpbGV1cGxvYWRcXHgyMiB0eXBlPVxceDIyZmlsZVxceDIyIG11bHRpcGxlIG5hbWU9XFx4MjJmaWxlc1tdXFx4MjIgZGF0YS1iaW5kPVxceDIyZmlsZXVwbG9hZDogeyBvbmVycm9yOiAkcm9vdC5ub3RpZmllci5lcnJvciwgb25maWxlOiAkcm9vdC5sb2FkSW1hZ2UgfVxceDIyIHN0eWxlPVxceDIyei1pbmRleDogMTA7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAwOyBsZWZ0OiAwOyByaWdodDogMDsgYm90dG9tOiAwOyBtaW4td2lkdGg6IDEwMCU7IG1pbi1oZWlnaHQ6IDEwMCU7IGZvbnQtemllOiA5OTlweDsgdGV4dC1hbGlnbjogcmlnaHQ7IGZpbHRlcjogYWxwaGEob3BhY2l0eT0wKTsgb3BhY2l0eTogMDsgb3V0bGluZTogbm9uZTsgY3Vyc29yOiBpbmhlcml0OyBkaXNwbGF5OiBibG9ja1xceDIyPiAgICAgPHNwYW4gZGF0YS1iaW5kPVxceDIydGV4dDogJHJvb3QudCgnQ2xpY2sgb3IgZHJhZyBmaWxlcyBoZXJlJylcXHgyMj5DbGljayBvciBkcmFnIGZpbGVzIGhlcmU8L3NwYW4+ICAgICA8ZGl2IGNsYXNzPVxceDIyd29ya3pvbmVcXHgyMiBzdHlsZT1cXHgyMnBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAwOyBsZWZ0OiAwOyByaWdodDogMDsgYm90dG9tOiAwOyBvdmVyZmxvdzogaGlkZGVuO1xceDIyPiAgICAgICA8ZGl2IGNsYXNzPVxceDIycHJvZ3Jlc3NcXHgyMiBzdHlsZT1cXHgyMm9wYWNpdHk6IC41OyB3aWR0aDogODAlOyBtYXJnaW4tbGVmdDogMTAlOyBwb3NpdGlvbjogYWJzb2x1dGU7IGJvdHRvbTogMzAlOyBoZWlnaHQ6IDIwcHg7IGJvcmRlcjogMnB4IHNvbGlkIGJsYWNrO1xceDIyPiAgICAgICAgIDxkaXYgY2xhc3M9XFx4MjJwcm9ncmVzcy1iYXIgcHJvZ3Jlc3MtYmFyLXN1Y2Nlc3NcXHgyMiBzdHlsZT1cXHgyMmhlaWdodDogMjBweDsgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7IFxceDIyPjwvZGl2PiAgICAgICA8L2Rpdj4gICAgIDwvZGl2PiAgPC9kaXY+ICA8L2Rpdj4gIDwhLS0ga28gaWY6ICRyb290LnNob3dHYWxsZXJ5KCkgLS0+ICA8ZGl2IGlkPVxceDIydG9vbGltYWdlc3RhYlxceDIyIGNsYXNzPVxceDIydGFic19ob3Jpem9udGFsXFx4MjIgZGF0YS1iaW5kPVxceDIydGFiczogeyBhY3RpdmU6ICRyb290LnNlbGVjdGVkSW1hZ2VUYWIgfVxceDIyPiAgICA8dWw+ICAgICAgPGxpIGRhdGEtYmluZD1cXHgyMnRvb2x0aXBzOiB7fVxceDIyPjxhIHRpdGxlPVxceDIyU2Vzc2lvbiBpbWFnZXNcXHgyMiBkYXRhLWxvY2FsPVxceDIydHJ1ZVxceDIyIGhyZWY9XFx4MjIjdG9vbGltYWdlc3JlY2VudFxceDIyIGRhdGEtYmluZD1cXHgyMmF0dHI6IHsgdGl0bGU6ICRyb290LnQoJ1Nlc3Npb24gaW1hZ2VzJykgfSwgdGV4dDogJHJvb3QudCgnUmVjZW50cycpXFx4MjI+UmVjZW50czwvYT48L2xpPiAgICAgIDxsaSBkYXRhLWJpbmQ9XFx4MjJ0b29sdGlwczoge31cXHgyMj48YSB0aXRsZT1cXHgyMlJlbW90ZSBnYWxsZXJ5XFx4MjIgZGF0YS1sb2NhbD1cXHgyMnRydWVcXHgyMiBocmVmPVxceDIyI3Rvb2xpbWFnZXNnYWxsZXJ5XFx4MjIgZGF0YS1iaW5kPVxceDIyYXR0cjogeyB0aXRsZTogJHJvb3QudCgnUmVtb3RlIGdhbGxlcnknKSB9LCB0ZXh0OiAkcm9vdC50KCdHYWxsZXJ5JylcXHgyMj5HYWxsZXJ5PC9hPjwvbGk+ICAgIDwvdWw+ICAgIDxkaXYgaWQ9XFx4MjJ0b29saW1hZ2VzcmVjZW50XFx4MjI+ICAgICAgPCEtLSBrbyBpZjogZ2FsbGVyeVJlY2VudCgpLmxlbmd0aCA9PSAwIC0tPjxkaXYgY2xhc3M9XFx4MjJnYWxsZXJ5RW1wdHlcXHgyMiBkYXRhLWJpbmQ9XFx4MjJ0ZXh0OiAkcm9vdC50KCdObyBpbWFnZXMgdXBsb2FkZWQsIHlldCcpXFx4MjI+Tm8gaW1hZ2VzIHVwbG9hZGVkLCB5ZXQ8L2Rpdj48IS0tIC9rbyAtLT4gICAgICA8IS0tIGtvIHRlbXBsYXRlOiB7bmFtZTogJ2dhbGxlcnktaW1hZ2VzJywgZGF0YTogeyBpdGVtczogZ2FsbGVyeVJlY2VudCB9IH0gLS0+IyByZWNlbnQgZ2FsbGVyeSAjPCEtLSAva28gLS0+ICAgIDwvZGl2PiAgICA8ZGl2IGlkPVxceDIydG9vbGltYWdlc2dhbGxlcnlcXHgyMiBzdHlsZT1cXHgyMnRleHQtYWxpZ246IGNlbnRlclxceDIyPiAgICA8IS0tIGtvIGlmOiAkcm9vdC5nYWxsZXJ5TG9hZGVkKCkgPT09IGZhbHNlIC0tPjxhIGNsYXNzPVxceDIybG9hZGJ1dHRvblxceDIyIHRpdGxlPVxceDIyU2hvdyBpbWFnZXMgZnJvbSB0aGUgZ2FsbGVyeVxceDIyIGhyZWY9XFx4MjIjXFx4MjIgZGF0YS1iaW5kPVxceDIyYXR0cjogeyB0aXRsZTogJHJvb3QudCgnU2hvdyBpbWFnZXMgZnJvbSB0aGUgZ2FsbGVyeScpIH0sIGNsaWNrOiAkcm9vdC5sb2FkR2FsbGVyeSwgYnV0dG9uOiB7IGRpc2FibGVkOiAkcm9vdC5nYWxsZXJ5TG9hZGVkLCBpY29uczogeyBwcmltYXJ5OiAnZmEgZmEtZncgZmEtcGljdHVyZS1vJyB9LCBsYWJlbDogJHJvb3QuZ2FsbGVyeUxvYWRlZCgpID09ICdsb2FkaW5nJyA/ICRyb290LnQoJ0xvYWRpbmcuLi4nKSA6ICRyb290LnQoJ0xvYWQgZ2FsbGVyeScpLCB0ZXh0OiB0cnVlIH1cXHgyMj4jIGxvYWQgZ2FsbHkgIzwvYT48IS0tIC9rbyAtLT4gICAgPCEtLSBrbyBpZjogJHJvb3QuZ2FsbGVyeUxvYWRlZCgpID09PSAnbG9hZGluZycgLS0+PGRpdiBjbGFzcz1cXHgyMmdhbGxlcnlFbXB0eVxceDIyIGRhdGEtYmluZD1cXHgyMnRleHQ6ICRyb290LnQoJ0xvYWRpbmcgZ2FsbGVyeS4uLicpXFx4MjI+TG9hZGluZyBnYWxsZXJ5Li4uPC9kaXY+PCEtLSAva28gLS0+ICAgIDwhLS0ga28gaWY6ICRyb290LmdhbGxlcnlMb2FkZWQoKSA9PT0gMCAtLT48ZGl2IGNsYXNzPVxceDIyZ2FsbGVyeUVtcHR5XFx4MjIgZGF0YS1iaW5kPVxceDIydGV4dDogJHJvb3QudCgnVGhlIGdhbGxlcnkgaXMgZW1wdHknKVxceDIyPlRoZSBnYWxsZXJ5IGlzIGVtcHR5PC9kaXY+PCEtLSAva28gLS0+ICAgIDwhLS0ga28gdGVtcGxhdGU6IHtuYW1lOiAnZ2FsbGVyeS1pbWFnZXMnLCBkYXRhOiB7IGl0ZW1zOiBnYWxsZXJ5UmVtb3RlIH0gfSAtLT4jIHJlbW90ZSBnYWxsZXJ5ICM8IS0tIC9rbyAtLT4gICAgPC9kaXY+ICA8L2Rpdj4gIDwhLS0gL2tvIC0tPjwvZGl2PjxkaXYgaWQ9XFx4MjJ0b29sZGVidWdcXHgyMiBjbGFzcz1cXHgyMnNsaWRlYmFyXFx4MjIgZGF0YS1iaW5kPVxceDIyY3NzOiB7IGhpZGRlbjogJHJvb3QuZGVidWcoKSA9PT0gZmFsc2UgfVxceDIyPiAgPGRpdiBjbGFzcz1cXHgyMmNsb3NlXFx4MjIgZGF0YS1iaW5kPVxceDIyY2xpY2s6ICRyb290LmRlYnVnLmJpbmQoJGVsZW1lbnQsIGZhbHNlKTtcXHgyMj5YPC9kaXY+ICAgIDwhLS0ga28gaWY6ICRyb290LmRlYnVnIC0tPiAgQ29udGVudDogIDxwcmUgZGF0YS1iaW5kPSd0ZXh0OiBrby50b0pTT04oY29udGVudCwgbnVsbCwgMiknIHN0eWxlPVxceDIyb3ZlcmZsb3c6IGF1dG87IGhlaWdodDogMjAlXFx4MjI+PC9wcmU+ICBCbG9ja0RlZnM6ICA8cHJlIGRhdGEtYmluZD0ndGV4dDoga28udG9KU09OKGJsb2NrRGVmcywgbnVsbCwgMiknIHN0eWxlPVxceDIyb3ZlcmZsb3c6IGF1dG87IGhlaWdodDogMjAlXFx4MjI+PC9wcmU+ICA8IS0tIC9rbyAtLT4gIDxhIGhyZWY9XFx4MjIjXFx4MjIgZGF0YS1iaW5kPVxceDIyY2xpY2s6ICRyb290LmV4cG9ydEhUTUx0b1RleHRhcmVhLmJpbmQoJGVsZW1lbnQsICcjb3V0cHV0aHRtbCcpOyBjbGlja0J1YmJsZTogZmFsc2UsIGJ1dHRvbjogeyB0ZXh0OiB0cnVlLCBsYWJlbDonR2VuZXJhdGUnIH1cXHgyMj5PdXRwdXQ8L2E+ICA8YSBocmVmPVxceDIyI1xceDIyIGRhdGEtYmluZD1cXHgyMmNsaWNrOiAkcm9vdC5leHBvcnRKU09OdG9UZXh0YXJlYS5iaW5kKCRlbGVtZW50LCAnI291dHB1dGh0bWwnKTsgY2xpY2tCdWJibGU6IGZhbHNlLCBidXR0b246IHsgdGV4dDogdHJ1ZSwgbGFiZWw6J0V4cG9ydCcgfVxceDIyPkV4cG9ydDwvYT4gIDxhIGhyZWY9XFx4MjIjXFx4MjIgZGF0YS1iaW5kPVxceDIyY2xpY2s6ICRyb290LmltcG9ydEpTT05mcm9tVGV4dGFyZWEuYmluZCgkZWxlbWVudCwgJyNvdXRwdXRodG1sJyk7IGNsaWNrQnViYmxlOiBmYWxzZSwgYnV0dG9uOiB7IHRleHQ6IHRydWUsIGxhYmVsOidJbXBvcnQnIH1cXHgyMj5JbXBvcnQ8L2E+ICA8dGV4dGFyZWEgaWQ9XFx4MjJvdXRwdXRodG1sXFx4MjIgcm93cz1cXHgyMjEwXFx4MjIgc3R5bGU9XFx4MjJ3aWR0aDogMTAwJTtcXHgyMj48L3RleHRhcmVhPjwvZGl2PjxkaXYgaWQ9XFx4MjJ0b29sdGhlbWVcXHgyMiBjbGFzcz1cXHgyMnVpLXdpZGdldCBzbGlkZWJhclxceDIyIGRhdGEtYmluZD1cXHgyMmNzczogeyBoaWRkZW46ICRyb290LnNob3dUaGVtZSgpID09PSBmYWxzZSB9XFx4MjI+ICA8ZGl2IGNsYXNzPVxceDIyY2xvc2VcXHgyMiBkYXRhLWJpbmQ9XFx4MjJjbGljazogJHJvb3Quc2hvd1RoZW1lLmJpbmQoJGVsZW1lbnQsIGZhbHNlKTtcXHgyMj5YPC9kaXY+ICAgIDwhLS0ga28gd2l0aFByb3BlcnRpZXM6IHsgdGVtcGxhdGVNb2RlOiAnc3R5bGVyJyB9IC0tPiAgICA8IS0tIGtvIGlmOiAkcm9vdC5zaG93VGhlbWUgLS0+ICAgICAgPCEtLSBrbyBibG9jazogJHJvb3QuY29udGVudCgpLnRoZW1lIC0tPjwhLS0gL2tvIC0tPiAgICA8IS0tIC9rbyAtLT4gIDwhLS0gL2tvIC0tPjwvZGl2PlwiKTtcbn0pO1xuIiwiLy8gaHR0cDovL3dpa2kuY29tbW9uanMub3JnL3dpa2kvVW5pdF9UZXN0aW5nLzEuMFxuLy9cbi8vIFRISVMgSVMgTk9UIFRFU1RFRCBOT1IgTElLRUxZIFRPIFdPUksgT1VUU0lERSBWOCFcbi8vXG4vLyBPcmlnaW5hbGx5IGZyb20gbmFyd2hhbC5qcyAoaHR0cDovL25hcndoYWxqcy5vcmcpXG4vLyBDb3B5cmlnaHQgKGMpIDIwMDkgVGhvbWFzIFJvYmluc29uIDwyODBub3J0aC5jb20+XG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgJ1NvZnR3YXJlJyksIHRvXG4vLyBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZVxuLy8gcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yXG4vLyBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICdBUyBJUycsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTlxuLy8gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTlxuLy8gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIHdoZW4gdXNlZCBpbiBub2RlLCB0aGlzIHdpbGwgYWN0dWFsbHkgbG9hZCB0aGUgdXRpbCBtb2R1bGUgd2UgZGVwZW5kIG9uXG4vLyB2ZXJzdXMgbG9hZGluZyB0aGUgYnVpbHRpbiB1dGlsIG1vZHVsZSBhcyBoYXBwZW5zIG90aGVyd2lzZVxuLy8gdGhpcyBpcyBhIGJ1ZyBpbiBub2RlIG1vZHVsZSBsb2FkaW5nIGFzIGZhciBhcyBJIGFtIGNvbmNlcm5lZFxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsLycpO1xuXG52YXIgcFNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8vIDEuIFRoZSBhc3NlcnQgbW9kdWxlIHByb3ZpZGVzIGZ1bmN0aW9ucyB0aGF0IHRocm93XG4vLyBBc3NlcnRpb25FcnJvcidzIHdoZW4gcGFydGljdWxhciBjb25kaXRpb25zIGFyZSBub3QgbWV0LiBUaGVcbi8vIGFzc2VydCBtb2R1bGUgbXVzdCBjb25mb3JtIHRvIHRoZSBmb2xsb3dpbmcgaW50ZXJmYWNlLlxuXG52YXIgYXNzZXJ0ID0gbW9kdWxlLmV4cG9ydHMgPSBvaztcblxuLy8gMi4gVGhlIEFzc2VydGlvbkVycm9yIGlzIGRlZmluZWQgaW4gYXNzZXJ0LlxuLy8gbmV3IGFzc2VydC5Bc3NlcnRpb25FcnJvcih7IG1lc3NhZ2U6IG1lc3NhZ2UsXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0dWFsOiBhY3R1YWwsXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkIH0pXG5cbmFzc2VydC5Bc3NlcnRpb25FcnJvciA9IGZ1bmN0aW9uIEFzc2VydGlvbkVycm9yKG9wdGlvbnMpIHtcbiAgdGhpcy5uYW1lID0gJ0Fzc2VydGlvbkVycm9yJztcbiAgdGhpcy5hY3R1YWwgPSBvcHRpb25zLmFjdHVhbDtcbiAgdGhpcy5leHBlY3RlZCA9IG9wdGlvbnMuZXhwZWN0ZWQ7XG4gIHRoaXMub3BlcmF0b3IgPSBvcHRpb25zLm9wZXJhdG9yO1xuICBpZiAob3B0aW9ucy5tZXNzYWdlKSB7XG4gICAgdGhpcy5tZXNzYWdlID0gb3B0aW9ucy5tZXNzYWdlO1xuICAgIHRoaXMuZ2VuZXJhdGVkTWVzc2FnZSA9IGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHRoaXMubWVzc2FnZSA9IGdldE1lc3NhZ2UodGhpcyk7XG4gICAgdGhpcy5nZW5lcmF0ZWRNZXNzYWdlID0gdHJ1ZTtcbiAgfVxuICB2YXIgc3RhY2tTdGFydEZ1bmN0aW9uID0gb3B0aW9ucy5zdGFja1N0YXJ0RnVuY3Rpb24gfHwgZmFpbDtcblxuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBzdGFja1N0YXJ0RnVuY3Rpb24pO1xuICB9XG4gIGVsc2Uge1xuICAgIC8vIG5vbiB2OCBicm93c2VycyBzbyB3ZSBjYW4gaGF2ZSBhIHN0YWNrdHJhY2VcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCk7XG4gICAgaWYgKGVyci5zdGFjaykge1xuICAgICAgdmFyIG91dCA9IGVyci5zdGFjaztcblxuICAgICAgLy8gdHJ5IHRvIHN0cmlwIHVzZWxlc3MgZnJhbWVzXG4gICAgICB2YXIgZm5fbmFtZSA9IHN0YWNrU3RhcnRGdW5jdGlvbi5uYW1lO1xuICAgICAgdmFyIGlkeCA9IG91dC5pbmRleE9mKCdcXG4nICsgZm5fbmFtZSk7XG4gICAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgICAgLy8gb25jZSB3ZSBoYXZlIGxvY2F0ZWQgdGhlIGZ1bmN0aW9uIGZyYW1lXG4gICAgICAgIC8vIHdlIG5lZWQgdG8gc3RyaXAgb3V0IGV2ZXJ5dGhpbmcgYmVmb3JlIGl0IChhbmQgaXRzIGxpbmUpXG4gICAgICAgIHZhciBuZXh0X2xpbmUgPSBvdXQuaW5kZXhPZignXFxuJywgaWR4ICsgMSk7XG4gICAgICAgIG91dCA9IG91dC5zdWJzdHJpbmcobmV4dF9saW5lICsgMSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc3RhY2sgPSBvdXQ7XG4gICAgfVxuICB9XG59O1xuXG4vLyBhc3NlcnQuQXNzZXJ0aW9uRXJyb3IgaW5zdGFuY2VvZiBFcnJvclxudXRpbC5pbmhlcml0cyhhc3NlcnQuQXNzZXJ0aW9uRXJyb3IsIEVycm9yKTtcblxuZnVuY3Rpb24gcmVwbGFjZXIoa2V5LCB2YWx1ZSkge1xuICBpZiAodXRpbC5pc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gJycgKyB2YWx1ZTtcbiAgfVxuICBpZiAodXRpbC5pc051bWJlcih2YWx1ZSkgJiYgIWlzRmluaXRlKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICB9XG4gIGlmICh1dGlsLmlzRnVuY3Rpb24odmFsdWUpIHx8IHV0aWwuaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiB0cnVuY2F0ZShzLCBuKSB7XG4gIGlmICh1dGlsLmlzU3RyaW5nKHMpKSB7XG4gICAgcmV0dXJuIHMubGVuZ3RoIDwgbiA/IHMgOiBzLnNsaWNlKDAsIG4pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldE1lc3NhZ2Uoc2VsZikge1xuICByZXR1cm4gdHJ1bmNhdGUoSlNPTi5zdHJpbmdpZnkoc2VsZi5hY3R1YWwsIHJlcGxhY2VyKSwgMTI4KSArICcgJyArXG4gICAgICAgICBzZWxmLm9wZXJhdG9yICsgJyAnICtcbiAgICAgICAgIHRydW5jYXRlKEpTT04uc3RyaW5naWZ5KHNlbGYuZXhwZWN0ZWQsIHJlcGxhY2VyKSwgMTI4KTtcbn1cblxuLy8gQXQgcHJlc2VudCBvbmx5IHRoZSB0aHJlZSBrZXlzIG1lbnRpb25lZCBhYm92ZSBhcmUgdXNlZCBhbmRcbi8vIHVuZGVyc3Rvb2QgYnkgdGhlIHNwZWMuIEltcGxlbWVudGF0aW9ucyBvciBzdWIgbW9kdWxlcyBjYW4gcGFzc1xuLy8gb3RoZXIga2V5cyB0byB0aGUgQXNzZXJ0aW9uRXJyb3IncyBjb25zdHJ1Y3RvciAtIHRoZXkgd2lsbCBiZVxuLy8gaWdub3JlZC5cblxuLy8gMy4gQWxsIG9mIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb25zIG11c3QgdGhyb3cgYW4gQXNzZXJ0aW9uRXJyb3Jcbi8vIHdoZW4gYSBjb3JyZXNwb25kaW5nIGNvbmRpdGlvbiBpcyBub3QgbWV0LCB3aXRoIGEgbWVzc2FnZSB0aGF0XG4vLyBtYXkgYmUgdW5kZWZpbmVkIGlmIG5vdCBwcm92aWRlZC4gIEFsbCBhc3NlcnRpb24gbWV0aG9kcyBwcm92aWRlXG4vLyBib3RoIHRoZSBhY3R1YWwgYW5kIGV4cGVjdGVkIHZhbHVlcyB0byB0aGUgYXNzZXJ0aW9uIGVycm9yIGZvclxuLy8gZGlzcGxheSBwdXJwb3Nlcy5cblxuZnVuY3Rpb24gZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCBvcGVyYXRvciwgc3RhY2tTdGFydEZ1bmN0aW9uKSB7XG4gIHRocm93IG5ldyBhc3NlcnQuQXNzZXJ0aW9uRXJyb3Ioe1xuICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgIG9wZXJhdG9yOiBvcGVyYXRvcixcbiAgICBzdGFja1N0YXJ0RnVuY3Rpb246IHN0YWNrU3RhcnRGdW5jdGlvblxuICB9KTtcbn1cblxuLy8gRVhURU5TSU9OISBhbGxvd3MgZm9yIHdlbGwgYmVoYXZlZCBlcnJvcnMgZGVmaW5lZCBlbHNld2hlcmUuXG5hc3NlcnQuZmFpbCA9IGZhaWw7XG5cbi8vIDQuIFB1cmUgYXNzZXJ0aW9uIHRlc3RzIHdoZXRoZXIgYSB2YWx1ZSBpcyB0cnV0aHksIGFzIGRldGVybWluZWRcbi8vIGJ5ICEhZ3VhcmQuXG4vLyBhc3NlcnQub2soZ3VhcmQsIG1lc3NhZ2Vfb3B0KTtcbi8vIFRoaXMgc3RhdGVtZW50IGlzIGVxdWl2YWxlbnQgdG8gYXNzZXJ0LmVxdWFsKHRydWUsICEhZ3VhcmQsXG4vLyBtZXNzYWdlX29wdCk7LiBUbyB0ZXN0IHN0cmljdGx5IGZvciB0aGUgdmFsdWUgdHJ1ZSwgdXNlXG4vLyBhc3NlcnQuc3RyaWN0RXF1YWwodHJ1ZSwgZ3VhcmQsIG1lc3NhZ2Vfb3B0KTsuXG5cbmZ1bmN0aW9uIG9rKHZhbHVlLCBtZXNzYWdlKSB7XG4gIGlmICghdmFsdWUpIGZhaWwodmFsdWUsIHRydWUsIG1lc3NhZ2UsICc9PScsIGFzc2VydC5vayk7XG59XG5hc3NlcnQub2sgPSBvaztcblxuLy8gNS4gVGhlIGVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBzaGFsbG93LCBjb2VyY2l2ZSBlcXVhbGl0eSB3aXRoXG4vLyA9PS5cbi8vIGFzc2VydC5lcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5lcXVhbCA9IGZ1bmN0aW9uIGVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFjdHVhbCAhPSBleHBlY3RlZCkgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnPT0nLCBhc3NlcnQuZXF1YWwpO1xufTtcblxuLy8gNi4gVGhlIG5vbi1lcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgZm9yIHdoZXRoZXIgdHdvIG9iamVjdHMgYXJlIG5vdCBlcXVhbFxuLy8gd2l0aCAhPSBhc3NlcnQubm90RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQubm90RXF1YWwgPSBmdW5jdGlvbiBub3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhY3R1YWwgPT0gZXhwZWN0ZWQpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICchPScsIGFzc2VydC5ub3RFcXVhbCk7XG4gIH1cbn07XG5cbi8vIDcuIFRoZSBlcXVpdmFsZW5jZSBhc3NlcnRpb24gdGVzdHMgYSBkZWVwIGVxdWFsaXR5IHJlbGF0aW9uLlxuLy8gYXNzZXJ0LmRlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5kZWVwRXF1YWwgPSBmdW5jdGlvbiBkZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoIV9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCkpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICdkZWVwRXF1YWwnLCBhc3NlcnQuZGVlcEVxdWFsKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gX2RlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkKSB7XG4gIC8vIDcuMS4gQWxsIGlkZW50aWNhbCB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGFzIGRldGVybWluZWQgYnkgPT09LlxuICBpZiAoYWN0dWFsID09PSBleHBlY3RlZCkge1xuICAgIHJldHVybiB0cnVlO1xuXG4gIH0gZWxzZSBpZiAodXRpbC5pc0J1ZmZlcihhY3R1YWwpICYmIHV0aWwuaXNCdWZmZXIoZXhwZWN0ZWQpKSB7XG4gICAgaWYgKGFjdHVhbC5sZW5ndGggIT0gZXhwZWN0ZWQubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFjdHVhbC5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGFjdHVhbFtpXSAhPT0gZXhwZWN0ZWRbaV0pIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcblxuICAvLyA3LjIuIElmIHRoZSBleHBlY3RlZCB2YWx1ZSBpcyBhIERhdGUgb2JqZWN0LCB0aGUgYWN0dWFsIHZhbHVlIGlzXG4gIC8vIGVxdWl2YWxlbnQgaWYgaXQgaXMgYWxzbyBhIERhdGUgb2JqZWN0IHRoYXQgcmVmZXJzIHRvIHRoZSBzYW1lIHRpbWUuXG4gIH0gZWxzZSBpZiAodXRpbC5pc0RhdGUoYWN0dWFsKSAmJiB1dGlsLmlzRGF0ZShleHBlY3RlZCkpIHtcbiAgICByZXR1cm4gYWN0dWFsLmdldFRpbWUoKSA9PT0gZXhwZWN0ZWQuZ2V0VGltZSgpO1xuXG4gIC8vIDcuMyBJZiB0aGUgZXhwZWN0ZWQgdmFsdWUgaXMgYSBSZWdFeHAgb2JqZWN0LCB0aGUgYWN0dWFsIHZhbHVlIGlzXG4gIC8vIGVxdWl2YWxlbnQgaWYgaXQgaXMgYWxzbyBhIFJlZ0V4cCBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzb3VyY2UgYW5kXG4gIC8vIHByb3BlcnRpZXMgKGBnbG9iYWxgLCBgbXVsdGlsaW5lYCwgYGxhc3RJbmRleGAsIGBpZ25vcmVDYXNlYCkuXG4gIH0gZWxzZSBpZiAodXRpbC5pc1JlZ0V4cChhY3R1YWwpICYmIHV0aWwuaXNSZWdFeHAoZXhwZWN0ZWQpKSB7XG4gICAgcmV0dXJuIGFjdHVhbC5zb3VyY2UgPT09IGV4cGVjdGVkLnNvdXJjZSAmJlxuICAgICAgICAgICBhY3R1YWwuZ2xvYmFsID09PSBleHBlY3RlZC5nbG9iYWwgJiZcbiAgICAgICAgICAgYWN0dWFsLm11bHRpbGluZSA9PT0gZXhwZWN0ZWQubXVsdGlsaW5lICYmXG4gICAgICAgICAgIGFjdHVhbC5sYXN0SW5kZXggPT09IGV4cGVjdGVkLmxhc3RJbmRleCAmJlxuICAgICAgICAgICBhY3R1YWwuaWdub3JlQ2FzZSA9PT0gZXhwZWN0ZWQuaWdub3JlQ2FzZTtcblxuICAvLyA3LjQuIE90aGVyIHBhaXJzIHRoYXQgZG8gbm90IGJvdGggcGFzcyB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcsXG4gIC8vIGVxdWl2YWxlbmNlIGlzIGRldGVybWluZWQgYnkgPT0uXG4gIH0gZWxzZSBpZiAoIXV0aWwuaXNPYmplY3QoYWN0dWFsKSAmJiAhdXRpbC5pc09iamVjdChleHBlY3RlZCkpIHtcbiAgICByZXR1cm4gYWN0dWFsID09IGV4cGVjdGVkO1xuXG4gIC8vIDcuNSBGb3IgYWxsIG90aGVyIE9iamVjdCBwYWlycywgaW5jbHVkaW5nIEFycmF5IG9iamVjdHMsIGVxdWl2YWxlbmNlIGlzXG4gIC8vIGRldGVybWluZWQgYnkgaGF2aW5nIHRoZSBzYW1lIG51bWJlciBvZiBvd25lZCBwcm9wZXJ0aWVzIChhcyB2ZXJpZmllZFxuICAvLyB3aXRoIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCksIHRoZSBzYW1lIHNldCBvZiBrZXlzXG4gIC8vIChhbHRob3VnaCBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgb3JkZXIpLCBlcXVpdmFsZW50IHZhbHVlcyBmb3IgZXZlcnlcbiAgLy8gY29ycmVzcG9uZGluZyBrZXksIGFuZCBhbiBpZGVudGljYWwgJ3Byb3RvdHlwZScgcHJvcGVydHkuIE5vdGU6IHRoaXNcbiAgLy8gYWNjb3VudHMgZm9yIGJvdGggbmFtZWQgYW5kIGluZGV4ZWQgcHJvcGVydGllcyBvbiBBcnJheXMuXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG9iakVxdWl2KGFjdHVhbCwgZXhwZWN0ZWQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzQXJndW1lbnRzKG9iamVjdCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdCkgPT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG59XG5cbmZ1bmN0aW9uIG9iakVxdWl2KGEsIGIpIHtcbiAgaWYgKHV0aWwuaXNOdWxsT3JVbmRlZmluZWQoYSkgfHwgdXRpbC5pc051bGxPclVuZGVmaW5lZChiKSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIC8vIGFuIGlkZW50aWNhbCAncHJvdG90eXBlJyBwcm9wZXJ0eS5cbiAgaWYgKGEucHJvdG90eXBlICE9PSBiLnByb3RvdHlwZSkgcmV0dXJuIGZhbHNlO1xuICAvLyBpZiBvbmUgaXMgYSBwcmltaXRpdmUsIHRoZSBvdGhlciBtdXN0IGJlIHNhbWVcbiAgaWYgKHV0aWwuaXNQcmltaXRpdmUoYSkgfHwgdXRpbC5pc1ByaW1pdGl2ZShiKSkge1xuICAgIHJldHVybiBhID09PSBiO1xuICB9XG4gIHZhciBhSXNBcmdzID0gaXNBcmd1bWVudHMoYSksXG4gICAgICBiSXNBcmdzID0gaXNBcmd1bWVudHMoYik7XG4gIGlmICgoYUlzQXJncyAmJiAhYklzQXJncykgfHwgKCFhSXNBcmdzICYmIGJJc0FyZ3MpKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaWYgKGFJc0FyZ3MpIHtcbiAgICBhID0gcFNsaWNlLmNhbGwoYSk7XG4gICAgYiA9IHBTbGljZS5jYWxsKGIpO1xuICAgIHJldHVybiBfZGVlcEVxdWFsKGEsIGIpO1xuICB9XG4gIHZhciBrYSA9IG9iamVjdEtleXMoYSksXG4gICAgICBrYiA9IG9iamVjdEtleXMoYiksXG4gICAgICBrZXksIGk7XG4gIC8vIGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoa2V5cyBpbmNvcnBvcmF0ZXNcbiAgLy8gaGFzT3duUHJvcGVydHkpXG4gIGlmIChrYS5sZW5ndGggIT0ga2IubGVuZ3RoKVxuICAgIHJldHVybiBmYWxzZTtcbiAgLy90aGUgc2FtZSBzZXQgb2Yga2V5cyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSxcbiAga2Euc29ydCgpO1xuICBrYi5zb3J0KCk7XG4gIC8vfn5+Y2hlYXAga2V5IHRlc3RcbiAgZm9yIChpID0ga2EubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoa2FbaV0gIT0ga2JbaV0pXG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy9lcXVpdmFsZW50IHZhbHVlcyBmb3IgZXZlcnkgY29ycmVzcG9uZGluZyBrZXksIGFuZFxuICAvL35+fnBvc3NpYmx5IGV4cGVuc2l2ZSBkZWVwIHRlc3RcbiAgZm9yIChpID0ga2EubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBrZXkgPSBrYVtpXTtcbiAgICBpZiAoIV9kZWVwRXF1YWwoYVtrZXldLCBiW2tleV0pKSByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8vIDguIFRoZSBub24tZXF1aXZhbGVuY2UgYXNzZXJ0aW9uIHRlc3RzIGZvciBhbnkgZGVlcCBpbmVxdWFsaXR5LlxuLy8gYXNzZXJ0Lm5vdERlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5ub3REZWVwRXF1YWwgPSBmdW5jdGlvbiBub3REZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoX2RlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkKSkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJ25vdERlZXBFcXVhbCcsIGFzc2VydC5ub3REZWVwRXF1YWwpO1xuICB9XG59O1xuXG4vLyA5LiBUaGUgc3RyaWN0IGVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBzdHJpY3QgZXF1YWxpdHksIGFzIGRldGVybWluZWQgYnkgPT09LlxuLy8gYXNzZXJ0LnN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcblxuYXNzZXJ0LnN0cmljdEVxdWFsID0gZnVuY3Rpb24gc3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYWN0dWFsICE9PSBleHBlY3RlZCkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJz09PScsIGFzc2VydC5zdHJpY3RFcXVhbCk7XG4gIH1cbn07XG5cbi8vIDEwLiBUaGUgc3RyaWN0IG5vbi1lcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgZm9yIHN0cmljdCBpbmVxdWFsaXR5LCBhc1xuLy8gZGV0ZXJtaW5lZCBieSAhPT0uICBhc3NlcnQubm90U3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQubm90U3RyaWN0RXF1YWwgPSBmdW5jdGlvbiBub3RTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhY3R1YWwgPT09IGV4cGVjdGVkKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnIT09JywgYXNzZXJ0Lm5vdFN0cmljdEVxdWFsKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZXhwZWN0ZWRFeGNlcHRpb24oYWN0dWFsLCBleHBlY3RlZCkge1xuICBpZiAoIWFjdHVhbCB8fCAhZXhwZWN0ZWQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGV4cGVjdGVkKSA9PSAnW29iamVjdCBSZWdFeHBdJykge1xuICAgIHJldHVybiBleHBlY3RlZC50ZXN0KGFjdHVhbCk7XG4gIH0gZWxzZSBpZiAoYWN0dWFsIGluc3RhbmNlb2YgZXhwZWN0ZWQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChleHBlY3RlZC5jYWxsKHt9LCBhY3R1YWwpID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIF90aHJvd3Moc2hvdWxkVGhyb3csIGJsb2NrLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICB2YXIgYWN0dWFsO1xuXG4gIGlmICh1dGlsLmlzU3RyaW5nKGV4cGVjdGVkKSkge1xuICAgIG1lc3NhZ2UgPSBleHBlY3RlZDtcbiAgICBleHBlY3RlZCA9IG51bGw7XG4gIH1cblxuICB0cnkge1xuICAgIGJsb2NrKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBhY3R1YWwgPSBlO1xuICB9XG5cbiAgbWVzc2FnZSA9IChleHBlY3RlZCAmJiBleHBlY3RlZC5uYW1lID8gJyAoJyArIGV4cGVjdGVkLm5hbWUgKyAnKS4nIDogJy4nKSArXG4gICAgICAgICAgICAobWVzc2FnZSA/ICcgJyArIG1lc3NhZ2UgOiAnLicpO1xuXG4gIGlmIChzaG91bGRUaHJvdyAmJiAhYWN0dWFsKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCAnTWlzc2luZyBleHBlY3RlZCBleGNlcHRpb24nICsgbWVzc2FnZSk7XG4gIH1cblxuICBpZiAoIXNob3VsZFRocm93ICYmIGV4cGVjdGVkRXhjZXB0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCAnR290IHVud2FudGVkIGV4Y2VwdGlvbicgKyBtZXNzYWdlKTtcbiAgfVxuXG4gIGlmICgoc2hvdWxkVGhyb3cgJiYgYWN0dWFsICYmIGV4cGVjdGVkICYmXG4gICAgICAhZXhwZWN0ZWRFeGNlcHRpb24oYWN0dWFsLCBleHBlY3RlZCkpIHx8ICghc2hvdWxkVGhyb3cgJiYgYWN0dWFsKSkge1xuICAgIHRocm93IGFjdHVhbDtcbiAgfVxufVxuXG4vLyAxMS4gRXhwZWN0ZWQgdG8gdGhyb3cgYW4gZXJyb3I6XG4vLyBhc3NlcnQudGhyb3dzKGJsb2NrLCBFcnJvcl9vcHQsIG1lc3NhZ2Vfb3B0KTtcblxuYXNzZXJ0LnRocm93cyA9IGZ1bmN0aW9uKGJsb2NrLCAvKm9wdGlvbmFsKi9lcnJvciwgLypvcHRpb25hbCovbWVzc2FnZSkge1xuICBfdGhyb3dzLmFwcGx5KHRoaXMsIFt0cnVlXS5jb25jYXQocFNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xufTtcblxuLy8gRVhURU5TSU9OISBUaGlzIGlzIGFubm95aW5nIHRvIHdyaXRlIG91dHNpZGUgdGhpcyBtb2R1bGUuXG5hc3NlcnQuZG9lc05vdFRocm93ID0gZnVuY3Rpb24oYmxvY2ssIC8qb3B0aW9uYWwqL21lc3NhZ2UpIHtcbiAgX3Rocm93cy5hcHBseSh0aGlzLCBbZmFsc2VdLmNvbmNhdChwU2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG59O1xuXG5hc3NlcnQuaWZFcnJvciA9IGZ1bmN0aW9uKGVycikgeyBpZiAoZXJyKSB7dGhyb3cgZXJyO319O1xuXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChoYXNPd24uY2FsbChvYmosIGtleSkpIGtleXMucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiBrZXlzO1xufTtcbiIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgfVxufVxuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG5cbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHNldFRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZHJhaW5RdWV1ZSwgMCk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQnVmZmVyKGFyZykge1xuICByZXR1cm4gYXJnICYmIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnXG4gICAgJiYgdHlwZW9mIGFyZy5jb3B5ID09PSAnZnVuY3Rpb24nXG4gICAgJiYgdHlwZW9mIGFyZy5maWxsID09PSAnZnVuY3Rpb24nXG4gICAgJiYgdHlwZW9mIGFyZy5yZWFkVUludDggPT09ICdmdW5jdGlvbic7XG59IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbnZhciBmb3JtYXRSZWdFeHAgPSAvJVtzZGolXS9nO1xuZXhwb3J0cy5mb3JtYXQgPSBmdW5jdGlvbihmKSB7XG4gIGlmICghaXNTdHJpbmcoZikpIHtcbiAgICB2YXIgb2JqZWN0cyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBvYmplY3RzLnB1c2goaW5zcGVjdChhcmd1bWVudHNbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdHMuam9pbignICcpO1xuICB9XG5cbiAgdmFyIGkgPSAxO1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICB2YXIgc3RyID0gU3RyaW5nKGYpLnJlcGxhY2UoZm9ybWF0UmVnRXhwLCBmdW5jdGlvbih4KSB7XG4gICAgaWYgKHggPT09ICclJScpIHJldHVybiAnJSc7XG4gICAgaWYgKGkgPj0gbGVuKSByZXR1cm4geDtcbiAgICBzd2l0Y2ggKHgpIHtcbiAgICAgIGNhc2UgJyVzJzogcmV0dXJuIFN0cmluZyhhcmdzW2krK10pO1xuICAgICAgY2FzZSAnJWQnOiByZXR1cm4gTnVtYmVyKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclaic6XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZ3NbaSsrXSk7XG4gICAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgICByZXR1cm4gJ1tDaXJjdWxhcl0nO1xuICAgICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4geDtcbiAgICB9XG4gIH0pO1xuICBmb3IgKHZhciB4ID0gYXJnc1tpXTsgaSA8IGxlbjsgeCA9IGFyZ3NbKytpXSkge1xuICAgIGlmIChpc051bGwoeCkgfHwgIWlzT2JqZWN0KHgpKSB7XG4gICAgICBzdHIgKz0gJyAnICsgeDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyICs9ICcgJyArIGluc3BlY3QoeCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHI7XG59O1xuXG5cbi8vIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuXG4vLyBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LlxuLy8gSWYgLS1uby1kZXByZWNhdGlvbiBpcyBzZXQsIHRoZW4gaXQgaXMgYSBuby1vcC5cbmV4cG9ydHMuZGVwcmVjYXRlID0gZnVuY3Rpb24oZm4sIG1zZykge1xuICAvLyBBbGxvdyBmb3IgZGVwcmVjYXRpbmcgdGhpbmdzIGluIHRoZSBwcm9jZXNzIG9mIHN0YXJ0aW5nIHVwLlxuICBpZiAoaXNVbmRlZmluZWQoZ2xvYmFsLnByb2Nlc3MpKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGV4cG9ydHMuZGVwcmVjYXRlKGZuLCBtc2cpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLm5vRGVwcmVjYXRpb24gPT09IHRydWUpIHtcbiAgICByZXR1cm4gZm47XG4gIH1cblxuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIGlmIChwcm9jZXNzLnRocm93RGVwcmVjYXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MudHJhY2VEZXByZWNhdGlvbikge1xuICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1zZyk7XG4gICAgICB9XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBkZXByZWNhdGVkO1xufTtcblxuXG52YXIgZGVidWdzID0ge307XG52YXIgZGVidWdFbnZpcm9uO1xuZXhwb3J0cy5kZWJ1Z2xvZyA9IGZ1bmN0aW9uKHNldCkge1xuICBpZiAoaXNVbmRlZmluZWQoZGVidWdFbnZpcm9uKSlcbiAgICBkZWJ1Z0Vudmlyb24gPSBwcm9jZXNzLmVudi5OT0RFX0RFQlVHIHx8ICcnO1xuICBzZXQgPSBzZXQudG9VcHBlckNhc2UoKTtcbiAgaWYgKCFkZWJ1Z3Nbc2V0XSkge1xuICAgIGlmIChuZXcgUmVnRXhwKCdcXFxcYicgKyBzZXQgKyAnXFxcXGInLCAnaScpLnRlc3QoZGVidWdFbnZpcm9uKSkge1xuICAgICAgdmFyIHBpZCA9IHByb2Nlc3MucGlkO1xuICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG1zZyA9IGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJyVzICVkOiAlcycsIHNldCwgcGlkLCBtc2cpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHt9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVidWdzW3NldF07XG59O1xuXG5cbi8qKlxuICogRWNob3MgdGhlIHZhbHVlIG9mIGEgdmFsdWUuIFRyeXMgdG8gcHJpbnQgdGhlIHZhbHVlIG91dFxuICogaW4gdGhlIGJlc3Qgd2F5IHBvc3NpYmxlIGdpdmVuIHRoZSBkaWZmZXJlbnQgdHlwZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHByaW50IG91dC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbmFsIG9wdGlvbnMgb2JqZWN0IHRoYXQgYWx0ZXJzIHRoZSBvdXRwdXQuXG4gKi9cbi8qIGxlZ2FjeTogb2JqLCBzaG93SGlkZGVuLCBkZXB0aCwgY29sb3JzKi9cbmZ1bmN0aW9uIGluc3BlY3Qob2JqLCBvcHRzKSB7XG4gIC8vIGRlZmF1bHQgb3B0aW9uc1xuICB2YXIgY3R4ID0ge1xuICAgIHNlZW46IFtdLFxuICAgIHN0eWxpemU6IHN0eWxpemVOb0NvbG9yXG4gIH07XG4gIC8vIGxlZ2FjeS4uLlxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAzKSBjdHguZGVwdGggPSBhcmd1bWVudHNbMl07XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDQpIGN0eC5jb2xvcnMgPSBhcmd1bWVudHNbM107XG4gIGlmIChpc0Jvb2xlYW4ob3B0cykpIHtcbiAgICAvLyBsZWdhY3kuLi5cbiAgICBjdHguc2hvd0hpZGRlbiA9IG9wdHM7XG4gIH0gZWxzZSBpZiAob3B0cykge1xuICAgIC8vIGdvdCBhbiBcIm9wdGlvbnNcIiBvYmplY3RcbiAgICBleHBvcnRzLl9leHRlbmQoY3R4LCBvcHRzKTtcbiAgfVxuICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG4gIGlmIChpc1VuZGVmaW5lZChjdHguc2hvd0hpZGRlbikpIGN0eC5zaG93SGlkZGVuID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguZGVwdGgpKSBjdHguZGVwdGggPSAyO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmNvbG9ycykpIGN0eC5jb2xvcnMgPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jdXN0b21JbnNwZWN0KSkgY3R4LmN1c3RvbUluc3BlY3QgPSB0cnVlO1xuICBpZiAoY3R4LmNvbG9ycykgY3R4LnN0eWxpemUgPSBzdHlsaXplV2l0aENvbG9yO1xuICByZXR1cm4gZm9ybWF0VmFsdWUoY3R4LCBvYmosIGN0eC5kZXB0aCk7XG59XG5leHBvcnRzLmluc3BlY3QgPSBpbnNwZWN0O1xuXG5cbi8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQU5TSV9lc2NhcGVfY29kZSNncmFwaGljc1xuaW5zcGVjdC5jb2xvcnMgPSB7XG4gICdib2xkJyA6IFsxLCAyMl0sXG4gICdpdGFsaWMnIDogWzMsIDIzXSxcbiAgJ3VuZGVybGluZScgOiBbNCwgMjRdLFxuICAnaW52ZXJzZScgOiBbNywgMjddLFxuICAnd2hpdGUnIDogWzM3LCAzOV0sXG4gICdncmV5JyA6IFs5MCwgMzldLFxuICAnYmxhY2snIDogWzMwLCAzOV0sXG4gICdibHVlJyA6IFszNCwgMzldLFxuICAnY3lhbicgOiBbMzYsIDM5XSxcbiAgJ2dyZWVuJyA6IFszMiwgMzldLFxuICAnbWFnZW50YScgOiBbMzUsIDM5XSxcbiAgJ3JlZCcgOiBbMzEsIDM5XSxcbiAgJ3llbGxvdycgOiBbMzMsIDM5XVxufTtcblxuLy8gRG9uJ3QgdXNlICdibHVlJyBub3QgdmlzaWJsZSBvbiBjbWQuZXhlXG5pbnNwZWN0LnN0eWxlcyA9IHtcbiAgJ3NwZWNpYWwnOiAnY3lhbicsXG4gICdudW1iZXInOiAneWVsbG93JyxcbiAgJ2Jvb2xlYW4nOiAneWVsbG93JyxcbiAgJ3VuZGVmaW5lZCc6ICdncmV5JyxcbiAgJ251bGwnOiAnYm9sZCcsXG4gICdzdHJpbmcnOiAnZ3JlZW4nLFxuICAnZGF0ZSc6ICdtYWdlbnRhJyxcbiAgLy8gXCJuYW1lXCI6IGludGVudGlvbmFsbHkgbm90IHN0eWxpbmdcbiAgJ3JlZ2V4cCc6ICdyZWQnXG59O1xuXG5cbmZ1bmN0aW9uIHN0eWxpemVXaXRoQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgdmFyIHN0eWxlID0gaW5zcGVjdC5zdHlsZXNbc3R5bGVUeXBlXTtcblxuICBpZiAoc3R5bGUpIHtcbiAgICByZXR1cm4gJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVswXSArICdtJyArIHN0ciArXG4gICAgICAgICAgICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMV0gKyAnbSc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHN0eWxpemVOb0NvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHJldHVybiBzdHI7XG59XG5cblxuZnVuY3Rpb24gYXJyYXlUb0hhc2goYXJyYXkpIHtcbiAgdmFyIGhhc2ggPSB7fTtcblxuICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKHZhbCwgaWR4KSB7XG4gICAgaGFzaFt2YWxdID0gdHJ1ZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGhhc2g7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0VmFsdWUoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzKSB7XG4gIC8vIFByb3ZpZGUgYSBob29rIGZvciB1c2VyLXNwZWNpZmllZCBpbnNwZWN0IGZ1bmN0aW9ucy5cbiAgLy8gQ2hlY2sgdGhhdCB2YWx1ZSBpcyBhbiBvYmplY3Qgd2l0aCBhbiBpbnNwZWN0IGZ1bmN0aW9uIG9uIGl0XG4gIGlmIChjdHguY3VzdG9tSW5zcGVjdCAmJlxuICAgICAgdmFsdWUgJiZcbiAgICAgIGlzRnVuY3Rpb24odmFsdWUuaW5zcGVjdCkgJiZcbiAgICAgIC8vIEZpbHRlciBvdXQgdGhlIHV0aWwgbW9kdWxlLCBpdCdzIGluc3BlY3QgZnVuY3Rpb24gaXMgc3BlY2lhbFxuICAgICAgdmFsdWUuaW5zcGVjdCAhPT0gZXhwb3J0cy5pbnNwZWN0ICYmXG4gICAgICAvLyBBbHNvIGZpbHRlciBvdXQgYW55IHByb3RvdHlwZSBvYmplY3RzIHVzaW5nIHRoZSBjaXJjdWxhciBjaGVjay5cbiAgICAgICEodmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY29uc3RydWN0b3IucHJvdG90eXBlID09PSB2YWx1ZSkpIHtcbiAgICB2YXIgcmV0ID0gdmFsdWUuaW5zcGVjdChyZWN1cnNlVGltZXMsIGN0eCk7XG4gICAgaWYgKCFpc1N0cmluZyhyZXQpKSB7XG4gICAgICByZXQgPSBmb3JtYXRWYWx1ZShjdHgsIHJldCwgcmVjdXJzZVRpbWVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8vIFByaW1pdGl2ZSB0eXBlcyBjYW5ub3QgaGF2ZSBwcm9wZXJ0aWVzXG4gIHZhciBwcmltaXRpdmUgPSBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSk7XG4gIGlmIChwcmltaXRpdmUpIHtcbiAgICByZXR1cm4gcHJpbWl0aXZlO1xuICB9XG5cbiAgLy8gTG9vayB1cCB0aGUga2V5cyBvZiB0aGUgb2JqZWN0LlxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcbiAgdmFyIHZpc2libGVLZXlzID0gYXJyYXlUb0hhc2goa2V5cyk7XG5cbiAgaWYgKGN0eC5zaG93SGlkZGVuKSB7XG4gICAga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbHVlKTtcbiAgfVxuXG4gIC8vIElFIGRvZXNuJ3QgbWFrZSBlcnJvciBmaWVsZHMgbm9uLWVudW1lcmFibGVcbiAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2R3dzUyc2J0KHY9dnMuOTQpLmFzcHhcbiAgaWYgKGlzRXJyb3IodmFsdWUpXG4gICAgICAmJiAoa2V5cy5pbmRleE9mKCdtZXNzYWdlJykgPj0gMCB8fCBrZXlzLmluZGV4T2YoJ2Rlc2NyaXB0aW9uJykgPj0gMCkpIHtcbiAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgLy8gU29tZSB0eXBlIG9mIG9iamVjdCB3aXRob3V0IHByb3BlcnRpZXMgY2FuIGJlIHNob3J0Y3V0dGVkLlxuICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgIHZhciBuYW1lID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tGdW5jdGlvbicgKyBuYW1lICsgJ10nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH1cbiAgICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAnZGF0ZScpO1xuICAgIH1cbiAgICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGJhc2UgPSAnJywgYXJyYXkgPSBmYWxzZSwgYnJhY2VzID0gWyd7JywgJ30nXTtcblxuICAvLyBNYWtlIEFycmF5IHNheSB0aGF0IHRoZXkgYXJlIEFycmF5XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIGFycmF5ID0gdHJ1ZTtcbiAgICBicmFjZXMgPSBbJ1snLCAnXSddO1xuICB9XG5cbiAgLy8gTWFrZSBmdW5jdGlvbnMgc2F5IHRoYXQgdGhleSBhcmUgZnVuY3Rpb25zXG4gIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgIHZhciBuID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgYmFzZSA9ICcgW0Z1bmN0aW9uJyArIG4gKyAnXSc7XG4gIH1cblxuICAvLyBNYWtlIFJlZ0V4cHMgc2F5IHRoYXQgdGhleSBhcmUgUmVnRXhwc1xuICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGRhdGVzIHdpdGggcHJvcGVydGllcyBmaXJzdCBzYXkgdGhlIGRhdGVcbiAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgRGF0ZS5wcm90b3R5cGUudG9VVENTdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGVycm9yIHdpdGggbWVzc2FnZSBmaXJzdCBzYXkgdGhlIGVycm9yXG4gIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICBpZiAoa2V5cy5sZW5ndGggPT09IDAgJiYgKCFhcnJheSB8fCB2YWx1ZS5sZW5ndGggPT0gMCkpIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArIGJyYWNlc1sxXTtcbiAgfVxuXG4gIGlmIChyZWN1cnNlVGltZXMgPCAwKSB7XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbT2JqZWN0XScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG5cbiAgY3R4LnNlZW4ucHVzaCh2YWx1ZSk7XG5cbiAgdmFyIG91dHB1dDtcbiAgaWYgKGFycmF5KSB7XG4gICAgb3V0cHV0ID0gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cyk7XG4gIH0gZWxzZSB7XG4gICAgb3V0cHV0ID0ga2V5cy5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSk7XG4gICAgfSk7XG4gIH1cblxuICBjdHguc2Vlbi5wb3AoKTtcblxuICByZXR1cm4gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKSB7XG4gIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCd1bmRlZmluZWQnLCAndW5kZWZpbmVkJyk7XG4gIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICB2YXIgc2ltcGxlID0gJ1xcJycgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkucmVwbGFjZSgvXlwifFwiJC9nLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJykgKyAnXFwnJztcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoc2ltcGxlLCAnc3RyaW5nJyk7XG4gIH1cbiAgaWYgKGlzTnVtYmVyKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ251bWJlcicpO1xuICBpZiAoaXNCb29sZWFuKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ2Jvb2xlYW4nKTtcbiAgLy8gRm9yIHNvbWUgcmVhc29uIHR5cGVvZiBudWxsIGlzIFwib2JqZWN0XCIsIHNvIHNwZWNpYWwgY2FzZSBoZXJlLlxuICBpZiAoaXNOdWxsKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ251bGwnLCAnbnVsbCcpO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEVycm9yKHZhbHVlKSB7XG4gIHJldHVybiAnWycgKyBFcnJvci5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgKyAnXSc7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cykge1xuICB2YXIgb3V0cHV0ID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5KHZhbHVlLCBTdHJpbmcoaSkpKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIFN0cmluZyhpKSwgdHJ1ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXQucHVzaCgnJyk7XG4gICAgfVxuICB9XG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoIWtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAga2V5LCB0cnVlKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KSB7XG4gIHZhciBuYW1lLCBzdHIsIGRlc2M7XG4gIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbHVlLCBrZXkpIHx8IHsgdmFsdWU6IHZhbHVlW2tleV0gfTtcbiAgaWYgKGRlc2MuZ2V0KSB7XG4gICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlci9TZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAoIWhhc093blByb3BlcnR5KHZpc2libGVLZXlzLCBrZXkpKSB7XG4gICAgbmFtZSA9ICdbJyArIGtleSArICddJztcbiAgfVxuICBpZiAoIXN0cikge1xuICAgIGlmIChjdHguc2Vlbi5pbmRleE9mKGRlc2MudmFsdWUpIDwgMCkge1xuICAgICAgaWYgKGlzTnVsbChyZWN1cnNlVGltZXMpKSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIHJlY3Vyc2VUaW1lcyAtIDEpO1xuICAgICAgfVxuICAgICAgaWYgKHN0ci5pbmRleE9mKCdcXG4nKSA+IC0xKSB7XG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIHN0ciA9IHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKS5zdWJzdHIoMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyID0gJ1xcbicgKyBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbQ2lyY3VsYXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzVW5kZWZpbmVkKG5hbWUpKSB7XG4gICAgaWYgKGFycmF5ICYmIGtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIG5hbWUgPSBKU09OLnN0cmluZ2lmeSgnJyArIGtleSk7XG4gICAgaWYgKG5hbWUubWF0Y2goL15cIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVwiJC8pKSB7XG4gICAgICBuYW1lID0gbmFtZS5zdWJzdHIoMSwgbmFtZS5sZW5ndGggLSAyKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnbmFtZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvKF5cInxcIiQpL2csIFwiJ1wiKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnc3RyaW5nJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5hbWUgKyAnOiAnICsgc3RyO1xufVxuXG5cbmZ1bmN0aW9uIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKSB7XG4gIHZhciBudW1MaW5lc0VzdCA9IDA7XG4gIHZhciBsZW5ndGggPSBvdXRwdXQucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGN1cikge1xuICAgIG51bUxpbmVzRXN0Kys7XG4gICAgaWYgKGN1ci5pbmRleE9mKCdcXG4nKSA+PSAwKSBudW1MaW5lc0VzdCsrO1xuICAgIHJldHVybiBwcmV2ICsgY3VyLnJlcGxhY2UoL1xcdTAwMWJcXFtcXGRcXGQ/bS9nLCAnJykubGVuZ3RoICsgMTtcbiAgfSwgMCk7XG5cbiAgaWYgKGxlbmd0aCA+IDYwKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArXG4gICAgICAgICAgIChiYXNlID09PSAnJyA/ICcnIDogYmFzZSArICdcXG4gJykgK1xuICAgICAgICAgICAnICcgK1xuICAgICAgICAgICBvdXRwdXQuam9pbignLFxcbiAgJykgK1xuICAgICAgICAgICAnICcgK1xuICAgICAgICAgICBicmFjZXNbMV07XG4gIH1cblxuICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArICcgJyArIG91dHB1dC5qb2luKCcsICcpICsgJyAnICsgYnJhY2VzWzFdO1xufVxuXG5cbi8vIE5PVEU6IFRoZXNlIHR5cGUgY2hlY2tpbmcgZnVuY3Rpb25zIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIGBpbnN0YW5jZW9mYFxuLy8gYmVjYXVzZSBpdCBpcyBmcmFnaWxlIGFuZCBjYW4gYmUgZWFzaWx5IGZha2VkIHdpdGggYE9iamVjdC5jcmVhdGUoKWAuXG5mdW5jdGlvbiBpc0FycmF5KGFyKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGFyKTtcbn1cbmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJztcbn1cbmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xuXG5mdW5jdGlvbiBpc051bGwoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbCA9IGlzTnVsbDtcblxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsT3JVbmRlZmluZWQgPSBpc051bGxPclVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcblxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcbn1cbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcblxuZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3ltYm9sJztcbn1cbmV4cG9ydHMuaXNTeW1ib2wgPSBpc1N5bWJvbDtcblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNSZWdFeHAocmUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHJlKSAmJiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGQpICYmIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcblxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiBpc09iamVjdChlKSAmJlxuICAgICAgKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5leHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xuXG5leHBvcnRzLmlzQnVmZmVyID0gcmVxdWlyZSgnLi9zdXBwb3J0L2lzQnVmZmVyJyk7XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cblxuXG5mdW5jdGlvbiBwYWQobikge1xuICByZXR1cm4gbiA8IDEwID8gJzAnICsgbi50b1N0cmluZygxMCkgOiBuLnRvU3RyaW5nKDEwKTtcbn1cblxuXG52YXIgbW9udGhzID0gWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsXG4gICAgICAgICAgICAgICdPY3QnLCAnTm92JywgJ0RlYyddO1xuXG4vLyAyNiBGZWIgMTY6MTk6MzRcbmZ1bmN0aW9uIHRpbWVzdGFtcCgpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xuICB2YXIgdGltZSA9IFtwYWQoZC5nZXRIb3VycygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0TWludXRlcygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0U2Vjb25kcygpKV0uam9pbignOicpO1xuICByZXR1cm4gW2QuZ2V0RGF0ZSgpLCBtb250aHNbZC5nZXRNb250aCgpXSwgdGltZV0uam9pbignICcpO1xufVxuXG5cbi8vIGxvZyBpcyBqdXN0IGEgdGhpbiB3cmFwcGVyIHRvIGNvbnNvbGUubG9nIHRoYXQgcHJlcGVuZHMgYSB0aW1lc3RhbXBcbmV4cG9ydHMubG9nID0gZnVuY3Rpb24oKSB7XG4gIGNvbnNvbGUubG9nKCclcyAtICVzJywgdGltZXN0YW1wKCksIGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cykpO1xufTtcblxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlci5cbiAqXG4gKiBUaGUgRnVuY3Rpb24ucHJvdG90eXBlLmluaGVyaXRzIGZyb20gbGFuZy5qcyByZXdyaXR0ZW4gYXMgYSBzdGFuZGFsb25lXG4gKiBmdW5jdGlvbiAobm90IG9uIEZ1bmN0aW9uLnByb3RvdHlwZSkuIE5PVEU6IElmIHRoaXMgZmlsZSBpcyB0byBiZSBsb2FkZWRcbiAqIGR1cmluZyBib290c3RyYXBwaW5nIHRoaXMgZnVuY3Rpb24gbmVlZHMgdG8gYmUgcmV3cml0dGVuIHVzaW5nIHNvbWUgbmF0aXZlXG4gKiBmdW5jdGlvbnMgYXMgcHJvdG90eXBlIHNldHVwIHVzaW5nIG5vcm1hbCBKYXZhU2NyaXB0IGRvZXMgbm90IHdvcmsgYXNcbiAqIGV4cGVjdGVkIGR1cmluZyBib290c3RyYXBwaW5nIChzZWUgbWlycm9yLmpzIGluIHIxMTQ5MDMpLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gd2hpY2ggbmVlZHMgdG8gaW5oZXJpdCB0aGVcbiAqICAgICBwcm90b3R5cGUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gdG8gaW5oZXJpdCBwcm90b3R5cGUgZnJvbS5cbiAqL1xuZXhwb3J0cy5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmV4cG9ydHMuX2V4dGVuZCA9IGZ1bmN0aW9uKG9yaWdpbiwgYWRkKSB7XG4gIC8vIERvbid0IGRvIGFueXRoaW5nIGlmIGFkZCBpc24ndCBhbiBvYmplY3RcbiAgaWYgKCFhZGQgfHwgIWlzT2JqZWN0KGFkZCkpIHJldHVybiBvcmlnaW47XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhZGQpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgb3JpZ2luW2tleXNbaV1dID0gYWRkW2tleXNbaV1dO1xuICB9XG4gIHJldHVybiBvcmlnaW47XG59O1xuXG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKiBnbG9iYWwgZ2xvYmFsOiBmYWxzZSAqL1xuLyogZ2xvYmFsIFhNTEh0dHBSZXF1ZXN0OiBmYWxzZSAqL1xuXG52YXIgdGVtcGxhdGVMb2FkZXIgPSByZXF1aXJlKCcuL3RlbXBsYXRlLWxvYWRlci5qcycpO1xudmFyIGNvbnNvbGUgPSByZXF1aXJlKFwiY29uc29sZVwiKTtcbnZhciBrbyA9IHJlcXVpcmUoXCJrbm9ja291dFwiKTtcbnZhciAkID0gcmVxdWlyZShcImpxdWVyeVwiKTtcbnJlcXVpcmUoXCIuL2tvLWJpbmRpbmdzLmpzXCIpO1xudmFyIHBlcmZvcm1hbmNlQXdhcmVDYWxsZXIgPSByZXF1aXJlKFwiLi90aW1lZC1jYWxsLmpzXCIpLnRpbWVkQ2FsbDtcblxudmFyIGFkZFVuZG9TdGFja0V4dGVuc2lvbk1ha2VyID0gcmVxdWlyZShcIi4vdW5kb21hbmFnZXIvdW5kb21haW4uanNcIik7XG52YXIgY29sb3JQbHVnaW4gPSByZXF1aXJlKFwiLi9leHQvY29sb3IuanNcIik7XG5cbnZhciBsb2NhbFN0b3JhZ2VMb2FkZXIgPSByZXF1aXJlKFwiLi9leHQvbG9jYWxzdG9yYWdlLmpzXCIpO1xuXG5mdW5jdGlvbiBfY2Fub25pY2FsaXplKHVybCkge1xuICB2YXIgZGl2ID0gZ2xvYmFsLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXYuaW5uZXJIVE1MID0gXCI8YT48L2E+XCI7XG4gIGRpdi5maXJzdENoaWxkLmhyZWYgPSB1cmw7IC8vIEVuc3VyZXMgdGhhdCB0aGUgaHJlZiBpcyBwcm9wZXJseSBlc2NhcGVkXG4gIGRpdi5pbm5lckhUTUwgPSBkaXYuaW5uZXJIVE1MOyAvLyBSdW4gdGhlIGN1cnJlbnQgaW5uZXJIVE1MIGJhY2sgdGhyb3VnaCB0aGUgcGFyc2VyXG4gIHJldHVybiBkaXYuZmlyc3RDaGlsZC5ocmVmO1xufVxuXG52YXIgYXBwbHlCaW5kaW5nT3B0aW9ucyA9IGZ1bmN0aW9uKG9wdGlvbnMsIGtvKSB7XG4gIC8vIHB1c2ggXCJjb252ZXJ0ZWRVcmxcIiBtZXRob2QgdG8gdGhlIHd5c2l3eWdTcmMgYmluZGluZ1xuICBrby5iaW5kaW5nSGFuZGxlcnMud3lzaXd5Z1NyYy5jb252ZXJ0ZWRVcmwgPSBmdW5jdGlvbihzcmMsIG1ldGhvZCwgd2lkdGgsIGhlaWdodCkge1xuICAgIHZhciBpbWdQcm9jZXNzb3JCYWNrZW5kID0gb3B0aW9ucy5pbWdQcm9jZXNzb3JCYWNrZW5kID8gb3B0aW9ucy5pbWdQcm9jZXNzb3JCYWNrZW5kIDogJy4vdXBsb2FkJztcbiAgICB2YXIgYmFja0VuZE1hdGNoID0gaW1nUHJvY2Vzc29yQmFja2VuZC5tYXRjaCgvXihodHRwcz86XFwvXFwvW15cXC9dKlxcLykuKiQvKTtcbiAgICB2YXIgc3JjTWF0Y2ggPSBzcmMubWF0Y2goL14oaHR0cHM/OlxcL1xcL1teXFwvXSpcXC8pLiokLyk7XG4gICAgaWYgKGJhY2tFbmRNYXRjaCA9PT0gbnVsbCB8fCAoc3JjTWF0Y2ggIT09IG51bGwgJiYgYmFja0VuZE1hdGNoWzFdID09IHNyY01hdGNoWzFdKSkge1xuICAgICAgcmV0dXJuIGltZ1Byb2Nlc3NvckJhY2tlbmQgKyBcIj9zcmM9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoc3JjKSArIFwiJm1ldGhvZD1cIiArIGVuY29kZVVSSUNvbXBvbmVudChtZXRob2QpICsgXCImcGFyYW1zPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHdpZHRoICsgXCIsXCIgKyBoZWlnaHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZyhcIkNhbm5vdCBhcHBseSBiYWNrZW5kIGltYWdlIHJlc2l6aW5nIHRvIG5vbi1sb2NhbCByZXNvdXJjZXMgXCIsIHNyYywgbWV0aG9kLCB3aWR0aCwgaGVpZ2h0LCBiYWNrRW5kTWF0Y2gsIHNyY01hdGNoKTtcbiAgICAgIHJldHVybiBzcmMgKyBcIj9tZXRob2Q9XCIgKyBtZXRob2QgKyBcIiZ3aWR0aD1cIiArIHdpZHRoICsgKGhlaWdodCAhPT0gbnVsbCA/IFwiJmhlaWdodD1cIiArIGhlaWdodCA6ICcnKTtcbiAgICB9XG4gIH07XG5cbiAga28uYmluZGluZ0hhbmRsZXJzLnd5c2l3eWdTcmMucGxhY2Vob2xkZXJVcmwgPSBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0LCB0ZXh0KSB7XG4gICAgcmV0dXJuIG9wdGlvbnMuaW1nUHJvY2Vzc29yQmFja2VuZCArIFwiP21ldGhvZD1cIiArICdwbGFjZWhvbGRlcicgKyBcIiZwYXJhbXM9XCIgKyB3aWR0aCArIGVuY29kZVVSSUNvbXBvbmVudChcIixcIikgKyBoZWlnaHQ7XG4gIH07XG5cbiAgLy8gcHVzaGVzIGN1c3RvbSB0aW55bWNlIGNvbmZpZ3VyYXRpb25zIGZyb20gb3B0aW9ucyB0byB0aGUgYmluZGluZ1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnRpbnltY2VDb25maWcpXG4gICAga28uYmluZGluZ0hhbmRsZXJzLnd5c2l3eWcuc3RhbmRhcmRPcHRpb25zID0gb3B0aW9ucy50aW55bWNlQ29uZmlnO1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnRpbnltY2VDb25maWdGdWxsKVxuICAgIGtvLmJpbmRpbmdIYW5kbGVycy53eXNpd3lnLmZ1bGxPcHRpb25zID0gb3B0aW9ucy50aW55bWNlQ29uZmlnRnVsbDtcbn07XG5cbnZhciBzdGFydCA9IGZ1bmN0aW9uKG9wdGlvbnMsIHRlbXBsYXRlRmlsZSwgdGVtcGxhdGVNZXRhZGF0YSwganNvcmpzb24sIGN1c3RvbUV4dGVuc2lvbnMpIHtcblxuICB0ZW1wbGF0ZUxvYWRlci5maXhQYWdlRXZlbnRzKCk7XG5cbiAgdmFyIGZpbGVVcGxvYWRNZXNzYWdlc0V4dGVuc2lvbiA9IGZ1bmN0aW9uKHZtKSB7XG4gICAgdmFyIGZpbGV1cGxvYWRDb25maWcgPSB7XG4gICAgICBtZXNzYWdlczoge1xuICAgICAgICB1bmtub3duRXJyb3I6IHZtLnQoJ1Vua25vd24gZXJyb3InKSxcbiAgICAgICAgdXBsb2FkZWRCeXRlczogdm0udCgnVXBsb2FkZWQgYnl0ZXMgZXhjZWVkIGZpbGUgc2l6ZScpLFxuICAgICAgICBtYXhOdW1iZXJPZkZpbGVzOiB2bS50KCdNYXhpbXVtIG51bWJlciBvZiBmaWxlcyBleGNlZWRlZCcpLFxuICAgICAgICBhY2NlcHRGaWxlVHlwZXM6IHZtLnQoJ0ZpbGUgdHlwZSBub3QgYWxsb3dlZCcpLFxuICAgICAgICBtYXhGaWxlU2l6ZTogdm0udCgnRmlsZSBpcyB0b28gbGFyZ2UnKSxcbiAgICAgICAgbWluRmlsZVNpemU6IHZtLnQoJ0ZpbGUgaXMgdG9vIHNtYWxsJyksXG4gICAgICAgIHBvc3RfbWF4X3NpemU6IHZtLnQoJ1RoZSB1cGxvYWRlZCBmaWxlIGV4Y2VlZHMgdGhlIHBvc3RfbWF4X3NpemUgZGlyZWN0aXZlIGluIHBocC5pbmknKSxcbiAgICAgICAgbWF4X2ZpbGVfc2l6ZTogdm0udCgnRmlsZSBpcyB0b28gYmlnJyksXG4gICAgICAgIG1pbl9maWxlX3NpemU6IHZtLnQoJ0ZpbGUgaXMgdG9vIHNtYWxsJyksXG4gICAgICAgIGFjY2VwdF9maWxlX3R5cGVzOiB2bS50KCdGaWxldHlwZSBub3QgYWxsb3dlZCcpLFxuICAgICAgICBtYXhfbnVtYmVyX29mX2ZpbGVzOiB2bS50KCdNYXhpbXVtIG51bWJlciBvZiBmaWxlcyBleGNlZWRlZCcpLFxuICAgICAgICBtYXhfd2lkdGg6IHZtLnQoJ0ltYWdlIGV4Y2VlZHMgbWF4aW11bSB3aWR0aCcpLFxuICAgICAgICBtaW5fd2lkdGg6IHZtLnQoJ0ltYWdlIHJlcXVpcmVzIGEgbWluaW11bSB3aWR0aCcpLFxuICAgICAgICBtYXhfaGVpZ2h0OiB2bS50KCdJbWFnZSBleGNlZWRzIG1heGltdW0gaGVpZ2h0JyksXG4gICAgICAgIG1pbl9oZWlnaHQ6IHZtLnQoJ0ltYWdlIHJlcXVpcmVzIGEgbWluaW11bSBoZWlnaHQnKSxcbiAgICAgICAgYWJvcnQ6IHZtLnQoJ0ZpbGUgdXBsb2FkIGFib3J0ZWQnKSxcbiAgICAgICAgaW1hZ2VfcmVzaXplOiB2bS50KCdGYWlsZWQgdG8gcmVzaXplIGltYWdlJyksXG4gICAgICAgIGdlbmVyaWM6IHZtLnQoJ1VuZXhwZWN0ZWQgdXBsb2FkIGVycm9yJylcbiAgICAgIH1cbiAgICB9O1xuICAgIC8vIGZpbGVVcGxvYWQgb3B0aW9ucy5cbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmZpbGV1cGxvYWRDb25maWcpXG4gICAgICBmaWxldXBsb2FkQ29uZmlnID0gJC5leHRlbmQodHJ1ZSwgZmlsZXVwbG9hZENvbmZpZywgb3B0aW9ucy5maWxldXBsb2FkQ29uZmlnKTtcblxuICAgIGtvLmJpbmRpbmdIYW5kbGVyc1snZmlsZXVwbG9hZCddLmV4dGVuZE9wdGlvbnMgPSBmaWxldXBsb2FkQ29uZmlnO1xuXG4gIH07XG5cbiAgdmFyIHNpbXBsZVRyYW5zbGF0aW9uUGx1Z2luID0gZnVuY3Rpb24odm0pIHtcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnN0cmluZ3MpIHtcbiAgICAgIHZtLnQgPSBmdW5jdGlvbihrZXksIG9ialBhcmFtKSB7XG4gICAgICAgIHZhciByZXMgPSBvcHRpb25zLnN0cmluZ3Nba2V5XTtcbiAgICAgICAgaWYgKHR5cGVvZiByZXMgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJNaXNzaW5nIHRyYW5zbGF0aW9uIHN0cmluZyBmb3JcIixrZXksXCI6IHVzaW5nIGRlZmF1bHQgc3RyaW5nXCIpO1xuICAgICAgICAgIHJlcyA9IGtleTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdm0udHQocmVzLCBvYmpQYXJhbSk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcblxuICB2YXIgZXh0ZW5zaW9ucyA9IFthZGRVbmRvU3RhY2tFeHRlbnNpb25NYWtlcihwZXJmb3JtYW5jZUF3YXJlQ2FsbGVyKSwgY29sb3JQbHVnaW4sIHNpbXBsZVRyYW5zbGF0aW9uUGx1Z2luXTtcbiAgaWYgKHR5cGVvZiBjdXN0b21FeHRlbnNpb25zICE9PSAndW5kZWZpbmVkJylcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IGN1c3RvbUV4dGVuc2lvbnMubGVuZ3RoOyBrKyspIGV4dGVuc2lvbnMucHVzaChjdXN0b21FeHRlbnNpb25zW2tdKTtcbiAgZXh0ZW5zaW9ucy5wdXNoKGZpbGVVcGxvYWRNZXNzYWdlc0V4dGVuc2lvbik7XG5cbiAgdmFyIGdhbGxlcnlVcmwgPSBvcHRpb25zLmZpbGV1cGxvYWRDb25maWcgPyBvcHRpb25zLmZpbGV1cGxvYWRDb25maWcudXJsIDogJy91cGxvYWQvJztcbiAgYXBwbHlCaW5kaW5nT3B0aW9ucyhvcHRpb25zLCBrbyk7XG5cbiAgLy8gVE9ETyB3aGF0IGFib3V0IGFwcGVuZGluZyB0byBhbm90aGVyIGVsZW1lbnQ/XG4gICQoXCI8IS0tIGtvIHRlbXBsYXRlOiAnbWFpbicgLS0+PCEtLSAva28gLS0+XCIpLmFwcGVuZFRvKGdsb2JhbC5kb2N1bWVudC5ib2R5KTtcblxuICAvLyB0ZW1wbGF0ZUZpbGUgbWF5IG92ZXJyaWRlIHRoZSB0ZW1wbGF0ZSBwYXRoIGluIHRlbXBsYXRlTWV0YWRhdGFcbiAgaWYgKHR5cGVvZiB0ZW1wbGF0ZUZpbGUgPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHRlbXBsYXRlTWV0YWRhdGEgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0ZW1wbGF0ZUZpbGUgPSB0ZW1wbGF0ZU1ldGFkYXRhLnRlbXBsYXRlO1xuICB9XG4gIC8vIFRPRE8gY2Fub25pY2FsaXplIHRlbXBsYXRlRmlsZSB0byBhYnNvbHV0ZSBvciByZWxhdGl2ZSBkZXBlbmRpbmcgb24gXCJyZWxhdGl2ZVVybHNFeGNlcHRpb25cIiBwbHVnaW5cblxuICB0ZW1wbGF0ZUxvYWRlci5sb2FkKHBlcmZvcm1hbmNlQXdhcmVDYWxsZXIsIHRlbXBsYXRlRmlsZSwgdGVtcGxhdGVNZXRhZGF0YSwganNvcmpzb24sIGV4dGVuc2lvbnMsIGdhbGxlcnlVcmwpO1xuXG59O1xuXG52YXIgaW5pdEZyb21Mb2NhbFN0b3JhZ2UgPSBmdW5jdGlvbihvcHRpb25zLCBoYXNoX2tleSwgY3VzdG9tRXh0ZW5zaW9ucykge1xuICB0cnkge1xuICAgIHZhciBsc0RhdGEgPSBsb2NhbFN0b3JhZ2VMb2FkZXIoaGFzaF9rZXksIG9wdGlvbnMuZW1haWxQcm9jZXNzb3JCYWNrZW5kKTtcbiAgICB2YXIgZXh0ZW5zaW9ucyA9IHR5cGVvZiBjdXN0b21FeHRlbnNpb25zICE9PSAndW5kZWZpbmVkJyA/IGN1c3RvbUV4dGVuc2lvbnMgOiBbXTtcbiAgICBleHRlbnNpb25zLnB1c2gobHNEYXRhLmV4dGVuc2lvbik7XG4gICAgdmFyIHRlbXBsYXRlID0gX2Nhbm9uaWNhbGl6ZShsc0RhdGEubWV0YWRhdGEudGVtcGxhdGUpO1xuICAgIHN0YXJ0KG9wdGlvbnMsIHRlbXBsYXRlLCBsc0RhdGEubWV0YWRhdGEsIGxzRGF0YS5tb2RlbCwgZXh0ZW5zaW9ucyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiVE9ETyBub3QgZm91bmQgXCIsIGhhc2hfa2V5LCBlKTtcbiAgfVxufTtcblxudmFyIGluaXQgPSBmdW5jdGlvbihvcHRpb25zLCBjdXN0b21FeHRlbnNpb25zKSB7XG5cbiAgdmFyIGhhc2ggPSBnbG9iYWwubG9jYXRpb24uaGFzaCA/IGdsb2JhbC5sb2NhdGlvbi5ocmVmLnNwbGl0KFwiI1wiKVsxXSA6IHVuZGVmaW5lZDtcblxuICAvLyBMb2FkaW5nIGZyb20gY29uZmlndXJlZCB0ZW1wbGF0ZSBvciBjb25maWd1cmVkIG1ldGFkYXRhXG4gIGlmIChvcHRpb25zICYmIChvcHRpb25zLnRlbXBsYXRlIHx8IG9wdGlvbnMuZGF0YSkpIHtcbiAgICBpZiAob3B0aW9ucy5kYXRhKSB7XG4gICAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2Uob3B0aW9ucy5kYXRhKTtcbiAgICAgIHN0YXJ0KG9wdGlvbnMsIHVuZGVmaW5lZCwgZGF0YS5tZXRhZGF0YSwgZGF0YS5jb250ZW50LCBjdXN0b21FeHRlbnNpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnQob3B0aW9ucywgb3B0aW9ucy50ZW1wbGF0ZSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGN1c3RvbUV4dGVuc2lvbnMpO1xuICAgIH1cbiAgICAvLyBMb2FkaW5nIGZyb20gTG9jYWxTdG9yYWdlIChpZiB1cmwgaGFzaCBoYXMgYSA3Y2hhcnMga2V5KVxuICB9IGVsc2UgaWYgKGhhc2ggJiYgaGFzaC5sZW5ndGggPT0gNykge1xuICAgIGluaXRGcm9tTG9jYWxTdG9yYWdlKG9wdGlvbnMsIGhhc2gsIGN1c3RvbUV4dGVuc2lvbnMpO1xuICAgIC8vIExvYWRpbmcgZnJvbSB0ZW1wbGF0ZSB1cmwgYXMgaGFzaCAoaWYgaGFzaCBpcyBub3QgYSB2YWxpZCBsb2NhbHN0b3JhZ2Uga2V5KVxuICB9IGVsc2UgaWYgKGhhc2gpIHtcbiAgICBzdGFydChvcHRpb25zLCBfY2Fub25pY2FsaXplKGhhc2gpLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY3VzdG9tRXh0ZW5zaW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQ29tcGF0aWJsZTogdGVtcGxhdGVMb2FkZXIuaXNDb21wYXRpYmxlLFxuICBpbml0OiBpbml0LFxuICBzdGFydDogc3RhcnRcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBrbyA9IHJlcXVpcmUoXCJrbm9ja291dFwiKTtcbnZhciBjb25zb2xlID0gcmVxdWlyZShcImNvbnNvbGVcIik7XG5cbi8vIEBzZWUgYWxzbyBzY3JpcHQtdGVtcGxhdGUuanMgcHVzaFRlbXBsYXRlXG52YXIgYWRkU2NyaXB0VGVtcGxhdGUgPSBmdW5jdGlvbihkb2MsIHRlbXBsYXRlTmFtZSwgdGVtcGxhdGVNYXJrdXApIHtcbiAgdmFyIHNjcmlwdFRhZyA9IGRvYy5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgc2NyaXB0VGFnLnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0L2h0bWwnKTtcbiAgc2NyaXB0VGFnLnNldEF0dHJpYnV0ZSgnaWQnLCB0ZW1wbGF0ZU5hbWUpO1xuICBzY3JpcHRUYWcudGV4dCA9IHRlbXBsYXRlTWFya3VwO1xuICBkb2MuYm9keS5hcHBlbmRDaGlsZChzY3JpcHRUYWcpO1xuICByZXR1cm4gc2NyaXB0VGFnO1xuICAvLyAkKCc8c2NyaXB0IHR5cGU9XCJ0ZXh0L2h0bWxcIj48L3NjJyArICdyaXB0PicpLnRleHQodGVtcGxhdGVNYXJrdXApLmF0dHIoJ2lkJywgdGVtcGxhdGVOYW1lKS5hcHBlbmRUbygkKCdib2R5JykpO1xufTtcblxuLy8gdXNlZCBmb3IgbGl2ZSBwcmV2aWV3IGluIGlmcmFtZS5cbmtvLmJpbmRpbmdIYW5kbGVycy5iaW5kSWZyYW1lID0ge1xuICAvLyB0cGwgd2lsbCBiZSBvdmVycmlkZW4gd2l0aCB0aGUgc3RydWN0dXJlIHBhcnNlZCBieSB0aGUgaW5wdXQgdGVtcGxhdGUuXG4gIHRwbDogXCI8IURPQ1RZUEUgaHRtbD5cXHJcXG48aHRtbD5cXHJcXG48aGVhZD5cXHJcXG48L2hlYWQ+XFxyXFxuPGJvZHk+PGRpdiBkYXRhLWJpbmQ9XFxcImJsb2NrOiBjb250ZW50XFxcIj48L2Rpdj48L2JvZHk+XFxyXFxuPC9odG1sPlxcclxcblwiLFxuICBpbml0OiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKSB7XG4gICAgZnVuY3Rpb24gYmluZElmcmFtZShsb2NhbCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIGlmcmFtZSA9IGVsZW1lbnQuY29udGVudERvY3VtZW50O1xuICAgICAgICBpZnJhbWUub3BlbigpO1xuICAgICAgICBpZnJhbWUud3JpdGUoa28uYmluZGluZ0hhbmRsZXJzLmJpbmRJZnJhbWUudHBsKTtcbiAgICAgICAgaWZyYW1lLmNsb3NlKCk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgaWZyYW1lZG9jID0gaWZyYW1lLmJvZHk7XG4gICAgICAgICAgaWYgKGlmcmFtZWRvYykge1xuICAgICAgICAgICAgLy8gc2NyaXB0cyBoYXZlIHRvIGJlIGR1cGxpY2F0ZWQgKG1heWJlIHRoaXMgaXMgbm90IG5lZWRlZCBhbnltb3JlIHNpbmNlIHVzaW5nIHN0cmluZy10ZW1wbGF0ZXMpXG4gICAgICAgICAgICB2YXIgdGVtcGxhdGVzID0gZWxlbWVudC5jb250ZW50V2luZG93LnBhcmVudC5kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0Jyk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRlbXBsYXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBpZiAodGVtcGxhdGVzW2ldLmdldEF0dHJpYnV0ZSgndHlwZScpID09ICd0ZXh0L2h0bWwnICYmIHRlbXBsYXRlc1tpXS5nZXRBdHRyaWJ1dGUoJ2lkJykpIHtcbiAgICAgICAgICAgICAgICBhZGRTY3JpcHRUZW1wbGF0ZShpZnJhbWUsIHRlbXBsYXRlc1tpXS5nZXRBdHRyaWJ1dGUoJ2lkJyksIHRlbXBsYXRlc1tpXS5pbm5lckhUTUwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBodG1sID0gaWZyYW1lLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiSFRNTFwiKTtcblxuICAgICAgICAgICAga28udXRpbHMuZG9tTm9kZURpc3Bvc2FsLmFkZERpc3Bvc2VDYWxsYmFjayhlbGVtZW50LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAga28uY2xlYW5Ob2RlKGh0bWxbMF0gfHwgaWZyYW1lZG9jKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBrby5hcHBseUJpbmRpbmdzKHZhbHVlQWNjZXNzb3IoKSwgaHRtbFswXSB8fCBpZnJhbWVkb2MpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIm5vIGlmcmFtZWRvY1wiLCBsb2NhbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJlcnJvciByZWFkaW5nIGlmcmFtZS5ib2R5XCIsIGUsIGxvY2FsKTtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZXJyb3IgcmVhZGluZyBpZnJhbWUgY29udGVudERvY3VtZW50XCIsIGUsIGxvY2FsKTtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgLy8gaWdub3JlZFxuICAgICAgfVxuICAgIH1cbiAgICBiaW5kSWZyYW1lKFwiZmlyc3QgY2FsbFwiKTtcbiAgICAvLyBvbGRlciBicm93c2VycyBuZWVkZWQgdGhpc1xuICAgIC8vIGtvLnV0aWxzLnJlZ2lzdGVyRXZlbnRIYW5kbGVyKGVsZW1lbnQsICdsb2FkJywgYmluZElmcmFtZSk7XG4gIH1cbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKiBnbG9iYWxzIGdsb2JhbDpmYWxzZSAqL1xuXG52YXIga28gPSByZXF1aXJlKFwia25vY2tvdXRcIik7XG52YXIgY29uc29sZSA9IHJlcXVpcmUoXCJjb25zb2xlXCIpO1xuXG5cbmtvLmJpbmRpbmdIYW5kbGVyc1snd2l0aFByb3BlcnRpZXMnXSA9IHtcbiAgaW5pdDogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3MsIHZpZXdNb2RlbCwgYmluZGluZ0NvbnRleHQpIHtcbiAgICAvLyBNYWtlIGEgbW9kaWZpZWQgYmluZGluZyBjb250ZXh0LCB3aXRoIGEgZXh0cmEgcHJvcGVydGllcywgYW5kIGFwcGx5IGl0IHRvIGRlc2NlbmRhbnQgZWxlbWVudHNcbiAgICB2YXIgY2hpbGRCaW5kaW5nQ29udGV4dCA9IGJpbmRpbmdDb250ZXh0LmNyZWF0ZUNoaWxkQ29udGV4dChcbiAgICAgIGJpbmRpbmdDb250ZXh0LiRyYXdEYXRhLFxuICAgICAgbnVsbCwgLy8gT3B0aW9uYWxseSwgcGFzcyBhIHN0cmluZyBoZXJlIGFzIGFuIGFsaWFzIGZvciB0aGUgZGF0YSBpdGVtIGluIGRlc2NlbmRhbnQgY29udGV4dHNcbiAgICAgIGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICAgICAga28udXRpbHMuZXh0ZW5kKGNvbnRleHQsIHZhbHVlQWNjZXNzb3IoKSk7XG4gICAgICB9XG4gICAgKTtcbiAgICBrby5hcHBseUJpbmRpbmdzVG9EZXNjZW5kYW50cyhjaGlsZEJpbmRpbmdDb250ZXh0LCBlbGVtZW50KTtcblxuICAgIC8vIEFsc28gdGVsbCBLTyAqbm90KiB0byBiaW5kIHRoZSBkZXNjZW5kYW50cyBpdHNlbGYsIG90aGVyd2lzZSB0aGV5IHdpbGwgYmUgYm91bmQgdHdpY2VcbiAgICByZXR1cm4ge1xuICAgICAgY29udHJvbHNEZXNjZW5kYW50QmluZGluZ3M6IHRydWVcbiAgICB9O1xuICB9XG59O1xua28udmlydHVhbEVsZW1lbnRzLmFsbG93ZWRCaW5kaW5nc1snd2l0aFByb3BlcnRpZXMnXSA9IHRydWU7XG5cbmtvLmJpbmRpbmdIYW5kbGVyc1snbG9nJ10gPSB7XG4gIGluaXQ6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzLCB2aWV3TW9kZWwsIGJpbmRpbmdDb250ZXh0KSB7XG4gICAgY29uc29sZS5sb2coXCJsb2dcIiwgdmFsdWVBY2Nlc3NvcigpKTtcbiAgfVxufTtcblxuXG5rby5iaW5kaW5nSGFuZGxlcnNbJ2Jsb2NrJ10gPSB7XG5cbiAgdGVtcGxhdGVFeGlzdHM6IGZ1bmN0aW9uKGlkKSB7XG4gICAgdmFyIGVsID0gZ2xvYmFsLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcbiAgICBpZiAoZWwpIHJldHVybiB0cnVlO1xuICAgIGVsc2UgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIF9jaG9vc2VUZW1wbGF0ZTogZnVuY3Rpb24oaXNBcnJheSwgcHJlZml4LCBhY3Rpb24sIGZhbGxiYWNrKSB7XG4gICAgdmFyIGlkID0gcHJlZml4ICsgJy0nICsgYWN0aW9uO1xuICAgIGlmIChrby5iaW5kaW5nSGFuZGxlcnNbJ2Jsb2NrJ10udGVtcGxhdGVFeGlzdHMoaWQpKSByZXR1cm4gaWQ7XG4gICAgaWYgKHR5cGVvZiBmYWxsYmFjayAhPSAndW5kZWZpbmVkJyAmJiBmYWxsYmFjayAhPT0gbnVsbCkgcmV0dXJuIGtvLmJpbmRpbmdIYW5kbGVyc1snYmxvY2snXS5fY2hvb3NlVGVtcGxhdGUoaXNBcnJheSwgcHJlZml4LCBmYWxsYmFjayk7XG4gICAgZWxzZSB7XG4gICAgICB2YXIgZmFsbEJhY2tJZCA9IGlzQXJyYXkgPyAnYXJyYXknIDogJ29iamVjdC0nICsgYWN0aW9uO1xuICAgICAgaWYgKGtvLmJpbmRpbmdIYW5kbGVyc1snYmxvY2snXS50ZW1wbGF0ZUV4aXN0cyhmYWxsQmFja0lkKSkgcmV0dXJuIGZhbGxCYWNrSWQ7XG4gICAgICBlbHNlIHRocm93IFwiY2Fubm90IGZpbmQgdGVtcGxhdGUgZm9yIFwiICsgaWQgKyBcIi9cIiArIGZhbGxCYWNrSWQ7XG4gICAgfVxuICB9LFxuXG4gIC8vIGNvbXB1dGUgZGlzcGxheU1vZGUgZGVwZW5kaW5nIG9uIHRlbXBsYXRlTW9kZSBzZXQgdXNpbmcgXCJ3aXRoUHJvcGVydGllc1wiIGJpbmRpbmcuXG4gIF9kaXNwbGF5TW9kZTogZnVuY3Rpb24odW53cmFwcGVkLCBiaW5kaW5nQ29udGV4dCkge1xuICAgIHZhciBwcmVmaXggPSB0eXBlb2YgdW53cmFwcGVkLnR5cGUgIT0gJ3VuZGVmaW5lZCcgPyBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHVud3JhcHBlZC50eXBlKSA6ICdub3RhYmxvY2stJyArIHR5cGVvZih1bndyYXBwZWQpO1xuICAgIHZhciBpc0FycmF5ID0gdHlwZW9mIHVud3JhcHBlZC5zcGxpY2UgIT09ICd1bmRlZmluZWQnO1xuICAgIHZhciB0ZW1wbGF0ZU1vZGUgPSBiaW5kaW5nQ29udGV4dC50ZW1wbGF0ZU1vZGUgPyBiaW5kaW5nQ29udGV4dC50ZW1wbGF0ZU1vZGUgOiAnc2hvdyc7XG4gICAgcmV0dXJuIGtvLmJpbmRpbmdIYW5kbGVyc1snYmxvY2snXS5fY2hvb3NlVGVtcGxhdGUoaXNBcnJheSwgcHJlZml4LCB0ZW1wbGF0ZU1vZGUsIGJpbmRpbmdDb250ZXh0LnRlbXBsYXRlTW9kZUZhbGxiYWNrKTtcbiAgfSxcblxuICBfbWFrZVRlbXBsYXRlVmFsdWVBY2Nlc3NvcjogZnVuY3Rpb24odmFsdWVBY2Nlc3NvciwgYmluZGluZ0NvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmFsdWUgPSB2YWx1ZUFjY2Vzc29yKCksXG4gICAgICAgIHVud3JhcHBlZFZhbHVlID0ga28udXRpbHMucGVla09ic2VydmFibGUodmFsdWUpOyAvLyBVbndyYXAgd2l0aG91dCBzZXR0aW5nIGEgZGVwZW5kZW5jeSBoZXJlXG5cbiAgICAgIC8vIElmIHVud3JhcHBlZFZhbHVlLmRhdGEgaXMgdGhlIGFycmF5LCBwcmVzZXJ2ZSBhbGwgcmVsZXZhbnQgb3B0aW9ucyBhbmQgdW53cmFwIGFnYWluIHZhbHVlIHNvIHdlIGdldCB1cGRhdGVzXG4gICAgICB2YXIgbW9kZWxWYWx1ZTtcbiAgICAgIHZhciB0ZW1wbGF0ZTtcblxuICAgICAgaWYgKCghdW53cmFwcGVkVmFsdWUpIHx8ICh0eXBlb2YgdW53cmFwcGVkVmFsdWUuZGF0YSAhPSAnb2JqZWN0JyAmJiB0eXBlb2YgdW53cmFwcGVkVmFsdWUuZGF0YSAhPSAnZnVuY3Rpb24nKSkge1xuICAgICAgICBtb2RlbFZhbHVlID0gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtb2RlbFZhbHVlID0gdW53cmFwcGVkVmFsdWUuZGF0YTtcbiAgICAgICAgaWYgKHR5cGVvZiB1bndyYXBwZWRWYWx1ZS50ZW1wbGF0ZSAhPSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHZhciB0ZW1wbGF0ZVBhcmFtID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh1bndyYXBwZWRWYWx1ZS50ZW1wbGF0ZSk7XG4gICAgICAgICAgdmFyIHRlbXBsYXRlTW9kZSA9IGJpbmRpbmdDb250ZXh0LnRlbXBsYXRlTW9kZSA/IGJpbmRpbmdDb250ZXh0LnRlbXBsYXRlTW9kZSA6ICdzaG93JztcbiAgICAgICAgICB0ZW1wbGF0ZSA9IGtvLmJpbmRpbmdIYW5kbGVyc1snYmxvY2snXS5fY2hvb3NlVGVtcGxhdGUoZmFsc2UsIHRlbXBsYXRlUGFyYW0sIHRlbXBsYXRlTW9kZSwgYmluZGluZ0NvbnRleHQudGVtcGxhdGVNb2RlRmFsbGJhY2spO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciB1bndyYXBwZWRNb2RlbFZhbHVlID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShtb2RlbFZhbHVlKTtcbiAgICAgIGlmIChrby5pc09ic2VydmFibGUodW53cmFwcGVkTW9kZWxWYWx1ZSkpIGNvbnNvbGUubG9nKFwiZG91YmxlT2JzZXJ2YWJsZVwiLCB1bndyYXBwZWRNb2RlbFZhbHVlKTtcblxuICAgICAgaWYgKHR5cGVvZiB0ZW1wbGF0ZSA9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAvLyBOT1RFIElFOCB1c2VkIHRvIGJyZWFrIGhlcmUsIGJ1dCB3ZSBkb24ndCBzdXBwb3J0IGl0IGFueW1vcmUsIHNvIG1heWJlIHRoaXMgaXMgbm90IG5lZWRlZC5cbiAgICAgICAgaWYgKG1vZGVsVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRlbXBsYXRlID0gJ2VtcHR5JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGVtcGxhdGUgPSBrby5iaW5kaW5nSGFuZGxlcnNbJ2Jsb2NrJ10uX2Rpc3BsYXlNb2RlKHVud3JhcHBlZE1vZGVsVmFsdWUsIGJpbmRpbmdDb250ZXh0KTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlLCB1bndyYXBwZWRNb2RlbFZhbHVlLCBiaW5kaW5nQ29udGV4dFsnJGRhdGEnXSwgYmluZGluZ0NvbnRleHQudGVtcGxhdGVNb2RlKTtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgICduYW1lJzogdGVtcGxhdGUsXG4gICAgICAgICdkYXRhJzogbW9kZWxWYWx1ZSxcbiAgICAgICAgJ3RlbXBsYXRlRW5naW5lJzoga28ubmF0aXZlVGVtcGxhdGVFbmdpbmUuaW5zdGFuY2VcbiAgICAgIH07XG4gICAgfTtcbiAgfSxcblxuICAnaW5pdCc6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzLCB2aWV3TW9kZWwsIGJpbmRpbmdDb250ZXh0KSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZUFjY2Vzc29yKCkgPT09ICd1bmRlZmluZWQnKSBjb25zb2xlLmxvZyhcImZvdW5kIGEgbnVsbCBibG9jazogY2hlY2sgZW5kaW5nIGNvbW1hcyBpbiBhcnJheXMgZGVmcyBpbiBJRVwiKTtcbiAgICB2YXIgbmV3VmFsdWVBY2Nlc3NvciA9IGtvLmJpbmRpbmdIYW5kbGVyc1snYmxvY2snXS5fbWFrZVRlbXBsYXRlVmFsdWVBY2Nlc3Nvcih2YWx1ZUFjY2Vzc29yLCBiaW5kaW5nQ29udGV4dCk7XG4gICAgcmV0dXJuIGtvLmJpbmRpbmdIYW5kbGVyc1sndGVtcGxhdGUnXVsnaW5pdCddKGVsZW1lbnQsIG5ld1ZhbHVlQWNjZXNzb3IpO1xuICB9LFxuICAndXBkYXRlJzogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3MsIHZpZXdNb2RlbCwgYmluZGluZ0NvbnRleHQpIHtcbiAgICB2YXIgbmV3VmFsdWVBY2Nlc3NvciA9IGtvLmJpbmRpbmdIYW5kbGVyc1snYmxvY2snXS5fbWFrZVRlbXBsYXRlVmFsdWVBY2Nlc3Nvcih2YWx1ZUFjY2Vzc29yLCBiaW5kaW5nQ29udGV4dCk7XG4gICAgcmV0dXJuIGtvLmJpbmRpbmdIYW5kbGVyc1sndGVtcGxhdGUnXVsndXBkYXRlJ10oZWxlbWVudCwgbmV3VmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3MsIHZpZXdNb2RlbCwgYmluZGluZ0NvbnRleHQpO1xuICB9XG59O1xua28uZXhwcmVzc2lvblJld3JpdGluZy5iaW5kaW5nUmV3cml0ZVZhbGlkYXRvcnNbJ2Jsb2NrJ10gPSBmYWxzZTsgLy8gQ2FuJ3QgcmV3cml0ZSBjb250cm9sIGZsb3cgYmluZGluZ3NcbmtvLnZpcnR1YWxFbGVtZW50cy5hbGxvd2VkQmluZGluZ3NbJ2Jsb2NrJ10gPSB0cnVlOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vLyBzY3JpcHQgdGVtcGxhdGUgaXMgdGhlIG9uZSBwcm92aWRlZCBieSBLTyBhbmQgZGVhbHMgd2l0aCB0ZW1wYWx0ZXMgZGVmaW5lZCBhcyA8c2NyaXB0IHR5cGU9dGV4dC9odG1sLlxuLy8gc3RyaW5nIHRlbXBsYXRlIGRlZmluZXMgdGhlbSBpbiBtZW1vcnkgYW5kIGF2b2lkcyBwb2xsdXRpbmcgdGhlIEhUTUw6IHNlZW1zIHRvIHdvcmsgYmV0dGVyIGluIE1vc2FpY28uXG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9zdHJpbmctdGVtcGxhdGUuanMnKTtcbi8vIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9zY3JpcHQtdGVtcGxhdGUuanMnKTsiLCJcInVzZSBzdHJpY3RcIjtcbi8qIGdsb2JhbCBnbG9iYWw6IGZhbHNlICovXG5cbnJlcXVpcmUoXCJldm9sLWNvbG9ycGlja2VyXCIpO1xuXG52YXIgJCA9IHJlcXVpcmUoXCJqcXVlcnlcIik7XG52YXIga28gPSByZXF1aXJlKFwia25vY2tvdXRcIik7XG52YXIga29qcXVpID0gcmVxdWlyZShcImtub2Nrb3V0LWpxdWVyeXVpXCIpO1xuXG5cbnZhciBDb2xvclBpY2tlciA9IGZ1bmN0aW9uKCkge1xuICBrb2pxdWkuQmluZGluZ0hhbmRsZXIuY2FsbCh0aGlzLCAnY29sb3JwaWNrZXInKTtcbn07XG5Db2xvclBpY2tlci5wcm90b3R5cGUgPSBrb2pxdWkudXRpbHMuY3JlYXRlT2JqZWN0KGtvanF1aS5CaW5kaW5nSGFuZGxlci5wcm90b3R5cGUpO1xuQ29sb3JQaWNrZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29sb3JQaWNrZXI7XG5cbkNvbG9yUGlja2VyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3MpIHtcbiAgdmFyIHZhID0gdmFsdWVBY2Nlc3NvcigpO1xuICB2YXIgdmFsdWUgPSB2YS5jb2xvcjtcblxuICAvLyBJbiBvcmRlciB0byBoYXZlIGEgY29ycmVjdCBkZXBlbmRlbmN5IHRyYWNraW5nIGluIFwiaWZTdWJzXCIgd2UgaGF2ZSB0byBlbnN1cmUgd2UgdXNlIGEgc2luZ2xlIGNvbXB1dGVyIGZvciBlYWNoIGVkaXRhYmxlXG4gIC8vIHByb3BlcnR5LiBHaXZlbiB0aGlzIGJpbmRpbmcgbmVlZHMgMiBvZiB0aGVtLCB3ZSBjcmVhdGUgYSBjb21wdXRlZCBzbyB0byBcInByb3h5XCIgdGhlIGRlcGVuZGVuY2llcy5cbiAgdmFyIG5ld0RPID0ga28uY29tcHV0ZWQoe1xuICAgIHJlYWQ6IHZhbHVlLFxuICAgIHdyaXRlOiB2YWx1ZSxcbiAgICBkaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQ6IGVsZW1lbnRcbiAgfSk7XG4gIHZhciBuZXdWQSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXdETztcbiAgfTtcblxuICBrby5iaW5kaW5nSGFuZGxlcnMudmFsdWUuaW5pdChlbGVtZW50LCBuZXdWQSwgYWxsQmluZGluZ3MpO1xuXG4gIHZhciBjaGFuZ2VQcm9wYWdhdG9yID0gZnVuY3Rpb24oZXZlbnQsIGNvbG9yKSB7XG4gICAgaWYgKHR5cGVvZiBjb2xvciAhPT0gJ3VuZGVmaW5lZCcpIG5ld0RPKGNvbG9yKTtcbiAgfTtcbiAgJChlbGVtZW50KS5vbignY2hhbmdlLmNvbG9yJywgY2hhbmdlUHJvcGFnYXRvcik7XG5cbiAga28uY29tcHV0ZWQoe1xuICAgIHJlYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG9wdCA9IHtcbiAgICAgICAgY29sb3I6IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUobmV3RE8pLFxuICAgICAgICBzaG93T246ICdidXR0b24nXG4gICAgICB9O1xuICAgICAgZm9yICh2YXIgcHJvcCBpbiB2YSlcbiAgICAgICAgaWYgKHByb3AgIT09ICdjb2xvcicgJiYgdmEuaGFzT3duUHJvcGVydHkocHJvcCkpIG9wdFtwcm9wXSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFbcHJvcF0pO1xuICAgICAgJChlbGVtZW50KS5jb2xvcnBpY2tlcihvcHQpO1xuICAgIH0sXG4gICAgZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkOiBlbGVtZW50XG4gIH0pO1xuXG4gIGtvLnV0aWxzLmRvbU5vZGVEaXNwb3NhbC5hZGREaXNwb3NlQ2FsbGJhY2soZWxlbWVudCwgZnVuY3Rpb24oKSB7XG4gICAgJChlbGVtZW50KS5vZmYoJ2NoYW5nZS5jb2xvcicsIGNoYW5nZVByb3BhZ2F0b3IpO1xuICAgICQoZWxlbWVudCkuY29sb3JwaWNrZXIoJ2Rlc3Ryb3knKTtcbiAgfSk7XG5cbn07XG5rb2pxdWkudXRpbHMucmVnaXN0ZXIoQ29sb3JQaWNrZXIpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIga28gPSByZXF1aXJlKFwia25vY2tvdXRcIik7XG5cbi8qIGh0dHBzOi8vZ2l0aHViLmNvbS9rbm9ja291dC9rbm9ja291dC9pc3N1ZXMvMTE3MSAqL1xua28uYmluZGluZ0hhbmRsZXJzLmNzc1RleHQgPSB7XG4gICd1cGRhdGUnOiBmdW5jdGlvbihub2RlLCB2YWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5ncykge1xuICAgIHZhciB0ZXh0ID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZUFjY2Vzc29yKCkpO1xuICAgIHRyeSB7XG4gICAgICBub2RlLmlubmVyVGV4dCA9IHRleHQ7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKCFub2RlLnN0eWxlU2hlZXQpIG5vZGUuaW5uZXJIVE1MID0gXCJhe31cIjtcbiAgICAgIG5vZGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gdGV4dDtcbiAgICB9XG4gIH1cbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciAkID0gcmVxdWlyZShcImpxdWVyeVwiKTtcbnZhciBrbyA9IHJlcXVpcmUoXCJrbm9ja291dFwiKTtcblxuLyoga25vY2tvdXQgZHJvcHBhYmxlLCB3aXRoIHNpbXBsaWZpZWQgVU1EICovXG47KGZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgZmFjdG9yeShrbywgJCk7XG59KShmdW5jdGlvbihrbywgJCkge1xuICB2YXIgSVRFTUtFWSA9IFwia29fc29ydEl0ZW1cIixcbiAgICBJTkRFWEtFWSA9IFwia29fc291cmNlSW5kZXhcIixcbiAgICBMSVNUS0VZID0gXCJrb19zb3J0TGlzdFwiLFxuICAgIFBBUkVOVEtFWSA9IFwia29fcGFyZW50TGlzdFwiLFxuICAgIERSQUdLRVkgPSBcImtvX2RyYWdJdGVtXCIsXG4gICAgdW53cmFwID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSxcbiAgICBkYXRhR2V0ID0ga28udXRpbHMuZG9tRGF0YS5nZXQsXG4gICAgZGF0YVNldCA9IGtvLnV0aWxzLmRvbURhdGEuc2V0O1xuXG4gIGtvLmJpbmRpbmdIYW5kbGVycy5kcm9wcGFibGUgPSB7XG4gICAgaW5pdDogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3NBY2Nlc3NvciwgZGF0YSwgY29udGV4dCkge1xuICAgICAgdmFyICRlbGVtZW50ID0gJChlbGVtZW50KSxcbiAgICAgICAgdmFsdWUgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlQWNjZXNzb3IoKSkgfHwge30sXG4gICAgICAgIGRyb3BwYWJsZSA9IHt9LFxuICAgICAgICBkcm9wQWN0dWFsO1xuXG4gICAgICAkLmV4dGVuZCh0cnVlLCBkcm9wcGFibGUsIGtvLmJpbmRpbmdIYW5kbGVycy5kcm9wcGFibGUpO1xuICAgICAgaWYgKHZhbHVlLmRhdGEpIHtcbiAgICAgICAgaWYgKHZhbHVlLm9wdGlvbnMgJiYgZHJvcHBhYmxlLm9wdGlvbnMpIHtcbiAgICAgICAgICBrby51dGlscy5leHRlbmQoZHJvcHBhYmxlLm9wdGlvbnMsIHZhbHVlLm9wdGlvbnMpO1xuICAgICAgICAgIGRlbGV0ZSB2YWx1ZS5vcHRpb25zO1xuICAgICAgICB9XG4gICAgICAgIGtvLnV0aWxzLmV4dGVuZChkcm9wcGFibGUsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRyb3BwYWJsZS5kYXRhID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGRyb3BBY3R1YWwgPSBkcm9wcGFibGUub3B0aW9ucy5kcm9wO1xuXG4gICAgICAkZWxlbWVudC5kcm9wcGFibGUoa28udXRpbHMuZXh0ZW5kKGRyb3BwYWJsZS5vcHRpb25zLCB7XG4gICAgICAgIGRyb3A6IGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xuXG4gICAgICAgICAgdmFyIGVsID0gdWkuZHJhZ2dhYmxlWzBdLFxuICAgICAgICAgICAgaXRlbSA9IGRhdGFHZXQoZWwsIElURU1LRVkpIHx8IGRhdGFHZXQoZWwsIERSQUdLRVkpO1xuXG4gICAgICAgICAgaWYgKGl0ZW0pIHtcblxuICAgICAgICAgICAgaWYgKGl0ZW0uY2xvbmUpIHtcbiAgICAgICAgICAgICAgaXRlbSA9IGl0ZW0uY2xvbmUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRyb3BwYWJsZS5kcmFnZ2VkKSB7XG4gICAgICAgICAgICAgIGl0ZW0gPSBkcm9wcGFibGUuZHJhZ2dlZC5jYWxsKHRoaXMsIGl0ZW0sIGV2ZW50LCB1aSkgfHwgaXRlbTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRyb3BwYWJsZS5kYXRhKSB7XG4gICAgICAgICAgICAgIGRyb3BwYWJsZS5kYXRhKGl0ZW0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGRyb3BBY3R1YWwpIHtcbiAgICAgICAgICAgIGRyb3BBY3R1YWwuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgICAgfSkpO1xuXG4gICAgICAvL2hhbmRsZSBlbmFibGluZy9kaXNhYmxpbmdcbiAgICAgIGlmIChkcm9wcGFibGUuaXNFbmFibGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAga28uY29tcHV0ZWQoe1xuICAgICAgICAgIHJlYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJGVsZW1lbnQuZHJvcHBhYmxlKGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoZHJvcHBhYmxlLmlzRW5hYmxlZCkgPyBcImVuYWJsZVwiIDogXCJkaXNhYmxlXCIpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkOiBlbGVtZW50XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgfSxcbiAgICB1cGRhdGU6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzQWNjZXNzb3IsIGRhdGEsIGNvbnRleHQpIHtcblxuICAgIH0sXG4gICAgdGFyZ2V0SW5kZXg6IG51bGwsXG4gICAgYWZ0ZXJNb3ZlOiBudWxsLFxuICAgIGJlZm9yZU1vdmU6IG51bGwsXG4gICAgb3B0aW9uczoge31cbiAgfTtcbn0pOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIga28gPSByZXF1aXJlKFwia25vY2tvdXRcIik7XG52YXIgJCA9IHJlcXVpcmUoXCJqcXVlcnlcIik7XG52YXIgY29uc29sZSA9IHJlcXVpcmUoXCJjb25zb2xlXCIpO1xuXG4vKiB1dGlsaXR5IGZvciB0b2dldGhlcmpzICovXG5rby5iaW5kaW5nSGFuZGxlcnMuZm9jdXNhYmxlID0ge1xuICAnZm9jdXMnOiBmdW5jdGlvbigpIHt9LFxuICAnYmx1cic6IGZ1bmN0aW9uKCkge30sXG4gICdpbml0JzogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIGtvLnV0aWxzLmRvbU5vZGVEaXNwb3NhbC5hZGREaXNwb3NlQ2FsbGJhY2soZWxlbWVudCwgZnVuY3Rpb24oKSB7XG4gICAgICAkKGVsZW1lbnQpLm9mZihcImZvY3VzaW5cIiwga28uYmluZGluZ0hhbmRsZXJzLmZvY3VzYWJsZS5mb2N1cyk7XG4gICAgICAkKGVsZW1lbnQpLm9mZihcImZvY3Vzb3V0XCIsIGtvLmJpbmRpbmdIYW5kbGVycy5mb2N1c2FibGUuYmx1cik7XG4gICAgfSk7XG5cbiAgICAkKGVsZW1lbnQpLm9uKFwiZm9jdXNpblwiLCBrby5iaW5kaW5nSGFuZGxlcnMuZm9jdXNhYmxlLmZvY3VzKTtcbiAgICAkKGVsZW1lbnQpLm9uKFwiZm9jdXNvdXRcIiwga28uYmluZGluZ0hhbmRsZXJzLmZvY3VzYWJsZS5ibHVyKTtcblxuICB9XG59O1xuXG5rby5iaW5kaW5nSGFuZGxlcnMuc2Nyb2xsYWJsZSA9IHtcbiAgJ3Njcm9sbCc6IGZ1bmN0aW9uKCkge30sXG4gICdpbml0JzogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIGtvLnV0aWxzLmRvbU5vZGVEaXNwb3NhbC5hZGREaXNwb3NlQ2FsbGJhY2soZWxlbWVudCwgZnVuY3Rpb24oKSB7XG4gICAgICAkKGVsZW1lbnQpLm9mZihcInNjcm9sbFwiLCBrby5iaW5kaW5nSGFuZGxlcnMuc2Nyb2xsYWJsZS5zY3JvbGwpO1xuICAgIH0pO1xuXG4gICAgJChlbGVtZW50KS5vbihcInNjcm9sbFwiLCBrby5iaW5kaW5nSGFuZGxlcnMuc2Nyb2xsYWJsZS5zY3JvbGwpO1xuXG4gIH1cbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBrbyA9IHJlcXVpcmUoXCJrbm9ja291dFwiKTtcblxua28uZXh0ZW5kZXJzLnBhZ2luZyA9IGZ1bmN0aW9uKHRhcmdldCwgcGFnZVNpemUpIHtcbiAgdmFyIF9wYWdlU2l6ZSA9IGtvLm9ic2VydmFibGUocGFnZVNpemUgfHwgMTApLFxuICAgIC8vIGRlZmF1bHQgcGFnZVNpemUgdG8gMTBcbiAgICBfY3VycmVudFBhZ2UgPSBrby5vYnNlcnZhYmxlKDEpOyAvLyBkZWZhdWx0IGN1cnJlbnQgcGFnZSB0byAxXG4gIHRhcmdldC5wYWdlU2l6ZSA9IGtvLmNvbXB1dGVkKHtcbiAgICByZWFkOiBfcGFnZVNpemUsXG4gICAgd3JpdGU6IGZ1bmN0aW9uKG5ld1ZhbHVlKSB7XG4gICAgICBpZiAobmV3VmFsdWUgPiAwKSB7XG4gICAgICAgIF9wYWdlU2l6ZShuZXdWYWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfcGFnZVNpemUoMTApO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgdGFyZ2V0LmN1cnJlbnRQYWdlID0ga28uY29tcHV0ZWQoe1xuICAgIHJlYWQ6IF9jdXJyZW50UGFnZSxcbiAgICB3cml0ZTogZnVuY3Rpb24obmV3VmFsdWUpIHtcbiAgICAgIGlmIChuZXdWYWx1ZSA+IHRhcmdldC5wYWdlQ291bnQoKSkge1xuICAgICAgICBfY3VycmVudFBhZ2UodGFyZ2V0LnBhZ2VDb3VudCgpKTtcbiAgICAgIH0gZWxzZSBpZiAobmV3VmFsdWUgPD0gMCkge1xuICAgICAgICBfY3VycmVudFBhZ2UoMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfY3VycmVudFBhZ2UobmV3VmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgdGFyZ2V0LnBhZ2VDb3VudCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBNYXRoLmNlaWwodGFyZ2V0KCkubGVuZ3RoIC8gdGFyZ2V0LnBhZ2VTaXplKCkpIHx8IDE7XG4gIH0pO1xuXG4gIHRhcmdldC5jdXJyZW50UGFnZURhdGEgPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICB2YXIgcGFnZVNpemUgPSBfcGFnZVNpemUoKSxcbiAgICAgIHBhZ2VJbmRleCA9IF9jdXJyZW50UGFnZSgpLFxuICAgICAgc3RhcnRJbmRleCA9IHBhZ2VTaXplICogKHBhZ2VJbmRleCAtIDEpLFxuICAgICAgZW5kSW5kZXggPSBwYWdlU2l6ZSAqIHBhZ2VJbmRleDtcblxuICAgIHJldHVybiB0YXJnZXQoKS5zbGljZShzdGFydEluZGV4LCBlbmRJbmRleCk7XG4gIH0pO1xuXG4gIHRhcmdldC5tb3ZlRmlyc3QgPSBmdW5jdGlvbigpIHtcbiAgICB0YXJnZXQuY3VycmVudFBhZ2UoMSk7XG4gIH07XG4gIHRhcmdldC5tb3ZlUHJldmlvdXMgPSBmdW5jdGlvbigpIHtcbiAgICB0YXJnZXQuY3VycmVudFBhZ2UodGFyZ2V0LmN1cnJlbnRQYWdlKCkgLSAxKTtcbiAgfTtcbiAgdGFyZ2V0Lm1vdmVOZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgdGFyZ2V0LmN1cnJlbnRQYWdlKHRhcmdldC5jdXJyZW50UGFnZSgpICsgMSk7XG4gIH07XG4gIHRhcmdldC5tb3ZlTGFzdCA9IGZ1bmN0aW9uKCkge1xuICAgIHRhcmdldC5jdXJyZW50UGFnZSh0YXJnZXQucGFnZUNvdW50KCkpO1xuICB9O1xuXG4gIHJldHVybiB0YXJnZXQ7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuLyogZ2xvYmFscyBnbG9iYWw6IHRydWUgKi9cblxudmFyICQgPSByZXF1aXJlKFwianF1ZXJ5XCIpO1xudmFyIGtvID0gcmVxdWlyZShcImtub2Nrb3V0XCIpO1xudmFyIGNvbnNvbGUgPSByZXF1aXJlKFwiY29uc29sZVwiKTtcbnJlcXVpcmUoXCJrbm9ja291dC1zb3J0YWJsZVwiKTtcblxudmFyIGlzRHJhZ2dpbmdIZWxwZXIgPSBmdW5jdGlvbih3cml0YWJsZSwgZSkge1xuICBpZiAod3JpdGFibGUoKSkge1xuICAgIGlmIChlLnR5cGUgPT0gd3JpdGFibGUoKSArICdzdG9wJykgd3JpdGFibGUoZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIGlmIChlLnR5cGUgPT0gJ2RyYWdzdGFydCcgfHwgZS50eXBlID09ICdzb3J0c3RhcnQnKSB3cml0YWJsZShlLnR5cGUuc3Vic3RyaW5nKDAsIDQpKTtcbiAgfVxufTtcblxudmFyIG1ha2VFeHRlbmRlZFZhbHVlQWNjZXNzb3IgPSBmdW5jdGlvbih2YWx1ZUFjY2Vzc29yKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbW9kZWxWYWx1ZSA9IHZhbHVlQWNjZXNzb3IoKSxcbiAgICAgIHVud3JhcHBlZFZhbHVlID0ga28udXRpbHMucGVla09ic2VydmFibGUobW9kZWxWYWx1ZSk7IC8vIFVud3JhcCB3aXRob3V0IHNldHRpbmcgYSBkZXBlbmRlbmN5IGhlcmVcblxuICAgIGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUobW9kZWxWYWx1ZSk7XG5cbiAgICBpZiAobW9kZWxWYWx1ZS5vcHRpb25zID09ICd1bmRlZmluZWQnKSB7XG4gICAgICBtb2RlbFZhbHVlLm9wdGlvbnMgPSB7fTtcbiAgICB9XG5cblxuXG4gICAgdmFyIG9yaWdTdGFydCA9IG1vZGVsVmFsdWUub3B0aW9ucy5zdGFydDtcbiAgICBtb2RlbFZhbHVlLm9wdGlvbnMuc3RhcnQgPSBmdW5jdGlvbihlLCB1aSkge1xuICAgICAgaWYgKHR5cGVvZiBtb2RlbFZhbHVlLmRyYWdnaW5nICE9ICd1bmRlZmluZWQnICYmIGtvLmlzV3JpdGFibGVPYnNlcnZhYmxlKG1vZGVsVmFsdWUuZHJhZ2dpbmcpKSBpc0RyYWdnaW5nSGVscGVyKG1vZGVsVmFsdWUuZHJhZ2dpbmcsIGUpO1xuICAgICAgaWYgKHR5cGVvZiBtb2RlbFZhbHVlLmRyb3BDb250YWluZXIgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgbW9kZWxWYWx1ZS5zY3JvbGxJbnRlcnZhbCA9IGdsb2JhbC5zZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgZm9vID0gJChtb2RlbFZhbHVlLmRyb3BDb250YWluZXIpLnNjcm9sbFRvcCgpO1xuICAgICAgICAgICQobW9kZWxWYWx1ZS5kcm9wQ29udGFpbmVyKS5zY3JvbGxUb3AoZm9vICsgbW9kZWxWYWx1ZS5hZGRpbmcpO1xuICAgICAgICB9LCAyMCk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIG9yaWdTdGFydCAhPSAndW5kZWZpbmVkJykgcmV0dXJuIG9yaWdTdGFydChlLCB1aSk7XG4gICAgfTtcbiAgICB2YXIgb3JpZ1N0b3AgPSBtb2RlbFZhbHVlLm9wdGlvbnMuc3RvcDtcbiAgICBtb2RlbFZhbHVlLm9wdGlvbnMuc3RvcCA9IGZ1bmN0aW9uKGUsIHVpKSB7XG4gICAgICBpZiAodHlwZW9mIG1vZGVsVmFsdWUuZHJhZ2dpbmcgIT0gJ3VuZGVmaW5lZCcgJiYga28uaXNXcml0YWJsZU9ic2VydmFibGUobW9kZWxWYWx1ZS5kcmFnZ2luZykpIGlzRHJhZ2dpbmdIZWxwZXIobW9kZWxWYWx1ZS5kcmFnZ2luZywgZSk7XG4gICAgICBpZiAodHlwZW9mIG1vZGVsVmFsdWUuZHJvcENvbnRhaW5lciAhPSAndW5kZWZpbmVkJykge1xuICAgICAgICBnbG9iYWwuY2xlYXJJbnRlcnZhbChtb2RlbFZhbHVlLnNjcm9sbEludGVydmFsKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2Ygb3JpZ1N0b3AgIT0gJ3VuZGVmaW5lZCcpIHJldHVybiBvcmlnU3RvcChlLCB1aSk7XG4gICAgfTtcbiAgICB2YXIgb3JpZ0RyYWcgPSBtb2RlbFZhbHVlLm9wdGlvbnMuZHJhZztcbiAgICBtb2RlbFZhbHVlLm9wdGlvbnMuZHJhZyA9IGZ1bmN0aW9uKGUsIHVpKSB7XG4gICAgICBpZiAodHlwZW9mIG1vZGVsVmFsdWUuZHJvcENvbnRhaW5lciAhPSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgdG9wID0gZS5wYWdlWSAtICQobW9kZWxWYWx1ZS5kcm9wQ29udGFpbmVyKS5vZmZzZXQoKS50b3A7XG4gICAgICAgIHZhciBib3R0b20gPSB0b3AgLSAkKG1vZGVsVmFsdWUuZHJvcENvbnRhaW5lcikuaGVpZ2h0KCk7XG4gICAgICAgIC8vIEhhbmRsZSBzY3JvbGxpbmcgc3BlZWQgZGVwZW5kaW5nIG9uIGRpc3RhbmNlIGZyb20gYm9yZGVyLlxuICAgICAgICBpZiAodG9wIDwgLTIwKSB7XG4gICAgICAgICAgbW9kZWxWYWx1ZS5hZGRpbmcgPSAtMjA7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coXCI8PDxcIik7XG4gICAgICAgIH0gZWxzZSBpZiAodG9wIDwgMCkge1xuICAgICAgICAgIG1vZGVsVmFsdWUuYWRkaW5nID0gLTEwO1xuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiPDxcIik7XG4gICAgICAgIH0gZWxzZSBpZiAodG9wIDwgMTApIHtcbiAgICAgICAgICBtb2RlbFZhbHVlLmFkZGluZyA9IC01O1xuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiPFwiKTtcbiAgICAgICAgfSBlbHNlIGlmIChib3R0b20gPiAyMCkge1xuICAgICAgICAgIG1vZGVsVmFsdWUuYWRkaW5nID0gMjA7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coXCI+Pj5cIik7XG4gICAgICAgIH0gZWxzZSBpZiAoYm90dG9tID4gMCkge1xuICAgICAgICAgIG1vZGVsVmFsdWUuYWRkaW5nID0gMTA7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coXCI+PlwiKTtcbiAgICAgICAgfSBlbHNlIGlmIChib3R0b20gPiAtMTApIHtcbiAgICAgICAgICBtb2RlbFZhbHVlLmFkZGluZyA9IDU7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coXCI+XCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1vZGVsVmFsdWUuYWRkaW5nID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBvcmlnRHJhZyAhPSAndW5kZWZpbmVkJykgcmV0dXJuIG9yaWdEcmFnKGUsIHVpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIG1vZGVsVmFsdWU7XG4gIH07XG59O1xuXG5rby5iaW5kaW5nSGFuZGxlcnMuZXh0c29ydGFibGUgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzQWNjZXNzb3IsIGRhdGEsIGNvbnRleHQpIHtcbiAgICByZXR1cm4ga28uYmluZGluZ0hhbmRsZXJzLnNvcnRhYmxlLmluaXQoZWxlbWVudCwgbWFrZUV4dGVuZGVkVmFsdWVBY2Nlc3Nvcih2YWx1ZUFjY2Vzc29yKSwgYWxsQmluZGluZ3NBY2Nlc3NvciwgZGF0YSwgY29udGV4dCk7XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3NBY2Nlc3NvciwgZGF0YSwgY29udGV4dCkge1xuICAgIHJldHVybiBrby5iaW5kaW5nSGFuZGxlcnMuc29ydGFibGUudXBkYXRlKGVsZW1lbnQsIG1ha2VFeHRlbmRlZFZhbHVlQWNjZXNzb3IodmFsdWVBY2Nlc3NvciksIGFsbEJpbmRpbmdzQWNjZXNzb3IsIGRhdGEsIGNvbnRleHQpO1xuICB9XG59O1xuXG5rby5iaW5kaW5nSGFuZGxlcnMuZXh0ZHJhZ2dhYmxlID0ge1xuICBpbml0OiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5nc0FjY2Vzc29yLCBkYXRhLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGtvLmJpbmRpbmdIYW5kbGVycy5kcmFnZ2FibGUuaW5pdChlbGVtZW50LCBtYWtlRXh0ZW5kZWRWYWx1ZUFjY2Vzc29yKHZhbHVlQWNjZXNzb3IpLCBhbGxCaW5kaW5nc0FjY2Vzc29yLCBkYXRhLCBjb250ZXh0KTtcbiAgfSxcbiAgdXBkYXRlOiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5nc0FjY2Vzc29yLCBkYXRhLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGtvLmJpbmRpbmdIYW5kbGVycy5kcmFnZ2FibGUudXBkYXRlKGVsZW1lbnQsIG1ha2VFeHRlbmRlZFZhbHVlQWNjZXNzb3IodmFsdWVBY2Nlc3NvciksIGFsbEJpbmRpbmdzQWNjZXNzb3IsIGRhdGEsIGNvbnRleHQpO1xuICB9XG59OyIsIlwidXNlIHN0cmljdFwiO1xuLyogZ2xvYmFsIGdsb2JhbDogZmFsc2UsIEltYWdlOiBmYWxzZSAqL1xuXG4vLyBUaGlzIG1vZHVsZSBkZXBlbmRzIG9uIHRob3NlIGZpbGVzLCBidXQgaXQgZG9lc24ndCBoYXZlIGEgZGlyZWN0IGRlcGVuZGVuY3ksIHNvIHdlIGRvbid0IHJlcXVpcmUgdGhlbSBoZXJlLlxuXG4vL3JlcXVpcmUoXCJibHVlaW1wLWNhbnZhcy10by1ibG9iXCIpO1xuLy9yZXF1aXJlKFwianF1ZXJ5LWZpbGUtdXBsb2FkL2pzL2pxdWVyeS5pZnJhbWUtdHJhbnNwb3J0LmpzXCIpO1xuLy9yZXF1aXJlKFwianF1ZXJ5LWZpbGUtdXBsb2FkL2pzL2pxdWVyeS5maWxldXBsb2FkLmpzXCIpO1xuLy9yZXF1aXJlKFwianF1ZXJ5LWZpbGUtdXBsb2FkL2pzL2pxdWVyeS5maWxldXBsb2FkLXByb2Nlc3MuanNcIik7XG4vL3JlcXVpcmUoXCJqcXVlcnktZmlsZS11cGxvYWQvanMvanF1ZXJ5LmZpbGV1cGxvYWQtaW1hZ2UuanNcIik7XG4vL3JlcXVpcmUoXCJqcXVlcnktZmlsZS11cGxvYWQvanMvanF1ZXJ5LmZpbGV1cGxvYWQtdmFsaWRhdGUuanNcIik7XG5cbnZhciAkID0gcmVxdWlyZShcImpxdWVyeVwiKTtcbnZhciBrbyA9IHJlcXVpcmUoXCJrbm9ja291dFwiKTtcbnZhciBjb25zb2xlID0gcmVxdWlyZShcImNvbnNvbGVcIik7XG5cbi8vIGV4cGVyaW1lbnRhbCBpbWFnZSBwcmVsb2FkaW5nLlxua28uYmluZGluZ0hhbmRsZXJzWydwcmVsb2FkZXInXSA9IHtcbiAgaW5pdDogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3Nvcikge1xuICAgIHZhciB2YWx1ZSA9IHZhbHVlQWNjZXNzb3IoKTtcbiAgICBpZiAodHlwZW9mIHZhbHVlLnByZWxvYWRlZCA9PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFsdWUucHJlbG9hZGVkID0ga28ub2JzZXJ2YWJsZShcIlwiKTtcblxuICAgICAgdmFyIHByZWxvYWRlciA9IGZ1bmN0aW9uKG5ld1ZhbHVlKSB7XG4gICAgICAgIGlmIChuZXdWYWx1ZSAhPSB2YWx1ZS5wcmVsb2FkZWQoKSkge1xuICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gJycpIHtcbiAgICAgICAgICAgIHZhciBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgdmFsdWUucHJlbG9hZGVkKG5ld1ZhbHVlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpbWcub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB2YWx1ZS5wcmVsb2FkZWQobmV3VmFsdWUpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGltZy5zcmMgPSBuZXdWYWx1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUucHJlbG9hZGVkKG5ld1ZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHZhbHVlLnN1YnNjcmliZShwcmVsb2FkZXIpO1xuICAgICAgcHJlbG9hZGVyKHZhbHVlKCkpO1xuICAgIH1cbiAgfVxufTtcblxuLy8gVE9ETyB3ZSBkb24ndCB1c2UgYWR2YXR0ciBhbmQgYWR2c3R5bGUsIG1heWJlIHdlIHNob3VsZCBzaW1wbHkgcmVtb3ZlIHRoaXMgY29kZS5cbmtvLmJpbmRpbmdIYW5kbGVyc1snYWR2YXR0ciddID0ge1xuICAnaW5pdCc6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzLCB2aWV3TW9kZWwsIGJpbmRpbmdDb250ZXh0KSB7XG4gICAgdmFyIHZhbHVlID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZUFjY2Vzc29yKCkgfHwge30pO1xuICAgIGtvLnV0aWxzLm9iamVjdEZvckVhY2godmFsdWUsIGZ1bmN0aW9uKGF0dHJOYW1lLCBhdHRyVmFsdWVBY2Nlc3Nvcikge1xuICAgICAgdmFyIGF0dHJWYWx1ZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKGF0dHJOYW1lKTtcblxuICAgICAgaWYgKGtvLmlzV3JpdGVhYmxlT2JzZXJ2YWJsZShhdHRyVmFsdWVBY2Nlc3NvcikpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gYXR0clZhbHVlQWNjZXNzb3IoKTtcbiAgICAgICAgaWYgKG9sZFZhbHVlICE9IGF0dHJWYWx1ZSkge1xuICAgICAgICAgIGF0dHJWYWx1ZUFjY2Vzc29yKGF0dHJWYWx1ZSk7XG4gICAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFkdkF0dHIgZm91bmQgYSB2YWx1ZSBkaWZmZXJlbnQgZnJvbSB0aGUgZGVmYXVsdFwiLCBhdHRyTmFtZSwgb2xkVmFsdWUsIGF0dHJWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gICd1cGRhdGUnOiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5ncykge1xuICAgIHZhciB2YWx1ZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWVBY2Nlc3NvcigpKSB8fCB7fTtcbiAgICBrby51dGlscy5vYmplY3RGb3JFYWNoKHZhbHVlLCBmdW5jdGlvbihhdHRyTmFtZSwgYXR0clZhbHVlKSB7XG4gICAgICBhdHRyVmFsdWUgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKGF0dHJWYWx1ZSk7XG4gICAgICAvLyBUbyBjb3ZlciBjYXNlcyBsaWtlIFwiYXR0cjogeyBjaGVja2VkOnNvbWVQcm9wIH1cIiwgd2Ugd2FudCB0byByZW1vdmUgdGhlIGF0dHJpYnV0ZSBlbnRpcmVseVxuICAgICAgLy8gd2hlbiBzb21lUHJvcCBpcyBhIFwibm8gdmFsdWVcIi1saWtlIHZhbHVlIChzdHJpY3RseSBudWxsLCBmYWxzZSwgb3IgdW5kZWZpbmVkKVxuICAgICAgLy8gKGJlY2F1c2UgdGhlIGFic2VuY2Ugb2YgdGhlIFwiY2hlY2tlZFwiIGF0dHIgaXMgaG93IHRvIG1hcmsgYW4gZWxlbWVudCBhcyBub3QgY2hlY2tlZCwgZXRjLilcbiAgICAgIHZhciB0b1JlbW92ZSA9IChhdHRyVmFsdWUgPT09IGZhbHNlKSB8fCAoYXR0clZhbHVlID09PSBudWxsKSB8fCAoYXR0clZhbHVlID09PSB1bmRlZmluZWQpO1xuICAgICAgaWYgKHRvUmVtb3ZlKSBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShhdHRyTmFtZSk7XG4gICAgICBlbHNlIGVsZW1lbnQuc2V0QXR0cmlidXRlKGF0dHJOYW1lLCBhdHRyVmFsdWUudG9TdHJpbmcoKSk7XG4gICAgfSk7XG4gIH1cbn07XG5rby5iaW5kaW5nSGFuZGxlcnNbJ2FkdnN0eWxlJ10gPSB7XG4gICdpbml0JzogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3MsIHZpZXdNb2RlbCwgYmluZGluZ0NvbnRleHQpIHtcbiAgICB2YXIgdmFsdWUgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlQWNjZXNzb3IoKSB8fCB7fSk7XG4gICAga28udXRpbHMub2JqZWN0Rm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24oc3R5bGVOYW1lLCBzdHlsZVZhbHVlQWNjZXNzb3IpIHtcbiAgICAgIHZhciBzdHlsZVZhbHVlO1xuICAgICAgaWYgKHN0eWxlTmFtZS5tYXRjaCgvUHgkLykpIHtcbiAgICAgICAgc3R5bGVOYW1lID0gc3R5bGVOYW1lLnN1YnN0cigwLCBzdHlsZU5hbWUubGVuZ3RoIC0gMik7XG4gICAgICAgIHN0eWxlVmFsdWUgPSBlbGVtZW50LnN0eWxlW3N0eWxlTmFtZV07XG4gICAgICAgIGlmIChzdHlsZVZhbHVlLm1hdGNoKC9weCQvKSkge1xuICAgICAgICAgIHN0eWxlVmFsdWUgPSBzdHlsZVZhbHVlLnJlcGxhY2UoL3B4JC8sICcnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIkFkdlN0eWxlIGJpbmRpbmcgZm91bmQgYW4gdW5leHBlY3RlZCBkZWZhdWx0IHZhbHVlXCIsIHN0eWxlTmFtZSwgc3R5bGVWYWx1ZSwgZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0eWxlVmFsdWUgPSBlbGVtZW50LnN0eWxlW3N0eWxlTmFtZV07XG4gICAgICB9XG5cbiAgICAgIGlmIChrby5pc1dyaXRlYWJsZU9ic2VydmFibGUoc3R5bGVWYWx1ZUFjY2Vzc29yKSkge1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSBzdHlsZVZhbHVlQWNjZXNzb3IoKTtcbiAgICAgICAgaWYgKG9sZFZhbHVlICE9IHN0eWxlVmFsdWUpIHtcbiAgICAgICAgICBzdHlsZVZhbHVlQWNjZXNzb3Ioc3R5bGVWYWx1ZSk7XG4gICAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFkdlN0eWxlIGZvdW5kIGEgdmFsdWUgZGlmZmVyZW50IGZyb20gdGhlIGRlZmF1bHRcIiwgc3R5bGVOYW1lLCBvbGRWYWx1ZSwgc3R5bGVWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gICd1cGRhdGUnOiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKSB7XG4gICAgdmFyIHZhbHVlID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZUFjY2Vzc29yKCkgfHwge30pO1xuICAgIGtvLnV0aWxzLm9iamVjdEZvckVhY2godmFsdWUsIGZ1bmN0aW9uKHN0eWxlTmFtZSwgc3R5bGVWYWx1ZSkge1xuICAgICAgc3R5bGVWYWx1ZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoc3R5bGVWYWx1ZSk7XG5cbiAgICAgIGlmIChzdHlsZVZhbHVlID09PSBudWxsIHx8IHR5cGVvZiBzdHlsZVZhbHVlID09PSAndW5kZWZpbmVkJyB8fCBzdHlsZVZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICBzdHlsZVZhbHVlID0gXCJcIjtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0eWxlTmFtZS5tYXRjaCgvUHgkLykpIHtcbiAgICAgICAgc3R5bGVOYW1lID0gc3R5bGVOYW1lLnN1YnN0cigwLCBzdHlsZU5hbWUubGVuZ3RoIC0gMik7XG4gICAgICAgIHN0eWxlVmFsdWUgPSBzdHlsZVZhbHVlICsgXCJweFwiO1xuICAgICAgfVxuXG4gICAgICBlbGVtZW50LnN0eWxlW3N0eWxlTmFtZV0gPSBzdHlsZVZhbHVlO1xuICAgIH0pO1xuICB9XG59O1xuXG4vLyBVdGlsaXR5IHRvIGxvZyBpbml6aWFsaXphdGlvbiBhbmQgZGlzcG9zYWwgb2YgRE9NIGVsZW1lbnRzLlxua28uYmluZGluZ0hhbmRsZXJzWydkb21sb2cnXSA9IHtcbiAgaW5pdDogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3Nvcikge1xuICAgIGNvbnNvbGUubG9nKFwiaW5pdGlhbGl6ZWRcIiwgZWxlbWVudCk7XG4gICAga28udXRpbHMuZG9tTm9kZURpc3Bvc2FsLmFkZERpc3Bvc2VDYWxsYmFjayhlbGVtZW50LCBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiZGlzcG9zZWRcIiwgZWxlbWVudCk7XG4gICAgfSk7XG4gIH1cbn07XG5cbmtvLmJpbmRpbmdIYW5kbGVyc1snZnVkcm9wcGFibGUnXSA9IHtcbiAgaW5pdDogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3Nvcikge1xuICAgIHZhciBvcHQgPSB2YWx1ZUFjY2Vzc29yKCkgfHwge307XG4gICAgdmFyIHRpbWVvdXRzT2JqID0ge307XG5cbiAgICB2YXIgb3ZlciA9IGZ1bmN0aW9uKHRpbWVvdXRzLCBkcm9wWm9uZVRpbWVvdXQsIGVsZW1lbnQsIGNsYXNzTmFtZSwgb2JzZXJ2YWJsZSwgZXZlbnQpIHtcblxuICAgICAgaWYgKCF0aW1lb3V0c1tkcm9wWm9uZVRpbWVvdXRdKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xhc3NOYW1lICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChrby5pc1dyaXRlYWJsZU9ic2VydmFibGUob2JzZXJ2YWJsZSkgJiYgIW9ic2VydmFibGUoKSkge1xuICAgICAgICAgIG9ic2VydmFibGUodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdsb2JhbC5jbGVhclRpbWVvdXQodGltZW91dHNbZHJvcFpvbmVUaW1lb3V0XSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBzdG9wID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRpbWVvdXRzW2Ryb3Bab25lVGltZW91dF0gPSBudWxsO1xuICAgICAgICBpZiAodHlwZW9mIGNsYXNzTmFtZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoa28uaXNXcml0ZWFibGVPYnNlcnZhYmxlKG9ic2VydmFibGUpICYmIG9ic2VydmFibGUoKSkge1xuICAgICAgICAgIG9ic2VydmFibGUoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBpZiAoZXZlbnQudHlwZSA9PSAnZHJhZ2xlYXZlJykgc3RvcCgpO1xuICAgICAgZWxzZSB7XG4gICAgICAgIC8vIFVzaW5nIDEwMCBpdCBkb2Vucyd0IHdvcmsgZmluZSBvbiBMaW51eCAoY2hvbWUvZmlyZWZveCksIHVzaW5nIDIwMCBzdGlsbCBzaG93cyBpc3N1ZXMgb24gc2xvdyBMaW51eCBib3hlc1xuICAgICAgICB0aW1lb3V0c1tkcm9wWm9uZVRpbWVvdXRdID0gZ2xvYmFsLnNldFRpbWVvdXQoc3RvcCwgNTAwKTtcbiAgICAgIH1cblxuICAgIH07XG5cbiAgICBpZiAob3B0LmFjdGl2ZSB8fCBvcHQuYWN0aXZlQ2xhc3MpIHtcbiAgICAgIGtvLnV0aWxzLnJlZ2lzdGVyRXZlbnRIYW5kbGVyKGdsb2JhbCwgJ2RyYWdvdmVyJywgb3Zlci5iaW5kKHVuZGVmaW5lZCwgdGltZW91dHNPYmosICdhY3RpdmVUaW1lb3V0JywgZWxlbWVudCwgb3B0LmFjdGl2ZUNsYXNzLCBvcHQuYWN0aXZlKSk7XG4gICAgfVxuICAgIGlmIChvcHQuaG92ZXJDbGFzcykge1xuICAgICAgLy8gZHJhZ2VudGVyIGFuZCBkcmFnbGVhdmUgYXJlIG5vdCByZXF1aXJlZCBidXQgdGhleSBzcGVlZHVwIGZlZWRiYWNrIHdoZW4gdXNlZC5cbiAgICAgIGtvLnV0aWxzLnJlZ2lzdGVyRXZlbnRIYW5kbGVyKGVsZW1lbnQsICdkcmFnb3ZlciBkcmFnZW50ZXIgZHJhZ2xlYXZlJywgb3Zlci5iaW5kKHVuZGVmaW5lZCwgdGltZW91dHNPYmosICdob3ZlclRpbWVvdXQnLCBlbGVtZW50LCBvcHQuaG92ZXJDbGFzcywgdW5kZWZpbmVkKSk7XG4gICAgfVxuICB9XG59O1xuXG5rby5iaW5kaW5nSGFuZGxlcnNbJ2ZpbGV1cGxvYWQnXSA9IHtcbiAgZXh0ZW5kT3B0aW9uczoge30sXG4gIHJlbW90ZUZpbGVQcmVwcm9jZXNzb3I6IGZ1bmN0aW9uKHVybCkgeyByZXR1cm4gdXJsOyB9LFxuICBpbml0OiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKSB7XG4gICAgLy8gVE9ETyBkb21ub2RlZGlzcG9zYWwgZG9lc24ndCB3b3JrIHdoZW4gdGhlIHVwbG9hZCBpcyBkb25lIGJ5IFwiY2xpY2tpbmdcIlxuICAgIC8vIFByb2JhYmx5IGpxdWVyeS1maWxldXBsb2FkIG1vdmVzIHRoZSBET00gc29tZXdoZXJlIGVsc2Ugc28gdGhhdCBLTyBkb2Vzbid0IFxuICAgIC8vIGRldGVjdCB0aGUgcmVtb3ZhbCBhbnltb3JlLlxuICAgIGtvLnV0aWxzLmRvbU5vZGVEaXNwb3NhbC5hZGREaXNwb3NlQ2FsbGJhY2soZWxlbWVudCwgZnVuY3Rpb24oKSB7XG4gICAgICAkKGVsZW1lbnQpLmZpbGV1cGxvYWQoJ2Rlc3Ryb3knKTtcbiAgICB9KTtcblxuICAgIC8vIGlmIHdlIGxlYXZlIHRoZSB0aXRsZSB0aGUgbmF0aXZlIGNvbnRyb2wgd2lsbCBzaG93IHVzIGEgdG9vbHRpcCB3ZSBkb24ndCB3YW50LlxuICAgIC8vIEluIFdlYktpdCB0aGUgcmlnaHQgd2F5IHRvIHJlbW92ZSBpdCBpcyBsZWF2aW5nIGEgXCJ3aGl0ZXNwYWNlXCIuXG4gICAgLy8gSW4gR2Vja28gd2UgaGF2ZSB0byBzZXQgaXQgZW1wdHkuXG4gICAgaWYgKGdsb2JhbC53ZWJraXRVUkwpXG4gICAgICAkKGVsZW1lbnQpLmF0dHIoJ3RpdGxlJywgJyAnKTtcbiAgICBlbHNlXG4gICAgICAkKGVsZW1lbnQpLmF0dHIoJ3RpdGxlJywgJycpO1xuICB9LFxuXG4gIHVwZGF0ZTogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3Nvcikge1xuICAgIHZhciBvcHRpb25zID0gdmFsdWVBY2Nlc3NvcigpIHx8IHt9O1xuXG4gICAgdmFyICRmdSA9ICQoZWxlbWVudCk7XG4gICAgdmFyICRwYXJlbnQgPSAkZnUucGFyZW50cygnLnVwbG9hZHpvbmUnKTtcblxuICAgIHZhciBkYXRhVmFsdWUgPSBvcHRpb25zLmRhdGE7XG4gICAgb3B0aW9ucy5kYXRhID0gdW5kZWZpbmVkO1xuXG4gICAgdmFyIGNhbnZhc1ByZXZpZXcgPSBvcHRpb25zLmNhbnZhc1ByZXZpZXc7XG5cbiAgICAvLyBUT0RPIHJlbW92ZSBoYXJkY29kZWQgdXJsXG4gICAga28udXRpbHMuZXh0ZW5kKG9wdGlvbnMsIHtcbiAgICAgIHVybDogJy91cGxvYWQvJyxcbiAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICBkcm9wWm9uZTogJHBhcmVudC5maW5kKCcubW8tdXBsb2Fkem9uZScpWzBdLFxuICAgICAgYXV0b1VwbG9hZDogdHJ1ZSxcbiAgICAgIGFjY2VwdEZpbGVUeXBlczogLyhcXC58XFwvKShnaWZ8anBlP2d8cG5nKSQvaSxcbiAgICAgIG1heEZpbGVTaXplOiAxMDI0ICogMTAyNCxcbiAgICAgIC8vIEVuYWJsZSBpbWFnZSByZXNpemluZywgZXhjZXB0IGZvciBBbmRyb2lkIGFuZCBPcGVyYSxcbiAgICAgIC8vIHdoaWNoIGFjdHVhbGx5IHN1cHBvcnQgaW1hZ2UgcmVzaXppbmcsIGJ1dCBmYWlsIHRvXG4gICAgICAvLyBzZW5kIEJsb2Igb2JqZWN0cyB2aWEgWEhSIHJlcXVlc3RzOlxuICAgICAgZGlzYWJsZUltYWdlUmVzaXplOiAvQW5kcm9pZCg/IS4qQ2hyb21lKXxPcGVyYS8udGVzdChnbG9iYWwubmF2aWdhdG9yLnVzZXJBZ2VudCksXG4gICAgICBwcmV2aWV3TWF4V2lkdGg6IDIwMCxcbiAgICAgIHByZXZpZXdNYXhIZWlnaHQ6IDIwMCxcbiAgICAgIHByZXZpZXdDcm9wOiBmYWxzZSxcbiAgICAgIHJlcGxhY2VGaWxlSW5wdXQ6IGZhbHNlLCAvLyByZXBsYWNlRmlsZUlucHV0IHRydWUgYnJlYWtzIGFmdGVyIHVwbG9hZGluZyB1c2luZyBcImlucHV0XCIgKHVzaW5nIG1vdXNlIGNsaWMgaW5zdGVhZCBvZiBkcm9wcGluZylcblxuICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgLy8gY2xpZW50IHNpZGVcbiAgICAgICAgdW5rbm93bkVycm9yOiAnVW5rbm93biBlcnJvcicsXG4gICAgICAgIHVwbG9hZGVkQnl0ZXM6ICdVcGxvYWRlZCBieXRlcyBleGNlZWQgZmlsZSBzaXplJyxcbiAgICAgICAgbWF4TnVtYmVyT2ZGaWxlczogJ01heGltdW0gbnVtYmVyIG9mIGZpbGVzIGV4Y2VlZGVkJyxcbiAgICAgICAgYWNjZXB0RmlsZVR5cGVzOiAnRmlsZSB0eXBlIG5vdCBhbGxvd2VkJyxcbiAgICAgICAgbWF4RmlsZVNpemU6ICdGaWxlIGlzIHRvbyBsYXJnZScsXG4gICAgICAgIG1pbkZpbGVTaXplOiAnRmlsZSBpcyB0b28gc21hbGwnLFxuICAgICAgICAvLyBzZXJ2ZXIgc2lkZVxuICAgICAgICBwb3N0X21heF9zaXplOiAnVGhlIHVwbG9hZGVkIGZpbGUgZXhjZWVkcyB0aGUgcG9zdF9tYXhfc2l6ZSBkaXJlY3RpdmUgaW4gcGhwLmluaScsXG4gICAgICAgIG1heF9maWxlX3NpemU6ICdGaWxlIGlzIHRvbyBiaWcnLFxuICAgICAgICBtaW5fZmlsZV9zaXplOiAnRmlsZSBpcyB0b28gc21hbGwnLFxuICAgICAgICBhY2NlcHRfZmlsZV90eXBlczogJ0ZpbGV0eXBlIG5vdCBhbGxvd2VkJyxcbiAgICAgICAgbWF4X251bWJlcl9vZl9maWxlczogJ01heGltdW0gbnVtYmVyIG9mIGZpbGVzIGV4Y2VlZGVkJyxcbiAgICAgICAgbWF4X3dpZHRoOiAnSW1hZ2UgZXhjZWVkcyBtYXhpbXVtIHdpZHRoJyxcbiAgICAgICAgbWluX3dpZHRoOiAnSW1hZ2UgcmVxdWlyZXMgYSBtaW5pbXVtIHdpZHRoJyxcbiAgICAgICAgbWF4X2hlaWdodDogJ0ltYWdlIGV4Y2VlZHMgbWF4aW11bSBoZWlnaHQnLFxuICAgICAgICBtaW5faGVpZ2h0OiAnSW1hZ2UgcmVxdWlyZXMgYSBtaW5pbXVtIGhlaWdodCcsXG4gICAgICAgIGFib3J0OiAnRmlsZSB1cGxvYWQgYWJvcnRlZCcsXG4gICAgICAgIGltYWdlX3Jlc2l6ZTogJ0ZhaWxlZCB0byByZXNpemUgaW1hZ2UnLFxuICAgICAgICBnZW5lcmljOiAnVW5leHBlY3RlZCB1cGxvYWQgZXJyb3InXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBrby51dGlscy5leHRlbmQob3B0aW9ucywga28uYmluZGluZ0hhbmRsZXJzWydmaWxldXBsb2FkJ10uZXh0ZW5kT3B0aW9ucyk7XG5cbiAgICB2YXIgd29ya2luZyA9IDA7XG4gICAgdmFyIGZpcnN0V29ya2VkID0gJyc7XG5cbiAgICB2YXIgY2xlYW51cCA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKC0td29ya2luZyA9PT0gMCkge1xuICAgICAgICBpZiAoZGF0YVZhbHVlKSB7XG4gICAgICAgICAgZGF0YVZhbHVlKGZpcnN0V29ya2VkKTtcbiAgICAgICAgfVxuICAgICAgICBmaXJzdFdvcmtlZCA9ICcnO1xuICAgICAgICBpZiAoY2FudmFzUHJldmlldykge1xuICAgICAgICAgICRwYXJlbnQuZmluZCgnaW1nJykuc2hvdygpO1xuICAgICAgICAgICRwYXJlbnQuZmluZCgnY2FudmFzJykucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgJHBhcmVudC5yZW1vdmVDbGFzcyhcInVwbG9hZGluZ1wiKTtcbiAgICAgICAgJHBhcmVudC5maW5kKCcucHJvZ3Jlc3MtYmFyJykuY3NzKCd3aWR0aCcsIDApO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgdHJhbnNsYXRlZE1lc3NhZ2UgPSBmdW5jdGlvbih0ZXh0KSB7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMubWVzc2FnZXMgPT0gJ29iamVjdCcgJiYgb3B0aW9ucy5tZXNzYWdlcyAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgbWF0Y2ggPSB0ZXh0Lm1hdGNoKC9eKFteIF0rKSguKikkLyk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5tZXNzYWdlc1ttYXRjaFsxXV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5tZXNzYWdlc1ttYXRjaFsxXV0gKyBtYXRjaFsyXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0ZXh0O1xuICAgIH07XG5cbiAgICAkZnUuZmlsZXVwbG9hZChvcHRpb25zKTtcblxuICAgIHZhciBldmVudHMgPSBbJ2ZpbGV1cGxvYWRhZGQnLCAnZmlsZXVwbG9hZHByb2Nlc3NhbHdheXMnLCAnZmlsZXVwbG9hZHByb2dyZXNzYWxsJywgJ2ZpbGV1cGxvYWRkb25lJywgJ2ZpbGV1cGxvYWRmYWlsJ107XG4gICAgdmFyIGV2ZW50SGFuZGxlciA9IGZ1bmN0aW9uKGUsIGRhdGEpIHtcbiAgICAgIGlmIChlLnR5cGUgPT0gJ2ZpbGV1cGxvYWRhZGQnKSB7XG4gICAgICAgIHdvcmtpbmcrKztcbiAgICAgIH1cbiAgICAgIGlmIChlLnR5cGUgPT0gJ2ZpbGV1cGxvYWRmYWlsJykge1xuICAgICAgICBjb25zb2xlLmxvZyhcImZpbGV1cGxvYWRmYWlsXCIsIGUsIGRhdGEpO1xuICAgICAgICBpZiAob3B0aW9ucy5vbmVycm9yKSB7XG4gICAgICAgICAgaWYgKGRhdGEuZXJyb3JUaHJvd24gPT09ICcnICYmIGRhdGEudGV4dFN0YXR1cyA9PSAnZXJyb3InKSB7XG4gICAgICAgICAgICBvcHRpb25zLm9uZXJyb3IodHJhbnNsYXRlZE1lc3NhZ2UoJ2dlbmVyaWMnKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMub25lcnJvcih0cmFuc2xhdGVkTWVzc2FnZSgnZ2VuZXJpYyAoJyArIGRhdGEuZXJyb3JUaHJvd24gKyAnKScpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2xlYW51cCgpO1xuICAgICAgfVxuICAgICAgaWYgKGUudHlwZSA9PSAnZmlsZXVwbG9hZGRvbmUnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YS5yZXN1bHQuZmlsZXNbMF0udXJsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGlmIChvcHRpb25zLm9uZmlsZSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLnJlc3VsdC5maWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBkYXRhLnJlc3VsdC5maWxlc1tpXSA9IGtvLmJpbmRpbmdIYW5kbGVyc1snZmlsZXVwbG9hZCddLnJlbW90ZUZpbGVQcmVwcm9jZXNzb3IoZGF0YS5yZXN1bHQuZmlsZXNbaV0pO1xuICAgICAgICAgICAgICBvcHRpb25zLm9uZmlsZShkYXRhLnJlc3VsdC5maWxlc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGZpcnN0V29ya2VkID09PSAnJykgZmlyc3RXb3JrZWQgPSBkYXRhLnJlc3VsdC5maWxlc1swXS51cmw7XG5cbiAgICAgICAgICBpZiAoY2FudmFzUHJldmlldykge1xuICAgICAgICAgICAgdmFyIGltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgICAgICAgaW1nLm9ubG9hZCA9IGNsZWFudXA7XG4gICAgICAgICAgICBpbWcub25lcnJvciA9IGNsZWFudXA7XG4gICAgICAgICAgICBpbWcuc3JjID0gZGF0YS5yZXN1bHQuZmlsZXNbMF0udXJsO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhLnJlc3VsdC5maWxlc1swXS5lcnJvciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcInJlbW90ZSBlcnJvclwiLCBlLCBkYXRhKTtcbiAgICAgICAgICBpZiAob3B0aW9ucy5vbmVycm9yKSB7XG4gICAgICAgICAgICBvcHRpb25zLm9uZXJyb3IodHJhbnNsYXRlZE1lc3NhZ2UoZGF0YS5yZXN1bHQuZmlsZXNbMF0uZXJyb3IpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwidW5leHBlY3RlZCBlcnJvclwiLCBlLCBkYXRhKTtcbiAgICAgICAgICBpZiAob3B0aW9ucy5vbmVycm9yKSB7XG4gICAgICAgICAgICBvcHRpb25zLm9uZXJyb3IodHJhbnNsYXRlZE1lc3NhZ2UoJ2dlbmVyaWMgKFVuZXhwZWN0ZWQgRXJyb3IgcmV0cmlldmluZyB1cGxvYWRlZCBmaWxlKScpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZS50eXBlID09ICdmaWxldXBsb2FkcHJvY2Vzc2Fsd2F5cycpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gZGF0YS5pbmRleCxcbiAgICAgICAgICBmaWxlID0gZGF0YS5maWxlc1tpbmRleF07XG4gICAgICAgIGlmIChmaWxlLnByZXZpZXcgJiYgaW5kZXggPT09IDApIHtcbiAgICAgICAgICAvLyBpZiB3ZSBoYXZlIGEgY2FudmFzIHdlIGhhZCBtdWx0aXBsZSB1cGxvYWRlZCBmaWxlc1xuICAgICAgICAgIGlmICgkcGFyZW50LmZpbmQoJ2NhbnZhcycpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKGNhbnZhc1ByZXZpZXcpIHtcbiAgICAgICAgICAgICAgdmFyIGVsID0gJChmaWxlLnByZXZpZXcpLmNzcygnd2lkdGgnLCAnMTAwJScpOyAvLyAuY3NzKCdwb3NpdGlvbicsICdhYnNvbHV0ZScpLmNzcygnbGVmdCcsICcwJyk7XG4gICAgICAgICAgICAgICRwYXJlbnQuZmluZCgnaW1nJykuaGlkZSgpO1xuICAgICAgICAgICAgICAkcGFyZW50LnByZXBlbmQoZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHBhcmVudC5hZGRDbGFzcyhcInVwbG9hZGluZ1wiKTtcbiAgICAgICAgICAgICRwYXJlbnQuZmluZCgnLnByb2dyZXNzLWJhcicpLmNzcygnd2lkdGgnLCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpbGUuZXJyb3IpIHtcbiAgICAgICAgICAvLyBGaWxlIHR5cGUgbm90IGFsbG93ZWRcbiAgICAgICAgICAvLyBGaWxlIGlzIHRvbyBsYXJnZVxuICAgICAgICAgIGlmIChvcHRpb25zLm9uZXJyb3IpIHtcbiAgICAgICAgICAgIG9wdGlvbnMub25lcnJvcih0cmFuc2xhdGVkTWVzc2FnZShmaWxlLmVycm9yKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGUudHlwZSA9PSAnZmlsZXVwbG9hZHByb2dyZXNzYWxsJykge1xuICAgICAgICB2YXIgcHJvZ3Jlc3MgPSBwYXJzZUludChkYXRhLmxvYWRlZCAvIGRhdGEudG90YWwgKiAxMDAsIDEwKTtcbiAgICAgICAgJHBhcmVudC5maW5kKCcucHJvZ3Jlc3MtYmFyJykuY3NzKCd3aWR0aCcsIHByb2dyZXNzICsgJyUnKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGZvciAodmFyIGkgPSBldmVudHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBldmVudE5hbWUgPSBldmVudHNbaV07XG4gICAgICAkZnUub24oZXZlbnROYW1lLCBldmVudEhhbmRsZXIpO1xuICAgIH1cbiAgICBpZiAoISQuc3VwcG9ydC5maWxlSW5wdXQpIHtcbiAgICAgICRmdS5wcm9wKCdkaXNhYmxlZCcsIHRydWUpLnBhcmVudCgpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuICAgIH1cbiAgfVxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGtvID0gcmVxdWlyZShcImtub2Nrb3V0XCIpO1xudmFyIGNvbnNvbGUgPSByZXF1aXJlKFwiY29uc29sZVwiKTtcblxua28uYmluZGluZ0hhbmRsZXJzWydpZlN1YnMnXSA9IHtcbiAgLy8gY2xvbmVOb2RlcyBmcm9tIGtvLnV0aWxzLmNsb25lTm9kZXMgKG1pc3NpbmcgaW4gbWluaW1pemVkIEtPKVxuICBjbG9uZU5vZGVzOiBmdW5jdGlvbihub2Rlc0FycmF5LCBzaG91bGRDbGVhbk5vZGVzKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSBub2Rlc0FycmF5Lmxlbmd0aCwgbmV3Tm9kZXNBcnJheSA9IFtdOyBpIDwgajsgaSsrKSB7XG4gICAgICB2YXIgY2xvbmVkTm9kZSA9IG5vZGVzQXJyYXlbaV0uY2xvbmVOb2RlKHRydWUpO1xuICAgICAgbmV3Tm9kZXNBcnJheS5wdXNoKHNob3VsZENsZWFuTm9kZXMgPyBrby5jbGVhbk5vZGUoY2xvbmVkTm9kZSkgOiBjbG9uZWROb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld05vZGVzQXJyYXk7XG4gIH0sXG4gICdpbml0JzogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3MsIHZpZXdNb2RlbCwgYmluZGluZ0NvbnRleHQpIHtcbiAgICB2YXIgZGlkRGlzcGxheU9uTGFzdFVwZGF0ZSxcbiAgICAgIHNhdmVkTm9kZXMsXG4gICAgICB2YWx1ZUFjYyA9IHZhbHVlQWNjZXNzb3IoKTtcbiAgICBpZiAodHlwZW9mIHZhbHVlQWNjLmRhdGEuc3Vic0NvdW50ID09PSAndW5kZWZpbmVkJykge1xuICAgICAga28uZXh0ZW5kZXJzWydzdWJzY3JpcHRpb25zQ291bnQnXSh2YWx1ZUFjYy5kYXRhKTtcbiAgICAgIC8vIE5PVEUgSSBjYW4ndCBzaW1wbHkgbGlzdGVuIG9uIFwidGhyZXNob2xkc1wiIGJlY2F1c2UgbXVsdGlwbGUgYmluZGluZ3MgdG8gdGhlIHNhbWUgb2JzZXJ2YWJsZSBjb3VsZCB1c2UgZGlmZmVyZW50IHRocmVzaG9sZHMuXG4gICAgfVxuICAgIGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGRhdGFWYWx1ZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWVBY2Nlc3NvcigpLmRhdGEuc3Vic0NvdW50KSxcbiAgICAgICAgaXNGaXJzdFJlbmRlciA9ICFzYXZlZE5vZGVzLFxuICAgICAgICBzaG91bGREaXNwbGF5LCBuZWVkc1JlZnJlc2gsIGd1dHRlcjtcblxuICAgICAgZ3V0dGVyID0gLSh0eXBlb2YgdmFsdWVBY2Nlc3NvcigpLmd1dHRlciAhPT0gJ3VuZGVmaW5lZCcgPyB2YWx1ZUFjY2Vzc29yKCkuZ3V0dGVyIDogMSk7XG4gICAgICBzaG91bGREaXNwbGF5ID0gZGF0YVZhbHVlICsgKGRpZERpc3BsYXlPbkxhc3RVcGRhdGUgPyBndXR0ZXIgOiAwKSA+PSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlQWNjLnRocmVzaG9sZCk7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlQWNjZXNzb3IoKS5ub3QgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlQWNjZXNzb3IoKS5ub3QpIHtcbiAgICAgICAgc2hvdWxkRGlzcGxheSA9ICFzaG91bGREaXNwbGF5O1xuICAgICAgfVxuICAgICAgbmVlZHNSZWZyZXNoID0gaXNGaXJzdFJlbmRlciB8fCAoc2hvdWxkRGlzcGxheSAhPT0gZGlkRGlzcGxheU9uTGFzdFVwZGF0ZSk7XG5cbiAgICAgIGlmIChuZWVkc1JlZnJlc2gpIHtcbiAgICAgICAgLy8gU2F2ZSBhIGNvcHkgb2YgdGhlIGlubmVyIG5vZGVzIG9uIHRoZSBpbml0aWFsIHVwZGF0ZSwgYnV0IG9ubHkgaWYgd2UgaGF2ZSBkZXBlbmRlbmNpZXMuXG4gICAgICAgIGlmIChpc0ZpcnN0UmVuZGVyICYmIGtvLmNvbXB1dGVkQ29udGV4dC5nZXREZXBlbmRlbmNpZXNDb3VudCgpKSB7XG4gICAgICAgICAgc2F2ZWROb2RlcyA9IGtvLmJpbmRpbmdIYW5kbGVyc1snaWZTdWJzJ10uY2xvbmVOb2Rlcyhrby52aXJ0dWFsRWxlbWVudHMuY2hpbGROb2RlcyhlbGVtZW50KSwgdHJ1ZSAvKiBzaG91bGRDbGVhbk5vZGVzICovICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hvdWxkRGlzcGxheSkge1xuICAgICAgICAgIGlmICghaXNGaXJzdFJlbmRlcikge1xuICAgICAgICAgICAga28udmlydHVhbEVsZW1lbnRzLnNldERvbU5vZGVDaGlsZHJlbihlbGVtZW50LCBrby5iaW5kaW5nSGFuZGxlcnNbJ2lmU3VicyddLmNsb25lTm9kZXMoc2F2ZWROb2RlcykpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBrby5hcHBseUJpbmRpbmdzVG9EZXNjZW5kYW50cyhiaW5kaW5nQ29udGV4dCwgZWxlbWVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAga28udmlydHVhbEVsZW1lbnRzLmVtcHR5Tm9kZShlbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRpZERpc3BsYXlPbkxhc3RVcGRhdGUgPSBzaG91bGREaXNwbGF5O1xuICAgICAgfVxuICAgIH0sIG51bGwsIHtcbiAgICAgIGRpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZDogZWxlbWVudFxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAnY29udHJvbHNEZXNjZW5kYW50QmluZGluZ3MnOiB0cnVlXG4gICAgfTtcbiAgfVxufTtcbmtvLnZpcnR1YWxFbGVtZW50cy5hbGxvd2VkQmluZGluZ3NbJ2lmU3VicyddID0gdHJ1ZTtcblxuLy8ga28uaXNXcml0YWJsZU9ic2VydmFibGUgKHdpdGhvdXQgXCJlXCIpIGhhcyBiZWVuIGludHJvZHVjZWQgaW4gMy4yLjAsIHRoYXQgaXMgYWxzbyBvdXIgbWluIHJlcXVpcmVtZW50LlxuLy8gbWluaW1pemVkIGtub2Nrb3V0IFwib2JmdXNjYXRlXCIgdGhlIGJlZm9yZVN1YnNjcmlwdGlvbkFkZCBhbmQgYWZ0ZXJTdWJzY3JpcHRpb25SZW1vdmUgbWV0aG9kcyB0aGF0IHdlIGhhY2sgaGVyZS5cbi8vIHNvIHdlIGhhdmUgdG8gZXhwbGljaXRseSBrbm93IHRoYXQuXG52YXIgYmVmb3JlU3Vic2NyaXB0aW9uUHJvcDtcbnZhciBhZnRlclN1YnNjcmlwdGlvblByb3A7XG5pZiAodHlwZW9mIGtvLkRFQlVHICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Yga28uaXNXcml0YWJsZU9ic2VydmFibGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIGJlZm9yZVN1YnNjcmlwdGlvblByb3AgPSAnYmVmb3JlU3Vic2NyaXB0aW9uQWRkJztcbiAgYWZ0ZXJTdWJzY3JpcHRpb25Qcm9wID0gJ2FmdGVyU3Vic2NyaXB0aW9uUmVtb3ZlJztcbn0gZWxzZSBpZiAoa28udmVyc2lvbiA9PSBcIjMuMi4wXCIpIHtcbiAgYmVmb3JlU3Vic2NyaXB0aW9uUHJvcCA9ICd2YSc7XG4gIGFmdGVyU3Vic2NyaXB0aW9uUHJvcCA9ICduYic7XG59IGVsc2UgaWYgKGtvLnZlcnNpb24gPT0gXCIzLjMuMFwiKSB7XG4gIGJlZm9yZVN1YnNjcmlwdGlvblByb3AgPSAnamEnO1xuICBhZnRlclN1YnNjcmlwdGlvblByb3AgPSAndWEnO1xufSBlbHNlIGlmIChrby52ZXJzaW9uID09IFwiMy40LjBcIikge1xuICBiZWZvcmVTdWJzY3JpcHRpb25Qcm9wID0gJ3NhJztcbiAgYWZ0ZXJTdWJzY3JpcHRpb25Qcm9wID0gJ0lhJztcbn1cbmVsc2UgdGhyb3cgXCJVbnN1cHBvcnRlZCBtaW5pbWl6ZWQgS25vY2tvdXQgdmVyc2lvbiBcIiArIGtvLnZlcnNpb24gKyBcIiAoc3VwcG9ydGVkIERFQlVHIG9yIG1pbmltaXplZCAzLjIuMCAuLi4gMy40LjApXCI7XG5cbi8vIGludGVybmFsbHkgdXNlZCBieSBpZnN1YnMgYmluZGluZy5cbi8vIFdBUk5JTkcgdGhpcyBicmVhayB3aGVuIHVzZWQgd2l0aCBwdXJlQ29tcHV0ZWQgb3IgZGVmZXJyZWRFdmFsdWF0ZWRcbmtvLmV4dGVuZGVyc1snc3Vic2NyaXB0aW9uc0NvdW50J10gPSBmdW5jdGlvbih0YXJnZXQsIGwxLCBsMikge1xuICBpZiAodHlwZW9mIHRhcmdldC5zdWJzQ291bnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGFyZ2V0LnN1YnNDb3VudCA9IGtvLm9ic2VydmFibGUodGFyZ2V0LmdldFN1YnNjcmlwdGlvbnNDb3VudCgpKS5leHRlbmQoe1xuICAgICAgbm90aWZ5OiAnYWx3YXlzJ1xuICAgIH0pO1xuICAgIHZhciB1bmRlcmx5aW5nQmVmb3JlU3Vic2NyaXB0aW9uQWRkRnVuY3Rpb24gPSB0YXJnZXRbYmVmb3JlU3Vic2NyaXB0aW9uUHJvcF07XG4gICAgdmFyIHVuZGVybHlpbmdBZnRlclN1YnNjcmlwdGlvblJlbW92ZUZ1bmN0aW9uID0gdGFyZ2V0W2FmdGVyU3Vic2NyaXB0aW9uUHJvcF07XG4gICAgdGFyZ2V0W2JlZm9yZVN1YnNjcmlwdGlvblByb3BdID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIGlmICh1bmRlcmx5aW5nQmVmb3JlU3Vic2NyaXB0aW9uQWRkRnVuY3Rpb24pIHVuZGVybHlpbmdCZWZvcmVTdWJzY3JpcHRpb25BZGRGdW5jdGlvbi5jYWxsKHRhcmdldCwgZXZlbnQpO1xuICAgICAgdmFyIGMgPSB0YXJnZXQuZ2V0U3Vic2NyaXB0aW9uc0NvdW50KCkgKyAxO1xuICAgICAgaWYgKHR5cGVvZiBsMSA9PT0gJ3VuZGVmaW5lZCcgfHwgYyA9PSBsMSB8fCB0eXBlb2YgbDIgPT09ICd1bmRlZmluZWQnIHx8IGMgPT0gbDIpIHRhcmdldC5zdWJzQ291bnQoYyk7XG4gICAgfTtcbiAgICB0YXJnZXRbYWZ0ZXJTdWJzY3JpcHRpb25Qcm9wXSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBpZiAodW5kZXJseWluZ0FmdGVyU3Vic2NyaXB0aW9uUmVtb3ZlRnVuY3Rpb24pIHVuZGVybHlpbmdBZnRlclN1YnNjcmlwdGlvblJlbW92ZUZ1bmN0aW9uLmNhbGwodGFyZ2V0LCBldmVudCk7XG4gICAgICB2YXIgYyA9IHRhcmdldC5nZXRTdWJzY3JpcHRpb25zQ291bnQoKTtcbiAgICAgIGlmICh0eXBlb2YgbDEgPT09ICd1bmRlZmluZWQnIHx8IGMgPT0gbDEgfHwgdHlwZW9mIGwyID09PSAndW5kZWZpbmVkJyB8fCBjID09IGwyKSB0YXJnZXQuc3Vic0NvdW50KGMpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5sb2coXCJhbHJlYWR5IGFwcGxpZWQgc3Vic2NyaXB0aW9uQ291bnQgdG8gb2JzZXJ2YWJsZVwiKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLy8gT3ZlcnJpZGVzIG5hdGl2ZSBqUXVlcnkgc3Bpbm5lciB0byBhdm9pZCB2YWxpZGF0aW9uIG9mIHRoZSBcInN0ZXBcIi5cbi8vIFdlIHdhbnRzIHRvIHVzZSB0aGUgc3RlcCBidXQgYWxzbyB3YW50cyB0byBsZWF2ZSB0aGUgdXNlciB0aGUgYWJpbGl0eSB0byBzZWxlY3Qgc3BlY2lmaWMgdmFsdWVzLlxuXG52YXIgJCA9IHJlcXVpcmUoJ2pxdWVyeScpO1xudmFyIGNvbnNvbGUgPSByZXF1aXJlKCdjb25zb2xlJyk7XG4kLndpZGdldChcInVpLnNwaW5uZXJcIiwgJC51aS5zcGlubmVyLCB7XG4gIF9hZGp1c3RWYWx1ZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgYWRqID0gdGhpcy5fc3VwZXIodmFsdWUpO1xuXG4gICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAvLyBmaXggcHJlY2lzaW9uIGZyb20gYmFkIEpTIGZsb2F0aW5nIHBvaW50IG1hdGhcbiAgICB2YWx1ZSA9IHBhcnNlRmxvYXQodmFsdWUudG9GaXhlZCh0aGlzLl9wcmVjaXNpb24oKSkpO1xuXG4gICAgLy8gY2xhbXAgdGhlIHZhbHVlXG4gICAgaWYgKG9wdGlvbnMubWF4ICE9PSBudWxsICYmIHZhbHVlID4gb3B0aW9ucy5tYXgpIHtcbiAgICAgIHJldHVybiBvcHRpb25zLm1heDtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMubWluICE9PSBudWxsICYmIHZhbHVlIDwgb3B0aW9ucy5taW4pIHtcbiAgICAgIHJldHVybiBvcHRpb25zLm1pbjtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn0pOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vLyBPdmVycmlkZXMgbmF0aXZlIGpRdWVyeSB0YWJzIHRvIG1ha2UgdGFicyB3b3JraW5nIGFsc28gd2hlbiB1c2luZyBhIGJhc2UgdGFnXG4vLyBpbiBvcmRlciB0byBhdm9pZCBjb25mbGljdHMgeW91IGhhdmUgdG8gYWRkIGEgZGF0YS1sb2NhbD1cInRydWVcIiBhdHRyaWJ1dGUgdG8geW91ciB0YWIgbGlua3MuXG5cbnZhciAkID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG52YXIgY29uc29sZSA9IHJlcXVpcmUoJ2NvbnNvbGUnKTtcbiQud2lkZ2V0KFwidWkudGFic1wiLCAkLnVpLnRhYnMsIHtcbiAgX2lzTG9jYWw6IGZ1bmN0aW9uKCBhbmNob3IgKSB7XG4gICAgaWYgKGFuY2hvci5nZXRBdHRyaWJ1dGUoJ2RhdGEtbG9jYWwnKSA9PSBcInRydWVcIikgcmV0dXJuIHRydWU7XG4gICAgZWxzZSByZXR1cm4gdGhpcy5fc3VwZXJBcHBseSggYXJndW1lbnRzICk7XG4gIH1cbn0pOyIsIlwidXNlIHN0cmljdFwiO1xuLyogZ2xvYmFscyBnbG9iYWw6IGZhbHNlICovXG5cbmZ1bmN0aW9uIHB1c2hUZW1wbGF0ZSh0ZW1wbGF0ZU5hbWUsIHRlbXBsYXRlVGV4dCkge1xuICB2YXIgc2NyaXB0VGFnID0gZ2xvYmFsLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICBzY3JpcHRUYWcuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQvaHRtbCcpO1xuICBzY3JpcHRUYWcuc2V0QXR0cmlidXRlKCdpZCcsIHRlbXBsYXRlTmFtZSk7XG4gIHNjcmlwdFRhZy50ZXh0ID0gdGVtcGxhdGVUZXh0O1xuICBnbG9iYWwuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHRUYWcpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVUZW1wbGF0ZSh0ZW1wbGF0ZU5hbWUpIHtcbiAgdmFyIGVsID0gZ2xvYmFsLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRlbXBsYXRlTmFtZSk7XG4gIGlmIChlbCkgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG59XG5cbmZ1bmN0aW9uIGluaXQoKSB7fVxuXG5mdW5jdGlvbiBnZXRUZW1wbGF0ZUNvbnRlbnQoaWQpIHtcbiAgdmFyIGVsID0gZ2xvYmFsLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcbiAgaWYgKGVsKSByZXR1cm4gZWwuaW5uZXJIVE1MO1xuICBlbHNlIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpbml0OiBpbml0LFxuICBhZGRUZW1wbGF0ZTogcHVzaFRlbXBsYXRlLFxuICByZW1vdmVUZW1wbGF0ZTogcmVtb3ZlVGVtcGxhdGUsXG4gIGdldFRlbXBsYXRlQ29udGVudDogZ2V0VGVtcGxhdGVDb250ZW50XG59OyIsIlwidXNlIHN0cmljdFwiO1xuLyogZ2xvYmFsIGdsb2JhbDogZmFsc2UgKi9cblxudmFyIGtvID0gcmVxdWlyZShcImtub2Nrb3V0XCIpO1xudmFyICQgPSByZXF1aXJlKFwianF1ZXJ5XCIpO1xudmFyIGNvbnNvbGUgPSByZXF1aXJlKFwiY29uc29sZVwiKTtcbnZhciB0aW55bWNlID0gcmVxdWlyZShcInRpbnltY2VcIik7XG5cbnZhciB0aW1lb3V0O1xuXG52YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG5cbiAgdGltZW91dCA9IHVuZGVmaW5lZDtcblxuICBpZiAodHlwZW9mIHRpbnltY2UuYWN0aXZlRWRpdG9yICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgdGlueW1jZS5hY3RpdmVFZGl0b3IudGhlbWUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB0aW55bWNlLmFjdGl2ZUVkaXRvci50aGVtZS5wYW5lbCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHRpbnltY2UuYWN0aXZlRWRpdG9yLnRoZW1lLnBhbmVsLnZpc2libGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gQHNlZSBGbG9hdFBhbmVsLmpzIGZ1bmN0aW9uIHJlcG9zaXRpb25QYW5lbChwYW5lbClcbiAgICAvLyBGaXJzdCBjb25kaXRpb24gZ3JvdXAgaXMgZm9yIFRpbnltY2UgNC4wLzQuMVxuICAgIC8vIFNlY29uZCBjb25kaXRpb24gZ3JvdXAgaXMgZm9yIFRpbnltY2UgNC4yLzQuMyB3aGVyZSBcIi5fcHJvcGVydHlcIiBhcmUgbm93IGF2YWlsYWJsZSBhcyBcIi5zdGF0ZS5nZXQoJ3Byb3BlcnR5JylcIi5cbiAgICBpZiAoKHR5cGVvZiB0aW55bWNlLmFjdGl2ZUVkaXRvci50aGVtZS5wYW5lbC5fdmlzaWJsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdGlueW1jZS5hY3RpdmVFZGl0b3IudGhlbWUucGFuZWwuX3Zpc2libGUgJiYgdGlueW1jZS5hY3RpdmVFZGl0b3IudGhlbWUucGFuZWwuX2ZpeGVkKSB8fCBcbiAgICAgICAgKHR5cGVvZiB0aW55bWNlLmFjdGl2ZUVkaXRvci50aGVtZS5wYW5lbC5zdGF0ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdGlueW1jZS5hY3RpdmVFZGl0b3IudGhlbWUucGFuZWwuc3RhdGUuZ2V0KCd2aXNpYmxlJykgJiYgdGlueW1jZS5hY3RpdmVFZGl0b3IudGhlbWUucGFuZWwuc3RhdGUuZ2V0KCdmaXhlZCcpKSkge1xuICAgICAgdGlueW1jZS5hY3RpdmVFZGl0b3IudGhlbWUucGFuZWwuZml4ZWQoZmFsc2UpO1xuICAgIH1cblxuICAgIHRpbnltY2UuYWN0aXZlRWRpdG9yLm5vZGVDaGFuZ2VkKCk7XG4gICAgdGlueW1jZS5hY3RpdmVFZGl0b3IudGhlbWUucGFuZWwudmlzaWJsZSh0cnVlKTtcbiAgICBpZiAodGlueW1jZS5hY3RpdmVFZGl0b3IudGhlbWUucGFuZWwubGF5b3V0UmVjdCgpLnkgPD0gNDApXG4gICAgICB0aW55bWNlLmFjdGl2ZUVkaXRvci50aGVtZS5wYW5lbC5tb3ZlQnkoMCwgNDAgLSB0aW55bWNlLmFjdGl2ZUVkaXRvci50aGVtZS5wYW5lbC5sYXlvdXRSZWN0KCkueSk7XG5cbiAgfVxufTtcblxua28uYmluZGluZ0hhbmRsZXJzLnd5c2l3eWdTY3JvbGxmaXggPSB7XG4gICdzY3JvbGwnOiBmdW5jdGlvbihldmVudCkge1xuICAgIGlmICh0aW1lb3V0KSBnbG9iYWwuY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHRpbWVvdXQgPSBnbG9iYWwuc2V0VGltZW91dChyZW5kZXIsIDUwKTtcbiAgfSxcbiAgJ2luaXQnOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAga28udXRpbHMuZG9tTm9kZURpc3Bvc2FsLmFkZERpc3Bvc2VDYWxsYmFjayhlbGVtZW50LCBmdW5jdGlvbigpIHtcbiAgICAgICQoZWxlbWVudCkub2ZmKFwic2Nyb2xsXCIsIGtvLmJpbmRpbmdIYW5kbGVycy53eXNpd3lnU2Nyb2xsZml4LnNjcm9sbCk7XG4gICAgfSk7XG5cbiAgICAkKGVsZW1lbnQpLm9uKFwic2Nyb2xsXCIsIGtvLmJpbmRpbmdIYW5kbGVycy53eXNpd3lnU2Nyb2xsZml4LnNjcm9sbCk7XG5cbiAgfVxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyICQgPSByZXF1aXJlKFwianF1ZXJ5XCIpO1xudmFyIGtvID0gcmVxdWlyZShcImtub2Nrb3V0XCIpO1xudmFyIGNvbnNvbGUgPSByZXF1aXJlKFwiY29uc29sZVwiKTtcblxudmFyIF9zY3JvbGxJbnRvVmlldyA9IGZ1bmN0aW9uKCRlbGVtZW50LCBhbGlnblRvcCwgc2Nyb2xsUGFyZW50LCBtb3ZlQnkpIHtcbiAgdmFyIGN1cnJlbnRTY3JvbGxUb3AgPSBzY3JvbGxQYXJlbnQuc2Nyb2xsVG9wKCk7XG4gIHZhciBuZXdTY3JvbGxUb3AgPSBjdXJyZW50U2Nyb2xsVG9wIC0gbW92ZUJ5IC0gKGFsaWduVG9wID8gMjAgOiAtMjApO1xuICAvLyBpZnJhbWUgc2Nyb2xscyB0aGUgd2luZG93IGFuZCBhbmltYXRpb24gaXMgbm90IHN1cHBvcnRlZFxuICB2YXIgYW5pbWF0ZSA9IHR5cGVvZiBzY3JvbGxQYXJlbnRbMF0ubm9kZVR5cGUgIT09ICd1bmRlZmluZWQnO1xuICBpZiAoYW5pbWF0ZSkge1xuICAgIHZhciBhY3Rpb24gPSB7XG4gICAgICAnc2Nyb2xsVG9wJzogXCJcIiArIE1hdGgucm91bmQobmV3U2Nyb2xsVG9wKSArIFwicHhcIlxuICAgIH07XG4gICAgdmFyIHRpbWUgPSBNYXRoLnJvdW5kKE1hdGguYWJzKG5ld1Njcm9sbFRvcCAtIGN1cnJlbnRTY3JvbGxUb3ApKTtcbiAgICBzY3JvbGxQYXJlbnQuc3RvcCgpLmFuaW1hdGUoYWN0aW9uLCB0aW1lKTtcbiAgfSBlbHNlIHtcbiAgICBzY3JvbGxQYXJlbnQuc2Nyb2xsVG9wKG5ld1Njcm9sbFRvcCk7XG4gIH1cbiAgLy8gbmF0aXZlIHNjcm9sbEludG9WaWV3IGlzIG5vdCB3ZWxsIHN1cHBvcnRlZCBhbmQgZG9lc24ndCB3b3JrIGZpbmUuXG4gIC8vIGVsZW1lbnQuc2Nyb2xsSW50b1ZpZXcoYWxpZ25Ub3ApO1xufTtcblxua28uYmluZGluZ0hhbmRsZXJzLnNjcm9sbEludG9WaWV3ID0ge1xuICB1cGRhdGU6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzQWNjZXNzb3IsIHZpZXdNb2RlbCwgYmluZGluZ0NvbnRleHQpIHtcbiAgICB2YXIgc2VsZWN0ZWQgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlQWNjZXNzb3IoKSk7XG4gICAgaWYgKCFzZWxlY3RlZCkgcmV0dXJuO1xuICAgIHRyeSB7XG5cbiAgICAgIHdoaWxlIChlbGVtZW50Lm5vZGVUeXBlID09PSA4KSB7XG4gICAgICAgIC8vIGVsZW1lbnQgaXMgYSBjb21tZW50LCBtb3ZlIHRvIHRoZSBuZXh0IHNpYmxpbmcuLi5cbiAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQubmV4dFNpYmxpbmc7XG4gICAgICB9XG4gICAgICBpZiAoZWxlbWVudC5ub2RlVHlwZSAhPT0gOCkge1xuICAgICAgICB2YXIgc2Nyb2xsUGFyZW50ID0gJChlbGVtZW50KS5zY3JvbGxQYXJlbnQoKTtcblxuICAgICAgICB2YXIgcGFyZW50VG9wO1xuICAgICAgICB2YXIgcmVsYXRpdmVPZmZzZXQgPSBmYWxzZTtcbiAgICAgICAgaWYgKHNjcm9sbFBhcmVudFswXS5ub2RlVHlwZSA9PSA5KSB7XG4gICAgICAgICAgLy8gc2Nyb2xscGFyZW50IGlzIGRvY3VtZW50LCByZXBsYWNpbmcgd2l0aCBib2R5Li4uXG4gICAgICAgICAgc2Nyb2xsUGFyZW50ID0gJChzY3JvbGxQYXJlbnRbMF0uZGVmYXVsdFZpZXcpO1xuICAgICAgICAgIHBhcmVudFRvcCA9IDA7XG4gICAgICAgICAgcmVsYXRpdmVPZmZzZXQgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhcmVudFRvcCA9IHNjcm9sbFBhcmVudC5vZmZzZXQoKS50b3A7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGFyZW50SGVpZ2h0ID0gc2Nyb2xsUGFyZW50LmhlaWdodCgpO1xuICAgICAgICB2YXIgcGFyZW50U2Nyb2xsID0gc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpO1xuICAgICAgICB2YXIgcGFyZW50Qm90dG9tID0gcGFyZW50VG9wICsgcGFyZW50SGVpZ2h0O1xuXG4gICAgICAgIC8vIHNjcm9sbFBhcmVudCBpcyB0aGUgZG9jdW1lbnQuXG4gICAgICAgIHZhciAkZWxlbWVudCA9ICQoZWxlbWVudCk7XG4gICAgICAgIHZhciBlbFRvcCA9ICRlbGVtZW50Lm9mZnNldCgpLnRvcDtcbiAgICAgICAgLy8gd2hlbiB3ZSBhcmUgaW4gXCJpZnJhbWVcIiB3aXRoIHNjcm9sbGJhciBldmVyeXRoaWpuZyBjaGFuZ2VzLlxuICAgICAgICBpZiAocmVsYXRpdmVPZmZzZXQpIGVsVG9wID0gZWxUb3AgLSBwYXJlbnRTY3JvbGw7XG4gICAgICAgIHZhciBlbEhlaWdodCA9ICRlbGVtZW50LmhlaWdodCgpO1xuICAgICAgICB2YXIgZWxCb3R0b20gPSBlbFRvcCArIGVsSGVpZ2h0O1xuICAgICAgICBpZiAoZWxUb3AgPiBwYXJlbnRUb3AgJiYgZWxUb3AgKyBlbEhlaWdodCA8IHBhcmVudEJvdHRvbSkge1xuICAgICAgICAgIC8vIGJvdGggYm9yZGVycyBhcmUgdmlzaWJsZSA9PiBkb24ndCBkbyBhbnl0aGluZy5cbiAgICAgICAgfSBlbHNlIGlmIChlbEhlaWdodCA8IHBhcmVudEhlaWdodCkge1xuICAgICAgICAgIC8vIGlmIHRoZSBibG9jayBpcyBzbWFsbGVyIHRoYW4gdGhlIHZpZXdQb3J0XG4gICAgICAgICAgaWYgKGVsVG9wIDwgcGFyZW50VG9wKSBfc2Nyb2xsSW50b1ZpZXcoZWxlbWVudCwgdHJ1ZSwgc2Nyb2xsUGFyZW50LCBwYXJlbnRUb3AgLSBlbFRvcCk7XG4gICAgICAgICAgLy8gLT4gaWYgdGhlIHVwcGVyIGJvcmRlciBpcyBoaWdoZXIgdGhhbiB0aGUgdG9wLCB0aGVuIEkgbW92ZSBpdCB0byB0aGUgdG9wLlxuICAgICAgICAgIGlmIChlbEJvdHRvbSA+IHBhcmVudEJvdHRvbSkgX3Njcm9sbEludG9WaWV3KGVsZW1lbnQsIGZhbHNlLCBzY3JvbGxQYXJlbnQsIHBhcmVudEJvdHRvbSAtIGVsQm90dG9tKTtcbiAgICAgICAgICAvLyAtPiBpZiB0aGUgYm90dG9tIGJvcmRlciBpcyBsb3dlciB0aGFuIHRoZSBib3R0b20gdGhlbiBJIG1vdmUgaXQgdG8gdGhlIGJvdHRvbS5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBpZiB0aGUgYmxvY2sgaXMgbGFyZ2VyIHRoYW4gdGhlIHZpZXdQb3J0IHdlIGRvIHRoZSBvcHBvc2l0ZSFcbiAgICAgICAgICAvLyAtPiBpZiB0aGUgdXBwZXIgYm9yZGVyIGlzIGhpZ2hlciB0aGFuIHRoZSB0b3AgYW5kIHRoZSBsb3dlciBpcyBoaWdoZXIgdGhhbiB0aGUgYm90dG9tIEkgbW92ZSB0aGUgbG93ZXIgaXQgdG8gdGhlIGJvdHRvbS5cbiAgICAgICAgICBpZiAoZWxUb3AgPCBwYXJlbnRUb3AgJiYgZWxCb3R0b20gPCBwYXJlbnRCb3R0b20pIF9zY3JvbGxJbnRvVmlldyhlbGVtZW50LCBmYWxzZSwgc2Nyb2xsUGFyZW50LCBwYXJlbnRCb3R0b20gLSBlbEJvdHRvbSk7XG4gICAgICAgICAgLy8gLT4gaWYgdGhlIGJvdHRvbSBib3JkZXIgaWwgbG93ZXIgdGhhbiBib3R0b20gYW5kIHRoZSB1cHBlciBpcyBsb3dlciB0aGFuIHRoZSB0b3AgSSBtb3ZlIHRoZSB1cHBlciBib3JkZXIgdG8gdGhlIHZpZXdwb3J0IHRvcFxuICAgICAgICAgIGlmIChlbFRvcCA+IHBhcmVudFRvcCAmJiBlbEJvdHRvbSA+IHBhcmVudEJvdHRvbSkgX3Njcm9sbEludG9WaWV3KGVsZW1lbnQsIHRydWUsIHNjcm9sbFBhcmVudCwgcGFyZW50VG9wIC0gZWxUb3ApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZWxlbWVudC5zY3JvbGxJbnRvVmlldyh0cnVlKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIlRPRE8gZXhjZXB0aW9uIHNjcm9sbGluZyBpbnRvIHZpZXdcIiwgZSk7XG4gICAgfVxuICB9XG59O1xua28udmlydHVhbEVsZW1lbnRzLmFsbG93ZWRCaW5kaW5nc1snc2Nyb2xsSW50b1ZpZXcnXSA9IHRydWU7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBrbyA9IHJlcXVpcmUoXCJrbm9ja291dFwiKTtcbnZhciBvcmlnVGVtcGxhdGVTeXN0ZW0gPSByZXF1aXJlKFwiLi9zY3JpcHQtdGVtcGxhdGUuanNcIik7XG5cbnZhciB0ZW1wbGF0ZXMgPSB7fTtcblxuLy9kZWZpbmUgYSB0ZW1wbGF0ZSBzb3VyY2UgdGhhdCBzaW1wbHkgdHJlYXRzIHRoZSB0ZW1wbGF0ZSBuYW1lIGFzIGl0cyBjb250ZW50XG5rby50ZW1wbGF0ZVNvdXJjZXMuc3RyaW5nVGVtcGxhdGUgPSBmdW5jdGlvbih0ZW1wbGF0ZU5hbWUsIHRlbXBsYXRlKSB7XG4gIHRoaXMudGVtcGxhdGVOYW1lID0gdGVtcGxhdGVOYW1lO1xuICB0aGlzLnRlbXBsYXRlID0gdGVtcGxhdGU7XG4gIHRoaXMuX2RhdGEgPSB7fTtcbn07XG5cbmtvLnV0aWxzLmV4dGVuZChrby50ZW1wbGF0ZVNvdXJjZXMuc3RyaW5nVGVtcGxhdGUucHJvdG90eXBlLCB7XG4gIGRhdGE6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAvLyBjb25zb2xlLmxvZyhcImRhdGFcIiwga2V5LCB2YWx1ZSwgdGhpcy50ZW1wbGF0ZU5hbWUpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZGF0YVtrZXldO1xuICAgIH1cblxuICAgIHRoaXMuX2RhdGFba2V5XSA9IHZhbHVlO1xuICB9LFxuICB0ZXh0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIC8vIGNvbnNvbGUubG9nKFwidGV4dFwiLCB2YWx1ZSwgdGhpcy50ZW1wbGF0ZU5hbWUpXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLnRlbXBsYXRlO1xuICAgIH1cbiAgICB0aGlzLnRlbXBsYXRlID0gdmFsdWU7XG4gIH1cbn0pO1xuXG5cbi8vbW9kaWZ5IGFuIGV4aXN0aW5nIHRlbXBsYXRlRW5naW5lIHRvIHdvcmsgd2l0aCBzdHJpbmcgdGVtcGxhdGVzXG5mdW5jdGlvbiBjcmVhdGVTdHJpbmdUZW1wbGF0ZUVuZ2luZSh0ZW1wbGF0ZUVuZ2luZSkge1xuICB2YXIgb3JpZyA9IHRlbXBsYXRlRW5naW5lLm1ha2VUZW1wbGF0ZVNvdXJjZTtcbiAgdGVtcGxhdGVFbmdpbmUubWFrZVRlbXBsYXRlU291cmNlID0gZnVuY3Rpb24odGVtcGxhdGVOYW1lKSB7XG4gICAgaWYgKHR5cGVvZiB0ZW1wbGF0ZXNbdGVtcGxhdGVOYW1lXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBuZXcga28udGVtcGxhdGVTb3VyY2VzLnN0cmluZ1RlbXBsYXRlKHRlbXBsYXRlTmFtZSwgdGVtcGxhdGVzW3RlbXBsYXRlTmFtZV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb3JpZyh0ZW1wbGF0ZU5hbWUpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHRlbXBsYXRlRW5naW5lO1xufVxuXG5mdW5jdGlvbiBwdXNoVGVtcGxhdGUodGVtcGxhdGVOYW1lLCB0ZW1wbGF0ZVRleHQpIHtcbiAgdGVtcGxhdGVzW3RlbXBsYXRlTmFtZV0gPSB0ZW1wbGF0ZVRleHQ7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVRlbXBsYXRlKHRlbXBsYXRlTmFtZSkge1xuICBpZiAodHlwZW9mIHRlbXBsYXRlc1t0ZW1wbGF0ZU5hbWVdICE9PSAndW5kZWZpbmVkJykge1xuICAgIHRlbXBsYXRlc1t0ZW1wbGF0ZU5hbWVdID0gdW5kZWZpbmVkO1xuICB9IGVsc2Uge1xuICAgIG9yaWdUZW1wbGF0ZVN5c3RlbS5yZW1vdmVUZW1wbGF0ZSh0ZW1wbGF0ZU5hbWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXQoKSB7XG4gIGtvLnNldFRlbXBsYXRlRW5naW5lKGNyZWF0ZVN0cmluZ1RlbXBsYXRlRW5naW5lKG5ldyBrby5uYXRpdmVUZW1wbGF0ZUVuZ2luZSgpKSk7XG59XG5cbmZ1bmN0aW9uIGdldFRlbXBsYXRlQ29udGVudChpZCkge1xuICBpZiAodHlwZW9mIHRlbXBsYXRlc1tpZF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHRlbXBsYXRlc1tpZF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG9yaWdUZW1wbGF0ZVN5c3RlbS5nZXRUZW1wbGF0ZUNvbnRlbnQoaWQpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpbml0OiBpbml0LFxuICBhZGRUZW1wbGF0ZTogcHVzaFRlbXBsYXRlLFxuICByZW1vdmVUZW1wbGF0ZTogcmVtb3ZlVGVtcGxhdGUsXG4gIGdldFRlbXBsYXRlQ29udGVudDogZ2V0VGVtcGxhdGVDb250ZW50XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIga28gPSByZXF1aXJlKFwia25vY2tvdXRcIik7XG52YXIgJCA9IHJlcXVpcmUoXCJqcXVlcnlcIik7XG52YXIga29qcXVpID0gcmVxdWlyZShcImtub2Nrb3V0LWpxdWVyeXVpXCIpO1xudmFyIGNvbnNvbGUgPSByZXF1aXJlKFwiY29uc29sZVwiKTtcblxudmFyIGV4dGVuZFZhbHVlQWNjZXNzb3IgPSBmdW5jdGlvbih2YWx1ZUFjY2Vzc29yLCBvYmopIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGtvLnV0aWxzLmV4dGVuZChvYmosIHZhbHVlQWNjZXNzb3IoKSk7XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcbn07XG5cbnZhciBvcHRpb25zID0ge1xuICBzaG93OiB7XG4gICAgZGVsYXk6IDUwMFxuICB9LFxuICB0cmFjazogdHJ1ZSxcbiAgaXRlbXM6ICdbdGl0bGVdW3RpdGxlIT1cIlwiXVt0aXRsZSE9XCIgXCJdJ1xufTtcblxua28uYmluZGluZ0hhbmRsZXJzLnRvb2x0aXBzID0ge1xuICBpbml0OiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5nc0FjY2Vzc29yLCBkYXRhLCBjb250ZXh0KSB7XG4gICAgaWYgKHR5cGVvZiAkLmZuLnRvb2x0aXAgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBrby5iaW5kaW5nSGFuZGxlcnMudG9vbHRpcCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIHBvc2l0aW9uOiB7IG15OiBcImxlZnQrMTUgdG9wKzE1XCIsIGF0OiBcImNlbnRlciszMCBjZW50ZXIrMzBcIiB9XG4gICAgICAvLyBOT1RFIHRpdGxlIHdpdGggXCJcIiBhbmQgXCIgXCIgaXMgbmVlZGVkIHRvIGF2b2lkIGRlZmF1bHQgdG9vbHRpcHMgaW4gbmF0aXZlIGZpbGUgdXBsb2FkIGNvbnRyb2xzXG4gICAgICByZXR1cm4ga28uYmluZGluZ0hhbmRsZXJzLnRvb2x0aXAuaW5pdChlbGVtZW50LCBleHRlbmRWYWx1ZUFjY2Vzc29yKHZhbHVlQWNjZXNzb3IsIG9wdGlvbnMpLCBhbGxCaW5kaW5nc0FjY2Vzc29yLCBkYXRhLCBjb250ZXh0KTtcbiAgICB9XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3NBY2Nlc3NvciwgZGF0YSwgY29udGV4dCkge1xuICAgIGlmICh0eXBlb2YgJC5mbi50b29sdGlwICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Yga28uYmluZGluZ0hhbmRsZXJzLnRvb2x0aXAgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4ga28uYmluZGluZ0hhbmRsZXJzLnRvb2x0aXAudXBkYXRlKGVsZW1lbnQsIGV4dGVuZFZhbHVlQWNjZXNzb3IodmFsdWVBY2Nlc3Nvciwgb3B0aW9ucyksIGFsbEJpbmRpbmdzQWNjZXNzb3IsIGRhdGEsIGNvbnRleHQpO1xuICAgIH1cbiAgfSxcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBrbyA9IHJlcXVpcmUoJ2tub2Nrb3V0Jyk7XG52YXIgY29uc29sZSA9IHJlcXVpcmUoJ2NvbnNvbGUnKTtcblxuLy8gZXF1YWxzIHRvIFwidmFsdWVcIiBiaW5kaW5nIGJ1dCBhcHBseSBcImludmFsaWRcIiBjbGFzcyBpZiBcInBhdHRlcm5cIiBhdHRyaWJ1dGUgaXMgZGVmaW5lZCBhbmQgdmFsdWUgbWF0Y2hlcyB0aGUgcnVsZVxua28uYmluZGluZ0hhbmRsZXJzWyd2YWxpZGF0ZWRWYWx1ZSddID0ge1xuXHRpbml0OiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5ncykge1xuXHRcdHZhciBuZXdWYWx1ZUFjY2Vzc29yID0gdmFsdWVBY2Nlc3Nvcjtcblx0XHRpZiAodHlwZW9mIGVsZW1lbnQucGF0dGVybiAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdHZhciByZSA9IG5ldyBSZWdFeHAoJ14oPzonICsgZWxlbWVudC5wYXR0ZXJuICsgJykkJyk7XG5cdFx0XHR2YXIgY29tcHV0ZWQgPSBrby5jb21wdXRlZCh7XG5cdFx0XHRcdHJlYWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHZhciByZXMgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlQWNjZXNzb3IoKSk7XG5cdFx0XHRcdFx0Ly8gVE9ETyBzdXBwb3J0IGZvciBlbGVtZW50LnJlcXVpcmVkID9cblx0XHRcdFx0XHR2YXIgdmFsaWQgPSByZXMgPT09IG51bGwgfHwgcmVzID09PSAnJyB8fCByZS50ZXN0KHJlcyk7XG5cdFx0XHRcdFx0Ly8gSUUxMSBkb2Vzbid0IHN1cHBvcnQgY2xhc3NMaXN0LnRvZ2dsZSgnaW52YWxpZCcsIHN0YXRlKVxuXHRcdFx0XHRcdGlmICh2YWxpZCkge1xuXHRcdFx0XHRcdFx0ZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpbnZhbGlkJyk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaW52YWxpZCcpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gcmVzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR3cml0ZToga28uaXNXcml0ZWFibGVPYnNlcnZhYmxlKHZhbHVlQWNjZXNzb3IoKSkgJiYgZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdFx0XHR2YWx1ZUFjY2Vzc29yKCkodmFsdWUpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRkaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQ6IGVsZW1lbnRcblx0XHRcdH0pO1xuXHRcdFx0bmV3VmFsdWVBY2Nlc3NvciA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gY29tcHV0ZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRrby5iaW5kaW5nSGFuZGxlcnNbJ3ZhbHVlJ10uaW5pdChlbGVtZW50LCBuZXdWYWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5ncyk7XG5cdH1cbn07XG5rby5leHByZXNzaW9uUmV3cml0aW5nLl90d29XYXlCaW5kaW5nc1sndmFsaWRhdGVkVmFsdWUnXSA9IHRydWU7IiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKiBnbG9iYWxzIGdsb2JhbDpmYWxzZSAqL1xuXG52YXIga28gPSByZXF1aXJlKFwia25vY2tvdXRcIik7XG52YXIgY29uc29sZSA9IHJlcXVpcmUoXCJjb25zb2xlXCIpO1xuXG5rby5iaW5kaW5nSGFuZGxlcnNbJ3VuaXF1ZUlkJ10gPSB7XG4gIGN1cnJlbnRJbmRleDogMCxcbiAgJ2luaXQnOiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKSB7XG4gICAgdmFyIGRhdGEgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlQWNjZXNzb3IoKSkgfHwge307XG4gICAgaWYgKGRhdGEuaWQoKSA9PT0gJycpIHtcbiAgICAgIHZhciBpZCwgZWwsIHByZWZpeDtcbiAgICAgIC8vIFRPRE8gd2UgbmVlZCBhIGJldHRlciBwcmVmaXhcbiAgICAgIHByZWZpeCA9ICdrb18nICsgKHR5cGVvZiBkYXRhLnR5cGUgIT09ICd1bmRlZmluZWQnID8ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShkYXRhLnR5cGUpIDogJ2Jsb2NrJyk7XG4gICAgICAvLyB3aGVuIGxvYWRpbmcgYW4gZXhpc2luZyBtb2RlbCwgSURzIGNvdWxkIGJlIGFscmVhZHkgYXNzaWduZWQuXG4gICAgICBkbyB7XG4gICAgICAgIGlkID0gcHJlZml4ICsgJ18nICsgKCsra28uYmluZGluZ0hhbmRsZXJzWyd1bmlxdWVJZCddLmN1cnJlbnRJbmRleCk7XG4gICAgICAgIGVsID0gZ2xvYmFsLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcbiAgICAgICAgaWYgKGVsKSB7XG4gICAgICAgICAgLy8gd2hlbiBsb2FkaW5nIGFuIGV4aXN0aW5nIG1vZGVsIG15IFwiY3VycmVudEluZGV4XCIgaXMgZW1wdHkuXG4gICAgICAgICAgLy8gYnV0IHdlIGhhdmUgZXhpc3RpbmcgYmxvY2tzLCBzbyBJIG11c3QgYmUgc3VyZSBJIGRvbid0IHJldXNlIHRoZWlyIElEcy5cbiAgICAgICAgICAvLyBXZSB1c2UgZGlmZmVyZW50IHByZWZpeGVzIChwZXIgYmxvY2sgdHlwZSkgc28gdGhhdCBhIGhpZGRlbiBibG9jayBcbiAgICAgICAgICAvLyAoZm9yIHdoaWNoIHdlIGhhdmUgbm8gaWQgaW4gdGhlIHBhZ2UsIGUuZzogcHJlaGVhZGVyIGluIHZlcnNhZml4LTEpXG4gICAgICAgICAgLy8gd2lsbCBicmVhayBldmVydGhpbmcgb25jZSB3ZSByZXVzZSBpdHMgbmFtZS5cbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAoZWwpO1xuICAgICAgZGF0YS5pZChpZCk7XG4gICAgfVxuICB9XG59O1xua28udmlydHVhbEVsZW1lbnRzLmFsbG93ZWRCaW5kaW5nc1sndW5pcXVlSWQnXSA9IHRydWU7XG5cbmtvLmJpbmRpbmdIYW5kbGVyc1sndmlydHVhbEF0dHInXSA9IHtcbiAgdXBkYXRlOiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKSB7XG4gICAgaWYgKGVsZW1lbnQubm9kZVR5cGUgIT09IDgpIHtcbiAgICAgIGtvLmJpbmRpbmdIYW5kbGVyc1snYXR0ciddLnVwZGF0ZShlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKTtcbiAgICB9XG4gIH1cbn07XG5rby52aXJ0dWFsRWxlbWVudHMuYWxsb3dlZEJpbmRpbmdzWyd2aXJ0dWFsQXR0ciddID0gdHJ1ZTtcblxua28uYmluZGluZ0hhbmRsZXJzWyd2aXJ0dWFsQXR0clN0eWxlJ10gPSB7XG4gIHVwZGF0ZTogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3NBY2Nlc3Nvciwgdmlld01vZGVsLCBiaW5kaW5nQ29udGV4dCkge1xuICAgIGlmIChlbGVtZW50Lm5vZGVUeXBlICE9PSA4KSB7XG4gICAgICAvLyBJbiBcInByZXZpZXdcIiB3ZSBhbHNvIHNldCBcInJlcGxhY2Vkc3R5bGVcIiBzbyB0byBoYXZlIGFuIGF0dHJpYnV0ZSB0byBiZSB1c2VkIGJ5IElFIChJRSBicmVha3MgdGhlIFNUWUxFKSB0byBkbyB0aGUgZXhwb3J0LlxuICAgICAgdmFyIGlzTm90V3lzaXd5Z01vZGUgPSAodHlwZW9mIGJpbmRpbmdDb250ZXh0LnRlbXBsYXRlTW9kZSA9PSAndW5kZWZpbmVkJyB8fCBiaW5kaW5nQ29udGV4dC50ZW1wbGF0ZU1vZGUgIT0gJ3d5c2l3eWcnKTtcbiAgICAgIHZhciBhdHRycyA9IFtcInN0eWxlXCJdO1xuICAgICAgaWYgKGlzTm90V3lzaXd5Z01vZGUpIGF0dHJzLnB1c2goXCJyZXBsYWNlZHN0eWxlXCIpO1xuICAgICAgdmFyIGF0dHJWYWx1ZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWVBY2Nlc3NvcigpKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXR0cnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGF0dHJOYW1lID0gYXR0cnNbaV07XG4gICAgICAgIHZhciB0b1JlbW92ZSA9IChhdHRyVmFsdWUgPT09IGZhbHNlKSB8fCAoYXR0clZhbHVlID09PSBudWxsKSB8fCAoYXR0clZhbHVlID09PSB1bmRlZmluZWQpO1xuICAgICAgICBpZiAodG9SZW1vdmUpXG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYXR0ck5hbWUpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoYXR0ck5hbWUsIGF0dHJWYWx1ZS50b1N0cmluZygpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5rby52aXJ0dWFsRWxlbWVudHMuYWxsb3dlZEJpbmRpbmdzWyd2aXJ0dWFsQXR0clN0eWxlJ10gPSB0cnVlO1xuXG5rby5iaW5kaW5nSGFuZGxlcnNbJ3ZpcnR1YWxTdHlsZSddID0ge1xuICB1cGRhdGU6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpIHtcbiAgICBpZiAoZWxlbWVudC5ub2RlVHlwZSAhPT0gOCkge1xuICAgICAga28uYmluZGluZ0hhbmRsZXJzWydzdHlsZSddLnVwZGF0ZShlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKTtcbiAgICB9XG4gIH1cbn07XG5rby52aXJ0dWFsRWxlbWVudHMuYWxsb3dlZEJpbmRpbmdzWyd2aXJ0dWFsU3R5bGUnXSA9IHRydWU7XG5cblxua28uYmluZGluZ0hhbmRsZXJzWyd2aXJ0dWFsSHRtbCddID0ge1xuICBpbml0OiBrby5iaW5kaW5nSGFuZGxlcnNbJ2h0bWwnXS5pbml0LFxuICB1cGRhdGU6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpIHtcbiAgICBpZiAoZWxlbWVudC5ub2RlVHlwZSA9PT0gOCkge1xuICAgICAgdmFyIGh0bWwgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlQWNjZXNzb3IoKSk7XG5cbiAgICAgIGtvLnZpcnR1YWxFbGVtZW50cy5lbXB0eU5vZGUoZWxlbWVudCk7XG4gICAgICBpZiAoKGh0bWwgIT09IG51bGwpICYmIChodG1sICE9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaHRtbCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBodG1sID0gaHRtbC50b1N0cmluZygpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBhcnNlZE5vZGVzID0ga28udXRpbHMucGFyc2VIdG1sRnJhZ21lbnQoaHRtbCk7XG4gICAgICAgIGlmIChwYXJzZWROb2Rlcykge1xuICAgICAgICAgIHZhciBlbmRDb21tZW50Tm9kZSA9IGVsZW1lbnQubmV4dFNpYmxpbmc7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSBwYXJzZWROb2Rlcy5sZW5ndGg7IGkgPCBqOyBpKyspXG4gICAgICAgICAgICBlbmRDb21tZW50Tm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShwYXJzZWROb2Rlc1tpXSwgZW5kQ29tbWVudE5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHsgLy8gcGxhaW4gbm9kZVxuICAgICAga28uYmluZGluZ0hhbmRsZXJzWydodG1sJ10udXBkYXRlKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpO1xuICAgIH1cblxuICAgIC8vIENvbnRlbnQgZm9yIHZpcnR1YWxIVE1MIG11c3Qgbm90IGJlIHBhcnNlZCBieSBLTywgaXQgaXMgc2ltcGxlIGNvbnRlbnQuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRyb2xzRGVzY2VuZGFudEJpbmRpbmdzOiB0cnVlXG4gICAgfTtcbiAgfVxufTtcbmtvLnZpcnR1YWxFbGVtZW50cy5hbGxvd2VkQmluZGluZ3NbJ3ZpcnR1YWxIdG1sJ10gPSB0cnVlOyIsIlwidXNlIHN0cmljdFwiO1xuLyogZ2xvYmFsIGdsb2JhbDogZmFsc2UgKi9cblxudmFyIHRpbnltY2UgPSByZXF1aXJlKFwidGlueW1jZVwiKTtcbnZhciAkID0gcmVxdWlyZShcImpxdWVyeVwiKTtcbnZhciBrbyA9IHJlcXVpcmUoXCJrbm9ja291dFwiKTtcbnZhciBjb25zb2xlID0gcmVxdWlyZShcImNvbnNvbGVcIik7XG5yZXF1aXJlKFwiLi9ldmVudGFibGUuanNcIik7XG5cbmtvLmJpbmRpbmdIYW5kbGVycy53eXNpd3lnT3JIdG1sID0ge1xuICBpbml0OiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5nc0FjY2Vzc29yLCB2aWV3TW9kZWwsIGJpbmRpbmdDb250ZXh0KSB7XG4gICAgdmFyIGlzTm90V3lzaXd5Z01vZGUgPSAodHlwZW9mIGJpbmRpbmdDb250ZXh0LnRlbXBsYXRlTW9kZSA9PSAndW5kZWZpbmVkJyB8fCBiaW5kaW5nQ29udGV4dC50ZW1wbGF0ZU1vZGUgIT0gJ3d5c2l3eWcnKTtcblxuICAgIGlmIChpc05vdFd5c2l3eWdNb2RlKVxuICAgICAgcmV0dXJuIGtvLmJpbmRpbmdIYW5kbGVyc1sndmlydHVhbEh0bWwnXS5pbml0KCk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIGtvLmJpbmRpbmdIYW5kbGVycy53eXNpd3lnLmluaXQoZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3NBY2Nlc3Nvciwgdmlld01vZGVsLCBiaW5kaW5nQ29udGV4dCk7XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3NBY2Nlc3Nvciwgdmlld01vZGVsLCBiaW5kaW5nQ29udGV4dCkge1xuICAgIHZhciBpc05vdFd5c2l3eWdNb2RlID0gKHR5cGVvZiBiaW5kaW5nQ29udGV4dC50ZW1wbGF0ZU1vZGUgPT0gJ3VuZGVmaW5lZCcgfHwgYmluZGluZ0NvbnRleHQudGVtcGxhdGVNb2RlICE9ICd3eXNpd3lnJyk7XG4gICAgaWYgKGlzTm90V3lzaXd5Z01vZGUpXG4gICAgICByZXR1cm4ga28uYmluZGluZ0hhbmRsZXJzWyd2aXJ0dWFsSHRtbCddLnVwZGF0ZShlbGVtZW50LCB2YWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5nc0FjY2Vzc29yLCB2aWV3TW9kZWwsIGJpbmRpbmdDb250ZXh0KTtcbiAgICAvL2Vsc2UgXG4gICAgLy8gIHJldHVybiBrby5iaW5kaW5nSGFuZGxlcnMud3lzaXd5Zy51cGRhdGUoZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3NBY2Nlc3Nvciwgdmlld01vZGVsLCBiaW5kaW5nQ29udGV4dCk7XG4gIH1cbn07XG5rby52aXJ0dWFsRWxlbWVudHMuYWxsb3dlZEJpbmRpbmdzWyd3eXNpd3lnT3JIdG1sJ10gPSB0cnVlO1xuXG5rby5iaW5kaW5nSGFuZGxlcnMud3lzaXd5Z0hyZWYgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzQWNjZXNzb3IsIHZpZXdNb2RlbCwgYmluZGluZ0NvbnRleHQpIHtcbiAgICBpZiAoZWxlbWVudC5ub2RlVHlwZSAhPT0gOCkge1xuICAgICAgdmFyIHYgPSB2YWx1ZUFjY2Vzc29yKCk7XG5cbiAgICAgIHZhciBpc05vdFd5c2l3eWdNb2RlID0gKHR5cGVvZiBiaW5kaW5nQ29udGV4dC50ZW1wbGF0ZU1vZGUgPT0gJ3VuZGVmaW5lZCcgfHwgYmluZGluZ0NvbnRleHQudGVtcGxhdGVNb2RlICE9ICd3eXNpd3lnJyk7XG4gICAgICAvLyBjb25zb2xlLmxvZyhcIlhYWFwiLCBiaW5kaW5nQ29udGV4dC50ZW1wbGF0ZU1vZGUsIGlzTm90V3lzaXd5Z01vZGUsIGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSk7XG4gICAgICBpZiAoaXNOb3RXeXNpd3lnTW9kZSkge1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgndGFyZ2V0JywgJ19uZXcnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qanNoaW50IHNjcmlwdHVybDp0cnVlKi9cbiAgICAgICAgLy8gMjAxNTAyMjY6IHJlbW92ZWQgaHJlZiB0byB3b3JrIGFyb3VuZCBGRiBpc3N1ZXMgd2l0aCA8YSBocmVmPVwiXCI+PGRpdiBjb250ZW50ZWRpdGFibGU9XCJ0cnVlXCI+Li48L2Rpdj48L2E+XG4gICAgICAgIC8vIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdocmVmJywgJ2phdmFzY3JpcHQ6dm9pZCgwKScpO1xuICAgICAgICAvLyAyMDE1MDMwOTogb24gSUUsIGFuIGVkaXRhYmxlIDxhIGhyZWY9XCJcIiBkYXRhLWVkaXRhYmxlPVwiXCI+IHByZXZlbnQgdGlueW1jZSB0b29sYmFyIHRvIGJlIHNob3duLlxuICAgICAgICAvLyAgICAgICAgICAgc28gSSBjaGFuZ2UgYmVoYXZpb3VyIGJhc2VkIG9uIHRoZSB1c2Ugb2YgXCJ3eXNpd3lnT3JIdG1sXCJcbiAgICAgICAgLy8gQHNlZTogaHR0cDovL3d3dy50aW55bWNlLmNvbS9kZXZlbG9wL2J1Z3RyYWNrZXJfdmlldy5waHA/aWQ9NzQzMlxuICAgICAgICB2YXIgYWxsYmluZGluZ3MgPSBhbGxCaW5kaW5nc0FjY2Vzc29yKCk7XG4gICAgICAgIGlmICh0eXBlb2YgYWxsYmluZGluZ3Mud3lzaXd5Z09ySHRtbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnaHJlZicsICdqYXZhc2NyaXB0OnZvaWQoMCknKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnaHJlZicpO1xuICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkaXNhYmxlZGhyZWYnLCAnIycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICB1cGRhdGU6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzQWNjZXNzb3IsIHZpZXdNb2RlbCwgYmluZGluZ0NvbnRleHQpIHtcbiAgICBpZiAoZWxlbWVudC5ub2RlVHlwZSAhPT0gOCkge1xuICAgICAgdmFyIGlzTm90V3lzaXd5Z01vZGUgPSAodHlwZW9mIGJpbmRpbmdDb250ZXh0LnRlbXBsYXRlTW9kZSA9PSAndW5kZWZpbmVkJyB8fCBiaW5kaW5nQ29udGV4dC50ZW1wbGF0ZU1vZGUgIT0gJ3d5c2l3eWcnKTtcbiAgICAgIC8vIE5PVEUgdGhpcyB1bndyYXAgaXMgbmVlZGVkIGFsc28gaW4gXCJ3eXNpd3lnXCIgbW9kZSwgb3RoZXJ3aXNlIGRlcGVuZGVuY3kgdHJhY2tpbmcgZGllcy5cbiAgICAgIHZhciBhdHRyVmFsdWUgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlQWNjZXNzb3IoKSk7XG4gICAgICBpZiAoaXNOb3RXeXNpd3lnTW9kZSkge1xuICAgICAgICBpZiAoKGF0dHJWYWx1ZSA9PT0gZmFsc2UpIHx8IChhdHRyVmFsdWUgPT09IG51bGwpIHx8IChhdHRyVmFsdWUgPT09IHVuZGVmaW5lZCkpXG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2hyZWYnKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdocmVmJywgYXR0clZhbHVlLnRvU3RyaW5nKCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbmtvLnZpcnR1YWxFbGVtZW50cy5hbGxvd2VkQmluZGluZ3NbJ3d5c2l3eWdIcmVmJ10gPSB0cnVlO1xuXG5rby5iaW5kaW5nSGFuZGxlcnMud3lzaXd5Z1NyYyA9IHtcbiAgY29udmVydGVkVXJsOiBmdW5jdGlvbihzcmMsIG1ldGhvZCwgd2lkdGgsIGhlaWdodCkge1xuICAgIHZhciByZXMgPSBzcmMgKyBcIj9tZXRob2Q9XCIgKyBtZXRob2QgKyBcIiZ3aWR0aD1cIiArIHdpZHRoICsgKGhlaWdodCAhPT0gbnVsbCA/IFwiJmhlaWdodD1cIiArIGhlaWdodCA6ICcnKTtcbiAgICBjb25zb2xlLmxvZyhcImJhc2ljIGNvbnZlcnRlclVybFwiLCByZXMpO1xuICAgIHJldHVybiByZXM7XG4gIH0sXG4gIHBsYWNlaG9sZGVyVXJsOiBmdW5jdGlvbihwbHdpZHRoLCBwbGhlaWdodCwgcGx0ZXh0KSB7XG4gICAgdmFyIHBsYWNlaG9sZGVyc3JjID0gXCInaHR0cDovL2xvcmVtcGl4ZWwuY29tL2cvJytcIiArIHBsd2lkdGggKyBcIisnLycrXCIgKyBwbGhlaWdodCArIFwiKycvYWJzdHJhY3QvJytlbmNvZGVVUklDb21wb25lbnQoXCIgKyBwbHRleHQgKyBcIilcIjtcbiAgICAvLyBodHRwOi8vcGxhY2Vob2xkLml0LzIwMHgxNTAucG5nL2NjY2NjYy8zMzMzMzMmdGV4dD1wbGFjZWhvbGQuaXQjc3RoYXNoLm5BM3IyNnZSLmRwdWZcbiAgICAvLyBwbGFjZWhvbGRlcnNyYyA9IFwiJ2h0dHA6Ly9wbGFjZWhvbGQuaXQvJytcIit3aWR0aCtcIisneCcrXCIraGVpZ2h0K1wiKycucG5nL2NjY2NjYy8zMzMzMzMmdGV4dD0nK1wiK3NpemU7XG4gICAgLy8gcGxhY2Vob2xkZXJzcmMgPSBcIidcIitjb252ZXJ0ZXJVdGlscy5hZGRTbGFzaGVzKGRlZmF1bHRWYWx1ZSkrXCInXCI7XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3NBY2Nlc3Nvciwgdmlld01vZGVsLCBiaW5kaW5nQ29udGV4dCkge1xuICAgIHZhciB2YWx1ZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWVBY2Nlc3NvcigpKTtcbiAgICB2YXIgYXR0clZhbHVlID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZS5zcmMpO1xuICAgIHZhciBwbGFjZWhvbGRlclZhbHVlID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZS5wbGFjZWhvbGRlcik7XG4gICAgdmFyIHdpZHRoID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZS53aWR0aCk7XG4gICAgdmFyIGhlaWdodCA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWUuaGVpZ2h0KTtcbiAgICBpZiAoKGF0dHJWYWx1ZSA9PT0gZmFsc2UpIHx8IChhdHRyVmFsdWUgPT09IG51bGwpIHx8IChhdHRyVmFsdWUgPT09IHVuZGVmaW5lZCkgfHwgKGF0dHJWYWx1ZSA9PT0gJycpKSB7XG4gICAgICBpZiAodHlwZW9mIHBsYWNlaG9sZGVyVmFsdWUgPT0gJ29iamVjdCcgJiYgcGxhY2Vob2xkZXJWYWx1ZSAhPT0gbnVsbCkgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3NyYycsIGtvLmJpbmRpbmdIYW5kbGVycy53eXNpd3lnU3JjLnBsYWNlaG9sZGVyVXJsKHBsYWNlaG9sZGVyVmFsdWUud2lkdGgsIHBsYWNlaG9sZGVyVmFsdWUuaGVpZ2h0LCBwbGFjZWhvbGRlclZhbHVlLnRleHQpKTtcbiAgICAgIGVsc2UgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ3NyYycpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbWV0aG9kID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZS5tZXRob2QpO1xuICAgICAgaWYgKCFtZXRob2QpIG1ldGhvZCA9IHdpZHRoID4gMCAmJiBoZWlnaHQgPiAwID8gJ2NvdmVyJyA6ICdyZXNpemUnO1xuICAgICAgdmFyIHNyYyA9IGtvLmJpbmRpbmdIYW5kbGVycy53eXNpd3lnU3JjLmNvbnZlcnRlZFVybChhdHRyVmFsdWUudG9TdHJpbmcoKSwgbWV0aG9kLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdzcmMnLCBzcmMpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHdpZHRoICE9PSAndW5kZWZpbmVkJyAmJiB3aWR0aCAhPT0gbnVsbCkgZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCB3aWR0aCk7XG4gICAgZWxzZSBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcIndpZHRoXCIpO1xuICAgIGlmICh0eXBlb2YgaGVpZ2h0ICE9PSAndW5kZWZpbmVkJyAmJiBoZWlnaHQgIT09IG51bGwpIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIGhlaWdodCk7XG4gICAgZWxzZSBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImhlaWdodFwiKTtcbiAgfVxufTtcblxua28uYmluZGluZ0hhbmRsZXJzLnd5c2l3eWdJZCA9IHtcbiAgaW5pdDogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3NBY2Nlc3Nvciwgdmlld01vZGVsLCBiaW5kaW5nQ29udGV4dCkge1xuICAgIHZhciBpc05vdFd5c2l3eWdNb2RlID0gKHR5cGVvZiBiaW5kaW5nQ29udGV4dC50ZW1wbGF0ZU1vZGUgPT0gJ3VuZGVmaW5lZCcgfHwgYmluZGluZ0NvbnRleHQudGVtcGxhdGVNb2RlICE9ICd3eXNpd3lnJyk7XG4gICAgaWYgKCFpc05vdFd5c2l3eWdNb2RlKVxuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lkJywga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZUFjY2Vzc29yKCkpKTtcbiAgfSxcbiAgdXBkYXRlOiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5nc0FjY2Vzc29yLCB2aWV3TW9kZWwsIGJpbmRpbmdDb250ZXh0KSB7XG4gICAgdmFyIGlzTm90V3lzaXd5Z01vZGUgPSAodHlwZW9mIGJpbmRpbmdDb250ZXh0LnRlbXBsYXRlTW9kZSA9PSAndW5kZWZpbmVkJyB8fCBiaW5kaW5nQ29udGV4dC50ZW1wbGF0ZU1vZGUgIT0gJ3d5c2l3eWcnKTtcbiAgICBpZiAoIWlzTm90V3lzaXd5Z01vZGUpXG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnaWQnLCBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlQWNjZXNzb3IoKSkpO1xuICB9XG59O1xua28udmlydHVhbEVsZW1lbnRzLmFsbG93ZWRCaW5kaW5nc1snd3lzaXd5Z0lkJ10gPSB0cnVlO1xuXG4vLyB1c2VkIG9uIGVkaXRhYmxlIFwiaXRlbVwiIHNvIHRvIGJpbmQgY2xpY2tzIG9ubHkgaW4gd3lzaXd5ZyBtb2RlLlxua28uYmluZGluZ0hhbmRsZXJzLnd5c2l3eWdDbGljayA9IHtcbiAgaW5pdDogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3NBY2Nlc3Nvciwgdmlld01vZGVsLCBiaW5kaW5nQ29udGV4dCkge1xuICAgIHZhciBpc05vdFd5c2l3eWdNb2RlID0gKHR5cGVvZiBiaW5kaW5nQ29udGV4dC50ZW1wbGF0ZU1vZGUgPT0gJ3VuZGVmaW5lZCcgfHwgYmluZGluZ0NvbnRleHQudGVtcGxhdGVNb2RlICE9ICd3eXNpd3lnJyk7XG4gICAgaWYgKCFpc05vdFd5c2l3eWdNb2RlKVxuICAgICAga28uYmluZGluZ0hhbmRsZXJzLmNsaWNrLmluaXQoZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3NBY2Nlc3Nvciwgdmlld01vZGVsLCBiaW5kaW5nQ29udGV4dCk7XG4gIH1cbn07XG5rby52aXJ0dWFsRWxlbWVudHMuYWxsb3dlZEJpbmRpbmdzWyd3eXNpd3lnQ2xpY2snXSA9IHRydWU7XG5cbi8vIHVzZWQgb24gZWRpdGFibGUgXCJpdGVtXCIgc28gdG8gYmluZCBjc3Mgb25seSBpbiB3eXNpd3lnIG1vZGUuXG5rby5iaW5kaW5nSGFuZGxlcnMud3lzaXd5Z0NzcyA9IHtcbiAgdXBkYXRlOiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5nc0FjY2Vzc29yLCB2aWV3TW9kZWwsIGJpbmRpbmdDb250ZXh0KSB7XG4gICAgdmFyIGlzTm90V3lzaXd5Z01vZGUgPSAodHlwZW9mIGJpbmRpbmdDb250ZXh0LnRlbXBsYXRlTW9kZSA9PSAndW5kZWZpbmVkJyB8fCBiaW5kaW5nQ29udGV4dC50ZW1wbGF0ZU1vZGUgIT0gJ3d5c2l3eWcnKTtcbiAgICBpZiAoIWlzTm90V3lzaXd5Z01vZGUpXG4gICAgICBrby5iaW5kaW5nSGFuZGxlcnMuY3NzLnVwZGF0ZShlbGVtZW50LCB2YWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5nc0FjY2Vzc29yLCB2aWV3TW9kZWwsIGJpbmRpbmdDb250ZXh0KTtcbiAgfVxufTtcbmtvLnZpcnR1YWxFbGVtZW50cy5hbGxvd2VkQmluZGluZ3NbJ3d5c2l3eWdDc3MnXSA9IHRydWU7XG5cbmtvLmJpbmRpbmdIYW5kbGVycy53eXNpd3lnSW1nID0ge1xuICBtYWtlVGVtcGxhdGVWYWx1ZUFjY2Vzc29yOiBmdW5jdGlvbih2YWx1ZUFjY2Vzc29yLCBiaW5kaW5nQ29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpc1d5c2l3eWdNb2RlID0gKHR5cGVvZiBiaW5kaW5nQ29udGV4dC50ZW1wbGF0ZU1vZGUgIT0gJ3VuZGVmaW5lZCcgJiYgYmluZGluZ0NvbnRleHQudGVtcGxhdGVNb2RlID09ICd3eXNpd3lnJyk7XG5cbiAgICAgIHZhciBtb2RlbFZhbHVlID0gdmFsdWVBY2Nlc3NvcigpLFxuICAgICAgICB1bndyYXBwZWRWYWx1ZSA9IGtvLnV0aWxzLnBlZWtPYnNlcnZhYmxlKG1vZGVsVmFsdWUpOyAvLyBVbndyYXAgd2l0aG91dCBzZXR0aW5nIGEgZGVwZW5kZW5jeSBoZXJlXG5cbiAgICAgIC8vIElmIHVud3JhcHBlZFZhbHVlLmRhdGEgaXMgdGhlIGFycmF5LCBwcmVzZXJ2ZSBhbGwgcmVsZXZhbnQgb3B0aW9ucyBhbmQgdW53cmFwIGFnYWluIHZhbHVlIHNvIHdlIGdldCB1cGRhdGVzXG4gICAgICBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKG1vZGVsVmFsdWUpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICAnbmFtZSc6IGlzV3lzaXd5Z01vZGUgPyB1bndyYXBwZWRWYWx1ZVsnX2VkaXRUZW1wbGF0ZSddIDogdW53cmFwcGVkVmFsdWVbJ190ZW1wbGF0ZSddLFxuICAgICAgICAndGVtcGxhdGVFbmdpbmUnOiBrby5uYXRpdmVUZW1wbGF0ZUVuZ2luZS5pbnN0YW5jZVxuICAgICAgfTtcbiAgICB9O1xuICB9LFxuICAnaW5pdCc6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzLCB2aWV3TW9kZWwsIGJpbmRpbmdDb250ZXh0KSB7XG4gICAgcmV0dXJuIGtvLmJpbmRpbmdIYW5kbGVyc1sndGVtcGxhdGUnXVsnaW5pdCddKGVsZW1lbnQsIGtvLmJpbmRpbmdIYW5kbGVyc1snd3lzaXd5Z0ltZyddLm1ha2VUZW1wbGF0ZVZhbHVlQWNjZXNzb3IodmFsdWVBY2Nlc3NvciwgYmluZGluZ0NvbnRleHQpKTtcbiAgfSxcbiAgJ3VwZGF0ZSc6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzLCB2aWV3TW9kZWwsIGJpbmRpbmdDb250ZXh0KSB7XG4gICAgYmluZGluZ0NvbnRleHQgPSBiaW5kaW5nQ29udGV4dFsnZXh0ZW5kJ10odmFsdWVBY2Nlc3NvcigpKTtcbiAgICByZXR1cm4ga28uYmluZGluZ0hhbmRsZXJzWyd0ZW1wbGF0ZSddWyd1cGRhdGUnXShlbGVtZW50LCBrby5iaW5kaW5nSGFuZGxlcnNbJ3d5c2l3eWdJbWcnXS5tYWtlVGVtcGxhdGVWYWx1ZUFjY2Vzc29yKHZhbHVlQWNjZXNzb3IsIGJpbmRpbmdDb250ZXh0KSwgYWxsQmluZGluZ3MsIHZpZXdNb2RlbCwgYmluZGluZ0NvbnRleHQpO1xuICB9XG59O1xua28udmlydHVhbEVsZW1lbnRzLmFsbG93ZWRCaW5kaW5nc1snd3lzaXd5Z0ltZyddID0gdHJ1ZTtcblxuLy8gTk9URTogdGhlcmUgYXJlIGlzc3VlcyB3aXRoIHRoZSBcInJhd1wiIGZvcm1hdCBhbmQgdHJhc2ggbGVmdCBhcm91bmQgYnkgdGlueW1jZSB3b3JrYXJvdW5kcyBmb3IgY29udGVudGVkaXRhYmxlIGlzc3Vlcy5cbi8vIHNldHRpbmcgXCJmb3JjZWRfcm9vdF9ibG9jazogZmFsc2VcIiBkaXNhYmxlIHRoZSBkZWZhdWx0IGJlaGF2aW91ciBvZiBhZGRpbmcgYSB3cmFwcGVyIDxwPiB3aGVuIG5lZWRlZCBhbmQgdGhpcyBzZWVtcyB0byBmaXggbWFueSBpc3N1ZXMgaW4gSUUuXG4vLyBhbHNvLCBtYXliZSB3ZSBzaG91bGQgdXNlIHRoZSBcInJhd1wiIG9ubHkgZm9yIHRoZSBcImJlZm9yZSBTZXRDb250ZW50XCIgYW5kIGluc3RlYWQgcmVhZCB0aGUgXCJub24tcmF3XCIgY29udGVudCAodGhlIHJhdyBjb250ZW50IHNvbWV0aW1lcyBoYXZlIGRhdGEtIGF0dHJpYnV0ZXMgYW5kIHRvbyBtYW55IGVuZGluZyA8YnI+IGluIHRoZSBjb2RlKVxua28uYmluZGluZ0hhbmRsZXJzLnd5c2l3eWcgPSB7XG4gIGN1cnJlbnRJbmRleDogMCxcbiAgc3RhbmRhcmRPcHRpb25zOiB7fSxcbiAgZnVsbE9wdGlvbnM6IHtcbiAgICB0b29sYmFyMTogJ2JvbGQgaXRhbGljIGZvcmVjb2xvciBiYWNrY29sb3IgaHIgc3R5bGVzZWxlY3QgcmVtb3ZlZm9ybWF0IHwgbGluayB1bmxpbmsgfCBwYXN0ZXRleHQgY29kZScsXG4gICAgLy90b29sYmFyMTogXCJib2xkIGl0YWxpYyB8IGZvcmVjb2xvciBiYWNrY29sb3IgfCBsaW5rIHVubGluayB8IGhyIHwgcGFzdGV0ZXh0IGNvZGVcIiwgLy8gfCBuZXdzbGV0dGVyX3Byb2ZpbGUgbmV3c2xldHRlcl9vcHRsaW5rIG5ld3NsZXR0ZXJfdW5zdWJzY3JpYmUgbmV3c2xldHRlcl9zaG93bGlua1wiO1xuICAgIC8vdG9vbGJhcjI6IFwiZm9ybWF0c2VsZWN0IGZvbnRzZWxlY3QgZm9udHNpemVzZWxlY3QgfCBhbGlnbmxlZnQgYWxpZ25jZW50ZXIgYWxpZ25yaWdodCBhbGlnbmp1c3RpZnkgfCBidWxsaXN0IG51bWxpc3RcIixcbiAgICBwbHVnaW5zOiBbXCJsaW5rIGhyIHBhc3RlIGxpc3RzIHRleHRjb2xvciBjb2RlXCJdLFxuICAgIC8vIHZhbGlkX2VsZW1lbnRzOiAnc3Ryb25nL2IsZW0vaSwqWypdJyxcbiAgICAvLyBleHRlbmRlZF92YWxpZF9lbGVtZW50czogJ3N0cm9uZy9iLGVtL2ksKlsqXScsXG4gICAgLy8gUmVtb3ZlZDogaW1hZ2UgZnVsbHNjcmVlbiBjb250ZXh0bWVudSBcbiAgICAvLyBkb3dubG9hZCBjdXN0b206XG4gICAgLy8ganF1ZXJ5IHZlcnNpb24gY29uIGxlZ2FjeW91dHB1dCwgYW5jaG9yLCBjb2RlLCBpbXBvcnRjc3MsIGxpbmssIHBhc3RlLCB0ZXh0Y29sb3IsIGhyLCBsaXN0c1xuICB9LFxuICBpbml0OiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5nc0FjY2Vzc29yLCB2aWV3TW9kZWwsIGJpbmRpbmdDb250ZXh0KSB7XG4gICAgLy8gVE9ETyB1Z2x5LCBidXQgd29ya3MuLi5cbiAgICBrby5iaW5kaW5nSGFuZGxlcnMuZm9jdXNhYmxlLmluaXQoZWxlbWVudCk7XG5cbiAgICBrby51dGlscy5kb21Ob2RlRGlzcG9zYWwuYWRkRGlzcG9zZUNhbGxiYWNrKGVsZW1lbnQsIGZ1bmN0aW9uKCkge1xuICAgICAgdGlueW1jZS5yZW1vdmUoJyMnICsgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2lkJykpO1xuICAgIH0pO1xuXG4gICAgdmFyIHZhbHVlID0gdmFsdWVBY2Nlc3NvcigpO1xuXG4gICAgaWYgKCFrby5pc09ic2VydmFibGUodmFsdWUpKSB0aHJvdyBcIld5c2l3eWcgYmluZGluZyBjYWxsZWQgd2l0aCBub24gb2JzZXJ2YWJsZVwiO1xuICAgIGlmIChlbGVtZW50Lm5vZGVUeXBlID09PSA4KSB0aHJvdyBcIld5c2l3eWcgYmluZGluZyBjYWxsZWQgb24gdmlydHVhbCBub2RlLCBpZ25vcmluZy4uLi5cIiArIGVsZW1lbnQuaW5uZXJIVE1MO1xuXG4gICAgdmFyIHNlbGVjdG9ySWQgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnaWQnKTtcbiAgICBpZiAoIXNlbGVjdG9ySWQpIHtcbiAgICAgIHNlbGVjdG9ySWQgPSAnd3lzaXd5Z18nICsgKCsra28uYmluZGluZ0hhbmRsZXJzWyd3eXNpd3lnJ10uY3VycmVudEluZGV4KTtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdpZCcsIHNlbGVjdG9ySWQpO1xuICAgIH1cblxuICAgIHZhciBmdWxsRWRpdG9yID0gZWxlbWVudC50YWdOYW1lID09ICdESVYnIHx8IGVsZW1lbnQudGFnTmFtZSA9PSAnVEQnO1xuICAgIHZhciBpc1N1YnNjcmliZXJDaGFuZ2UgPSBmYWxzZTtcbiAgICB2YXIgdGhpc0VkaXRvcjtcbiAgICB2YXIgaXNFZGl0b3JDaGFuZ2UgPSBmYWxzZTtcblxuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgc2VsZWN0b3I6ICcjJyArIHNlbGVjdG9ySWQsXG4gICAgICBpbmxpbmU6IHRydWUsXG4gICAgICAvLyBtYXliZSBub3QgbmVlZGVkLCBidXQgd29uJ3QgaHVydC5cbiAgICAgIGhpZGRlbl9pbnB1dDogZmFsc2UsXG4gICAgICBwbHVnaW5zOiBbXCJwYXN0ZVwiXSxcbiAgICAgIHRvb2xiYXIxOiBcImJvbGQgaXRhbGljXCIsXG4gICAgICB0b29sYmFyMjogXCJcIixcbiAgICAgIC8vIHdlIGhhdmUgdG8gZGlzYWJsZSBwcmV2aWV3X3N0eWxlcyBvdGhlcndpc2UgdGlueW1jZSBwdXNoIGlubGluZSBldmVyeSBzdHlsZSBoZSB0aGluZ3Mgd2lsbCBiZSBhcHBsaWVkIGFuZCB0aGlzIG1ha2VzIHRoZSBzdHlsZSBtZW51IHRvIGluaGVyaXQgY29sb3IvZm9udC1mYW1pbHkgYW5kIG1vcmUuXG4gICAgICBwcmV2aWV3X3N0eWxlczogZmFsc2UsXG4gICAgICBwYXN0ZV9hc190ZXh0OiB0cnVlLFxuICAgICAgbGFuZ3VhZ2U6ICdlbicsXG4gICAgICBzY2hlbWE6IFwiaHRtbDVcIixcbiAgICAgIGV4dGVuZGVkX3ZhbGlkX2VsZW1lbnRzOiAnc3Ryb25nL2IsZW0vaSwqWypdJyxcbiAgICAgIG1lbnViYXI6IGZhbHNlLFxuICAgICAgc2tpbjogJ2dyYXktZmxhdCcsXG4gICAgICBzZXR1cDogZnVuY3Rpb24oZWRpdG9yKSB7XG4gICAgICAgIC8vIFRPRE8gY2hhbmdlIHNvbWV0aW1lcyBkb2Vzbid0IHRyaWdnZXIgKHdlIGhhdmUgdG8gZG9jdW1lbnQgd2hlbilcbiAgICAgICAgLy8gbGlzdGVuaW5nIG9uIGtleXVwIHdvdWxkIGluY3JlYXNlIGNvcnJlY3RuZXNzIGJ1dCB3ZSB3b3VsZCBuZWVkIGEgcmF0ZUxpbWl0IHRvIGF2b2lkIGZsb29kaW5nLlxuICAgICAgICBlZGl0b3Iub24oJ2NoYW5nZSByZWRvIHVuZG8nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoIWlzU3Vic2NyaWJlckNoYW5nZSkge1xuICAgICAgICAgICAgaXNFZGl0b3JDaGFuZ2UgPSB0cnVlO1xuICAgICAgICAgICAgLy8gd2UgZmFpbGVkIHdpdGggb3RoZXIgd2F5cyB0byBkbyB0aGlzOlxuICAgICAgICAgICAgLy8gdmFsdWUoJChlbGVtZW50KS5odG1sKCkpO1xuICAgICAgICAgICAgLy8gdmFsdWUoZWxlbWVudC5pbm5lckhUTUwpO1xuICAgICAgICAgICAgdmFsdWUoZWRpdG9yLmdldENvbnRlbnQoe1xuICAgICAgICAgICAgICBmb3JtYXQ6ICdyYXcnXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBpc0VkaXRvckNoYW5nZSA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIENsaWNraW5nIG9uIHRoZSBlbGVtZW50IG9uIGZvY3VzIGNoYW5nZSBhbGxvdyB0aGUgXCJjbGljXCIgY29kZSB0byBiZSB0cmlnZ2VyZWQgYW5kIHByb3BhZ2F0ZSB0aGUgc2VsZWN0aW9uLlxuICAgICAgICAvLyBOb3QgZWxlZ2FudCwgbWF5YmUgd2UgaGF2ZSBiZXR0ZXIgb3B0aW9ucy5cbiAgICAgICAgZWRpdG9yLm9uKCdmb2N1cycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIC8vIFVzZWQgYnkgc2Nyb2xsZml4LmpzIChtYXliZSB0aGlzIGlzIG5vdCBuZWVkZWQgYnkgbmV3IHNjcm9sbGZpeC5qcylcbiAgICAgICAgICBlZGl0b3Iubm9kZUNoYW5nZWQoKTtcbiAgICAgICAgICBlZGl0b3IuZ2V0RWxlbWVudCgpLmNsaWNrKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIE5PVEU6IHRoaXMgZml4ZXMgaXNzdWUgd2l0aCBcImxlYWRpbmcgc3BhY2VzXCIgaW4gZGVmYXVsdCBjb250ZW50IHRoYXQgd2VyZSBsb3N0IGR1cmluZyBpbml0aWFsaXphdGlvbi5cbiAgICAgICAgZWRpdG9yLm9uKCdCZWZvcmVTZXRDb250ZW50JywgZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgIGlmIChhcmdzLmluaXRpYWwpIGFyZ3MuZm9ybWF0ID0gJ3Jhdyc7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8qIE5PVEU6IGRpc2FibGluZyBcIkVOVEVSXCIgaW4gdGlueSBlZGl0b3IsIG5vdCBhIGdvb2QgdGhpbmcgYnV0IG1heSBiZSBuZWVkZWQgdG8gd29yayBhcm91bmQgY29udGVudGVkaXRhYmxlIGlzc3Vlc1xuICAgICAgICBpZiAoIWZ1bGxFZGl0b3IpIHtcbiAgICAgICAgICAvLyBzZSBub24gYWJiaWFtbyBpbCBcImZ1bGwgRWRpdG9yXCIsIGRpc2FiaWxpdGlhbW8gbCdpbnZpby4gKHZhcmkgYnVnKVxuICAgICAgICAgIGVkaXRvci5vbigna2V5ZG93bicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT0gMTMpIHsgZS5wcmV2ZW50RGVmYXVsdCgpOyB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgKi9cblxuICAgICAgICB0aGlzRWRpdG9yID0gZWRpdG9yO1xuXG4gICAgICB9XG4gICAgfTtcblxuICAgIGtvLnV0aWxzLmV4dGVuZChvcHRpb25zLCBrby5iaW5kaW5nSGFuZGxlcnMud3lzaXd5Zy5zdGFuZGFyZE9wdGlvbnMpO1xuICAgIGlmIChmdWxsRWRpdG9yKSBrby51dGlscy5leHRlbmQob3B0aW9ucywga28uYmluZGluZ0hhbmRsZXJzLnd5c2l3eWcuZnVsbE9wdGlvbnMpO1xuXG4gICAgLy8gd2UgaGF2ZSB0byBwdXQgaW5pdGlhbGl6YXRpb24gaW4gYSBzZXR0aW1lb3V0LCBvdGhlcndpc2Ugc3dpdGNoaW5nIGZyb20gXCIxXCIgdG8gXCIyXCIgY29sdW1ucyBibG9ja3NcbiAgICAvLyB3aWxsIHN0YXJ0IHRoZSBuZXcgZWRpdG9ycyBiZWZvcmUgZGlzcG9zaW5nIHRoZSBvbGQgb25lcyBhbmQgSURzIGdldCB0ZW1wb3JhcmlseSBkdXBsaWNhdGVkLlxuICAgIC8vIHVzaW5nIHNldFRpbWVvdXQgdGhlIGRpc3Bvc2UvY3JlYXRlIG9yZGVyIGlzIGNvcnJlY3Qgb24gZXZlcnkgYnJvd3NlciB0ZXN0ZWQuXG4gICAgZ2xvYmFsLnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICB0aW55bWNlLmluaXQob3B0aW9ucyk7XG4gICAgfSk7XG5cbiAgICBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjb250ZW50ID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZUFjY2Vzc29yKCkpO1xuICAgICAgaWYgKCFpc0VkaXRvckNoYW5nZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlzU3Vic2NyaWJlckNoYW5nZSA9IHRydWU7XG4gICAgICAgICAgLy8gd2UgZmFpbGVkIHNldHRpbmcgY29udGVudHMgaW4gb3RoZXIgd2F5cy4uLlxuICAgICAgICAgIC8vICQoZWxlbWVudCkuaHRtbChjb250ZW50KTtcbiAgICAgICAgICBpZiAodHlwZW9mIHRoaXNFZGl0b3IgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aGlzRWRpdG9yLnNldENvbnRlbnQoY29udGVudCwge1xuICAgICAgICAgICAgICBmb3JtYXQ6ICdyYXcnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAga28udXRpbHMuc2V0SHRtbChlbGVtZW50LCBjb250ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIlRPRE8gZXhjZXB0aW9uIHNldHRpbmcgY29udGVudCB0byBlZGl0YWJsZSBlbGVtZW50XCIsIHR5cGVvZiB0aGlzRWRpdG9yLCBlKTtcbiAgICAgICAgfVxuICAgICAgICBpc1N1YnNjcmliZXJDaGFuZ2UgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9LCBudWxsLCB7XG4gICAgICBkaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQ6IGVsZW1lbnRcbiAgICB9KTtcblxuICAgIC8vIGRvIG5vdCBwYXJzZSBodG1sIGNvbnRlbnQgZm9yIEtPIGJpbmRpbmdzISFcbiAgICByZXR1cm4ge1xuICAgICAgY29udHJvbHNEZXNjZW5kYW50QmluZGluZ3M6IHRydWVcbiAgICB9O1xuXG4gIH1cbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgY29uc29sZSA9IHJlcXVpcmUoXCJjb25zb2xlXCIpO1xuXG4vLyByZXR1cm5zIDAgaWYgZXF1YWwgKDAuMC54IHJlbGVhc2UpLCAxIHdpdGggYmFja3dhcmQgY29tcGF0aWJsZSBhZGRpdGlvbnMgKDAueC4wIHJlbGVhc2UpLCAyIG9uIGxvc3QgZGF0YSBvciBpbmNvbXBhdGlibGUgZGF0YSAoeC4wLjAgcmVsZWFzZSlcbnZhciBjaGVja01vZGVsID0gZnVuY3Rpb24ocmVmZXJlbmNlLCBibG9ja0RlZnMsIG1vZGVsLCBvcmlnUHJlZml4LCByZXZlcnNlKSB7XG4gIHZhciBibG9ja0RlZnNPYmosIGksIHByZWZpeDtcbiAgdmFyIHZhbGlkID0gMDtcbiAgaWYgKHR5cGVvZiByZXZlcnNlID09ICd1bmRlZmluZWQnKSByZXZlcnNlID0gZmFsc2U7XG4gIGlmICh0eXBlb2YgYmxvY2tEZWZzICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgYmxvY2tEZWZzLnNwbGljZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgYmxvY2tEZWZzT2JqID0ge307XG4gICAgZm9yIChpID0gMDsgaSA8IGJsb2NrRGVmcy5sZW5ndGg7IGkrKykgYmxvY2tEZWZzT2JqW2Jsb2NrRGVmc1tpXS50eXBlXSA9IGJsb2NrRGVmc1tpXTtcbiAgfSBlbHNlIHtcbiAgICBibG9ja0RlZnNPYmogPSBibG9ja0RlZnM7XG4gIH1cbiAgZm9yICh2YXIgcHJvcCBpbiByZWZlcmVuY2UpXG4gICAgaWYgKHJlZmVyZW5jZS5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgcHJlZml4ID0gdHlwZW9mIG9yaWdQcmVmaXggIT09ICd1bmRlZmluZWQnID8gb3JpZ1ByZWZpeCArIFwiLlwiICsgcHJvcCA6IHByb3A7XG4gICAgICBpZiAoIW1vZGVsLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFwiV0FSTiBQcm9wZXJ0eSBcIiwgcHJlZml4LCBcImZvdW5kIGluIG1vZGVsIGlzIG5vdCBkZWZpbmVkIGJ5IHRlbXBsYXRlOiByZW1vdmluZyBpdCFcIik7XG4gICAgICAgICAgdmFsaWQgPSBNYXRoLm1heCh2YWxpZCwgMik7XG4gICAgICAgICAgZGVsZXRlIHJlZmVyZW5jZVtwcm9wXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIklORk8gUHJvcGVydHkgXCIsIHByZWZpeCwgXCJtaXNzaW5nIGluIG1vZGVsLCBjbG9uaW5nIGZyb20gcmVmZXJlbmNlIVwiKTtcbiAgICAgICAgICB2YWxpZCA9IE1hdGgubWF4KHZhbGlkLCAxKTtcbiAgICAgICAgICBtb2RlbFtwcm9wXSA9IHJlZmVyZW5jZVtwcm9wXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbW9kZWxbcHJvcF0gIT0gdHlwZW9mIHJlZmVyZW5jZVtwcm9wXSkge1xuICAgICAgICAvLyBzZSBzb25vIGRpIHRpcG8gZGl2ZXJzbyBhbGxvcmEgcHJvdm8gYSB2ZWRlcmUgc2UgbCdhbHRybywgY29udmVydGl0byBkaSB0aXBvIG1hbnRpZW5lIHVuIHZhbG9yZSBlcXVpdmFsZW50ZS5cbiAgICAgICAgaWYgKG1vZGVsW3Byb3BdICE9PSBudWxsICYmIHJlZmVyZW5jZVtwcm9wXSAhPT0gbnVsbCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgbW9kZWxbcHJvcF0gPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlmIChTdHJpbmcocmVmZXJlbmNlW3Byb3BdKSAhPSByZWZlcmVuY2VbcHJvcF0pIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJUT0RPIERpZmZlcmVudCB0eXBlIDEgXCIsIHByZWZpeCwgdHlwZW9mIG1vZGVsW3Byb3BdLCB0eXBlb2YgcmVmZXJlbmNlW3Byb3BdLCBtb2RlbFtwcm9wXSwgcmVmZXJlbmNlW3Byb3BdKTtcbiAgICAgICAgICAgICAgdmFsaWQgPSBNYXRoLm1heCh2YWxpZCwgMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbW9kZWxbcHJvcF0gPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGlmIChOdW1iZXIocmVmZXJlbmNlW3Byb3BdKSAhPSByZWZlcmVuY2VbcHJvcF0pIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJUT0RPIERpZmZlcmVudCB0eXBlIDIgXCIsIHByZWZpeCwgdHlwZW9mIG1vZGVsW3Byb3BdLCB0eXBlb2YgcmVmZXJlbmNlW3Byb3BdLCBtb2RlbFtwcm9wXSwgcmVmZXJlbmNlW3Byb3BdKTtcbiAgICAgICAgICAgICAgdmFsaWQgPSBNYXRoLm1heCh2YWxpZCwgMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVE9ETyBEaWZmZXJlbnQgdHlwZSAzIFwiLCBwcmVmaXgsIHR5cGVvZiBtb2RlbFtwcm9wXSwgdHlwZW9mIHJlZmVyZW5jZVtwcm9wXSwgbW9kZWxbcHJvcF0sIHJlZmVyZW5jZVtwcm9wXSk7XG4gICAgICAgICAgICB2YWxpZCA9IE1hdGgubWF4KHZhbGlkLCAyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHJlZmVyZW5jZVtwcm9wXSA9PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAocmVmZXJlbmNlW3Byb3BdICE9PSBudWxsKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiByZWZlcmVuY2VbcHJvcF0uc3BsaWNlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaWYgKHJlZmVyZW5jZVtwcm9wXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIGlmIChtb2RlbFtwcm9wXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETyBuZWVkcyBzb3J0aW5nP1xuICAgICAgICAgICAgICAgIHZhciBqID0gMDtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbW9kZWxbcHJvcF0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbW9kZWxbcHJvcF1baV0udHlwZSA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaiA8IHJlZmVyZW5jZVtwcm9wXS5sZW5ndGggJiYgcmVmZXJlbmNlW3Byb3BdW2pdLnR5cGUgIT09IG1vZGVsW3Byb3BdW2ldLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImlnbm9yaW5nIFwiLCBwcmVmaXgsIHJlZmVyZW5jZVtwcm9wXVtqXS50eXBlLCBcIiBibG9jayB0eXBlIGluIHJlZmVyZW5jZSBub3QgZm91bmQgaW4gbW9kZWxcIik7XG4gICAgICAgICAgICAgICAgICAgICAgaisrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChqID49IHJlZmVyZW5jZVtwcm9wXS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIldBUk4gY2Fubm90IGZpbmQgXCIsIHByZWZpeCwgbW9kZWxbcHJvcF1baV0udHlwZSwgXCIgYmxvY2sgaW4gcmVmZXJlbmNlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgIHZhbGlkID0gTWF0aC5tYXgodmFsaWQsIDIpO1xuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIHJldmVyc2UgY29uZGl0aW9uIHNvIHRvIHNraXAgXCJkZWVwIHRyYXZlcnNpbmdcIiBvbiBlcnJvclxuICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IE1hdGgubWF4KHZhbGlkLCBjaGVja01vZGVsKHJlZmVyZW5jZVtwcm9wXVtqXSwgdW5kZWZpbmVkLCBtb2RlbFtwcm9wXVtpXSwgcHJlZml4ICsgXCJbXCIgKyBpICsgXCIuXCIgKyBtb2RlbFtwcm9wXVtpXS50eXBlICsgXCJdXCIpKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gaW4gdGhlIGNhc2Ugb2YgZGlmZmVyZW50IGFycmF5IHdlIGNoZWNrIGJsb2NrRGVmc1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCByZWZlcmVuY2VbcHJvcF0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVmZXJlbmNlW3Byb3BdW2ldLnR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVE9ETyBmb3VuZCBhbiBvYmplY3Qgd2l0aCBubyB0eXBlXCIsIHByZWZpeCwgcmVmZXJlbmNlW3Byb3BdW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBNYXRoLm1heCh2YWxpZCwgMik7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFibG9ja0RlZnNPYmouaGFzT3duUHJvcGVydHkocmVmZXJlbmNlW3Byb3BdW2ldLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlRPRE8gdGhlIG1vZGVsIHVzZXMgYSBibG9jayB0eXBlIG5vdCBkZWZpbmVkIGJ5IHRoZSB0ZW1wbGF0ZS4gUkVNT1ZJTkcgSVQhIVwiLCBwcmVmaXgsIHJlZmVyZW5jZVtwcm9wXVtpXSk7XG4gICAgICAgICAgICAgICAgICAgIHJlZmVyZW5jZVtwcm9wXS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIGktLTtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBNYXRoLm1heCh2YWxpZCwgMik7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IE1hdGgubWF4KHZhbGlkLCBjaGVja01vZGVsKGJsb2NrRGVmc09ialtyZWZlcmVuY2VbcHJvcF1baV0udHlwZV0sIGJsb2NrRGVmc09iaiwgcmVmZXJlbmNlW3Byb3BdW2ldLCBwcmVmaXggKyBcIltcIiArIGkgKyBcIi5cIiArIHJlZmVyZW5jZVtwcm9wXVtpXS50eXBlICsgXCJdXCIpKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKG1vZGVsW3Byb3BdID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJXQVJOIE51bGwgb2JqZWN0IGluIG1vZGVsIFwiLCBwcmVmaXgsIFwiaW5zdGVhZCBvZlwiLCByZWZlcmVuY2VbcHJvcF0sIFwiZGVsZXRpbmcgaXRcIik7XG4gICAgICAgICAgICAgICAgdmFsaWQgPSBNYXRoLm1heCh2YWxpZCwgMik7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHJlZmVyZW5jZVtwcm9wXTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIklORk8gTnVsbCBvYmplY3QgaW4gbW9kZWwgXCIsIHByZWZpeCwgXCJpbnN0ZWFkIG9mXCIsIHJlZmVyZW5jZVtwcm9wXSwgXCJjbG9uaW5nIGl0IGZyb20gdGhlIHJlZmVyZW5jZVwiKTtcbiAgICAgICAgICAgICAgICB2YWxpZCA9IE1hdGgubWF4KHZhbGlkLCAxKTtcbiAgICAgICAgICAgICAgICBtb2RlbFtwcm9wXSA9IHJlZmVyZW5jZVtwcm9wXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFsaWQgPSBNYXRoLm1heCh2YWxpZCwgY2hlY2tNb2RlbChyZWZlcmVuY2VbcHJvcF0sIGJsb2NrRGVmc09iaiwgbW9kZWxbcHJvcF0sIHByZWZpeCwgcmV2ZXJzZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChtb2RlbFtwcm9wXSAhPT0gbnVsbCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiVE9ETyBOdWxsIGluIHJlZmVyZW5jZSBidXQgbm90IG51bGwgaW4gbW9kZWxcIiwgcHJlZml4LCBtb2RlbFtwcm9wXSk7XG4gICAgICAgICAgdmFsaWQgPSBNYXRoLm1heCh2YWxpZCwgMik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHJlZmVyZW5jZVtwcm9wXSAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIHJlZmVyZW5jZVtwcm9wXSAhPT0gJ2Jvb2xlYW4nICYmIHR5cGVvZiByZWZlcmVuY2VbcHJvcF0gIT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiVE9ETyB1bnN1cHBvcnRlZCB0eXBlXCIsIHByZWZpeCwgdHlwZW9mIHJlZmVyZW5jZVtwcm9wXSk7XG4gICAgICAgIHZhbGlkID0gTWF0aC5tYXgodmFsaWQsIDIpO1xuICAgICAgfVxuXG4gICAgfVxuICBpZiAoIXJldmVyc2UpIHZhbGlkID0gTWF0aC5tYXgodmFsaWQsIGNoZWNrTW9kZWwobW9kZWwsIGJsb2NrRGVmcywgcmVmZXJlbmNlLCB0eXBlb2Ygb3JpZ1ByZWZpeCAhPT0gJ3VuZGVmaW5lZCcgPyBvcmlnUHJlZml4ICsgXCIhUlwiIDogXCIhUlwiLCB0cnVlKSk7XG4gIHJldHVybiB2YWxpZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY2hlY2tNb2RlbDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLy8gUGFyc2VzIENTUyBkZWNsYXJhdGlvbnMgYW5kIHN1cHBvcnRzIHRoZSBwcm9wZXJ0eSBsYW5ndWFnZSAoLWtvLSopIGZvdW5kIGJldHdlZW4gdGhlbS5cbi8vIENyZWF0ZSBLTyBiaW5kaW5ncyBidXQgZG9lc24ndCBkZXBlbmQgb24gS08uXG4vLyBOZWVkcyBhIGJpbmRpbmdQcm92aWRlci5cblxudmFyIGNvbnZlcnRlclV0aWxzID0gcmVxdWlyZShcIi4vdXRpbHMuanNcIik7XG52YXIgY3NzUGFyc2UgPSByZXF1aXJlKFwibWVuc2NoL2xpYi9wYXJzZXIuanNcIik7XG52YXIgY29uc29sZSA9IHJlcXVpcmUoXCJjb25zb2xlXCIpO1xudmFyIGRvbXV0aWxzID0gcmVxdWlyZShcIi4vZG9tdXRpbHMuanNcIik7XG5cbnZhciBfZGVjbGFyYXRpb25WYWx1ZUxvb2t1cCA9IGZ1bmN0aW9uKGRlY2xhcmF0aW9ucywgcHJvcGVydHluYW1lLCB0ZW1wbGF0ZVVybENvbnZlcnRlcikge1xuICBmb3IgKHZhciBpID0gZGVjbGFyYXRpb25zLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKGRlY2xhcmF0aW9uc1tpXS50eXBlID09ICdwcm9wZXJ0eScgJiYgZGVjbGFyYXRpb25zW2ldLm5hbWUgPT0gcHJvcGVydHluYW1lKSB7XG4gICAgICByZXR1cm4gX2RlY2xhcmF0aW9uVmFsdWVVcmxQcmVmaXhlcihkZWNsYXJhdGlvbnNbaV0udmFsdWUsIHRlbXBsYXRlVXJsQ29udmVydGVyKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG52YXIgX3Byb3BUb0NhbWVsQ2FzZSA9IGZ1bmN0aW9uKHByb3BOYW1lKSB7XG4gIHJldHVybiBwcm9wTmFtZS5yZXBsYWNlKC8tKFthLXpdKS9nLCBmdW5jdGlvbihtYXRjaCwgY29udGVudHMsIG9mZnNldCwgcykge1xuICAgIHJldHVybiBjb250ZW50cy50b1VwcGVyQ2FzZSgpO1xuICB9KTtcbn07XG5cbnZhciBfZGVjbGFyYXRpb25WYWx1ZVVybFByZWZpeGVyID0gZnVuY3Rpb24odmFsdWUsIHRlbXBsYXRlVXJsQ29udmVydGVyKSB7XG4gIGlmICh2YWx1ZS5tYXRjaCgvdXJsXFwoLipcXCkvKSkge1xuICAgIHZhciByZXBsYWNlZCA9IHZhbHVlLnJlcGxhY2UoLyh1cmxcXCgpKFteXFwpXSopKFxcKSkvZywgZnVuY3Rpb24obWF0Y2hlZCwgcHJlZml4LCB1cmwsIHBvc3RmaXgpIHtcbiAgICAgIHZhciB0cmltbWVkID0gdXJsLnRyaW0oKTtcbiAgICAgIHZhciBhcGljZSA9IHVybC50cmltKCkuY2hhckF0KDApO1xuICAgICAgaWYgKGFwaWNlID09ICdcXCcnIHx8IGFwaWNlID09ICdcIicpIHtcbiAgICAgICAgdHJpbW1lZCA9IHRyaW1tZWQuc3Vic3RyKDEsIHRyaW1tZWQubGVuZ3RoIC0gMik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcGljZSA9ICcnO1xuICAgICAgfVxuICAgICAgdmFyIG5ld1VybCA9IHRlbXBsYXRlVXJsQ29udmVydGVyKHRyaW1tZWQpO1xuICAgICAgaWYgKG5ld1VybCAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcHJlZml4ICsgYXBpY2UgKyBuZXdVcmwgKyBhcGljZSArIHBvc3RmaXg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbWF0Y2hlZDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVwbGFjZWQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59O1xuXG52YXIgZWxhYm9yYXRlRGVjbGFyYXRpb25zID0gZnVuY3Rpb24oc3R5bGUsIGRlY2xhcmF0aW9ucywgdGVtcGxhdGVVcmxDb252ZXJ0ZXIsIGJpbmRpbmdQcm92aWRlciwgZWxlbWVudCwgYmFzaWNCaW5kaW5ncywgcmVtb3ZlRGlzcGxheU5vbmUpIHtcbiAgdmFyIG5ld0JpbmRpbmdzID0gdHlwZW9mIGJhc2ljQmluZGluZ3MgPT0gJ29iamVjdCcgJiYgYmFzaWNCaW5kaW5ncyAhPT0gbnVsbCA/IGJhc2ljQmluZGluZ3MgOiB7fTtcbiAgdmFyIG5ld1N0eWxlID0gbnVsbDtcbiAgdmFyIHNraXBMaW5lcyA9IDA7XG4gIGlmICh0eXBlb2YgZGVjbGFyYXRpb25zID09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIHN0eWxlU2hlZXQgPSBjc3NQYXJzZShcIiN7XFxuXCIgKyBzdHlsZSArIFwifVwiLCB7XG4gICAgICBjb21tZW50czogdHJ1ZSxcbiAgICAgIHBvc2l0aW9uOiB0cnVlXG4gICAgfSk7XG4gICAgZGVjbGFyYXRpb25zID0gc3R5bGVTaGVldC5zdHlsZXNoZWV0LnJ1bGVzWzBdLmRlY2xhcmF0aW9ucztcbiAgICBza2lwTGluZXMgPSAxO1xuICB9XG4gIGZvciAodmFyIGkgPSBkZWNsYXJhdGlvbnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pXG4gICAgaWYgKGRlY2xhcmF0aW9uc1tpXS50eXBlID09ICdwcm9wZXJ0eScpIHtcbiAgICAgIGlmIChyZW1vdmVEaXNwbGF5Tm9uZSA9PT0gdHJ1ZSAmJiBkZWNsYXJhdGlvbnNbaV0ubmFtZSA9PSAnZGlzcGxheScgJiYgZGVjbGFyYXRpb25zW2ldLnZhbHVlID09ICdub25lJykge1xuICAgICAgICBpZiAobmV3U3R5bGUgPT09IG51bGwpIG5ld1N0eWxlID0gc3R5bGU7XG4gICAgICAgIG5ld1N0eWxlID0gY29udmVydGVyVXRpbHMucmVtb3ZlU3R5bGUobmV3U3R5bGUsIGRlY2xhcmF0aW9uc1tpXS5wb3NpdGlvbi5zdGFydCwgZGVjbGFyYXRpb25zW2ldLnBvc2l0aW9uLmVuZCwgc2tpcExpbmVzLCAwLCAwLCAnJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZGVjbCA9IGRlY2xhcmF0aW9uc1tpXS5uYW1lLm1hdGNoKC9eLWtvLShiaW5kLXxhdHRyLSk/KFthLXowLTktXSo/KSgtaWZ8LWlmbm90KT8kLyk7XG4gICAgICAgIGlmIChkZWNsICE9PSBudWxsKSB7XG4gICAgICAgICAgLy8gcmltb3ppb25lIGRlbGxvIHN0aWxlIC1rby0gZGFsbCdhdHRyaWJ1dG8gc3R5bGUuXG4gICAgICAgICAgaWYgKG5ld1N0eWxlID09PSBudWxsICYmIHR5cGVvZiBzdHlsZSAhPSAndW5kZWZpbmVkJykgbmV3U3R5bGUgPSBzdHlsZTtcblxuICAgICAgICAgIHZhciBpc0F0dHIgPSBkZWNsWzFdID09ICdhdHRyLSc7XG4gICAgICAgICAgdmFyIGlzQmluZCA9IGRlY2xbMV0gPT0gJ2JpbmQtJztcbiAgICAgICAgICB2YXIgcHJvcE5hbWUgPSBkZWNsWzJdO1xuXG4gICAgICAgICAgdmFyIGlzSWYgPSBkZWNsWzNdID09ICctaWYnIHx8IGRlY2xbM10gPT0gJy1pZm5vdCc7XG4gICAgICAgICAgdmFyIGNvbmREZWNsO1xuICAgICAgICAgIHZhciBiaW5kVmFsdWU7XG4gICAgICAgICAgdmFyIHByb3BEZWZhdWx0VmFsdWU7XG5cbiAgICAgICAgICBpZiAoaXNJZikge1xuICAgICAgICAgICAgY29uZERlY2wgPSBkZWNsYXJhdGlvbnNbaV0ubmFtZS5zdWJzdHIoMCwgZGVjbGFyYXRpb25zW2ldLm5hbWUubGVuZ3RoIC0gZGVjbFszXS5sZW5ndGgpO1xuICAgICAgICAgICAgdmFyIGNvbmRpdGlvbmVkRGVjbGFyYXRpb24gPSBfZGVjbGFyYXRpb25WYWx1ZUxvb2t1cChkZWNsYXJhdGlvbnMsIGNvbmREZWNsLCB0ZW1wbGF0ZVVybENvbnZlcnRlcik7XG4gICAgICAgICAgICBpZiAoY29uZGl0aW9uZWREZWNsYXJhdGlvbiA9PT0gbnVsbCkgdGhyb3cgXCJVbmFibGUgdG8gZmluZCBkZWNsYXJhdGlvbiBcIiArIGNvbmREZWNsICsgXCIgZm9yIFwiICsgZGVjbGFyYXRpb25zW2ldLm5hbWU7XG4gICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgaWYgKChpc0F0dHIgfHwgaXNCaW5kKSAmJiAodHlwZW9mIGVsZW1lbnQgPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHN0eWxlICE9ICd1bmRlZmluZWQnKSkgdGhyb3cgXCJBdHRyaWJ1dGVzIGFuZCBiaW5kIGRlY2xhcmF0aW9ucyBhcmUgb25seSBhbGxvd2VkIGluIGlubGluZSBzdHlsZXMhXCI7XG5cbiAgICAgICAgICAgIHZhciBuZWVkRGVmYXVsdFZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBiaW5kVHlwZTtcbiAgICAgICAgICAgIGlmIChpc0F0dHIpIHtcbiAgICAgICAgICAgICAgcHJvcERlZmF1bHRWYWx1ZSA9IGRvbXV0aWxzLmdldEF0dHJpYnV0ZShlbGVtZW50LCBwcm9wTmFtZSk7XG4gICAgICAgICAgICAgIG5lZWREZWZhdWx0VmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgYmluZFR5cGUgPSAndmlydHVhbEF0dHInO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghaXNCaW5kKSB7XG4gICAgICAgICAgICAgIG5lZWREZWZhdWx0VmFsdWUgPSB0eXBlb2Ygc3R5bGUgIT09ICd1bmRlZmluZWQnO1xuICAgICAgICAgICAgICBpZiAobmVlZERlZmF1bHRWYWx1ZSkgcHJvcERlZmF1bHRWYWx1ZSA9IF9kZWNsYXJhdGlvblZhbHVlTG9va3VwKGRlY2xhcmF0aW9ucywgcHJvcE5hbWUsIHRlbXBsYXRlVXJsQ29udmVydGVyKTtcbiAgICAgICAgICAgICAgYmluZFR5cGUgPSAndmlydHVhbFN0eWxlJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGJpbmRUeXBlID0gbnVsbDtcbiAgICAgICAgICAgICAgaWYgKHByb3BOYW1lID09ICd0ZXh0Jykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgIHByb3BEZWZhdWx0VmFsdWUgPSBkb211dGlscy5nZXRJbm5lclRleHQoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIG5lZWREZWZhdWx0VmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvcE5hbWUgPT0gJ2h0bWwnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlbGVtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgcHJvcERlZmF1bHRWYWx1ZSA9IGRvbXV0aWxzLmdldElubmVySHRtbChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgbmVlZERlZmF1bHRWYWx1ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZWVkRGVmYXVsdFZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG5lZWREZWZhdWx0VmFsdWUgJiYgcHJvcERlZmF1bHRWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQ2Fubm90IGZpbmQgZGVmYXVsdCB2YWx1ZSBmb3JcIiwgZGVjbGFyYXRpb25zW2ldLm5hbWUsIGRlY2xhcmF0aW9ucyk7XG4gICAgICAgICAgICAgIHRocm93IFwiQ2Fubm90IGZpbmQgZGVmYXVsdCB2YWx1ZSBmb3IgXCIgKyBkZWNsYXJhdGlvbnNbaV0ubmFtZSArIFwiOiBcIiArIGRlY2xhcmF0aW9uc1tpXS52YWx1ZSArIFwiIGluIFwiICsgZWxlbWVudCArIFwiIChcIiArIHR5cGVvZiBzdHlsZSArIFwiL1wiICsgcHJvcE5hbWUgKyBcIilcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBiaW5kRGVmYXVsdFZhbHVlID0gcHJvcERlZmF1bHRWYWx1ZTtcblxuICAgICAgICAgICAgdmFyIGJpbmROYW1lID0gX3Byb3BUb0NhbWVsQ2FzZShwcm9wTmFtZSk7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGJpbmRWYWx1ZSA9IGNvbnZlcnRlclV0aWxzLmV4cHJlc3Npb25CaW5kaW5nKGRlY2xhcmF0aW9uc1tpXS52YWx1ZSwgYmluZGluZ1Byb3ZpZGVyLCBiaW5kRGVmYXVsdFZhbHVlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIk1vZGVsIGVuc3VyZSBwYXRoIGZhaWxlZFwiLCBlLnN0YWNrLCBcIm5hbWVcIiwgZGVjbGFyYXRpb25zW2ldLm5hbWUsIFwidmFsdWVcIiwgZGVjbGFyYXRpb25zW2ldLnZhbHVlLCBcImRlZmF1bHRcIiwgcHJvcERlZmF1bHRWYWx1ZSwgXCJlbGVtZW50XCIsIGVsZW1lbnQpO1xuICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYmluZFR5cGUgIT09IG51bGwgJiYgdHlwZW9mIG5ld0JpbmRpbmdzW2JpbmRUeXBlXSA9PSAndW5kZWZpbmVkJykgbmV3QmluZGluZ3NbYmluZFR5cGVdID0ge307XG5cblxuICAgICAgICAgICAgLy8gU3BlY2lhbCBoYW5kbGluZyBmb3IgSFJFRnNcbiAgICAgICAgICAgIGlmIChiaW5kVHlwZSA9PSAndmlydHVhbEF0dHInICYmIGJpbmROYW1lID09ICdocmVmJykge1xuICAgICAgICAgICAgICBiaW5kVHlwZSA9IG51bGw7XG4gICAgICAgICAgICAgIGJpbmROYW1lID0gJ3d5c2l3eWdIcmVmJztcbiAgICAgICAgICAgICAgLy8gV2UgaGF2ZSB0byByZW1vdmUgaXQsIG90aGVyd2lzZSB3ZSBlbmRzIHVwIHdpdGggMiBydWxlcyB3cml0aW5nIGl0LlxuICAgICAgICAgICAgICBpZiAodHlwZW9mIGVsZW1lbnQgIT0gJ3VuZGVmaW5lZCcgJiYgZWxlbWVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRvbXV0aWxzLnJlbW92ZUF0dHJpYnV0ZShlbGVtZW50LCBcImhyZWZcIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVE9ETyBldmFsdWF0ZSB0aGUgdXNlIG9mIFwiLXRoZW5cIiAoYW5kIC1lbHNlKSBwb3N0Zml4ZXMgdG8gY29tcGxldGUgdGhlIC1pZiBpbnN0ZWFkIG9mIHJlbGF5aW5nXG4gICAgICAgICAgICAvLyBvbiB0aGUgc2FtZSBiYXNpYyBzaW50YXggKG9yIG1heWJlIGl0IGlzIGJldHRlciB0byBzdXBwb3J0IHRlcm5hcnkgb3BlcmF0b3IgQ09ORCA/IFRIRU4gOiBFTFNFKS5cbiAgICAgICAgICAgIHZhciBkZWNsYXJhdGlvbkNvbmRpdGlvbiA9IF9kZWNsYXJhdGlvblZhbHVlTG9va3VwKGRlY2xhcmF0aW9ucywgZGVjbGFyYXRpb25zW2ldLm5hbWUgKyAnLWlmJywgdGVtcGxhdGVVcmxDb252ZXJ0ZXIpO1xuICAgICAgICAgICAgdmFyIG5vdCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGRlY2xhcmF0aW9uQ29uZGl0aW9uID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIGRlY2xhcmF0aW9uQ29uZGl0aW9uID0gX2RlY2xhcmF0aW9uVmFsdWVMb29rdXAoZGVjbGFyYXRpb25zLCBkZWNsYXJhdGlvbnNbaV0ubmFtZSArICctaWZub3QnLCB0ZW1wbGF0ZVVybENvbnZlcnRlcik7XG4gICAgICAgICAgICAgIG5vdCA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoX2RlY2xhcmF0aW9uVmFsdWVMb29rdXAoZGVjbGFyYXRpb25zLCBkZWNsYXJhdGlvbnNbaV0ubmFtZSArICctaWZub3QnLCB0ZW1wbGF0ZVVybENvbnZlcnRlcikgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBcIlVuZXhwZWN0ZWQgZXJyb3I6IGNhbm5vdCB1c2UgYm90aCAtaWYgYW5kIC1pZm5vdCBwcm9wZXJ0eSBjb25kaXRpb25zXCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkZWNsYXJhdGlvbkNvbmRpdGlvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBiaW5kaW5nQ29uZCA9IGNvbnZlcnRlclV0aWxzLmNvbmRpdGlvbkJpbmRpbmcoZGVjbGFyYXRpb25Db25kaXRpb24sIGJpbmRpbmdQcm92aWRlcik7XG4gICAgICAgICAgICAgICAgYmluZFZhbHVlID0gKG5vdCA/ICchJyA6ICcnKSArIFwiKFwiICsgYmluZGluZ0NvbmQgKyBcIikgPyBcIiArIGJpbmRWYWx1ZSArIFwiIDogbnVsbFwiO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlVuYWJsZSB0byBkZWFsIHdpdGggLWtvIHN0eWxlIGJpbmRpbmcgY29uZGl0aW9uXCIsIGRlY2xhcmF0aW9uQ29uZGl0aW9uLCBkZWNsYXJhdGlvbnNbaV0ubmFtZSk7XG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYmluZFR5cGUgIT09IG51bGwpIG5ld0JpbmRpbmdzW2JpbmRUeXBlXVtiaW5kTmFtZV0gPSBiaW5kVmFsdWU7XG4gICAgICAgICAgICBlbHNlIG5ld0JpbmRpbmdzW2JpbmROYW1lXSA9IGJpbmRWYWx1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBwYXJzaW5nIEBzdXBwb3J0cyA6cHJldmlld1xuICAgICAgICAgIGlmIChuZXdTdHlsZSAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAvLyBpZiBcImVsZW1lbnRcIiBpcyBkZWZpbmVkIHRoZW4gd2UgYXJlIHBhcnNpbmcgYW4gXCJpbmxpbmVcIiBzdHlsZSBhbmQgd2Ugd2FudCB0byByZW1vdmUgaXQuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgZWxlbWVudCAhPSAndW5kZWZpbmVkJyAmJiBlbGVtZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbmV3U3R5bGUgPSBjb252ZXJ0ZXJVdGlscy5yZW1vdmVTdHlsZShuZXdTdHlsZSwgZGVjbGFyYXRpb25zW2ldLnBvc2l0aW9uLnN0YXJ0LCBkZWNsYXJhdGlvbnNbaV0ucG9zaXRpb24uZW5kLCBza2lwTGluZXMsIDAsIDAsICcnKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBvdGhlcndpc2Ugd2UgYXJlIHBhcnNpbmcgYSBmdWxsIHN0eWxlc2hlZXQuLiBsZXQncyByZXdyaXRlIHRoZSBmdWxsIFwicHJvcDogdmFsdWVcIiB3aXRob3V0IGNhcmluZyBhYm91dCB0aGUgb3JpZ2luYWwgc3ludGF4LlxuICAgICAgICAgICAgICAgIHZhciByZXBsYWNlZFdpdGggPSAnJztcbiAgICAgICAgICAgICAgICAvLyBpZiBpdCBpcyBhbiBcImlmXCIgd2Ugc2ltcGx5IGhhdmUgdG8gcmVtb3ZlIGl0LCBvdGhlcndpc2Ugd2UgcmVwbGFjZSB0aGUgaW5wdXQgY29kZSB3aXRoIFwicHJvcDogdmFsdWVcIiBnZW5lcmF0aW5nIGV4cHJlc3Npb24uXG4gICAgICAgICAgICAgICAgaWYgKCFpc0lmKSByZXBsYWNlZFdpdGggPSBwcm9wTmFtZSArICc6IDwhLS0ga28gdGV4dDogJyArIGJpbmRWYWx1ZSArICcgLS0+JyArIHByb3BEZWZhdWx0VmFsdWUgKyAnPCEtLSAva28gLS0+JztcbiAgICAgICAgICAgICAgICBuZXdTdHlsZSA9IGNvbnZlcnRlclV0aWxzLnJlbW92ZVN0eWxlKG5ld1N0eWxlLCBkZWNsYXJhdGlvbnNbaV0ucG9zaXRpb24uc3RhcnQsIGRlY2xhcmF0aW9uc1tpXS5wb3NpdGlvbi5lbmQsIHNraXBMaW5lcywgMCwgMCwgcmVwbGFjZWRXaXRoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJSZW1vdmUgc3R5bGUgZmFpbGVkXCIsIGUsIFwibmFtZVwiLCBkZWNsYXJhdGlvbnNbaV0pO1xuICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gcHJlZml4aW5nIHVybHNcbiAgICAgICAgICB2YXIgcmVwbGFjZWRWYWx1ZSA9IF9kZWNsYXJhdGlvblZhbHVlVXJsUHJlZml4ZXIoZGVjbGFyYXRpb25zW2ldLnZhbHVlLCB0ZW1wbGF0ZVVybENvbnZlcnRlcik7XG4gICAgICAgICAgaWYgKHJlcGxhY2VkVmFsdWUgIT0gZGVjbGFyYXRpb25zW2ldLnZhbHVlKSB7XG4gICAgICAgICAgICBpZiAobmV3U3R5bGUgPT09IG51bGwgJiYgdHlwZW9mIHN0eWxlICE9PSAndW5kZWZpbmVkJykgbmV3U3R5bGUgPSBzdHlsZTtcbiAgICAgICAgICAgIGlmIChuZXdTdHlsZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG5ld1N0eWxlID0gY29udmVydGVyVXRpbHMucmVtb3ZlU3R5bGUobmV3U3R5bGUsIGRlY2xhcmF0aW9uc1tpXS5wb3NpdGlvbi5zdGFydCwgZGVjbGFyYXRpb25zW2ldLnBvc2l0aW9uLmVuZCwgc2tpcExpbmVzLCAwLCAwLCBkZWNsYXJhdGlvbnNbaV0ubmFtZSArIFwiOiBcIiArIHJlcGxhY2VkVmFsdWUpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJSZW1vdmUgc3R5bGUgZmFpbGVkIHJlcGxhY2luZyB1cmxcIiwgZSwgXCJuYW1lXCIsIGRlY2xhcmF0aW9uc1tpXSk7XG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFN0eWxlIGhhbmRsaW5nIGJ5IGNvbmNhdGVuYXRlZCBcInN0eWxlIGF0dHJpYnV0ZVwiICh3b3JzZSBwZXJmb3JtYW5jZSBidXQgbW9yZSBzdGFibGUgdGhhbiBkaXJlY3Qgc3R5bGUgaGFuZGxpbmcpXG4gICAgICAgICAgdmFyIGJpbmROYW1lMiA9IF9wcm9wVG9DYW1lbENhc2UoZGVjbGFyYXRpb25zW2ldLm5hbWUpO1xuICAgICAgICAgIHZhciBiaW5kID0gJ3ZpcnR1YWxBdHRyU3R5bGUnO1xuICAgICAgICAgIHZhciBiaW5kVmFsMiA9IHR5cGVvZiBuZXdCaW5kaW5nc1sndmlydHVhbFN0eWxlJ10gIT09ICd1bmRlZmluZWQnID8gbmV3QmluZGluZ3NbJ3ZpcnR1YWxTdHlsZSddW2JpbmROYW1lMl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICB2YXIgZGlzdCA9ICcgJztcbiAgICAgICAgICBpZiAodHlwZW9mIG5ld0JpbmRpbmdzW2JpbmRdID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBuZXdCaW5kaW5nc1tiaW5kXSA9IFwiJydcIjtcbiAgICAgICAgICAgIGRpc3QgPSAnJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodHlwZW9mIGJpbmRWYWwyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgbmV3QmluZGluZ3NbYmluZF0gPSBcIidcIiArIGRlY2xhcmF0aW9uc1tpXS5uYW1lICsgXCI6ICcrKFwiICsgYmluZFZhbDIgKyBcIikrJztcIiArIGRpc3QgKyBcIicrXCIgKyBuZXdCaW5kaW5nc1tiaW5kXTtcbiAgICAgICAgICAgIGRlbGV0ZSBuZXdCaW5kaW5nc1sndmlydHVhbFN0eWxlJ11bYmluZE5hbWUyXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3QmluZGluZ3NbYmluZF0gPSBcIidcIiArIGRlY2xhcmF0aW9uc1tpXS5uYW1lICsgXCI6IFwiICsgY29udmVydGVyVXRpbHMuYWRkU2xhc2hlcyhyZXBsYWNlZFZhbHVlKSArIFwiO1wiICsgZGlzdCArIFwiJytcIiArIG5ld0JpbmRpbmdzW2JpbmRdO1xuICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gIGlmICh0eXBlb2YgZWxlbWVudCAhPSAndW5kZWZpbmVkJyAmJiBlbGVtZW50ICE9PSBudWxsKSB7XG4gICAgZm9yICh2YXIgcHJvcCBpbiBuZXdCaW5kaW5nc1sndmlydHVhbFN0eWxlJ10pXG4gICAgICBpZiAobmV3QmluZGluZ3NbJ3ZpcnR1YWxTdHlsZSddLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiVW5leHBlY3RlZCB2aXJ0dWFsU3R5bGUgYmluZGluZyBhZnRlciBjb252ZXJzaW9uIHRvIHZpcnR1YWxBdHRyLnN0eWxlXCIsIHByb3AsIG5ld0JpbmRpbmdzWyd2aXJ0dWFsU3R5bGUnXVtwcm9wXSwgc3R5bGUpO1xuICAgICAgICB0aHJvdyBcIlVuZXhwZWN0ZWQgdmlydHVhbFN0eWxlIGJpbmRpbmcgYWZ0ZXIgY29udmVyc2lvbiB0byB2aXJ0dWFsQXR0ci5zdHlsZSBmb3IgXCIgKyBwcm9wO1xuICAgICAgfVxuICAgIGRlbGV0ZSBuZXdCaW5kaW5nc1sndmlydHVhbFN0eWxlJ107XG5cbiAgICB2YXIgY3VycmVudEJpbmRpbmdzID0gZG9tdXRpbHMuZ2V0QXR0cmlidXRlKGVsZW1lbnQsICdkYXRhLWJpbmQnKTtcbiAgICB2YXIgZGF0YUJpbmQgPSAoY3VycmVudEJpbmRpbmdzICE9PSBudWxsID8gY3VycmVudEJpbmRpbmdzICsgXCIsIFwiIDogXCJcIikgKyBfYmluZGluZ1NlcmlhbGl6ZXIobmV3QmluZGluZ3MpO1xuICAgIGRvbXV0aWxzLnNldEF0dHJpYnV0ZShlbGVtZW50LCAnZGF0YS1iaW5kJywgZGF0YUJpbmQpO1xuICB9XG5cbiAgLy8gVE9ETyBhIGZ1bmN0aW9uIHdob3NlIHJldHVybiB0eXBlIGRlcGVuZHMgb24gdGhlIGlucHV0IHBhcmFtZXRlcnMgaXMgdmVyeSB1Z2x5Li4gcGxlYXNlIEZJWCBNRS5cbiAgaWYgKHR5cGVvZiBzdHlsZSA9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIGNsZWFuIHZpcnR1YWxTdHlsZSBpZiBlbXB0eVxuICAgIHZhciBoYXNWaXJ0dWFsU3R5bGUgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBwcm9wMSBpbiBuZXdCaW5kaW5nc1sndmlydHVhbFN0eWxlJ10pXG4gICAgICBpZiAobmV3QmluZGluZ3NbJ3ZpcnR1YWxTdHlsZSddLmhhc093blByb3BlcnR5KHByb3AxKSkge1xuICAgICAgICBoYXNWaXJ0dWFsU3R5bGUgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICBpZiAoIWhhc1ZpcnR1YWxTdHlsZSkgZGVsZXRlIG5ld0JpbmRpbmdzWyd2aXJ0dWFsU3R5bGUnXTtcbiAgICBlbHNlIHtcbiAgICAgIC8vIHJlbW92ZSBhbmQgYWRkIGJhY2sgdmlydHVhbEF0dHJTdHlsZSBzbyBpdCBnZXRzIGFwcGVuZGVkIEJFRk9SRSB2aXJ0dWFsQXR0clN0eWxlIChfYmluZGluZ1NlcmlhbGl6ZXIgcmV2ZXJzZSB0aGVtLi4uKVxuICAgICAgaWYgKHR5cGVvZiBuZXdCaW5kaW5nc1sndmlydHVhbEF0dHJTdHlsZSddICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgdnMgPSBuZXdCaW5kaW5nc1sndmlydHVhbEF0dHJTdHlsZSddO1xuICAgICAgICBkZWxldGUgbmV3QmluZGluZ3NbJ3ZpcnR1YWxBdHRyU3R5bGUnXTtcbiAgICAgICAgbmV3QmluZGluZ3NbJ3ZpcnR1YWxBdHRyU3R5bGUnXSA9IHZzO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyByZXR1cm5zIG5ldyBzZXJpYWxpemVkIGJpbmRpbmdzXG4gICAgcmV0dXJuIF9iaW5kaW5nU2VyaWFsaXplcihuZXdCaW5kaW5ncyk7XG4gIH1cblxuICByZXR1cm4gbmV3U3R5bGU7XG59O1xuXG52YXIgX2JpbmRpbmdTZXJpYWxpemVyID0gZnVuY3Rpb24odmFsKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgcHJvcCBpbiB2YWwpXG4gICAgaWYgKHZhbC5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWxbcHJvcF0gPT0gJ29iamVjdCcpIHJlcy5wdXNoKHByb3AgKyBcIjogXCIgKyBcInsgXCIgKyBfYmluZGluZ1NlcmlhbGl6ZXIodmFsW3Byb3BdKSArIFwiIH1cIik7XG4gICAgICBlbHNlIHJlcy5wdXNoKHByb3AgKyBcIjogXCIgKyB2YWxbcHJvcF0pO1xuICAgIH1cbiAgcmV0dXJuIHJlcy5yZXZlcnNlKCkuam9pbignLCAnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZWxhYm9yYXRlRGVjbGFyYXRpb25zOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vLyBUaGlzIGRlYWxzIHdpdGggQ2hlZXJpby9qUXVlcnkgaXNzdWVzLlxuLy8gTW9zdCBvZiB0aGlzIGNvdWxkIGJlIGRvbmUgd2l0aG91dCBqUXVlcnksIHRvbywgYnV0IGpRdWVyeSBpcyBlYXNpZXIgdG8gYmUgbW9ja2VkIHdpdGggQ2hlZXJpb1xuLy8gT3RoZXJ3aXNlIHdlIHdvdWxkIG5lZWQganNEb20gdG8gcnVuIHRoZSBjb21waWxlciBpbiB0aGUgc2VydmVyICh3aXRob3V0IGEgcmVhbCBicm93c2VyKVxuXG52YXIgJCA9IHJlcXVpcmUoXCJqcXVlcnlcIik7XG5cbmZ1bmN0aW9uIF9leHRlbmQodGFyZ2V0LCBzb3VyY2UpIHtcbiAgaWYgKHNvdXJjZSkge1xuICAgIGZvciAodmFyIHByb3AgaW4gc291cmNlKSB7XG4gICAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgIHRhcmdldFtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxudmFyIG9iakV4dGVuZCA9IGZ1bmN0aW9uKG9iaiwgZXh0ZW5kZXIpIHtcbiAgaWYgKHR5cGVvZiAkLmV4dGVuZCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuICQuZXh0ZW5kKHRydWUsIG9iaiwgZXh0ZW5kZXIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBfZXh0ZW5kKG9iaiwgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShleHRlbmRlcikpKTtcbiAgfVxufTtcblxudmFyIGdldEF0dHJpYnV0ZSA9IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJpYnV0ZSkge1xuICB2YXIgcmVzID0gJChlbGVtZW50KS5hdHRyKGF0dHJpYnV0ZSk7XG4gIGlmICh0eXBlb2YgcmVzID09ICd1bmRlZmluZWQnKSByZXMgPSBudWxsO1xuICByZXR1cm4gcmVzO1xuICAvLyByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbn07XG5cbnZhciBzZXRBdHRyaWJ1dGUgPSBmdW5jdGlvbihlbGVtZW50LCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICQoZWxlbWVudCkuYXR0cihhdHRyaWJ1dGUsIHZhbHVlKTtcbiAgLy8gZWxlbWVudC5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlLCB2YWx1ZSk7XG59O1xuXG52YXIgcmVtb3ZlQXR0cmlidXRlID0gZnVuY3Rpb24oZWxlbWVudCwgYXR0cmlidXRlKSB7XG4gICQoZWxlbWVudCkucmVtb3ZlQXR0cihhdHRyaWJ1dGUpO1xuICAvLyBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xufTtcblxudmFyIGdldElubmVyVGV4dCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgcmV0dXJuICQoZWxlbWVudCkudGV4dCgpO1xuICAvLyBpZiAodHlwZW9mIGVsZW1lbnQuaW5uZXJUZXh0ICE9ICd1bmRlZmluZWQnKSByZXR1cm4gZWxlbWVudC5pbm5lclRleHQ7XG4gIC8vIGVsc2UgcmV0dXJuIGVsZW1lbnQudGV4dENvbnRlbnQ7XG59O1xuXG52YXIgZ2V0SW5uZXJIdG1sID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICByZXR1cm4gJChlbGVtZW50KS5odG1sKCk7XG4gIC8vIHJldHVybiBlbGVtZW50LmlubmVySFRNTDtcbn07XG5cbnZhciBnZXRMb3dlclRhZ05hbWUgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gIC8vIHNvbWV0aW1lcyBjaGVlcmlvIGRvZXNuJ3QgaGF2ZSB0YWdOYW1lIGJ1dCBcIm5hbWVcIi5cbiAgLy8gQnJvd3NlcnMgaGF2ZSBcIm5hbWVcIiB3aXRoIGVtcHR5IHN0cmluZ1xuICAvLyBTb21ldGltZXMgY2hlZXJpbyBoYXMgdGFnTmFtZSBidXQgbm8gcHJvcCBmdW5jdGlvbi5cbiAgaWYgKGVsZW1lbnQudGFnTmFtZSA9PT0gJycgJiYgdHlwZW9mIGVsZW1lbnQubmFtZSA9PSAnc3RyaW5nJykgcmV0dXJuIGVsZW1lbnQubmFtZS50b0xvd2VyQ2FzZSgpO1xuICBpZiAoZWxlbWVudC50YWdOYW1lICE9PSAnJykgcmV0dXJuIGVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gJChlbGVtZW50KS5wcm9wKFwidGFnTmFtZVwiKS50b0xvd2VyQ2FzZSgpO1xuICAvLyByZXR1cm4gZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG59O1xuXG52YXIgc2V0Q29udGVudCA9IGZ1bmN0aW9uKGVsZW1lbnQsIGNvbnRlbnQpIHtcbiAgJChlbGVtZW50KS5odG1sKGNvbnRlbnQpO1xuICAvLyBlbGVtZW50LmlubmVySFRNTCA9IGNvbnRlbnQ7XG59O1xuXG52YXIgcmVwbGFjZUh0bWwgPSBmdW5jdGlvbihlbGVtZW50LCBodG1sKSB7XG4gICQoZWxlbWVudCkucmVwbGFjZVdpdGgoaHRtbCk7XG4gIC8vIGVsZW1lbnQub3V0ZXJIVE1MID0gaHRtbDtcbn07XG5cbnZhciByZW1vdmVFbGVtZW50cyA9IGZ1bmN0aW9uKCRlbGVtZW50cywgdHJ5RGV0YWNoKSB7XG4gIGlmICh0cnlEZXRhY2ggJiYgdHlwZW9mICRlbGVtZW50cy5kZXRhY2ggIT09ICd1bmRlZmluZWQnKSAkZWxlbWVudHMuZGV0YWNoKCk7XG4gIC8vIE5PVEU6IHdlIGRvbid0IG5lZWQgYW4gZWxzZSwgYXMgZGV0YWNoIGlzIHNpbXBseSBhbiBvcHRpbWl6YXRpb25cbiAgJGVsZW1lbnRzLnJlbW92ZSgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldEF0dHJpYnV0ZTogZ2V0QXR0cmlidXRlLFxuICBzZXRBdHRyaWJ1dGU6IHNldEF0dHJpYnV0ZSxcbiAgcmVtb3ZlQXR0cmlidXRlOiByZW1vdmVBdHRyaWJ1dGUsXG4gIGdldElubmVyVGV4dDogZ2V0SW5uZXJUZXh0LFxuICBnZXRJbm5lckh0bWw6IGdldElubmVySHRtbCxcbiAgZ2V0TG93ZXJUYWdOYW1lOiBnZXRMb3dlclRhZ05hbWUsXG4gIHNldENvbnRlbnQ6IHNldENvbnRlbnQsXG4gIHJlcGxhY2VIdG1sOiByZXBsYWNlSHRtbCxcbiAgcmVtb3ZlRWxlbWVudHM6IHJlbW92ZUVsZW1lbnRzLFxuICBvYmpFeHRlbmQ6IG9iakV4dGVuZFxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGNvbnNvbGUgPSByZXF1aXJlKFwiY29uc29sZVwiKTtcbnZhciBlbGFib3JhdGVEZWNsYXJhdGlvbnMgPSByZXF1aXJlKFwiLi9kZWNsYXJhdGlvbnMuanNcIik7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzLmpzJyk7XG52YXIgbW9kZWxEZWYgPSByZXF1aXJlKCcuL21vZGVsLmpzJyk7XG5cbnZhciBfZ2V0T3B0aW9uc09iamVjdCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgdmFyIG9wdGlvbnNDb3VwbGVzID0gb3B0aW9ucy5zcGxpdCgnfCcpO1xuICB2YXIgb3B0cyA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG9wdGlvbnNDb3VwbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG9wdCA9IG9wdGlvbnNDb3VwbGVzW2ldLnNwbGl0KCc9Jyk7XG4gICAgb3B0c1tvcHRbMF1dID0gb3B0Lmxlbmd0aCA+IDEgPyBvcHRbMV0gOiBvcHRbMF07XG4gIH1cbiAgcmV0dXJuIG9wdHM7XG59O1xuXG4vLyBUT0RPIHRoaXMgc2hvdWxkIG5vdCBoYXZlIGhhcmRjb2RlZCBydWxlcyAod2Ugbm93IGhhdmUgYSB3YXkgdG8gZGVjbGFyZSB0aGVtIGluIHRoZSB0ZW1wbGF0ZSBkZWZpbml0aW9uKVxuLy8gQ2F0ZWdvcnkgXCJzdHlsZVwiIGlzIHVzZWQgYnkgZWRpdFR5cGUgXCJzdHlsZXJcIlxuLy8gQ2F0ZW9ncnkgXCJjb250ZW50XCIgaXMgdXNlZCBieSBlZGl0VHlwZSBcImVkaXRcIlxuLy8gVE9ETyBtYXliZSB3ZSBzaG91bGQgdXNlIGEgY29tbW9uIHN0cmluZyBoZXJlLCBhbmQgcmVseSBvbmx5IG9uIHRoZSBvcmlnaW5hbCBjYXRlZ29yeS5cbnZhciBfZmlsdGVyUHJvcHMgPSBmdW5jdGlvbihtb2RlbCwgZWRpdFR5cGUsIGxldmVsKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgcHJvcCBpbiBtb2RlbClcbiAgICBpZiAoIXByb3AubWF0Y2goL15jdXN0b21TdHlsZSQvKSAmJiAhcHJvcC5tYXRjaCgvXl8vKSAmJiBtb2RlbC5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgdmFyIGlzU3R5bGVQcm9wID0gbW9kZWxbcHJvcF0gIT09IG51bGwgJiYgdHlwZW9mIG1vZGVsW3Byb3BdLl9jYXRlZ29yeSAhPSAndW5kZWZpbmVkJyAmJiBtb2RlbFtwcm9wXS5fY2F0ZWdvcnkgPT0gJ3N0eWxlJztcbiAgICAgIGlmIChwcm9wID09ICdpZCcgfHwgcHJvcCA9PSAndHlwZScgfHwgcHJvcC5tYXRjaCgvQmxvY2tzJC8pKSB7fSBlbHNlIGlmIChlZGl0VHlwZSA9PSAnc3R5bGVyJykge1xuICAgICAgICBpZiAoaXNTdHlsZVByb3AgfHwgbGV2ZWwgPiAwKSByZXMucHVzaChwcm9wKTtcbiAgICAgIH0gZWxzZSBpZiAoZWRpdFR5cGUgPT0gJ2VkaXQnKSB7XG4gICAgICAgIC8vIEVkaXRpbmcgZm9yIHByb3BlcnRpZXMgaW4gdGhlIFwiY29udGVudFwiIGNhdGVnb3J5IGJ1dCBub3QgZGVmaW5lZCBpbiB0aGUgY29udGV4dCBvZiBhIGJsb2NrXG4gICAgICAgIHZhciBpc0NvbnRlbnRQcm9wID0gbW9kZWxbcHJvcF0gIT09IG51bGwgJiYgdHlwZW9mIG1vZGVsW3Byb3BdLl9jYXRlZ29yeSAhPSAndW5kZWZpbmVkJyAmJiBtb2RlbFtwcm9wXS5fY2F0ZWdvcnkgPT0gJ2NvbnRlbnQnICYmXG4gICAgICAgICAgKHR5cGVvZiBtb2RlbFtwcm9wXS5fY29udGV4dCA9PSAndW5kZWZpbmVkJyB8fCBtb2RlbFtwcm9wXS5fY29udGV4dCAhPSAnYmxvY2snKTtcbiAgICAgICAgaWYgKGlzQ29udGVudFByb3ApIHJlcy5wdXNoKHByb3ApO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZWRpdFR5cGUgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmVzLnB1c2gocHJvcCk7XG4gICAgICB9XG4gICAgfVxuICByZXR1cm4gcmVzO1xufTtcblxudmFyIF9wcm9wSW5wdXQgPSBmdW5jdGlvbihtb2RlbCwgcHJvcCwgcHJvcEFjY2Vzc29yLCBlZGl0VHlwZSwgd2lkZ2V0cykge1xuICB2YXIgaHRtbCA9IFwiXCI7XG4gIHZhciB3aWRnZXQ7XG4gIGlmIChtb2RlbCAhPT0gbnVsbCAmJiB0eXBlb2YgbW9kZWwuX3dpZGdldCAhPSAndW5kZWZpbmVkJykgd2lkZ2V0ID0gbW9kZWwuX3dpZGdldDtcblxuICBpZiAodHlwZW9mIHdpZGdldCA9PSAndW5kZWZpbmVkJykge1xuICAgIHRocm93IFwiVW5rbm93biBkYXRhIHR5cGUgZm9yIFwiICsgcHJvcDtcbiAgfVxuXG4gIC8vIEZvciBjb250ZW50IGVkaXRvcnMgd2UgZGVhbCB3aXRoIGZvY3VzaW5nIChjbGlja2luZyBpcyBoYW5kbGVkIGJ5IHRoZSBjb250YWluZXIgRElWKS5cbiAgdmFyIG9uZm9jdXNiaW5kaW5nID0gJ2ZvY3VzYWJsZTogdHJ1ZSc7XG4gIGlmIChlZGl0VHlwZSA9PSAnZWRpdCcpIHtcbiAgICBvbmZvY3VzYmluZGluZyArPSAnLCBldmVudDogeyBmb2N1czogZnVuY3Rpb24odWksIGV2ZW50KSB7ICQoJGVsZW1lbnQpLmNsaWNrKCk7IH0gfSAnO1xuICB9XG5cbiAgaHRtbCArPSAnPGxhYmVsIGNsYXNzPVwiZGF0YS0nICsgd2lkZ2V0ICsgJ1wiJyArICh3aWRnZXQgPT0gJ2Jvb2xlYW4nID8gJyBkYXRhLWJpbmQ9XCJldmVudDogeyBtb3VzZWRvd246IGZ1bmN0aW9uKHVpLCBldnQpIHsgaWYgKGV2dC5idXR0b24gPT0gMCkgeyB2YXIgaW5wdXQgPSAkKCRlbGVtZW50KS5maW5kKFxcJ2lucHV0XFwnKTsgdmFyIGNoID0gaW5wdXQucHJvcChcXCdjaGVja2VkXFwnKTsgc2V0VGltZW91dChmdW5jdGlvbigpIHsgaW5wdXQuY2xpY2soKTsgaW5wdXQucHJvcChcXCdjaGVja2VkXFwnLCAhY2gpOyBpbnB1dC50cmlnZ2VyKFxcJ2NoYW5nZVxcJyk7IH0sIDApOyB9IH0gfSwgY2xpY2s6IGZ1bmN0aW9uKHVpLCBldnQpIHsgZXZ0LnByZXZlbnREZWZhdWx0KCk7IH0sIGNsaWNrQnViYmxlOiBmYWxzZVwiJyA6ICcnKSArICc+JztcblxuICBpZiAodHlwZW9mIHdpZGdldHMgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aWRnZXRzW3dpZGdldF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIHcgPSB3aWRnZXRzW3dpZGdldF07XG4gICAgdmFyIHBhcmFtZXRlcnMgPSB7fTtcbiAgICBpZiAodHlwZW9mIHcucGFyYW1ldGVycyAhPT0gJ3VuZGVmaW5lZCcpXG4gICAgICBmb3IgKHZhciBwIGluIHcucGFyYW1ldGVycylcbiAgICAgICAgaWYgKHcucGFyYW1ldGVycy5oYXNPd25Qcm9wZXJ0eShwKSAmJiB0eXBlb2YgbW9kZWxbJ18nK3BdICE9PSAndW5kZWZpbmVkJylcbiAgICAgICAgICBwYXJhbWV0ZXJzW3BdID0gbW9kZWxbJ18nK3BdO1xuICAgIGh0bWwgKz0gdy5odG1sKHByb3BBY2Nlc3Nvciwgb25mb2N1c2JpbmRpbmcsIHBhcmFtZXRlcnMpO1xuICB9IGVsc2UgaWYgKHdpZGdldCA9PSAnYm9vbGVhbicpIHtcbiAgICBodG1sICs9ICc8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgdmFsdWU9XCJub3RoaW5nXCIgZGF0YS1iaW5kPVwiY2hlY2tlZDogJyArIHByb3BBY2Nlc3NvciArICcsICcgKyBvbmZvY3VzYmluZGluZyArICdcIiAvPic7XG4gICAgaHRtbCArPSAnPHNwYW4gY2xhc3M9XCJjaGVja2JveC1yZXBsYWNlclwiID48L3NwYW4+JzsgLyogZGF0YS1iaW5kPVwiY3NzOiB7IGNoZWNrZWQ6ICcrcHJvcEFjY2Vzc29yKycgfVwiICovXG4gIH0gZWxzZSBpZiAod2lkZ2V0ID09ICdjb2xvcicpIHtcbiAgICBodG1sICs9ICc8aW5wdXQgc2l6ZT1cIjdcIiB0eXBlPVwidGV4dFwiIGRhdGEtYmluZD1cImNvbG9ycGlja2VyOiB7IGNvbG9yOiAnICsgcHJvcEFjY2Vzc29yICsgJywgc3RyaW5nczogJHJvb3QudChcXCdUaGVtZSBDb2xvcnMsU3RhbmRhcmQgQ29sb3JzLFdlYiBDb2xvcnMsVGhlbWUgQ29sb3JzLEJhY2sgdG8gUGFsZXR0ZSxIaXN0b3J5LE5vIGhpc3RvcnkgeWV0LlxcJykgfSwgJyArICcsICcgKyBvbmZvY3VzYmluZGluZyArICdcIiAvPic7XG4gIH0gZWxzZSBpZiAod2lkZ2V0ID09ICdzZWxlY3QnKSB7XG4gICAgaWYgKHR5cGVvZiBtb2RlbC5fb3B0aW9ucyAhPSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIG9wdHMgPSBfZ2V0T3B0aW9uc09iamVjdChtb2RlbC5fb3B0aW9ucyk7XG4gICAgICAvLyB2YXIgb3B0cyA9IG1vZGVsLl9vcHRpb25zO1xuICAgICAgaHRtbCArPSAnPHNlbGVjdCBkYXRhLWJpbmQ9XCJ2YWx1ZTogJyArIHByb3BBY2Nlc3NvciArICcsICcgKyBvbmZvY3VzYmluZGluZyArICdcIj4nO1xuICAgICAgZm9yICh2YXIgb3B0IGluIG9wdHMpXG4gICAgICAgIGlmIChvcHRzLmhhc093blByb3BlcnR5KG9wdCkpIHtcbiAgICAgICAgICBodG1sICs9ICc8b3B0aW9uIHZhbHVlPVwiJyArIG9wdCArICdcIiBkYXRhLWJpbmQ9XCJ0ZXh0OiAkcm9vdC51dChcXCd0ZW1wbGF0ZVxcJywgXFwnJyArIHV0aWxzLmFkZFNsYXNoZXMob3B0c1tvcHRdKSArICdcXCcpXCI+JyArIG9wdHNbb3B0XSArICc8L29wdGlvbj4nO1xuICAgICAgICB9XG4gICAgICBodG1sICs9ICc8L3NlbGVjdD4nO1xuICAgIH1cbiAgfSBlbHNlIGlmICh3aWRnZXQgPT0gJ2ZvbnQnKSB7XG4gICAgaHRtbCArPSAnPHNlbGVjdCB0eXBlPVwidGV4dFwiIGRhdGEtYmluZD1cInZhbHVlOiAnICsgcHJvcEFjY2Vzc29yICsgJywgJyArIG9uZm9jdXNiaW5kaW5nICsgJ1wiPic7XG4gICAgaHRtbCArPSAnPG9wdGdyb3VwIGxhYmVsPVwiU2Fucy1TZXJpZiBGb250c1wiPic7XG4gICAgaHRtbCArPSAnPG9wdGlvbiB2YWx1ZT1cIkFyaWFsLEhlbHZldGljYSxzYW5zLXNlcmlmXCI+QXJpYWw8L29wdGlvbj4nO1xuICAgIGh0bWwgKz0gJzxvcHRpb24gdmFsdWU9XCJcXCdDb21pYyBTYW5zIE1TXFwnLGN1cnNpdmUsc2Fucy1zZXJpZlwiPkNvbWljIFNhbnMgTVM8L29wdGlvbj4nO1xuICAgIGh0bWwgKz0gJzxvcHRpb24gdmFsdWU9XCJJbXBhY3QsQ2hhcmNvYWwsc2Fucy1zZXJpZlwiPkltcGFjdDwvb3B0aW9uPic7XG4gICAgaHRtbCArPSAnPG9wdGlvbiB2YWx1ZT1cIlxcJ1RyZWJ1Y2hldCBNU1xcJyxIZWx2ZXRpY2Esc2Fucy1zZXJpZlwiPlRyZWJ1Y2hldCBNUzwvb3B0aW9uPic7XG4gICAgaHRtbCArPSAnPG9wdGlvbiB2YWx1ZT1cIlZlcmRhbmEsR2VuZXZhLHNhbnMtc2VyaWZcIj5WZXJkYW5hPC9vcHRpb24+JztcbiAgICBodG1sICs9ICc8L29wdGdyb3VwPic7XG4gICAgaHRtbCArPSAnPG9wdGdyb3VwIGxhYmVsPVwiU2VyaWYgRm9udHNcIj4nO1xuICAgIGh0bWwgKz0gJzxvcHRpb24gdmFsdWU9XCJHZW9yZ2lhLHNlcmlmXCI+R2VvcmdpYTwvb3B0aW9uPic7XG4gICAgaHRtbCArPSAnPG9wdGlvbiB2YWx1ZT1cIlxcJ1RpbWVzIE5ldyBSb21hblxcJyxUaW1lcyxzZXJpZlwiPlRpbWVzIE5ldyBSb21hbjwvb3B0aW9uPic7XG4gICAgaHRtbCArPSAnPC9vcHRncm91cD4nO1xuICAgIGh0bWwgKz0gJzxvcHRncm91cCBsYWJlbD1cIk1vbm9zcGFjZSBGb250c1wiPic7XG4gICAgaHRtbCArPSAnPG9wdGlvbiB2YWx1ZT1cIlxcJ0NvdXJpZXIgTmV3XFwnLENvdXJpZXIsbW9ub3NwYWNlXCI+Q291cmllciBOZXc8L29wdGlvbj4nO1xuICAgIGh0bWwgKz0gJzwvb3B0Z3JvdXA+JztcbiAgICBodG1sICs9ICc8L3NlbGVjdD4nO1xuICB9IGVsc2UgaWYgKHdpZGdldCA9PSAndXJsJykge1xuICAgIGh0bWwgKz0gJzxkaXYgY2xhc3M9XCJ1aS10ZXh0YnV0dG9uXCI+JztcbiAgICAvLyA8YSBjbGFzcz1cInVpLXNwaW5uZXItYnV0dG9uIHVpLXNwaW5uZXItZG93biB1aS1jb3JuZXItYnIgdWktYnV0dG9uIHVpLXdpZGdldCB1aS1zdGF0ZS1kZWZhdWx0IHVpLWJ1dHRvbi10ZXh0LW9ubHlcIiB0YWJpbmRleD1cIi0xXCIgcm9sZT1cImJ1dHRvblwiPjxzcGFuIGNsYXNzPVwidWktYnV0dG9uLXRleHRcIj48c3BhbiBjbGFzcz1cInVpLWljb24gZmEgZmEtZncgY2FyZXQtZG93blwiPuKWvDwvc3Bhbj48L3NwYW4+PC9hPlxuICAgIGh0bWwgKz0gJzxpbnB1dCBjbGFzcz1cInVpLXRleHRidXR0b24taW5wdXRcIiBzaXplPVwiN1wiIHR5cGU9XCJ1cmxcIiBwYXR0ZXJuPVwiKG1haWx0bzouK0AuK3xodHRwcz86Ly8uK1xcXFwuLit8XFxcXFsuKlxcXFxdLiopXCIgdmFsdWU9XCJub3RoaW5nXCIgZGF0YS1iaW5kPVwiY3NzOiB7IHdpdGhCdXR0b246IHR5cGVvZiAkcm9vdC5saW5rRGlhbG9nICE9PSBcXCd1bmRlZmluZWRcXCcgfSwgdmFsaWRhdGVkVmFsdWU6ICcgKyBwcm9wQWNjZXNzb3IgKyAnLCAnICsgb25mb2N1c2JpbmRpbmcgKyAnXCIgLz4nO1xuICAgIGh0bWwgKz0gJzxhIGNsYXNzPVwidWktdGV4dGJ1dHRvbi1idXR0b25cIiBkYXRhLWJpbmQ9XCJ2aXNpYmxlOiB0eXBlb2YgJHJvb3QubGlua0RpYWxvZyAhPT0gXFwndW5kZWZpbmVkXFwnLCBjbGljazogdHlwZW9mICRyb290LmxpbmtEaWFsb2cgIT09IFxcJ3VuZGVmaW5lZFxcJyA/ICRyb290LmxpbmtEaWFsb2cuYmluZCgkZWxlbWVudC5wcmV2aW91c1NpYmxpbmcpIDogZmFsc2UsIGJ1dHRvbjogeyBpY29uczogeyBwcmltYXJ5OiBcXCdmYSBmYS1mdyBmYS1lbGxpcHNpcy1oXFwnIH0sIGxhYmVsOiBcXCdPcHppb25pXFwnLCB0ZXh0OiBmYWxzZSB9XCI+T3B6aW9uaTwvYT4nO1xuICAgIGh0bWwgKz0gJzwvZGl2Pic7XG4gIH0gZWxzZSBpZiAod2lkZ2V0ID09ICdpbnRlZ2VyJykge1xuICAgIC8vIGF0IHRoaXMgdGltZSB0aGUgXCJzdGVwXCIgZGVwZW5kcyBvbiBtYXggYmVpbmcgZ3JlYXRlciB0aGFuIDEwMC5cbiAgICAvLyBtYXliZSB3ZSBzaG91bGQgZXhwb3NlIFwic3RlcFwiIGFzIGEgY29uZmlndXJhdGlvbiwgdG9vXG4gICAgdmFyIG1pbiA9IDA7XG4gICAgdmFyIG1heCA9IDEwMDA7XG4gICAgaWYgKG1vZGVsICE9PSBudWxsICYmIHR5cGVvZiBtb2RlbC5fbWF4ICE9PSAndW5kZWZpbmVkJykgbWF4ID0gbW9kZWwuX21heDtcbiAgICBpZiAobW9kZWwgIT09IG51bGwgJiYgdHlwZW9mIG1vZGVsLl9taW4gIT09ICd1bmRlZmluZWQnKSBtaW4gPSBtb2RlbC5fbWluO1xuICAgIHZhciBzdGVwID0gKG1heCAtIG1pbikgPj0gMTAwID8gMTAgOiAxO1xuICAgIHZhciBwYWdlID0gc3RlcCAqIDU7XG4gICAgaHRtbCArPSAnPGlucHV0IGNsYXNzPVwibnVtYmVyLXNwaW5uZXJcIiBzaXplPVwiN1wiIHN0ZXA9XCInICsgc3RlcCArICdcIiB0eXBlPVwibnVtYmVyXCIgdmFsdWU9XCItMVwiIGRhdGEtYmluZD1cInNwaW5uZXI6IHsgbWluOiAnICsgbWluICsgJywgbWF4OiAnICsgbWF4ICsgJywgcGFnZTogJyArIHBhZ2UgKyAnLCB2YWx1ZTogJyArIHByb3BBY2Nlc3NvciArICcgfSwgdmFsdWVVcGRhdGU6IFtcXCdjaGFuZ2VcXCcsIFxcJ3NwaW5cXCddJyArICcsICcgKyBvbmZvY3VzYmluZGluZyArICdcIiAvPic7XG4gIH0gZWxzZSB7XG4gICAgaHRtbCArPSAnPGlucHV0IHNpemU9XCI3XCIgdHlwZT1cInRleHRcIiB2YWx1ZT1cIm5vdGhpbmdcIiBkYXRhLWJpbmQ9XCJ2YWx1ZTogJyArIHByb3BBY2Nlc3NvciArICcsICcgKyBvbmZvY3VzYmluZGluZyArICdcIiAvPic7XG4gIH1cblxuICBodG1sICs9ICc8L2xhYmVsPic7XG5cbiAgcmV0dXJuIGh0bWw7XG59O1xuXG52YXIgX2dldEdsb2JhbFN0eWxlUHJvcCA9IGZ1bmN0aW9uKGdsb2JhbFN0eWxlcywgbW9kZWwsIHByb3AsIHBhdGgpIHtcbiAgdmFyIGdsb2JhbFN0eWxlUHJvcDtcbiAgaWYgKHR5cGVvZiBtb2RlbCAhPT0gJ29iamVjdCcgfHwgbW9kZWwgPT09IG51bGwgfHwgdHlwZW9mIG1vZGVsLl93aWRnZXQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiBwcm9wICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgcGF0aCAhPT0gJ3VuZGVmaW5lZCcgJiYgcGF0aC5sZW5ndGggPiAwICYmIHR5cGVvZiBnbG9iYWxTdHlsZXMgPT0gJ29iamVjdCcgJiYgdHlwZW9mIGdsb2JhbFN0eWxlc1twYXRoXSAhPSAndW5kZWZpbmVkJykge1xuICAgICAgZ2xvYmFsU3R5bGVQcm9wID0gZ2xvYmFsU3R5bGVzW3BhdGhdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZ2xvYmFsU3R5bGVQcm9wO1xufTtcblxudmFyIF9wcm9wRWRpdG9yID0gZnVuY3Rpb24od2l0aEJpbmRpbmdQcm92aWRlciwgd2lkZ2V0cywgdGVtcGxhdGVVcmxDb252ZXJ0ZXIsIG1vZGVsLCB0aGVtZU1vZGVsLCBwYXRoLCBwcm9wLCBlZGl0VHlwZSwgbGV2ZWwsIGJhc2VUaHJlc2hvbGQsIGdsb2JhbFN0eWxlcywgZ2xvYmFsU3R5bGVQcm9wLCB0cmFja1VzYWdlLCByb290UHJldmlld0JpbmRpbmcsIHByZXZpZXdCYWNrZ3JvdW5kKSB7XG4gIGlmICh0eXBlb2YgbGV2ZWwgPT0gJ3VuZGVmaW5lZCcpIGxldmVsID0gMDtcblxuICBpZiAodHlwZW9mIHByb3AgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtb2RlbCA9PSAnb2JqZWN0JyAmJiBtb2RlbCAhPT0gbnVsbCAmJiB0eXBlb2YgbW9kZWwuX3VzZWNvdW50ID09PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnNvbGUubG9nKFwiVE9ETyBFRElUT1IgaWdub3JpbmdcIiwgcGF0aCwgXCJwcm9wZXJ0eSBiZWNhdXNlIGl0IGlzIG5vdCB1c2VkIGJ5IHRoZSB0ZW1wbGF0ZVwiLCBcInByb3A6XCIsIHByb3AsIFwidHlwZTpcIiwgZWRpdFR5cGUsIFwibGV2ZWw6XCIsIGxldmVsLCB3aXRoQmluZGluZ1Byb3ZpZGVyLl90ZW1wbGF0ZU5hbWUpO1xuICAgIHJldHVybiBcIlwiO1xuICB9XG5cbiAgdmFyIHByb3BBY2Nlc3NvciA9IHR5cGVvZiBnbG9iYWxTdHlsZVByb3AgIT0gJ3VuZGVmaW5lZCcgPyBwcm9wICsgJy5fZGVmYXVsdENvbXB1dGVkJyA6IHByb3A7XG5cbiAgdmFyIGh0bWwgPSBcIlwiO1xuICB2YXIgdGl0bGU7XG4gIHZhciBpZlN1YnNQcm9wID0gcHJvcEFjY2Vzc29yO1xuICB2YXIgaWZTdWJzR3V0dGVyID0gMTtcbiAgLy8gdHlwZW9mIGdsb2JhbFN0eWxlUHJvcCAhPSAndW5kZWZpbmVkJyA/IDEgOiAyO1xuICB2YXIgaWZTdWJzVGhyZXNob2xkID0gMTtcblxuICAvLyBUaGUgdmlzaWJpbGl0eSBoYW5kbGluZyBpcyBhIFBJVEFcbiAgLy8gXG4gIC8vIEhlcmUgYXJlIHNvbWUgXCJlZGdlIGNhc2VzXCIgdG8gdGVzdCB3aGVuZXZlciB3ZSBjaGFuZ2Ugc29tZXRoaW5nIGhlcmU6XG4gIC8vIExNIHNvY2lhbCBmb290ZXI6IHJlbW92aW5nIHNoYXJlVmlzaWJpbGUgbXVzdCBiZSByZWZsZWN0ZWQgaW4gdGhlIGJvb2xlYW5zIHN1Yi1jaGVja3NcbiAgLy8gRkxVSUQgc29jaWFsIGJsb2NrOiBtdWx0aXBsZSBjbGlja3Mgb24gdGhlIFwid2FuZFwiIHNob3VsZCBub3QgbWFrZSB0aGUgZWRpdG9yIGludmlzaWJsZVxuICAvLyBCSVMgaGVyb01lbnUgLSBCeSBjaGFuZ2luZyB0aGUgbWVudSB2aXNpYmlsaXR5IGl0IHNob3VsZCBiZSByZWZsZWN0ZWQgaW4gc3R5bGUgZWRpdG9ycyBmb3IgdGhlIG1lbnUgbGlua3NcbiAgLy8gRkxVSUQgYWxtb3N0IGV2ZXJ5IGJsb2NrIHdpdGggYSBjb2xvciB2YXJpYW50IHNvbWV0aW1lcyBrZWVwcyBzaG93aW5nIHN0eWxlIGVkaXRvciBmb3IgdGhlIGhpZGRlbiB2YXJpYW50LlxuICBpZiAodHlwZW9mIG1vZGVsID09ICdvYmplY3QnICYmIG1vZGVsICE9PSBudWxsICYmIHR5cGVvZiBtb2RlbC5fd2lkZ2V0ID09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRG8gbm90aGluZyBoZXJlXG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBnbG9iYWxTdHlsZVByb3AgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmU3Vic0d1dHRlciArPSAxO1xuICAgIH1cbiAgfVxuXG4gIC8vIE5PVEUgYmFzZVRocmVzaG9sZCBpcyBhZGRlZCBvbmx5IHdoZW4gZ2xvYmFsU3R5bGUgaXMgbm90IGRlZmluZWQgYmVjYXVzZSB3aGVuIHdlIGhhdmUgZ2xvYmFsU3R5bGVcbiAgLy8gd2UncmUgZ29pbmcgdG8gYmluZCB0aGUgY29tcHV0ZWQgdmFsdWVzIGFuZCBub3QgdGhlIG9yaWdpbmFsIGFuZCB0aGlzIHdheSB3ZSBkb24ndCBhZGQgb3Vyc2VyZiB0byB0aGUgZGVwZW5kZW5jeSBcbiAgLy8gdHJhY2tpbmcgKHN1YnNjcmlwdGlvbkNvdW50KVxuICAvLyBOT1RFIGJhc2VUaHJlc2hvbGQgaXMgYW4gXCJleHByZXNzaW9uXCIgYW5kIG5vdCBhIGZpeGVkIG51bWJlciwgc28gdGhpcyBpcyBhIGNvbmNhdGVuYXRpb25cbiAgaWYgKHR5cGVvZiBnbG9iYWxTdHlsZVByb3AgPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGJhc2VUaHJlc2hvbGQgIT09ICd1bmRlZmluZWQnKSBpZlN1YnNUaHJlc2hvbGQgKz0gYmFzZVRocmVzaG9sZDtcblxuICBpZiAodHlwZW9mIHByb3AgIT0gJ3VuZGVmaW5lZCcgJiYgISF0cmFja1VzYWdlKSB7XG4gICAgaHRtbCArPSAnPCEtLSBrbyBpZlN1YnM6IHsgZGF0YTogJyArIGlmU3Vic1Byb3AgKyAnLCB0aHJlc2hvbGQ6ICcgKyBpZlN1YnNUaHJlc2hvbGQgKyAnLCBndXR0ZXI6ICcgKyBpZlN1YnNHdXR0ZXIgKyAnIH0gLS0+JztcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJvcCAhPSAndW5kZWZpbmVkJyAmJiAobW9kZWwgPT09IG51bGwgfHwgdHlwZW9mIG1vZGVsLl9uYW1lID09ICd1bmRlZmluZWQnKSkge1xuICAgIC8vIFRPRE8gdGhyb3cgZXhjZXB0aW9uP1xuICAgIGNvbnNvbGUubG9nKFwiVE9ETyBXQVJOIE1pc3NpbmcgbGFiZWwgZm9yIHByb3BlcnR5IFwiLCBwcm9wKTtcbiAgfVxuICBpZiAodHlwZW9mIHByb3AgPT0gJ3VuZGVmaW5lZCcgJiYgbW9kZWwgIT09IG51bGwgJiYgdHlwZW9mIG1vZGVsLl9uYW1lID09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc29sZS5sb2coXCJUT0RPIFdBUk4gTWlzc2luZyBsYWJlbCBmb3Igb2JqZWN0IFwiLCBtb2RlbC50eXBlIC8qLCBtb2RlbCAqLyApO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBtb2RlbCA9PSAnb2JqZWN0JyAmJiBtb2RlbCAhPT0gbnVsbCAmJiB0eXBlb2YgbW9kZWwuX3dpZGdldCA9PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBwcm9wcyA9IF9maWx0ZXJQcm9wcyhtb2RlbCwgZWRpdFR5cGUsIGxldmVsKTtcblxuICAgIHZhciBoYXNDdXN0b21TdHlsZSA9IGVkaXRUeXBlID09ICdzdHlsZXInICYmIG1vZGVsICE9PSBudWxsICYmIHR5cGVvZiBtb2RlbC5jdXN0b21TdHlsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGdsb2JhbFN0eWxlUHJvcCAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgdmFyIHNlbGVjdGVkSXRlbUJpbmRpbmcgPSAnJztcbiAgICB2YXIgYWRkaXRpb25hbENsYXNzZXMgPSAnJztcbiAgICBpZiAodHlwZW9mIHByb3AgIT09ICd1bmRlZmluZWQnICYmIGVkaXRUeXBlID09ICdlZGl0Jykge1xuICAgICAgc2VsZWN0ZWRJdGVtQmluZGluZyA9ICcsIGNsaWNrOiBmdW5jdGlvbihvYmosIGV2dCkgeyAkcm9vdC5zZWxlY3RJdGVtKCcgKyBwcm9wICsgJywgJGRhdGEpOyByZXR1cm4gZmFsc2UgfSwgY2xpY2tCdWJibGU6IGZhbHNlLCBjc3M6IHsgc2VsZWN0ZWRpdGVtOiAkcm9vdC5pc1NlbGVjdGVkSXRlbSgnICsgcHJvcCArICcpIH0sIHNjcm9sbEludG9WaWV3OiAkcm9vdC5pc1NlbGVjdGVkSXRlbSgnICsgcHJvcCArICcpLCAnO1xuICAgICAgYWRkaXRpb25hbENsYXNzZXMgKz0gJyBzZWxlY3RhYmxlJztcbiAgICB9XG4gICAgaWYgKGhhc0N1c3RvbVN0eWxlKSB7XG4gICAgICBhZGRpdGlvbmFsQ2xhc3NlcyArPSAnIHN1cHBvcnRzQ3VzdG9tU3R5bGVzJztcbiAgICB9XG4gICAgaHRtbCArPSAnPGRpdiBjbGFzcz1cIm9iakVkaXQgbGV2ZWwnICsgbGV2ZWwgKyBhZGRpdGlvbmFsQ2xhc3NlcyArICdcIiBkYXRhLWJpbmQ9XCJ0b29sdGlwczoge30nICsgc2VsZWN0ZWRJdGVtQmluZGluZyArICdcIj4nO1xuICAgIHZhciBtb2RlbE5hbWUgPSAobW9kZWwgIT09IG51bGwgJiYgdHlwZW9mIG1vZGVsLl9uYW1lICE9ICd1bmRlZmluZWQnID8gbW9kZWwuX25hbWUgOiAodHlwZW9mIHByb3AgIT09ICd1bmRlZmluZWQnID8gJ1snICsgcHJvcCArICddJyA6ICcnKSk7XG4gICAgaWYgKGhhc0N1c3RvbVN0eWxlKSB7XG4gICAgICB2YXIgdGhlbWVTZWN0aW9uTmFtZSA9ICdTdGlsZSc7XG4gICAgICBpZiAodHlwZW9mIHRoZW1lTW9kZWwgIT09ICd1bmRlZmluZWQnICYmIHRoZW1lTW9kZWwgIT09IG51bGwgJiYgdHlwZW9mIHRoZW1lTW9kZWwuX25hbWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRoZW1lU2VjdGlvbk5hbWUgPSB0aGVtZU1vZGVsLl9uYW1lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJUT0RPIG1pc3NpbmcgbGFiZWwgZm9yIHRoZW1lIHNlY3Rpb24gXCIsIHByb3AsIG1vZGVsICE9PSBudWxsID8gbW9kZWwudHlwZSA6ICctJyk7XG4gICAgICB9XG5cbiAgICAgIG1vZGVsTmFtZSA9ICc8c3BhbiBjbGFzcz1cImJsb2NrU2VsZWN0aW9uTWV0aG9kXCIgZGF0YS1iaW5kPVwidGV4dDogY3VzdG9tU3R5bGUoKSA/ICRyb290LnV0KFxcJ3RlbXBsYXRlXFwnLCBcXCcnICsgdXRpbHMuYWRkU2xhc2hlcyhtb2RlbE5hbWUpICsgJ1xcJykgOiAkcm9vdC51dChcXCd0ZW1wbGF0ZVxcJywgXFwnJyArIHV0aWxzLmFkZFNsYXNoZXModGhlbWVTZWN0aW9uTmFtZSkgKyAnXFwnKVwiPkJsb2NrPC9zcGFuPic7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1vZGVsTmFtZSA9ICc8c3BhbiBkYXRhLWJpbmQ9XCJ0ZXh0OiAkcm9vdC51dChcXCd0ZW1wbGF0ZVxcJywgXFwnJyArIHV0aWxzLmFkZFNsYXNoZXMobW9kZWxOYW1lKSArICdcXCcpXCI+JyArIG1vZGVsTmFtZSArICc8L3NwYW4+JztcbiAgICB9XG4gICAgdGl0bGUgPSBtb2RlbCAhPT0gbnVsbCAmJiB0eXBlb2YgbW9kZWwuX2hlbHAgIT09ICd1bmRlZmluZWQnID8gJyB0aXRsZT1cIicgKyB1dGlscy5hZGRTbGFzaGVzKG1vZGVsLl9oZWxwKSArICdcIiBkYXRhLWJpbmQ9XCJhdHRyOiB7IHRpdGxlOiAkcm9vdC51dChcXCd0ZW1wbGF0ZVxcJywgXFwnJyArIHV0aWxzLmFkZFNsYXNoZXMobW9kZWwuX2hlbHApICsgJ1xcJykgfVwiJyA6ICcnO1xuICAgIGh0bWwgKz0gJzxzcGFuJyArIHRpdGxlICsgJyBjbGFzcz1cIm9iakxhYmVsIGxldmVsJyArIGxldmVsICsgJ1wiPicgKyBtb2RlbE5hbWUgKyAnPC9zcGFuPic7XG5cbiAgICBpZiAoZWRpdFR5cGUgPT0gJ2VkaXQnICYmIHR5cGVvZiBtb2RlbC5fYmxvY2tEZXNjcmlwdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGh0bWwgKz0gJzxkaXYgY2xhc3M9XCJibG9ja0Rlc2NyaXB0aW9uXCIgZGF0YS1iaW5kPVwiaHRtbDogJHJvb3QudXQoXFwndGVtcGxhdGVcXCcsIFxcJycgKyB1dGlscy5hZGRTbGFzaGVzKG1vZGVsLl9ibG9ja0Rlc2NyaXB0aW9uKSArICdcXCcpXCI+JyArIG1vZGVsLl9ibG9ja0Rlc2NyaXB0aW9uICsgJzwvZGl2Pic7XG4gICAgfVxuXG4gICAgLyogQ1VTVE9NIFNUWUxFICovXG4gICAgaWYgKGhhc0N1c3RvbVN0eWxlKSB7XG4gICAgICBodG1sICs9ICc8bGFiZWwgY2xhc3M9XCJkYXRhLWJvb2xlYW4gYmxvY2tDaGVja1wiIGRhdGEtYmluZD1cInRvb2x0aXBzOiB7IH1cIj4nO1xuICAgICAgaHRtbCArPSAnPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIHZhbHVlPVwibm90aGluZ1wiIGRhdGEtYmluZD1cImZvY3VzYWJsZTogdHJ1ZSwgY2hlY2tlZDogY3VzdG9tU3R5bGVcIiAvPic7XG4gICAgICBodG1sICs9ICc8c3BhbiB0aXRsZT1cIlN3aXRjaCBiZXR3ZWVuIGdsb2JhbCBhbmQgYmxvY2sgbGV2ZWwgc3R5bGVzIGVkaXRpbmdcIiBkYXRhLWJpbmQ9XCJhdHRyOiB7IHRpdGxlOiAkcm9vdC50KFxcJ1N3aXRjaCBiZXR3ZWVuIGdsb2JhbCBhbmQgYmxvY2sgbGV2ZWwgc3R5bGVzIGVkaXRpbmdcXCcpIH1cIiBjbGFzcz1cImNoZWNrYm94LXJlcGxhY2VyIGNoZWNrYm94LXJlcGxhY2VyLW9ub2ZmXCI+PC9zcGFuPic7IC8vICBkYXRhLWJpbmQ9XCJ0b29sdGlwOiB7IGNvbnRlbnQ6IFxcJ3BlcnNvbmFsaXp6YSB0dXR0aVxcJyB9XCJcbiAgICAgIGh0bWwgKz0gJzwvbGFiZWw+JztcbiAgICAgIGh0bWwgKz0gJzwhLS0ga28gdGVtcGxhdGU6IHsgbmFtZTogXFwnY3VzdG9tc3R5bGVcXCcsIGlmOiBjdXN0b21TdHlsZSB9IC0tPjwhLS0gL2tvIC0tPic7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBwcm9wICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICBodG1sICs9ICc8IS0tIGtvIHdpdGg6ICcgKyBwcm9wICsgJyAtLT4nO1xuXG4gICAgICAvKiBQUkVWSUVXICovXG4gICAgICBpZiAobGV2ZWwgPT0gMSAmJiB0eXBlb2YgcHJvcCAhPSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAodHlwZW9mIG1vZGVsLl9wcmV2aWV3QmluZGluZ3MgIT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpdGhCaW5kaW5nUHJvdmlkZXIgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHJvb3RQcmV2aWV3QmluZGluZyAhPSAndW5kZWZpbmVkJykgaHRtbCArPSAnPCEtLSBrbyB3aXRoOiAkcm9vdC5jb250ZW50KCkgLS0+PGRpdiBjbGFzcz1cIm9ialByZXZpZXdcIiBkYXRhLWJpbmQ9XCInICsgcm9vdFByZXZpZXdCaW5kaW5nICsgJ1wiPjwvZGl2PjwhLS0gL2tvIC0tPic7XG4gICAgICAgICAgaWYgKHR5cGVvZiBwcmV2aWV3QmFja2dyb3VuZCAhPSAndW5kZWZpbmVkJykgaHRtbCArPSAnPCEtLSBrbyB3aXRoOiAkcGFyZW50IC0tPjxkaXYgY2xhc3M9XCJvYmpQcmV2aWV3XCIgZGF0YS1iaW5kPVwiJyArIHByZXZpZXdCYWNrZ3JvdW5kICsgJ1wiPjwvZGl2PjwhLS0gL2tvIC0tPic7XG4gICAgICAgICAgdmFyIHByZXZpZXdCaW5kaW5ncyA9IGVsYWJvcmF0ZURlY2xhcmF0aW9ucyh1bmRlZmluZWQsIG1vZGVsLl9wcmV2aWV3QmluZGluZ3MsIHRlbXBsYXRlVXJsQ29udmVydGVyLCB3aXRoQmluZGluZ1Byb3ZpZGVyLmJpbmQodGhpcywgcGF0aCArICcuJykpO1xuICAgICAgICAgIGh0bWwgKz0gJzxkaXYgY2xhc3M9XCJvYmpQcmV2aWV3XCI+PGRpdiBjbGFzcz1cIm9ialByZXZpZXdJbm5lclwiIGRhdGEtYmluZD1cIicgKyBwcmV2aWV3QmluZGluZ3MgKyAnXCI+PC9kaXY+PC9kaXY+JztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qIFBSRVZJRVcgKi9cbiAgICB2YXIgcHJldmlld0JHO1xuICAgIGlmIChsZXZlbCA9PT0gMCkge1xuICAgICAgaWYgKHR5cGVvZiBtb2RlbC5fcHJldmlld0JpbmRpbmdzICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHByZXZpZXdCRyA9IGVsYWJvcmF0ZURlY2xhcmF0aW9ucyh1bmRlZmluZWQsIG1vZGVsLl9wcmV2aWV3QmluZGluZ3MsIHRlbXBsYXRlVXJsQ29udmVydGVyLCB3aXRoQmluZGluZ1Byb3ZpZGVyLmJpbmQodGhpcywgcGF0aC5sZW5ndGggPiAwID8gcGF0aCArICcuJyA6ICcnKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGksIG5ld1BhdGg7XG5cbiAgICB2YXIgYmVmb3JlID0gaHRtbC5sZW5ndGg7XG5cbiAgICB2YXIgbmV3VGhlbWVNb2RlbDtcbiAgICB2YXIgbmV3R2xvYmFsU3R5bGVQcm9wO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBuZXdQYXRoID0gcGF0aC5sZW5ndGggPiAwID8gcGF0aCArIFwiLlwiICsgcHJvcHNbaV0gOiBwcm9wc1tpXTtcbiAgICAgIGlmICh0eXBlb2YgbW9kZWxbcHJvcHNbaV1dICE9ICdvYmplY3QnIHx8IG1vZGVsW3Byb3BzW2ldXSA9PT0gbnVsbCB8fCB0eXBlb2YgbW9kZWxbcHJvcHNbaV1dLl93aWRnZXQgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgbmV3R2xvYmFsU3R5bGVQcm9wID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAobGV2ZWwgPT09IDAgJiYgcHJvcHNbaV0gPT0gJ3RoZW1lJylcbiAgICAgICAgICBodG1sICs9IF9wcm9wRWRpdG9yKHdpdGhCaW5kaW5nUHJvdmlkZXIsIHdpZGdldHMsIHRlbXBsYXRlVXJsQ29udmVydGVyLCBtb2RlbFtwcm9wc1tpXV0sIG5ld1RoZW1lTW9kZWwsIG5ld1BhdGgsIHByb3BzW2ldLCBlZGl0VHlwZSwgMCwgYmFzZVRocmVzaG9sZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHRyYWNrVXNhZ2UsIHJvb3RQcmV2aWV3QmluZGluZyk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIG5ld0dsb2JhbFN0eWxlUHJvcCA9IF9nZXRHbG9iYWxTdHlsZVByb3AoZ2xvYmFsU3R5bGVzLCBtb2RlbFtwcm9wc1tpXV0sIHByb3BzW2ldLCBuZXdQYXRoKTtcbiAgICAgICAgICBodG1sICs9IF9wcm9wRWRpdG9yKHdpdGhCaW5kaW5nUHJvdmlkZXIsIHdpZGdldHMsIHRlbXBsYXRlVXJsQ29udmVydGVyLCBtb2RlbFtwcm9wc1tpXV0sIG5ld1RoZW1lTW9kZWwsIG5ld1BhdGgsIHByb3BzW2ldLCBlZGl0VHlwZSwgbGV2ZWwgKyAxLCBiYXNlVGhyZXNob2xkLCBnbG9iYWxTdHlsZXMsIG5ld0dsb2JhbFN0eWxlUHJvcCwgdHJhY2tVc2FnZSwgcm9vdFByZXZpZXdCaW5kaW5nLCBwcmV2aWV3QkcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgbmV3UGF0aCA9IHBhdGgubGVuZ3RoID4gMCA/IHBhdGggKyBcIi5cIiArIHByb3BzW2ldIDogcHJvcHNbaV07XG4gICAgICBpZiAoISh0eXBlb2YgbW9kZWxbcHJvcHNbaV1dICE9ICdvYmplY3QnIHx8IG1vZGVsW3Byb3BzW2ldXSA9PT0gbnVsbCB8fCB0eXBlb2YgbW9kZWxbcHJvcHNbaV1dLl93aWRnZXQgIT0gJ3VuZGVmaW5lZCcpKSB7XG4gICAgICAgIG5ld0dsb2JhbFN0eWxlUHJvcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGxldmVsID09PSAwICYmIHByb3BzW2ldID09ICd0aGVtZScpXG4gICAgICAgICAgaHRtbCArPSBfcHJvcEVkaXRvcih3aXRoQmluZGluZ1Byb3ZpZGVyLCB3aWRnZXRzLCB0ZW1wbGF0ZVVybENvbnZlcnRlciwgbW9kZWxbcHJvcHNbaV1dLCBuZXdUaGVtZU1vZGVsLCBuZXdQYXRoLCBwcm9wc1tpXSwgZWRpdFR5cGUsIDAsIGJhc2VUaHJlc2hvbGQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB0cmFja1VzYWdlLCByb290UHJldmlld0JpbmRpbmcpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBuZXdHbG9iYWxTdHlsZVByb3AgPSBfZ2V0R2xvYmFsU3R5bGVQcm9wKGdsb2JhbFN0eWxlcywgbW9kZWxbcHJvcHNbaV1dLCBwcm9wc1tpXSwgbmV3UGF0aCk7XG4gICAgICAgICAgaHRtbCArPSBfcHJvcEVkaXRvcih3aXRoQmluZGluZ1Byb3ZpZGVyLCB3aWRnZXRzLCB0ZW1wbGF0ZVVybENvbnZlcnRlciwgbW9kZWxbcHJvcHNbaV1dLCBuZXdUaGVtZU1vZGVsLCBuZXdQYXRoLCBwcm9wc1tpXSwgZWRpdFR5cGUsIGxldmVsICsgMSwgYmFzZVRocmVzaG9sZCwgZ2xvYmFsU3R5bGVzLCBuZXdHbG9iYWxTdHlsZVByb3AsIHRyYWNrVXNhZ2UsIHJvb3RQcmV2aWV3QmluZGluZywgcHJldmlld0JHKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBhZGRlZCA9IGh0bWwubGVuZ3RoIC0gYmVmb3JlO1xuICAgIGlmIChhZGRlZCA9PT0gMCkge1xuICAgICAgLy8gTm8gZWRpdGFibGUgY29udGVudDogaWYgdGhpcyBpcyBpbiBjb250ZXh0IFwidGVtcGxhdGVcIiB3ZSBsZWF2ZSBpdCBlbXB0eSwgb3RoZXJ3aXNlIHdlIHNob3cgYW4gaGVscC5cbiAgICAgIGlmICh0eXBlb2YgbW9kZWwgPT0gJ29iamVjdCcgJiYgbW9kZWwgIT09IG51bGwgJiYgbW9kZWwuX2NvbnRleHQgPT0gJ3RlbXBsYXRlJykge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUT0RPIG1vdmUgbWUgdG8gYSB0bXBsP1xuICAgICAgICBodG1sICs9ICc8ZGl2IGNsYXNzPVwib2JqRW1wdHlcIiBkYXRhLWJpbmQ9XCJodG1sOiAkcm9vdC50KFxcJ1NlbGVjdGVkIGVsZW1lbnQgaGFzIG5vIGVkaXRhYmxlIHByb3BlcnRpZXNcXCcpXCI+U2VsZWN0ZWQgZWxlbWVudCBoYXMgbm8gZWRpdGFibGUgcHJvcGVydGllczwvZGl2Pic7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBwcm9wICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICBodG1sICs9ICc8IS0tIC9rbyAtLT4nO1xuICAgIH1cbiAgICBodG1sICs9ICc8L2Rpdj4nO1xuXG4gIH0gZWxzZSB7XG4gICAgdmFyIGNoZWNrYm94ZXMgPSB0cnVlO1xuXG4gICAgaWYgKHR5cGVvZiBnbG9iYWxTdHlsZXMgPT0gJ3VuZGVmaW5lZCcpIGNoZWNrYm94ZXMgPSBmYWxzZTtcblxuICAgIGlmIChtb2RlbCA9PT0gbnVsbCB8fCB0eXBlb2YgbW9kZWwgIT0gJ29iamVjdCcgfHwgdHlwZW9mIG1vZGVsLl93aWRnZXQgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBiaW5kaW5ncyA9IFtdO1xuXG4gICAgICBpZiAodHlwZW9mIGdsb2JhbFN0eWxlUHJvcCAhPSAndW5kZWZpbmVkJykgYmluZGluZ3MucHVzaCgnY3NzOiB7IG5vdG51bGw6ICcgKyBwcm9wICsgJygpICE9PSBudWxsIH0nKTtcbiAgICAgIHRpdGxlID0gbW9kZWwgIT09IG51bGwgJiYgdHlwZW9mIG1vZGVsLl9oZWxwICE9PSAndW5kZWZpbmVkJyA/ICcgdGl0bGU9XCInICsgdXRpbHMuYWRkU2xhc2hlcyhtb2RlbC5faGVscCkgKyAnXCIgZGF0YS1iaW5kPVwiYXR0cjogeyB0aXRsZTogJHJvb3QudXQoXFwndGVtcGxhdGVcXCcsIFxcJycgKyB1dGlscy5hZGRTbGFzaGVzKG1vZGVsLl9oZWxwKSArICdcXCcpIH1cIicgOiAnJztcbiAgICAgIGlmICh0aXRsZS5sZW5ndGggPiAwKSBiaW5kaW5ncy5wdXNoKCd0b29sdGlwczoge30nKTtcbiAgICAgIHZhciBiaW5kID0gYmluZGluZ3MubGVuZ3RoID4gMCA/ICdkYXRhLWJpbmQ9XCInICsgdXRpbHMuYWRkU2xhc2hlcyhiaW5kaW5ncy5qb2luKCkpICsgJ1wiJyA6ICcnO1xuICAgICAgaHRtbCArPSAnPGRpdiBjbGFzcz1cInByb3BFZGl0b3IgJyArIChjaGVja2JveGVzID8gJ2NoZWNrYm94ZXMnIDogJycpICsgJ1wiJyArIGJpbmQgKyAnPic7XG5cbiAgICAgIHZhciBtb2RlbE5hbWUyID0gKG1vZGVsICE9PSBudWxsICYmIHR5cGVvZiBtb2RlbC5fbmFtZSAhPSAndW5kZWZpbmVkJyA/IG1vZGVsLl9uYW1lIDogKHR5cGVvZiBwcm9wICE9PSAndW5kZWZpbmVkJyA/ICdbJyArIHByb3AgKyAnXScgOiAnJykpO1xuICAgICAgbW9kZWxOYW1lMiA9ICc8c3BhbiBkYXRhLWJpbmQ9XCJ0ZXh0OiAkcm9vdC51dChcXCd0ZW1wbGF0ZVxcJywgXFwnJyArIHV0aWxzLmFkZFNsYXNoZXMobW9kZWxOYW1lMikgKyAnXFwnKVwiPicgKyBtb2RlbE5hbWUyICsgJzwvc3Bhbj4nO1xuICAgICAgaHRtbCArPSAnPHNwYW4nICsgdGl0bGUgKyAnIGNsYXNzPVwicHJvcExhYmVsXCI+JyArIG1vZGVsTmFtZTIgKyAnPC9zcGFuPic7XG4gICAgICBodG1sICs9ICc8ZGl2IGNsYXNzPVwicHJvcElucHV0ICcgKyAodHlwZW9mIGdsb2JhbFN0eWxlcyAhPSAndW5kZWZpbmVkJyA/ICdsb2NhbCcgOiAnJykgKyAnXCIgZGF0YS1iaW5kPVwiY3NzOiB7IGRlZmF1bHQ6ICcgKyBwcm9wICsgJygpID09PSBudWxsIH1cIj4nO1xuICAgICAgaHRtbCArPSBfcHJvcElucHV0KG1vZGVsLCBwcm9wLCBwcm9wQWNjZXNzb3IsIGVkaXRUeXBlLCB3aWRnZXRzKTtcbiAgICAgIGh0bWwgKz0gJzwvZGl2Pic7XG4gICAgICBpZiAodHlwZW9mIGdsb2JhbFN0eWxlUHJvcCAhPSAndW5kZWZpbmVkJykge1xuICAgICAgICBodG1sICs9ICc8ZGl2IGNsYXNzPVwicHJvcElucHV0IGdsb2JhbFwiIGRhdGEtYmluZD1cImNzczogeyBvdmVycmlkZGVuOiAnICsgcHJvcCArICcoKSAhPT0gbnVsbCB9XCI+JztcbiAgICAgICAgaHRtbCArPSBfcHJvcElucHV0KG1vZGVsLCBwcm9wLCBnbG9iYWxTdHlsZVByb3AsIGVkaXRUeXBlLCB3aWRnZXRzKTtcbiAgICAgICAgaHRtbCArPSAnPC9kaXY+JztcblxuICAgICAgICBpZiAoY2hlY2tib3hlcykge1xuICAgICAgICAgIGh0bWwgKz0gJzxkaXYgY2xhc3M9XCJwcm9wQ2hlY2tcIj48bGFiZWwgZGF0YS1iaW5kPVwidG9vbHRpcHM6IHt9XCI+PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGRhdGEtYmluZD1cImZvY3VzYWJsZTogdHJ1ZSwgY2xpY2s6IGZ1bmN0aW9uKGV2dCwgb2JqKSB7ICRyb290LmxvY2FsR2xvYmFsU3dpdGNoKCcgKyBwcm9wICsgJywgJyArIGdsb2JhbFN0eWxlUHJvcCArICcpOyByZXR1cm4gdHJ1ZTsgfSwgY2hlY2tlZDogJyArIHByb3AgKyAnKCkgIT09IG51bGxcIj4nO1xuICAgICAgICAgIGh0bWwgKz0gJzxzcGFuIGNsYXNzPVwiY2hlY2tib3gtcmVwbGFjZXJcIiBkYXRhLWJpbmQ9XCJjc3M6IHsgY2hlY2tlZDogJyArIHByb3AgKyAnKCkgIT09IG51bGwgfSwgYXR0cjogeyB0aXRsZTogJHJvb3QudChcXCdUaGlzIHN0eWxlIGlzIHNwZWNpZmljIGZvciB0aGlzIGJsb2NrOiBjbGljayBoZXJlIHRvIHJlbW92ZSB0aGUgY3VzdG9tIHN0eWxlIGFuZCByZXZlcnQgdG8gdGhlIHRoZW1lIHZhbHVlXFwnKSB9XCI+PC9zcGFuPic7XG4gICAgICAgICAgaHRtbCArPSAnPC9sYWJlbD48L2Rpdj4nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBodG1sICs9ICc8L2Rpdj4nO1xuICAgIH0gZWxzZSBpZiAobW9kZWwgPT09IG51bGwgfHwgdHlwZW9mIG1vZGVsICE9ICdvYmplY3QnKSB7XG4gICAgICAvLyBUT0RPIHJlbW92ZSBkZWJ1ZyBvdXRwdXRcbiAgICAgIGh0bWwgKz0gJzxkaXYgY2xhc3M9XCJwcm9wRWRpdG9yIHVua25vd25cIj5bQXwnICsgcHJvcCArIFwifFwiICsgdHlwZW9mIG1vZGVsICsgJ108L2Rpdj4nO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUT0RPIHJlbW92ZSBkZWJ1ZyBvdXRwdXRcbiAgICAgIGh0bWwgKz0gJzxkaXYgY2xhc3M9XCJwcm9wRWRpdG9yIHVua25vd25cIj5bQnwnICsgcHJvcCArIFwifFwiICsgdHlwZW9mIG1vZGVsICsgJ108L2Rpdj4nO1xuICAgIH1cblxuXG4gIH1cblxuICBpZiAodHlwZW9mIHByb3AgIT0gJ3VuZGVmaW5lZCcgJiYgISF0cmFja1VzYWdlKSB7XG4gICAgaHRtbCArPSAnPCEtLSAva28gLS0+JztcbiAgICBodG1sICs9ICc8IS0tIGtvIGlmU3ViczogeyBub3Q6IHRydWUsIGRhdGE6ICcgKyBpZlN1YnNQcm9wICsgJywgdGhyZXNob2xkOiAnICsgaWZTdWJzVGhyZXNob2xkICsgJywgZ3V0dGVyOiAwIH0gLS0+JztcbiAgICBodG1sICs9ICc8c3BhbiBjbGFzcz1cImxhYmVsIG5vdHVzZWRcIj4oJyArIHByb3AgKyAnKTwvc3Bhbj4nO1xuICAgIGh0bWwgKz0gJzwhLS0gL2tvIC0tPic7XG4gIH1cblxuICByZXR1cm4gaHRtbDtcbn07XG5cblxudmFyIGNyZWF0ZUJsb2NrRWRpdG9yID0gZnVuY3Rpb24oZGVmcywgd2lkZ2V0cywgdGhlbWVVcGRhdGVyLCB0ZW1wbGF0ZVVybENvbnZlcnRlciwgcm9vdE1vZGVsTmFtZSwgdGVtcGxhdGVOYW1lLCBlZGl0VHlwZSwgdGVtcGxhdGVDcmVhdG9yLCBiYXNlVGhyZXNob2xkLCB0cmFja0dsb2JhbFN0eWxlcywgdHJhY2tVc2FnZSwgZnJvbUxldmVsKSB7XG4gIGlmICh0eXBlb2YgdHJhY2tVc2FnZSA9PSAndW5kZWZpbmVkJykgdHJhY2tVc2FnZSA9IHRydWU7XG4gIHZhciBtb2RlbCA9IG1vZGVsRGVmLmdldERlZihkZWZzLCB0ZW1wbGF0ZU5hbWUpO1xuXG4gIHZhciByb290TW9kZWwgPSBtb2RlbERlZi5nZXREZWYoZGVmcywgcm9vdE1vZGVsTmFtZSk7XG4gIHZhciByb290UHJldmlld0JpbmRpbmdzO1xuICBpZiAodHlwZW9mIHJvb3RNb2RlbC5fcHJldmlld0JpbmRpbmdzICE9ICd1bmRlZmluZWQnICYmIHRlbXBsYXRlTmFtZSAhPSAndGhhZW1lJyAmJiBlZGl0VHlwZSA9PSAnc3R5bGVyJykge1xuICAgIHJvb3RQcmV2aWV3QmluZGluZ3MgPSBlbGFib3JhdGVEZWNsYXJhdGlvbnModW5kZWZpbmVkLCByb290TW9kZWwuX3ByZXZpZXdCaW5kaW5ncywgdGVtcGxhdGVVcmxDb252ZXJ0ZXIsIG1vZGVsRGVmLmdldEJpbmRWYWx1ZS5iaW5kKHVuZGVmaW5lZCwgZGVmcywgdGhlbWVVcGRhdGVyLCByb290TW9kZWxOYW1lLCByb290TW9kZWxOYW1lLCAnJykpO1xuICB9XG5cbiAgdmFyIGdsb2JhbFN0eWxlcyA9IHR5cGVvZiB0cmFja0dsb2JhbFN0eWxlcyAhPSAndW5kZWZpbmVkJyAmJiB0cmFja0dsb2JhbFN0eWxlcyA/IGRlZnNbdGVtcGxhdGVOYW1lXS5fZ2xvYmFsU3R5bGVzIDogdW5kZWZpbmVkO1xuICB2YXIgZ2xvYmFsU3R5bGVQcm9wID0gdHlwZW9mIHRyYWNrR2xvYmFsU3R5bGVzICE9ICd1bmRlZmluZWQnICYmIHRyYWNrR2xvYmFsU3R5bGVzID8gZGVmc1t0ZW1wbGF0ZU5hbWVdLl9nbG9iYWxTdHlsZSA6IHVuZGVmaW5lZDtcblxuXG4gIHZhciB0aGVtZU1vZGVsO1xuICBpZiAodHlwZW9mIGdsb2JhbFN0eWxlUHJvcCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbW0gPSBtb2RlbERlZi5nZXREZWYoZGVmcywgJ3RoZW1lJyk7XG4gICAgLy8gVE9ETyByZW1vdmUgZGVwcmVjYXRlZCAkdGhlbWVcbiAgICB0aGVtZU1vZGVsID0gbW1bZ2xvYmFsU3R5bGVQcm9wLnJlcGxhY2UoL14oXFwkdGhlbWV8X3RoZW1lXylcXC4vLCAnJyldO1xuICB9XG5cblxuICB2YXIgd2l0aEJpbmRpbmdQcm92aWRlciA9IG1vZGVsRGVmLmdldEJpbmRWYWx1ZS5iaW5kKHVuZGVmaW5lZCwgZGVmcywgdGhlbWVVcGRhdGVyLCByb290TW9kZWxOYW1lLCB0ZW1wbGF0ZU5hbWUpO1xuICB3aXRoQmluZGluZ1Byb3ZpZGVyLl90ZW1wbGF0ZU5hbWUgPSB0ZW1wbGF0ZU5hbWU7XG5cbiAgdmFyIGh0bWwgPSAnPGRpdiBjbGFzcz1cImVkaXRvclwiPic7XG4gIGh0bWwgKz0gXCI8ZGl2IGNsYXNzPVxcXCJibG9ja1R5cGVcIiArICh0eXBlb2YgZ2xvYmFsU3R5bGVzICE9ICd1bmRlZmluZWQnID8gXCIgd2l0aGRlZmF1bHRzXCIgOiBcIlwiKSArIFwiXFxcIj5cIiArIG1vZGVsLnR5cGUgKyBcIjwvZGl2PlwiO1xuXG4gIHZhciBlZGl0b3JDb250ZW50ID0gX3Byb3BFZGl0b3Iod2l0aEJpbmRpbmdQcm92aWRlciwgd2lkZ2V0cywgdGVtcGxhdGVVcmxDb252ZXJ0ZXIsIG1vZGVsLCB0aGVtZU1vZGVsLCBcIlwiLCB1bmRlZmluZWQsIGVkaXRUeXBlLCBmcm9tTGV2ZWwsIGJhc2VUaHJlc2hvbGQsIGdsb2JhbFN0eWxlcywgZ2xvYmFsU3R5bGVQcm9wLCB0cmFja1VzYWdlLCByb290UHJldmlld0JpbmRpbmdzKTtcbiAgaWYgKGVkaXRvckNvbnRlbnQubGVuZ3RoID4gMCkge1xuICAgIGh0bWwgKz0gZWRpdG9yQ29udGVudDtcbiAgfVxuXG4gIGh0bWwgKz0gJzwvZGl2Pic7XG5cbiAgdGVtcGxhdGVDcmVhdG9yKGh0bWwsIHRlbXBsYXRlTmFtZSwgZWRpdFR5cGUpO1xufTtcblxudmFyIGNyZWF0ZUJsb2NrRWRpdG9ycyA9IGZ1bmN0aW9uKGRlZnMsIHdpZGdldHMsIHRoZW1lVXBkYXRlciwgdGVtcGxhdGVVcmxDb252ZXJ0ZXIsIHJvb3RNb2RlbE5hbWUsIHRlbXBsYXRlTmFtZSwgdGVtcGxhdGVDcmVhdG9yLCBiYXNlVGhyZXNob2xkKSB7XG4gIGNyZWF0ZUJsb2NrRWRpdG9yKGRlZnMsIHdpZGdldHMsIHRoZW1lVXBkYXRlciwgdGVtcGxhdGVVcmxDb252ZXJ0ZXIsIHJvb3RNb2RlbE5hbWUsIHRlbXBsYXRlTmFtZSwgJ2VkaXQnLCB0ZW1wbGF0ZUNyZWF0b3IsIGJhc2VUaHJlc2hvbGQpO1xuICBjcmVhdGVCbG9ja0VkaXRvcihkZWZzLCB3aWRnZXRzLCB0aGVtZVVwZGF0ZXIsIHRlbXBsYXRlVXJsQ29udmVydGVyLCByb290TW9kZWxOYW1lLCB0ZW1wbGF0ZU5hbWUsICdzdHlsZXInLCB0ZW1wbGF0ZUNyZWF0b3IsIGJhc2VUaHJlc2hvbGQsIHRydWUpO1xufTtcblxudmFyIGdlbmVyYXRlRWRpdG9ycyA9IGZ1bmN0aW9uKHRlbXBsYXRlRGVmLCB3aWRnZXRzLCB0ZW1wbGF0ZVVybENvbnZlcnRlciwgdGVtcGxhdGVDcmVhdG9yLCBiYXNlVGhyZXNob2xkKSB7XG4gIHZhciBkZWZzID0gdGVtcGxhdGVEZWYuX2RlZnM7XG4gIHZhciB0ZW1wbGF0ZU5hbWUgPSB0ZW1wbGF0ZURlZi50ZW1wbGF0ZU5hbWU7XG4gIHZhciBibG9ja3MgPSB0ZW1wbGF0ZURlZi5fYmxvY2tzO1xuICB2YXIgaWR4O1xuICB2YXIgYmxvY2tEZWZzID0gW107XG4gIGZvciAoaWR4ID0gMDsgaWR4IDwgYmxvY2tzLmxlbmd0aDsgaWR4KyspIHtcbiAgICBpZiAodHlwZW9mIGJsb2Nrc1tpZHhdLmNvbnRhaW5lciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGJsb2NrRGVmcy5wdXNoKG1vZGVsRGVmLmdlbmVyYXRlTW9kZWwoZGVmcywgYmxvY2tzW2lkeF0uYmxvY2spKTtcbiAgICB9XG4gICAgY3JlYXRlQmxvY2tFZGl0b3JzKGRlZnMsIHdpZGdldHMsIHVuZGVmaW5lZCwgdGVtcGxhdGVVcmxDb252ZXJ0ZXIsIGJsb2Nrc1tpZHhdLnJvb3QsIGJsb2Nrc1tpZHhdLmJsb2NrLCB0ZW1wbGF0ZUNyZWF0b3IsIGJhc2VUaHJlc2hvbGQpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBkZWZzWyd0aGVtZSddICE9ICd1bmRlZmluZWQnKSBjcmVhdGVCbG9ja0VkaXRvcihkZWZzLCB3aWRnZXRzLCB1bmRlZmluZWQsIHRlbXBsYXRlVXJsQ29udmVydGVyLCB0ZW1wbGF0ZU5hbWUsICd0aGVtZScsICdzdHlsZXInLCB0ZW1wbGF0ZUNyZWF0b3IsIHVuZGVmaW5lZCwgZmFsc2UsIGZhbHNlLCAtMSk7XG4gIHJldHVybiBibG9ja0RlZnM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdlbmVyYXRlRWRpdG9ycztcbiIsIlwidXNlIHN0cmljdFwiO1xuLyogZ2xvYmFsIGdsb2JhbDogZmFsc2UgKi9cblxudmFyIG1vZGVsRGVmID0gcmVxdWlyZShcIi4vbW9kZWwuanNcIik7XG5cbnZhciB3cmFwcGVkUmVzdWx0TW9kZWwgPSBmdW5jdGlvbih0ZW1wbGF0ZURlZikge1xuICB2YXIgZGVmcyA9IHRlbXBsYXRlRGVmLl9kZWZzO1xuICB2YXIgdGVtcGxhdGVOYW1lID0gdGVtcGxhdGVEZWYudGVtcGxhdGVOYW1lO1xuICB2YXIgZmluYWxNb2RlbENvbnRlbnREZWYgPSBtb2RlbERlZi5nZXREZWYoZGVmcywgdGVtcGxhdGVOYW1lKTtcblxuICB2YXIgZmluYWxNb2RlbENvbnRlbnQgPSBtb2RlbERlZi5nZW5lcmF0ZVJlc3VsdE1vZGVsKHRlbXBsYXRlRGVmKTtcblxuICB2YXIgd3JhcHBlciA9IHJlcXVpcmUoXCIuL3dyYXBwZXIuanNcIik7XG4gIHZhciByZXMgPSB3cmFwcGVyKGZpbmFsTW9kZWxDb250ZW50LCBmaW5hbE1vZGVsQ29udGVudERlZiwgZGVmcyk7XG5cbiAgcmV0dXJuIHJlcztcbn07XG5cbi8vIHJlcXVpcmVzIG9ubHkgd2hlbiBpbXBvcnRlZFxudmFyIHRyYW5zbGF0ZVRlbXBsYXRlID0gZnVuY3Rpb24oKSB7XG4gIHZhciB0dCA9IHJlcXVpcmUoJy4vcGFyc2VyLmpzJyk7XG4gIHJldHVybiB0dC5hcHBseSh0dCwgYXJndW1lbnRzKTtcbn07XG5cbi8vIHJlcXVpcmVzIG9ubHkgd2hlbiBpbXBvcnRlZFxudmFyIGdlbmVyYXRlRWRpdG9ycyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZ2UgPSByZXF1aXJlKCcuL2VkaXRvci5qcycpO1xuICByZXR1cm4gZ2UuYXBwbHkoZ2UsIGFyZ3VtZW50cyk7XG59O1xuXG52YXIgY2hlY2tNb2RlbCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY20gPSByZXF1aXJlKCcuL2NoZWNrbW9kZWwuanMnKTtcbiAgcmV0dXJuIGNtLmFwcGx5KGNtLCBhcmd1bWVudHMpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHRyYW5zbGF0ZVRlbXBsYXRlOiB0cmFuc2xhdGVUZW1wbGF0ZSxcbiAgd3JhcHBlZFJlc3VsdE1vZGVsOiB3cmFwcGVkUmVzdWx0TW9kZWwsXG4gIGdlbmVyYXRlUmVzdWx0TW9kZWw6IG1vZGVsRGVmLmdlbmVyYXRlUmVzdWx0TW9kZWwsXG4gIGdlbmVyYXRlRWRpdG9yczogZ2VuZXJhdGVFZGl0b3JzLFxuICBjaGVja01vZGVsOiBjaGVja01vZGVsXG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgb2JqRXh0ZW5kID0gcmVxdWlyZShcIi4vZG9tdXRpbHMuanNcIikub2JqRXh0ZW5kO1xudmFyIGNvbnNvbGUgPSByZXF1aXJlKFwiY29uc29sZVwiKTtcblxudmFyIF92YWx1ZVNldCA9IGZ1bmN0aW9uKGRlZnMsIG1vZGVsLCBwcm9wLCB2YWx1ZSkge1xuICB2YXIgZG90UG9zID0gcHJvcC5pbmRleE9mKCcuJyk7XG4gIGlmIChkb3RQb3MgPT0gLTEpIHtcbiAgICBpZiAodHlwZW9mIG1vZGVsW3Byb3BdID09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIlVuZGVmaW5lZCBwcm9wIFwiICsgcHJvcCArIFwiIHdoaWxlIHNldHRpbmcgdmFsdWUgXCIgKyB2YWx1ZSArIFwiIGluIG1vZGVsLl92YWx1ZVNldFwiKTtcbiAgICB9IGVsc2UgaWYgKG1vZGVsW3Byb3BdID09PSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZS5wdXNoID09ICd1bmRlZmluZWQnKSBjb25zb2xlLmxvZyhcIm51bGxwcm9wb2JqZWN0dmFsdWVcIiwgcHJvcCwgdmFsdWUpO1xuICAgICAgbW9kZWxbcHJvcF0gPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtb2RlbFtwcm9wXSA9PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kZWxbcHJvcF0ucHVzaCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgdmFsdWVzO1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIHZhbHVlc1N0cmluZyA9IHZhbHVlLm1hdGNoKC9eXFxbKC4qKVxcXSQvKTtcbiAgICAgICAgaWYgKHZhbHVlc1N0cmluZyAhPT0gbnVsbCkge1xuICAgICAgICAgIHZhbHVlcyA9IHZhbHVlc1N0cmluZ1sxXS5zcGxpdCgnLCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IFwiVW5leHBlY3RlZCBkZWZhdWx0IHZhbHVlIGZvciBhcnJheSBwcm9wZXJ0eSBcIiArIHByb3AgKyBcIjogXCIgKyB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWx1ZS5wdXNoICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YWx1ZXMgPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IFwiVW5leHBlY3RlZCBkZWZhdWx0IHZhbHVlIGZvciBhcnJheSBwcm9wZXJ0eSBcIiArIHByb3AgKyBcIjogXCIgKyB2YWx1ZSArIFwiIHR5cGVvZiBcIiArICh0eXBlb2YgdmFsdWUpO1xuICAgICAgfVxuICAgICAgdmFyIHJlcyA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHZhbHVlc1tpXS5zdWJzdHIoMCwgMSkgPT0gJ0AnKSB7XG4gICAgICAgICAgLy8gVE9ETyByZW1vdmUgdGhpcyBsZWdhY3kgc3VwcG9ydCAoQCksIHNvIHdlIGNhbiByZW1vdmUgXCJkZWZzXCIgZnJvbSB0aGlzIGZ1bmN0aW9uLCB0b28uXG4gICAgICAgICAgcmVzLnB1c2goX2dlbmVyYXRlTW9kZWwoZGVmcywgdmFsdWVzW2ldLnN1YnN0cigxKSkpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlc1tpXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgcmVzLnB1c2godmFsdWVzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbW9kZWxbcHJvcF0gPSByZXM7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbW9kZWxbcHJvcF0gPT0gJ3N0cmluZycgfHwgdHlwZW9mIG1vZGVsW3Byb3BdID09ICdib29sZWFuJykge1xuICAgICAgLy8gVE9ETyBkb2VzIHRoaXMgc3RpbGwgaGFwcGVuPyBEZWJ1Zy90ZXN0IG1lLlxuICAgICAgbW9kZWxbcHJvcF0gPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtb2RlbFtwcm9wXSA9PSAnb2JqZWN0JyAmJiBtb2RlbFtwcm9wXSAhPT0gbnVsbCAmJiB0eXBlb2YgbW9kZWxbcHJvcF0uX3dpZGdldCAhPSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCkgY29uc29sZS5sb2coXCJvYmplY3R2YWx1ZVwiLCBwcm9wLCBtb2RlbFtwcm9wXS5fd2lkZ2V0LCB2YWx1ZSk7XG4gICAgICAvLyBfZGF0YSBpcyBkZWZpbmVkIGZvciBwcmltaXRpdmUgdHlwZXNcbiAgICAgIG1vZGVsW3Byb3BdID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKFwic2V0dGluZ1wiLCB0eXBlb2YgbW9kZWxbcHJvcF0sIG1vZGVsW3Byb3BdLCBwcm9wLCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBwcm9wTmFtZSA9IHByb3Auc3Vic3RyKDAsIGRvdFBvcyk7XG4gICAgX3ZhbHVlU2V0KGRlZnMsIG1vZGVsW3Byb3BOYW1lXSwgcHJvcC5zdWJzdHIoZG90UG9zICsgMSksIHZhbHVlKTtcbiAgfVxufTtcblxudmFyIF9tb2RlbENyZWF0ZU9yVXBkYXRlQmxvY2tEZWYgPSBmdW5jdGlvbihkZWZzLCB0ZW1wbGF0ZU5hbWUsIHByb3BlcnRpZXMsIG5hbWVkUHJvcGVydGllcykge1xuICBpZiAodHlwZW9mIGRlZnNbdGVtcGxhdGVOYW1lXSAhPT0gJ3VuZGVmaW5lZCcgJiYgZGVmc1t0ZW1wbGF0ZU5hbWVdLl9pbml0aWFsaXplZCAmJiAhZGVmc1t0ZW1wbGF0ZU5hbWVdLl93cml0ZWFibGUpIHtcbiAgICBjb25zb2xlLmxvZyhcIl9tb2RlbENyZWF0ZU9yVXBkYXRlQmxvY2tEZWZcIiwgZGVmcywgdGVtcGxhdGVOYW1lLCBwcm9wZXJ0aWVzLCBuYW1lZFByb3BlcnRpZXMpO1xuICAgIHRocm93IFwiVHJ5aW5nIHRvIGFsdGVyIG5vbiB3cml0ZWFibGUgbW9kZWw6IFwiICsgdGVtcGxhdGVOYW1lICsgXCIgLyBcIiArIHByb3BlcnRpZXM7XG4gIH1cblxuICBpZiAodHlwZW9mIGRlZnNbdGVtcGxhdGVOYW1lXSA9PSAndW5kZWZpbmVkJykge1xuICAgIGRlZnNbdGVtcGxhdGVOYW1lXSA9IHtcbiAgICAgIF93cml0ZWFibGU6IHRydWVcbiAgICB9O1xuICAgIC8vIEZhbGxiYWNrIGNvbXB1dGF0aW9uIG9mIFwiY2F0ZWdvcnlcIiBkZXBlbmRpbmcgb24gdGhlIHByb3BlcnR5IG5hbWVcbiAgICAvLyBUT0RPIHJlbW92ZSBtZTogdGhpcyBzaG91bGQgYmUgYWx3YXlzIGRlZmluZWQgaW4gdGhlIHRlbXBsYXRlIGRlZmluaXRpb24sIG5vIG5lZWQgdG8gaGFyZGNvZGUgdGhpcyBzdHVmZi5cbiAgICBpZiAodHlwZW9mIG5hbWVkUHJvcGVydGllcyA9PSAndW5kZWZpbmVkJykgbmFtZWRQcm9wZXJ0aWVzID0ge307XG4gICAgaWYgKHR5cGVvZiBuYW1lZFByb3BlcnRpZXMuY2F0ZWdvcnkgPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRlZnNbdGVtcGxhdGVOYW1lXS5fY2F0ZWdvcnkgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmICh0ZW1wbGF0ZU5hbWUubWF0Y2goLyhedHwuVCloZW1lJC8pIHx8IHRlbXBsYXRlTmFtZS5tYXRjaCgvKF5zfC5TKXR5bGUkLykgfHwgdGVtcGxhdGVOYW1lLm1hdGNoKC8oXmN8LkMpb2xvciQvKSB8fCB0ZW1wbGF0ZU5hbWUubWF0Y2goLyhecnwuUilhZGl1cyQvKSkge1xuICAgICAgICBuYW1lZFByb3BlcnRpZXMuY2F0ZWdvcnkgPSAnc3R5bGUnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmFtZWRQcm9wZXJ0aWVzLmNhdGVnb3J5ID0gJ2NvbnRlbnQnO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG5cbiAgaWYgKHR5cGVvZiBuYW1lZFByb3BlcnRpZXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gVE9ETyBjaGVjayBpZiB0aGlzIGlzIG5lZWRlZCBiZWZvcmUgdGhlIGVuZGluZyBuYW1lZFByb3BlcnR5IFwibG9vcFwiIG9yIG5vdC5cbiAgICBpZiAodHlwZW9mIG5hbWVkUHJvcGVydGllcy5uYW1lICE9ICd1bmRlZmluZWQnKSBkZWZzW3RlbXBsYXRlTmFtZV0uX25hbWUgPSBuYW1lZFByb3BlcnRpZXMubmFtZTtcblxuICAgIGlmICh0eXBlb2YgbmFtZWRQcm9wZXJ0aWVzLnRoZW1lT3ZlcnJpZGUgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGRlZnNbdGVtcGxhdGVOYW1lXS5fdGhlbWVPdmVycmlkZSA9IG5hbWVkUHJvcGVydGllcy50aGVtZU92ZXJyaWRlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG5hbWVkUHJvcGVydGllcy5nbG9iYWxTdHlsZSAhPSAndW5kZWZpbmVkJykge1xuICAgICAgZGVmc1t0ZW1wbGF0ZU5hbWVdLl9nbG9iYWxTdHlsZSA9IG5hbWVkUHJvcGVydGllcy5nbG9iYWxTdHlsZTtcbiAgICAgIC8vIFRPRE8gcmVtb3ZlIGRlcHJlY2F0ZWQgJHRoZW1lXG4gICAgICB2YXIgZ2xvYmFsU3R5bGVTdWIgPSBuYW1lZFByb3BlcnRpZXMuZ2xvYmFsU3R5bGUucmVwbGFjZSgvXihcXCR0aGVtZXxfdGhlbWVfKVxcLi8sICcnKTtcbiAgICAgIHZhciBwID0gZ2xvYmFsU3R5bGVTdWIuaW5kZXhPZignLicpO1xuICAgICAgdmFyIGdzID0gcCAhPSAtMSA/IGdsb2JhbFN0eWxlU3ViLnN1YnN0cigwLCBwKSA6IGdsb2JhbFN0eWxlU3ViO1xuICAgICAgX21vZGVsQ3JlYXRlT3JVcGRhdGVCbG9ja0RlZihkZWZzLCAndGhlbWUnLCBncyk7XG5cbiAgICAgIGlmICh0eXBlb2YgZGVmc1t0ZW1wbGF0ZU5hbWVdLl90aGVtZU92ZXJyaWRlID09PSAndW5kZWZpbmVkJyB8fCAhIWRlZnNbdGVtcGxhdGVOYW1lXS5fdGhlbWVPdmVycmlkZSkge1xuICAgICAgICBfbW9kZWxDcmVhdGVPclVwZGF0ZUJsb2NrRGVmKGRlZnMsIHRlbXBsYXRlTmFtZSwgXCJjdXN0b21TdHlsZT1mYWxzZVwiKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiBuYW1lZFByb3BlcnRpZXMuY29udGV4dE5hbWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBkZWZzW3RlbXBsYXRlTmFtZV0uX2NvbnRleHQgPSBuYW1lZFByb3BlcnRpZXMuY29udGV4dE5hbWU7XG4gICAgICAvLyBUT0RPIGlzIGl0IGNvcnJlY3QgdG8gZmFsbGJhY2sgdG8gXCJib2R5VGhlbWVcIiBmb3IgYmxvY2tzIG5vdCBkZWNsYXJpbmcgYSBkZWZhdWx0IHRoZW1lP1xuICAgICAgLy8gTWF5YmUgaXQgd291bGQgYmUgYmV0dGVyIHRvIHNpbXBseSBkZWNsYXJlIGl0IGFzIG1hbmRhdG9yeSBidXQgbGVhdmUgdGhlIGRlZmF1bHQgY29uZmlndXRhdGlvblxuICAgICAgLy8gdG8gdGhlIHRlbXBsYXRlIGRlZmluaXRpb24uXG4gICAgICBpZiAobmFtZWRQcm9wZXJ0aWVzLmNvbnRleHROYW1lID09ICdibG9jaycgJiYgdHlwZW9mIGRlZnNbdGVtcGxhdGVOYW1lXS5fZ2xvYmFsU3R5bGUgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZGVmc1t0ZW1wbGF0ZU5hbWVdLl9nbG9iYWxTdHlsZSA9ICdfdGhlbWVfLmJvZHlUaGVtZSc7XG4gICAgICAgIF9tb2RlbENyZWF0ZU9yVXBkYXRlQmxvY2tEZWYoZGVmcywgJ3RoZW1lJywgJ2JvZHlUaGVtZScpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgZGVmc1t0ZW1wbGF0ZU5hbWVdLl90aGVtZU92ZXJyaWRlID09ICd1bmRlZmluZWQnIHx8IGRlZnNbdGVtcGxhdGVOYW1lXS5fdGhlbWVPdmVycmlkZSkge1xuICAgICAgICAgIF9tb2RlbENyZWF0ZU9yVXBkYXRlQmxvY2tEZWYoZGVmcywgdGVtcGxhdGVOYW1lLCBcImN1c3RvbVN0eWxlPWZhbHNlXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbmFtZWRQcm9wZXJ0aWVzLmV4dGVuZCAhPSAndW5kZWZpbmVkJykgZGVmc1t0ZW1wbGF0ZU5hbWVdLnR5cGUgPSBuYW1lZFByb3BlcnRpZXMuZXh0ZW5kO1xuICB9XG5cbiAgZm9yICh2YXIgbnAgaW4gbmFtZWRQcm9wZXJ0aWVzKSBpZiAobmFtZWRQcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KG5wKSAmJiB0eXBlb2YgbmFtZWRQcm9wZXJ0aWVzW25wXSAhPT0gJ3VuZGVmaW5lZCcgJiYgWyduYW1lJywgJ2V4dGVuZCcsICdjb250ZXh0TmFtZScsICdnbG9iYWxTdHlsZScsJ3RoZW1lT3ZlcnJpZGUnXS5pbmRleE9mKG5wKSA9PSAtMSkge1xuICAgIGRlZnNbdGVtcGxhdGVOYW1lXVsnXycrbnBdID0gbmFtZWRQcm9wZXJ0aWVzW25wXTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJvcGVydGllcyAhPSAndW5kZWZpbmVkJyAmJiBwcm9wZXJ0aWVzLmxlbmd0aCA+IDApIHtcbiAgICBkZWZzW3RlbXBsYXRlTmFtZV0uX3Byb3BzID0gdHlwZW9mIGRlZnNbdGVtcGxhdGVOYW1lXS5fcHJvcHMgIT0gJ3VuZGVmaW5lZCcgJiYgZGVmc1t0ZW1wbGF0ZU5hbWVdLl9wcm9wcy5sZW5ndGggPiAwID8gZGVmc1t0ZW1wbGF0ZU5hbWVdLl9wcm9wcyArIFwiIFwiICsgcHJvcGVydGllcyA6IHByb3BlcnRpZXM7XG4gIH1cbn07XG5cbi8vIHJlbW92ZSB0aGUgZmlyc3QgXCJzZXF1ZW5jZVwiIGluIGEgY2FtZWxjYXNlZCB3b3JkIChlLmc6IG15Q2FtZWxDYXNlID0+IGNhbWVsQ2FzZSkuXG52YXIgX3JlbW92ZVByZWZpeCA9IGZ1bmN0aW9uKHN0cikge1xuICB2YXIgcmVzID0gc3RyLm1hdGNoKC9eW15BLVpdKyhbQS1aXSkoLiopJC8pO1xuICByZXR1cm4gcmVzICE9PSBudWxsID8gcmVzWzFdLnRvTG93ZXJDYXNlKCkgKyByZXNbMl0gOiBudWxsO1xufTtcblxuLy8gVE9ETyBkZWZzIGlzIG5lZWRlZCBvbmx5IGJlY2F1c2UgX3ZhbHVlU2V0IG5lZWRzIGl0Li4gd2Ugc2hvdWxkIHJlbW92ZSBpdCBkb3duc3RyZWFtLlxudmFyIF9nZW5lcmF0ZU1vZGVsRnJvbURlZiA9IGZ1bmN0aW9uKG1vZGVsRGVmLCBkZWZzKSB7XG4gIHZhciByZXMgPSB7fTtcblxuICBmb3IgKHZhciBwcm9wIGluIG1vZGVsRGVmKVxuICAgIGlmICghcHJvcC5tYXRjaCgvXl8uKi8pICYmIG1vZGVsRGVmLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICB2YXIgdmFsdWUgPSBtb2RlbERlZltwcm9wXTtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlLl9jb21wbGV4ICE9ICd1bmRlZmluZWQnICYmIHZhbHVlLl9jb21wbGV4KSB7XG4gICAgICAgIHJlc1twcm9wXSA9IF9nZW5lcmF0ZU1vZGVsRnJvbURlZih2YWx1ZSwgZGVmcyk7XG4gICAgICB9IGVsc2UgaWYgKHByb3AgPT0gJ3R5cGUnKSB7XG4gICAgICAgIHJlc1twcm9wXSA9IHZhbHVlO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gbW9zdCB0aW1lcyB0aGlzIHdpbGwgYmUgb3ZlcndyaXR0ZW4gYnkgX3ZhbHVlU2V0XG4gICAgICAgIHJlc1twcm9wXSA9IG51bGw7XG4gICAgICAgIC8vIGZvciBjdXN0b21TdHlsZSB0aGlzIGlzIHNldCB0byBudWxsLlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlVuZXhwZWN0ZWQgbW9kZWwgZGVmXCIsIHByb3AsIHZhbHVlLCBtb2RlbERlZik7XG4gICAgICAgIHRocm93IFwiVW5leHBlY3RlZCBtb2RlbCBkZWYgW1wiICsgcHJvcCArIFwiXT1cIiArIHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICBpZiAodHlwZW9mIG1vZGVsRGVmLl9kZWZhdWx0VmFsdWVzICE9ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIGRlZmF1bHRzID0gbW9kZWxEZWYuX2RlZmF1bHRWYWx1ZXM7XG4gICAgZm9yICh2YXIgcHJvcDIgaW4gZGVmYXVsdHMpXG4gICAgICBpZiAoZGVmYXVsdHMuaGFzT3duUHJvcGVydHkocHJvcDIpKSB7XG4gICAgICAgIF92YWx1ZVNldChkZWZzLCByZXMsIHByb3AyLCBkZWZhdWx0c1twcm9wMl0pO1xuICAgICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG5cbnZhciBfZ2VuZXJhdGVNb2RlbCA9IGZ1bmN0aW9uKGRlZnMsIG5hbWUpIHtcbiAgdmFyIG1vZGVsRGVmID0gX2dldE1vZGVsRGVmKGRlZnMsIG5hbWUsIGZhbHNlLCB0cnVlKTtcbiAgcmV0dXJuIF9nZW5lcmF0ZU1vZGVsRnJvbURlZihtb2RlbERlZiwgZGVmcyk7XG59O1xuXG52YXIgX2dldERlZiA9IGZ1bmN0aW9uKGRlZnMsIG5hbWUpIHtcbiAgcmV0dXJuIF9nZXRNb2RlbERlZihkZWZzLCBuYW1lLCBmYWxzZSwgdHJ1ZSk7XG59O1xuXG52YXIgX2dldE1vZGVsRGVmID0gZnVuY3Rpb24oZGVmcywgbmFtZSwgcmV0dXJuQ2xvbmUsIHJlYWRvbmx5KSB7XG4gIC8vIGxvb2t1cCBcIm5hbWVcIiBpbiB0aGUgdGVtcGxhdGUgZGVmaW5pdGlvblxuICBpZiAodHlwZW9mIGRlZnNbbmFtZV0gPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBpZiB0aGUgbmFtZSBoYXMgYSBzcGFjZSB0aGVuIHJldHVybnMuXG4gICAgaWYgKG5hbWUuaW5kZXhPZignICcpICE9IC0xKSByZXR1cm4gbnVsbDtcbiAgICAvLyBvdGhlcndpc2UgdHJ5IGxvb2tpbmcgdXAgdXNpbmcgYSBkZXByZWZpeGVkIG5hbWUuXG4gICAgdmFyIHJlcyA9IF9yZW1vdmVQcmVmaXgobmFtZSk7XG4gICAgaWYgKHJlcyAhPT0gbnVsbCkge1xuICAgICAgLy8gVE9ETyB0aGUgZGVwcmVmaXhpbmcgaXMgcG93ZXJmdWwsIGJ1dCBtYXliZSBub3QgcmVhbGx5IG5lZWRlZC5cbiAgICAgIHJldHVybiBfZ2V0TW9kZWxEZWYoZGVmcywgcmVzLCByZXR1cm5DbG9uZSwgcmVhZG9ubHkpO1xuICAgIH1cbiAgICAvLyBub3QgYSBwcmVmaXhlZCBuYW1lXG4gICAgLy8gVE9ETyBzaG91bGQgd2UgcmFpc2UgYW4gZXJyb3I/XG4gICAgcmV0dXJuIG51bGw7XG4gIH0gZWxzZSB7XG4gICAgLy8gd2hlbiB0aGUgbmFtZSBpcyBhbHJlYWR5IGRlZmluZWQuLi5cbiAgICB2YXIgZGVmT2JqID0gZGVmc1tuYW1lXTtcbiAgICBpZiAodHlwZW9mIGRlZk9iaiAhPSAnb2JqZWN0JykgdGhyb3cgXCJCbG9jayBkZWZpbml0aW9uIG11c3QgYmUgYW4gb2JqZWN0OiBmb3VuZCBcIiArIGRlZk9iaiArIFwiIGZvciBcIiArIG5hbWU7XG5cbiAgICBpZiAodHlwZW9mIGRlZk9iai5faW5pdGlhbGl6ZWQgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFBvcHVsYXRlIFwidHlwZVwiIGRlcGVuZGluZyBvbiBuYW1lXG4gICAgICBpZiAodHlwZW9mIGRlZk9iai50eXBlID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmIChuYW1lLmluZGV4T2YoJyAnKSA9PSAtMSkge1xuICAgICAgICAgIGRlZk9iai50eXBlID0gbmFtZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWZPYmoudHlwZSA9IG5hbWUuc3Vic3RyKG5hbWUuaW5kZXhPZignICcpICsgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSWYgaXQgaXMgbm90IGEgXCJkYXRhXCIgdHlwZSB0aGVuIGxldCdzIGRlYWwgd2l0aCBpbmhlcml0YW5jZVxuICAgICAgaWYgKGRlZk9iai50eXBlICE9IG5hbWUgJiYgdHlwZW9mIGRlZk9iai5fd2lkZ2V0ID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciB0eXBlRGVmID0gX2dldE1vZGVsRGVmKGRlZnMsIGRlZk9iai50eXBlLCB0cnVlKTtcbiAgICAgICAgdmFyIGV4dGVuZGVkID0gb2JqRXh0ZW5kKHR5cGVEZWYsIGRlZk9iaik7XG4gICAgICAgIGRlZk9iaiA9IGV4dGVuZGVkO1xuICAgICAgICBkZWZzW25hbWVdID0gZGVmT2JqO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZGVmT2JqLl93aWRnZXQgPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRlZk9iai5fcHJvcHMgPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRlZk9iai5fY29tcGxleCA9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAvLyBUT0RPIGhlcmUgSSB0cmllZCB0byBkZWFsIHdpdGggaW5oZXJpdGFuY2UgZm9yIGV2ZXJ5IG9iamVjdCB3aXRob3V0IGEgXCJ0eXBlXCIgYnkgdXNpbmcgYSBzaW1wbGUgZGVwcmVmaXguXG4gICAgICAgIC8vIGJ1dCB0aGlzIGJyZWFrIG9uIHRoZW1lIGNvbnRhaW5pbmcgXCJwYWdlVGhlbWVcIiB0aGF0IHdvdWxkIGluaGVyaXQgZnJvbSBpcyBwYXJlbnQuIChjcmVhdGluZyBhIGxvb3ApXG4gICAgICAgIC8qXG4gICAgICAgIHZhciBzdXBlclR5cGUgPSBfcmVtb3ZlUHJlZml4KGRlZk9iai50eXBlKTtcbiAgICAgICAgaWYgKHN1cGVyVHlwZSAhPT0gbnVsbCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiRXh0ZW5kaW5nXCIsIHR5cGVEZWYsIG5hbWUsIHN1cGVyVHlwZSwgZGVmT2JqLnR5cGUpO1xuICAgICAgICAgIHZhciB0eXBlRGVmID0gX2dldE1vZGVsRGVmKGRlZnMsIHN1cGVyVHlwZSwgdHJ1ZSk7XG4gICAgICAgICAgXG4gICAgICAgICAgdmFyIGV4dGVuZGVkID0galF1ZXJ5LmV4dGVuZCh0cnVlLCB0eXBlRGVmLCBkZWZPYmopO1xuICAgICAgICAgIGRlZk9iaiA9IGV4dGVuZGVkO1xuICAgICAgICAgIGRlZnNbbmFtZV0gPSBkZWZPYmo7XG4gICAgICAgIH1cbiAgICAgICAgKi9cbiAgICAgIH1cbiAgICAgIGRlZk9iai5fd3JpdGVhYmxlID0gdHJ1ZTtcbiAgICAgIGRlZk9iai5faW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZGVmT2JqLl9wcm9wcyAhPSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIGRlZiA9IGRlZk9iai5fcHJvcHM7XG4gICAgICBkZWYgPSBkZWYuc3BsaXQoXCIgXCIpO1xuXG4gICAgICBpZiAoZGVmLmxlbmd0aCA+IDAgJiYgdHlwZW9mIGRlZk9iai5fd3JpdGVhYmxlID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJBbHRlcmluZyBhIG5vbiB3cml0YWJsZSBvYmplY3QgXCIsIG5hbWUsIGRlZiwgZGVmT2JqKTtcbiAgICAgICAgdGhyb3cgXCJBbHRlcmluZyBhIG5vbiB3cml0YWJsZSBvYmplY3Q6IFwiICsgbmFtZSArIFwiIGRlZjogXCIgKyBkZWY7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZGVmT2JqLl9wcm9jZXNzZWREZWZzID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGRlZk9iai5fcHJvY2Vzc2VkRGVmcyA9IHt9O1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGRlZk9iai5fZ2xvYmFsU3R5bGVzID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGRlZk9iai5fZ2xvYmFsU3R5bGVzID0ge307XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZGVmT2JqLl9kZWZhdWx0VmFsdWVzID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGRlZk9iai5fZGVmYXVsdFZhbHVlcyA9IHt9O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlZi5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcHJvcCA9IGRlZltpXTtcbiAgICAgICAgaWYgKHByb3AubGVuZ3RoID09PSAwKSBjb250aW51ZTtcbiAgICAgICAgdmFyIG9yaWdQcm9wID0gcHJvcDtcbiAgICAgICAgdmFyIGRlZlZhbHVlID0gbnVsbDtcbiAgICAgICAgLy8gcGFyc2VzICBcInByb3BcIiBcInByb3A9dmFsdWVcIiBhbmQgXCJwcm9wW11cIiBkZWNsYXJhdGlvbnNcbiAgICAgICAgdmFyIHByb3BEZWYgPSBwcm9wLm1hdGNoKC9eKFtePVxcW1xcXV0rKShcXFtcXF0pPyg9PykoLiopJC8pO1xuICAgICAgICBpZiAocHJvcERlZiAhPT0gbnVsbCkge1xuICAgICAgICAgIHByb3AgPSBwcm9wRGVmWzFdO1xuICAgICAgICAgIC8vIFRPRE8gYXJyYXkgZGVmaW5pdGlvbiBzaG91bGQgYmUgZG9uZSBkaWZmZXJlbnRseVxuICAgICAgICAgIGlmIChwcm9wRGVmWzJdID09ICdbXScpIHtcbiAgICAgICAgICAgIC8vIFRPRE8gdHlwZSBzaG91bGQgbm90IGJlIGRlZmluZWQgaW4gdGhpcyBmdW5jdGlvblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBkZWZPYmpbcHJvcF0gPT0gJ3VuZGVmaW5lZCcpIGRlZk9ialtwcm9wXSA9IFtdO1xuICAgICAgICAgICAgZGVmVmFsdWUgPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHByb3BEZWZbM10gPT0gJz0nKSB7XG4gICAgICAgICAgICAvLyBUT0RPIHJlbW92ZSBoYXJkY29kZWQgXCJ2aXNpYmxlXCIgbWF0Y2hpbmcgKHRoaXMgc2hvdWxkIGJlIGRlZmluZWQgaW4gdGhlIHRlbXBsYXRlIGRlZmluaXRpb24pXG4gICAgICAgICAgICBpZiAocHJvcC5tYXRjaCgvKF52fFYpaXNpYmxlJC8pKSBkZWZWYWx1ZSA9IFN0cmluZyhwcm9wRGVmWzRdKS50b0xvd2VyQ2FzZSgpID09ICd0cnVlJztcbiAgICAgICAgICAgIGVsc2UgaWYgKHByb3AubWF0Y2goL15jdXN0b21TdHlsZSQvKSkge1xuICAgICAgICAgICAgICBkZWZWYWx1ZSA9IFN0cmluZyhwcm9wRGVmWzRdKS50b0xvd2VyQ2FzZSgpID09ICd0cnVlJztcbiAgICAgICAgICAgIH0gZWxzZSBkZWZWYWx1ZSA9IHByb3BEZWZbNF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGRlZmF1bHQgdmFsdWVzIGZvdW5kIGluIFwicHJvcGVydGllc1wiIGFyZSBub3QgYmVpbmcgcHJvY2Vzc2VkIGJ5IFwibW9kZWxFbnN1cmVWYWx1ZVwiIGFuZCBieSBjb25zZXF1ZW5jZSBkbyBub3QgY2FsbCBcInRoZW1lVXBkYXRlclwiLlxuICAgICAgICAvLyBUT0RPIGRvY3VtZW50IHdoeSB0aGlzIGlzIG5lZWRlZCwgb3IgcmVtb3ZlLlxuICAgICAgICBpZiAoZGVmVmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGRlZk9iai5fZGVmYXVsdFZhbHVlc1twcm9wXSA9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgLy8gaWYgKHByb3AubWF0Y2goL15fLykpIGNvbnNvbGUubG9nKFwiZGVmVmFsdWUgZm9yXCIsIHByb3AsIFwiaW5cIiwgbmFtZSk7XG4gICAgICAgICAgICBkZWZPYmouX2RlZmF1bHRWYWx1ZXNbcHJvcF0gPSBkZWZWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGRlZk9ialtwcm9wXSA9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHZhciB2YWwgPSBfZ2V0TW9kZWxEZWYoZGVmcywgbmFtZSArICcgJyArIHByb3AsIHRydWUpO1xuICAgICAgICAgIGlmICh2YWwgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhbCA9IF9nZXRNb2RlbERlZihkZWZzLCBwcm9wLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVmT2JqW3Byb3BdID0gdmFsO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVmT2JqLl9wcm9jZXNzZWREZWZzW3Byb3BdID0gb3JpZ1Byb3A7XG4gICAgICAgIGRlZk9iai5fY29tcGxleCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGRlbGV0ZSBkZWZPYmouX3Byb3BzO1xuICAgIH1cblxuICAgIGlmIChyZXR1cm5DbG9uZSkge1xuICAgICAgZGVmT2JqLl93cml0ZWFibGUgPSBmYWxzZTtcbiAgICAgIHZhciBjbG9uZWQgPSBvYmpFeHRlbmQoe30sIGRlZk9iaik7XG4gICAgICByZXR1cm4gY2xvbmVkO1xuICAgIH0gZWxzZSBpZiAocmVhZG9ubHkpIHtcbiAgICAgIGRlZk9iai5fd3JpdGVhYmxlID0gZmFsc2U7XG4gICAgICByZXR1cm4gZGVmT2JqO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIGRlZk9iai5fd3JpdGVhYmxlID09ICd1bmRlZmluZWQnIHx8IGRlZk9iai5fd3JpdGVhYmxlID09PSBmYWxzZSkgdGhyb3cgXCJSZXRyaWV2aW5nIG5vbiB3cml0ZWFibGUgb2JqZWN0IGRlZmluaXRpb246IFwiICsgbmFtZTtcbiAgICAgIHJldHVybiBkZWZPYmo7XG4gICAgfVxuICB9XG59O1xuXG52YXIgX2luY3JlYXNlVXNlQ291bnQgPSBmdW5jdGlvbihyZWFkb25seSwgbW9kZWwpIHtcbiAgaWYgKCFyZWFkb25seSkge1xuICAgIGlmICh0eXBlb2YgbW9kZWwuX3VzZWNvdW50ID09ICd1bmRlZmluZWQnKSBtb2RlbC5fdXNlY291bnQgPSAwO1xuICAgIG1vZGVsLl91c2Vjb3VudCsrO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBtb2RlbC5fdXNlY291bnQgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRVJST1IgdHJ5aW5nIHRvIGJpbmQgYW4gdW51c2VkIHByb3BlcnR5IHdoaWxlIHJlYWRvbmx5XCIsIG1vZGVsKTtcbiAgICB0aHJvdyBcIkVSUk9SIHRyeWluZyB0byBiaW5kIGFuIHVudXNlZCBwcm9wZXJ0eVwiO1xuICB9XG59O1xuXG52YXIgZW5zdXJlR2xvYmFsU3R5bGUgPSBmdW5jdGlvbihkZWZzLCByZWFkb25seSwgZ3NCaW5kaW5nUHJvdmlkZXIsIG1vZGVsTmFtZSwgcGF0aCwgZ3NGdWxsUGF0aCwgZGVmYXVsdFZhbHVlLCBvdmVycmlkZURlZmF1bHQpIHtcblxuICB2YXIgZ2xvYmFsU3R5bGVCaW5kaW5nQmluZFZhbHVlID0gZ3NCaW5kaW5nUHJvdmlkZXIoZ3NGdWxsUGF0aCwgZGVmYXVsdFZhbHVlLCBvdmVycmlkZURlZmF1bHQpO1xuXG4gIGlmICh0eXBlb2YgZGVmc1ttb2RlbE5hbWVdLl9nbG9iYWxTdHlsZXNbcGF0aF0gPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAocmVhZG9ubHkpIHRocm93IFwiQ2Fubm90IGZpbmQgX2dsb2JhbFN0eWxlIGZvciBcIiArIHBhdGggKyBcIiBpbiBcIiArIG1vZGVsTmFtZSArIFwiIVwiO1xuICAgIGlmIChwYXRoLmluZGV4T2YoJy4nKSAhPSAtMSB8fCAodHlwZW9mIGRlZnNbbW9kZWxOYW1lXVtwYXRoXSA9PSAnb2JqZWN0JyAmJiB0eXBlb2YgZGVmc1ttb2RlbE5hbWVdW3BhdGhdLl93aWRnZXQgIT09ICd1bmRlZmluZWQnKSkge1xuICAgICAgZGVmc1ttb2RlbE5hbWVdLl9nbG9iYWxTdHlsZXNbcGF0aF0gPSBnbG9iYWxTdHlsZUJpbmRpbmdCaW5kVmFsdWU7XG4gICAgfVxuICB9IGVsc2UgaWYgKGRlZnNbbW9kZWxOYW1lXS5fZ2xvYmFsU3R5bGVzW3BhdGhdICE9IGdsb2JhbFN0eWxlQmluZGluZ0JpbmRWYWx1ZSkgdGhyb3cgXCJVbmV4cGVjdGVkIGNvbmZsaWN0aW5nIGdsb2JhbFN0eWxlIFsyXSBmb3IgXCIgKyBtb2RlbE5hbWUgKyBcIi9cIiArIHBhdGggKyBcIjogb2xkPVwiICsgZGVmc1ttb2RlbE5hbWVdLl9nbG9iYWxTdHlsZXNbcGF0aF0gKyBcIiBuZXc9XCIgKyBnbG9iYWxTdHlsZUJpbmRpbmdCaW5kVmFsdWU7XG59O1xuXG4vLyB0aGVtZVVwZGF0ZXIsIGRlZmF1bHRWYWx1ZSwgb3ZlcnJpZGVEZWZhdWx0LCBzZXRjYXRlZ29yeSBhcmUgb25seSB1c2VkIGluICFyZWFkb25seSBtb2RlXG52YXIgbW9kZWxFbnN1cmVQYXRoQW5kR2V0QmluZFZhbHVlID0gZnVuY3Rpb24ocmVhZG9ubHksIGRlZnMsIHRoZW1lVXBkYXRlciwgcm9vdE1vZGVsTmFtZSwgdGVtcGxhdGVOYW1lLCB3aXRoaW4sIGZ1bGxQYXRoLCBkZWZhdWx0VmFsdWUsIG92ZXJyaWRlRGVmYXVsdCwgc2V0Y2F0ZWdvcnkpIHtcbiAgdmFyIG1vZGVsTmFtZTtcbiAgdmFyIHJlcztcbiAgdmFyIHBhdGg7XG4gIC8vIFRPRE8gcmVtb3ZlICckJyBhbmQgJyMnIGhhbmRpbmdcbiAgaWYgKGZ1bGxQYXRoLnN1YnN0cigwLCAxKSA9PSAnJCcpIHtcbiAgICBjb25zb2xlLndhcm4oXCJERVBSRUNBVEVEICQgaW4gYmluZGluZ1Byb3ZpZGVyOiBcIiwgZnVsbFBhdGgsIHRlbXBsYXRlTmFtZSk7XG4gICAgdmFyIHAgPSBmdWxsUGF0aC5pbmRleE9mKCcuJyk7XG4gICAgaWYgKHAgPT0gLTEpIHtcbiAgICAgIHRocm93IFwiVW5leHBlY3RlZCBmdWxsUGF0aDogXCIgKyBmdWxsUGF0aCArIFwiL1wiICsgd2l0aGluICsgXCIvXCIgKyB0ZW1wbGF0ZU5hbWUgKyBcIi9cIiArIGRlZmF1bHRWYWx1ZSArIFwiL1wiICsgb3ZlcnJpZGVEZWZhdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICBtb2RlbE5hbWUgPSBmdWxsUGF0aC5zdWJzdHIoMSwgcCAtIDEpO1xuICAgICAgcGF0aCA9IGZ1bGxQYXRoLnN1YnN0cihwICsgMSk7XG4gICAgICAvLyBUT0RPIHJlZmFjdG9yIG1lIHBsZWFzZVxuICAgICAgaWYgKG1vZGVsTmFtZSA9PSAndGhlbWUnKSB7XG4gICAgICAgIHZhciBwMiA9IHBhdGguaW5kZXhPZignLicpO1xuICAgICAgICBtb2RlbE5hbWUgPSBwYXRoLnN1YnN0cigwLCBwMik7XG4gICAgICAgIHBhdGggPSBwYXRoLnN1YnN0cihwMiArIDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgXCJVbmV4cGVjdGVkICQgc2VxdWVuY2U6IFwiICsgbW9kZWxOYW1lICsgXCIgaW4gXCIgKyBmdWxsUGF0aDtcbiAgICAgIH1cbiAgICAgIHJlcyA9IFwiJHJvb3QuY29udGVudCgpLnRoZW1lKCkuXCIgKyBtb2RlbE5hbWUgKyBcIigpLlwiICsgcGF0aC5yZXBsYWNlKG5ldyBSZWdFeHAoJ1xcXFwuJywgJ2cnKSwgJygpLicpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChmdWxsUGF0aC5zdWJzdHIoMCwgMSkgPT0gJyMnKSB7XG4gICAgY29uc29sZS53YXJuKFwiREVQUkVDQVRFRCAjIGluIGJpbmRpbmdQcm92aWRlcjogXCIsIGZ1bGxQYXRoLCB0ZW1wbGF0ZU5hbWUpO1xuICAgIG1vZGVsTmFtZSA9IHJvb3RNb2RlbE5hbWU7XG4gICAgcGF0aCA9IGZ1bGxQYXRoLnN1YnN0cigxKTtcbiAgICByZXMgPSBcIiRyb290LmNvbnRlbnQoKS5cIiArIHBhdGgucmVwbGFjZShuZXcgUmVnRXhwKCdcXFxcLicsICdnJyksICcoKS4nKTtcbiAgfSBlbHNlIGlmIChmdWxsUGF0aC5zdWJzdHIoMCwgOCkgPT0gJ190aGVtZV8uJykge1xuICAgIHZhciBwMyA9IGZ1bGxQYXRoLmluZGV4T2YoJy4nLCA4KTtcbiAgICBtb2RlbE5hbWUgPSBmdWxsUGF0aC5zdWJzdHIoOCwgcDMgLSA4KTtcbiAgICBwYXRoID0gZnVsbFBhdGguc3Vic3RyKHAzICsgMSk7XG4gICAgcmVzID0gXCIkcm9vdC5jb250ZW50KCkudGhlbWUoKS5cIiArIG1vZGVsTmFtZSArIFwiKCkuXCIgKyBwYXRoLnJlcGxhY2UobmV3IFJlZ0V4cCgnXFxcXC4nLCAnZycpLCAnKCkuJyk7XG4gIH0gZWxzZSBpZiAoZnVsbFBhdGguc3Vic3RyKDAsIDcpID09ICdfcm9vdF8uJykge1xuICAgIG1vZGVsTmFtZSA9IHJvb3RNb2RlbE5hbWU7XG4gICAgcGF0aCA9IGZ1bGxQYXRoLnN1YnN0cig3KTtcbiAgICByZXMgPSBcIiRyb290LmNvbnRlbnQoKS5cIiArIHBhdGgucmVwbGFjZShuZXcgUmVnRXhwKCdcXFxcLicsICdnJyksICcoKS4nKTtcbiAgfSBlbHNlIHtcbiAgICBtb2RlbE5hbWUgPSB0ZW1wbGF0ZU5hbWU7XG4gICAgcGF0aCA9IHdpdGhpbiArIGZ1bGxQYXRoO1xuICAgIHJlcyA9IGZ1bGxQYXRoLnJlcGxhY2UobmV3IFJlZ0V4cCgnXFxcXC4nLCAnZycpLCAnKCkuJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIGRlZnNbbW9kZWxOYW1lXSA9PT0gJ3VuZGVmaW5lZCcpIHRocm93IFwiQ2Fubm90IGZpbmQgbW9kZWwgZGVmIGZvciBbXCIgKyBtb2RlbE5hbWUgKyBcIl1cIjtcblxuICB2YXIgcHJvcFBvcyA9IHBhdGguaW5kZXhPZignLicpO1xuICB2YXIgcHJvcE5hbWUgPSBwcm9wUG9zID09IC0xID8gcGF0aCA6IHBhdGguc3Vic3RyKDAsIHByb3BQb3MpO1xuXG4gIGlmIChtb2RlbE5hbWUuaW5kZXhPZignLScpICE9IC0xKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVSUk9SIGNhbm5vdCB1c2UgLSBmb3IgYmxvY2sgbmFtZXNcIiwgbW9kZWxOYW1lKTtcbiAgICB0aHJvdyBcIkVSUk9SIHVuZXhwZWN0ZWQgY2hhciBpbiBibG9jayBuYW1lOiBcIiArIG1vZGVsTmFtZTtcbiAgfVxuICBpZiAocHJvcE5hbWUuaW5kZXhPZignLScpICE9IC0xKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVSUk9SIGNhbm5vdCB1c2UgLSBmb3IgcHJvcGVydHkgbmFtZXNcIiwgcHJvcE5hbWUpO1xuICAgIHRocm93IFwiRVJST1IgdW5leHBlY3RlZCBjaGFyIGluIHByb3BlcnR5IG5hbWU6IFwiICsgbW9kZWxOYW1lO1xuICB9XG5cbiAgLy8gRmFzdHBhdGhcbiAgaWYgKHJlYWRvbmx5KSB7XG4gICAgaWYgKHR5cGVvZiBkZWZzW21vZGVsTmFtZV0uX2dsb2JhbFN0eWxlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZGVmc1ttb2RlbE5hbWVdW3Byb3BOYW1lXSAhPT0gJ3VuZGVmaW5lZCcgJiYgZGVmc1ttb2RlbE5hbWVdW3Byb3BOYW1lXS5fY2F0ZWdvcnkgPT0gJ3N0eWxlJykge1xuICAgICAgcmVzICs9ICcuX2RlZmF1bHRDb21wdXRlZCc7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH1cblxuICAvLyBnZXRzIHRoZSB3cml0YWJsZSBtb2RlbCB3aGVuIFwiIXJlYWRvbmx5XCIgb3IgdGhlIHJlYWRvbmx5IG1vZGVsIG90aGVyd2lzZVxuICB2YXIgbW9kZWw7XG4gIGlmIChyZWFkb25seSkge1xuICAgIGlmICh0eXBlb2YgZGVmYXVsdFZhbHVlICE9PSAndW5kZWZpbmVkJykgdGhyb3cgXCJDYW5ub3QgdXNlIGRlZmF1bHRWYWx1ZSBpbiByZWFkb25seSBtb2RlIVwiO1xuICAgIGlmIChvdmVycmlkZURlZmF1bHQpIHRocm93IFwiQ2Fubm90IHVzZSBvdmVycmlkZURlZmF1bHQgaW4gcmVhZG9ubHkgbW9kZSBmb3IgXCIgKyBtb2RlbE5hbWUgKyBcIi9cIiArIHBhdGggKyBcIi9cIiArIG92ZXJyaWRlRGVmYXVsdCArIFwiIVwiO1xuICAgIGlmICh0eXBlb2Ygc2V0Y2F0ZWdvcnkgIT09ICd1bmRlZmluZWQnKSB0aHJvdyBcIkNhbm5vdCBzZXQgY2F0ZWdvcnkgZm9yIFwiICsgbW9kZWxOYW1lICsgXCIvXCIgKyBwYXRoICsgXCIvXCIgKyBzZXRjYXRlZ29yeSArIFwiIGluIHJlYWRvbmx5IG1vZGUhXCI7XG4gICAgbW9kZWwgPSBfZ2V0TW9kZWxEZWYoZGVmcywgbW9kZWxOYW1lLCBmYWxzZSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGRlZnNbbW9kZWxOYW1lXS5fd3JpdGVhYmxlID09PSBmYWxzZSkgY29uc29sZS5sb2coXCJUT0RPIGRlYnVnIHVzZSBjYXNlcyBmb3IgdGhpcyBjb25kaXRpb25cIiwgbW9kZWxOYW1lLCBwYXRoKTtcbiAgICBtb2RlbCA9IF9nZXRNb2RlbERlZihkZWZzLCBtb2RlbE5hbWUsIGRlZnNbbW9kZWxOYW1lXS5fd3JpdGVhYmxlID09PSBmYWxzZSk7XG4gIH1cblxuICBpZiAobW9kZWwgPT09IG51bGwpIHRocm93IFwiVW5leHBlY3RlZCBtb2RlbCBmb3IgW1wiICsgbW9kZWxOYW1lICsgXCJdXCI7XG5cbiAgLy8gaWYgdGhlIHByb3BlcnR5IGRvZXMgbm90IGV4aXN0cyB3ZSBoYXZlIHRvIGNyZWF0ZSBpdC5cbiAgaWYgKHR5cGVvZiBtb2RlbFtwcm9wTmFtZV0gPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyB3aGVuIGluIHJlYWRvbmx5IG1vZGUgdGhpcyBjYW5ub3QgYmUgZG9uZSFcbiAgICBpZiAocmVhZG9ubHkpIHRocm93IFwiQ2Fubm90IGZpbmQgcGF0aCBcIiArIHByb3BOYW1lICsgXCIgZm9yIFwiICsgbW9kZWxOYW1lICsgXCIhXCI7XG4gICAgX21vZGVsQ3JlYXRlT3JVcGRhdGVCbG9ja0RlZihkZWZzLCBtb2RlbE5hbWUsIHByb3BOYW1lKTtcbiAgICBtb2RlbCA9IF9nZXRNb2RlbERlZihkZWZzLCBtb2RlbE5hbWUsIGZhbHNlKTtcbiAgfVxuXG4gIC8vIE5lZWRzIHRvIGRvIHRoaXMgYWdhaW4sIGJlY2F1c2UgXCJfbW9kZWxDcmVhdGVPclVwZGF0ZUJsb2NrRGVmXCIgY291bGQgaGF2ZSBiZWVuIGp1c3QgY3JlYXRlZCB0aGUgcHJvcGVydHkgKGUuZzogYmFja2dyb3VuZENvbG9yIGJ1dHRvbkJsb2NrIG5vdCBnZXR0aW5nIGRlZmF1bHRDb21wdXRlZCBpbiB0ZW1wbGF0ZS1sbSlcbiAgaWYgKHR5cGVvZiBkZWZzW21vZGVsTmFtZV0uX2dsb2JhbFN0eWxlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZGVmc1ttb2RlbE5hbWVdW3Byb3BOYW1lXSAhPT0gJ3VuZGVmaW5lZCcgJiYgZGVmc1ttb2RlbE5hbWVdW3Byb3BOYW1lXSAhPT0gbnVsbCAmJiBkZWZzW21vZGVsTmFtZV1bcHJvcE5hbWVdLl9jYXRlZ29yeSA9PSAnc3R5bGUnKSB7XG4gICAgcmVzICs9ICcuX2RlZmF1bHRDb21wdXRlZCc7XG4gIH1cblxuICB2YXIgY2hpbGRNb2RlbCA9IG1vZGVsO1xuICB0cnkge1xuICAgIF9pbmNyZWFzZVVzZUNvdW50KHJlYWRvbmx5LCBjaGlsZE1vZGVsKTtcbiAgICBpZiAocHJvcFBvcyAhPSAtMSkge1xuICAgICAgdmFyIG15cGF0aCA9IHBhdGg7XG4gICAgICBkbyB7XG4gICAgICAgIHZhciBwcm9wID0gbXlwYXRoLnN1YnN0cigwLCBwcm9wUG9zKTtcbiAgICAgICAgaWYgKHR5cGVvZiBjaGlsZE1vZGVsW3Byb3BdID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgXCJGb3VuZCBhbiB1bmV4cGVjdGVkIHByb3AgXCIgKyBwcm9wICsgXCIgZm9yIG1vZGVsIFwiICsgbW9kZWxOYW1lICsgXCIgZm9yIFwiICsgcGF0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoaWxkTW9kZWwgPSBjaGlsZE1vZGVsW3Byb3BdO1xuICAgICAgICBfaW5jcmVhc2VVc2VDb3VudChyZWFkb25seSwgY2hpbGRNb2RlbCk7XG4gICAgICAgIG15cGF0aCA9IG15cGF0aC5zdWJzdHIocHJvcFBvcyArIDEpO1xuICAgICAgICBwcm9wUG9zID0gbXlwYXRoLmluZGV4T2YoJy4nKTtcbiAgICAgIH0gd2hpbGUgKHByb3BQb3MgIT0gLTEpO1xuXG4gICAgICBpZiAodHlwZW9mIGNoaWxkTW9kZWxbbXlwYXRoXSA9PSAndW5kZWZpbmVkJyB8fCBjaGlsZE1vZGVsW215cGF0aF0gPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgXCJGb3VuZCBhbiB1bmV4cGVjdGVkIHBhdGggdGVybWluYXRpb24gXCIgKyBteXBhdGggKyBcIiBmb3IgbW9kZWwgXCIgKyBtb2RlbE5hbWUgKyBcIiBmb3IgXCIgKyBwYXRoO1xuICAgICAgfVxuICAgICAgY2hpbGRNb2RlbCA9IGNoaWxkTW9kZWxbbXlwYXRoXTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hpbGRNb2RlbCA9IGNoaWxkTW9kZWxbcGF0aF07XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjaGlsZE1vZGVsID09PSAndW5kZWZpbmVkJyB8fCBjaGlsZE1vZGVsID09PSBudWxsKSB0aHJvdyBcIlVuZXhwZWN0ZWQgbnVsbCBtb2RlbCBmb3IgXCIgKyBtb2RlbE5hbWUgKyBcIi9cIiArIHdpdGhpbiArIFwiL1wiICsgZnVsbFBhdGg7XG5cbiAgICBpZiAodHlwZW9mIHNldGNhdGVnb3J5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY2hpbGRNb2RlbC5fY2F0ZWdvcnkgPSBzZXRjYXRlZ29yeTtcbiAgICB9XG5cbiAgICBfaW5jcmVhc2VVc2VDb3VudChyZWFkb25seSwgY2hpbGRNb2RlbCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiVE9ETyBFUlJPUiBQcm9wZXJ0eSBsb29rdXAgZXhjZXB0aW9uXCIsIGUsIG1vZGVsTmFtZSwgcGF0aCwgdGVtcGxhdGVOYW1lLCBmdWxsUGF0aCwgZGVmcyk7XG4gICAgdGhyb3cgZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZGVmc1ttb2RlbE5hbWVdLl9nbG9iYWxTdHlsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRlZnNbbW9kZWxOYW1lXVtwcm9wTmFtZV0gPT0gJ29iamVjdCcgJiYgZGVmc1ttb2RlbE5hbWVdW3Byb3BOYW1lXSAhPT0gbnVsbCAmJiB0eXBlb2YgZGVmc1ttb2RlbE5hbWVdW3Byb3BOYW1lXS5fY2F0ZWdvcnkgIT0gJ3VuZGVmaW5lZCcgJiYgZGVmc1ttb2RlbE5hbWVdW3Byb3BOYW1lXS5fY2F0ZWdvcnkgPT0gJ3N0eWxlJykge1xuICAgIC8vIFRPRE8gY2FuIEkgcmVzdHJpY3QgdGhpcyBjb2RlIHRvICFyZWFkb25seSBtb2RlP1xuICAgIHZhciBnc0JpbmRpbmdQcm92aWRlciA9IG1vZGVsRW5zdXJlUGF0aEFuZEdldEJpbmRWYWx1ZS5iaW5kKHVuZGVmaW5lZCwgcmVhZG9ubHksIGRlZnMsIHRoZW1lVXBkYXRlciwgcm9vdE1vZGVsTmFtZSwgdGVtcGxhdGVOYW1lLCAnJyk7XG5cbiAgICB2YXIgc3ViUGF0aCA9IHBhdGguaW5kZXhPZignLicpICE9IC0xID8gcGF0aC5zdWJzdHIocGF0aC5pbmRleE9mKCcuJykpIDogJyc7XG5cbiAgICAvLyBUaGUgbmV4dCBjb2RlIHN1cHBvcnRzIG9ubHkgcHJvcGVydGllcyB3aXRoIG9uZSBkb3QgKG9iamVjdC5wcm9wZXJ0eSkuXG4gICAgaWYgKHN1YlBhdGguaW5kZXhPZignLicsIDEpICE9IC0xKSB0aHJvdyBcIlRPRE8gdW5zdXBwb3J0ZWQgb2JqZWN0IG5lc3RpbmchIFwiICsgcGF0aDtcblxuICAgIHZhciBnc1BhdGggPSBkZWZzW21vZGVsTmFtZV0uX2dsb2JhbFN0eWxlICsgJy4nICsgcHJvcE5hbWU7XG4gICAgaWYgKHR5cGVvZiBkZWZzW21vZGVsTmFtZV1bcHJvcE5hbWVdID09ICdvYmplY3QnICYmIGRlZnNbbW9kZWxOYW1lXVtwcm9wTmFtZV0gIT09IG51bGwgJiYgdHlwZW9mIGRlZnNbbW9kZWxOYW1lXVtwcm9wTmFtZV0uX2dsb2JhbFN0eWxlICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICBnc1BhdGggPSBkZWZzW21vZGVsTmFtZV1bcHJvcE5hbWVdLl9nbG9iYWxTdHlsZTtcbiAgICB9XG5cbiAgICBlbnN1cmVHbG9iYWxTdHlsZShkZWZzLCByZWFkb25seSwgZ3NCaW5kaW5nUHJvdmlkZXIsIG1vZGVsTmFtZSwgcHJvcE5hbWUsIGdzUGF0aCwgdW5kZWZpbmVkLCBmYWxzZSk7XG5cbiAgICB2YXIgZ3NGdWxsUGF0aCA9IGdzUGF0aCArIHN1YlBhdGg7XG5cbiAgICBpZiAodHlwZW9mIGRlZmF1bHRWYWx1ZSA9PSAndW5kZWZpbmVkJyAmJiBkZWZzW21vZGVsTmFtZV0uX2RlZmF1bHRWYWx1ZXNbcGF0aF0gIT09IG51bGwpIGRlZmF1bHRWYWx1ZSA9IGRlZnNbbW9kZWxOYW1lXS5fZGVmYXVsdFZhbHVlc1twYXRoXTtcblxuICAgIGVuc3VyZUdsb2JhbFN0eWxlKGRlZnMsIHJlYWRvbmx5LCBnc0JpbmRpbmdQcm92aWRlciwgbW9kZWxOYW1lLCBwYXRoLCBnc0Z1bGxQYXRoLCBkZWZhdWx0VmFsdWUsIG92ZXJyaWRlRGVmYXVsdCk7XG5cbiAgICBpZiAodHlwZW9mIGRlZmF1bHRWYWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmIChyZWFkb25seSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiQ2Fubm90IHNldCBhIG5ldyB0aGVtZSBkZWZhdWx0IHZhbHVlXCIsIGdzRnVsbFBhdGguc3Vic3RyKDcpLCBkZWZhdWx0VmFsdWUsIFwid2hpbGUgaW4gcmVhZG9ubHkgbW9kZVwiKTtcbiAgICAgICAgdGhyb3cgXCJDYW5ub3Qgc2V0IGEgbmV3IHRoZW1lIGRlZmF1bHQgdmFsdWUgKFwiICsgZGVmYXVsdFZhbHVlICsgXCIpIGZvciBcIiArIGdzRnVsbFBhdGguc3Vic3RyKDcpICsgXCIgd2hpbGUgaW4gcmVhZG9ubHkgbW9kZSFcIjtcbiAgICAgIH1cbiAgICAgIHRoZW1lVXBkYXRlcignZGVmYXVsdCcsIGdzRnVsbFBhdGguc3Vic3RyKDcpLCBkZWZhdWx0VmFsdWUpO1xuICAgIH1cblxuICAgIC8vIFRPRE8gY29tcGxleCBzdHVmZi4gSWYgdGhlIHRoZW1lIHVzZXMgaW5oZXJpdGFuY2Ugd2UgZW5mb3JjZSBpdCB1c2luZyB3aXRoIHRoZSBzYW1lIHZhbHVlLCBidXQgdGhpcyBpcyBhIGxpbWl0LlxuICAgIGRlZmF1bHRWYWx1ZSA9IG51bGw7XG5cbiAgfVxuXG4gIGlmICh0eXBlb2YgZGVmYXVsdFZhbHVlICE9ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiBkZWZzW21vZGVsTmFtZV0uX2RlZmF1bHRWYWx1ZXNbcGF0aF0gPT0gJ3VuZGVmaW5lZCcgfHwgKHR5cGVvZiBvdmVycmlkZURlZmF1bHQgIT0gJ3VuZGVmaW5lZCcgJiYgb3ZlcnJpZGVEZWZhdWx0KSkge1xuICAgICAgaWYgKHJlYWRvbmx5KSB0aHJvdyBcIkNhbm5vdCBzZXQgbmV3IF9kZWZhdWx0VmFsdWVzIFsxXSBmb3IgXCIgKyBwYXRoICsgXCIgaW4gXCIgKyBtb2RlbE5hbWUgKyBcIiFcIjtcbiAgICAgIGRlZnNbbW9kZWxOYW1lXS5fZGVmYXVsdFZhbHVlc1twYXRoXSA9IGRlZmF1bHRWYWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGRlZmF1bHRWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICBpZiAocmVhZG9ubHkgJiYgZGVmc1ttb2RlbE5hbWVdLl9kZWZhdWx0VmFsdWVzW3BhdGhdICE9PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgXCJDYW5ub3Qgc2V0IG5ldyBfZGVmYXVsdFZhbHVlcyBbMl0gZm9yIFwiICsgcGF0aCArIFwiIGluIFwiICsgbW9kZWxOYW1lICsgXCIhXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhpcyByZW1vdmUgZGVmYXVsdCB2YWx1ZS4gVWdseS4gKE5lZWRzIHRoaXMgZm9yIGRlZmF1bHRzIGluIHRlbXBsYXRlLWxtIHNvY2lhbExpbmtzSWNvbilcbiAgICAgICAgZGVmc1ttb2RlbE5hbWVdLl9kZWZhdWx0VmFsdWVzW3BhdGhdID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAoZGVmc1ttb2RlbE5hbWVdLl9kZWZhdWx0VmFsdWVzW3BhdGhdICE9IGRlZmF1bHRWYWx1ZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVE9ETyBlcnJvciEhISBUcnlpbmcgdG8gc2V0IGEgbmV3IGRlZmF1bHQgdmFsdWUgZm9yIFwiICsgbW9kZWxOYW1lICsgXCIgXCIgKyBwYXRoICsgXCIgd2hpbGUgaXQgYWxyZWFkeSBleGlzdHMgKGN1cnJlbnQ6IFwiICsgZGVmc1ttb2RlbE5hbWVdLl9kZWZhdWx0VmFsdWVzW3BhdGhdICsgXCIsIG5ldzogXCIgKyBkZWZhdWx0VmFsdWUgKyBcIilcIik7XG4gICAgICAgIHRocm93IFwiVHJ5aW5nIHRvIHNldCBhIG5ldyBkZWZhdWx0IHZhbHVlIGZvciBcIiArIG1vZGVsTmFtZSArIFwiIFwiICsgcGF0aCArIFwiIHdoaWxlIGl0IGFscmVhZHkgZXhpc3RzIChjdXJyZW50OiBcIiArIGRlZnNbbW9kZWxOYW1lXS5kZWZhdWx0VmFsdWVzW3BhdGhdICsgXCIsIG5ldzogXCIgKyBkZWZhdWx0VmFsdWUgKyBcIilcIjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcblxudmFyIGdlbmVyYXRlUmVzdWx0TW9kZWwgPSBmdW5jdGlvbih0ZW1wbGF0ZURlZikge1xuICB2YXIgZGVmcyA9IHRlbXBsYXRlRGVmLl9kZWZzO1xuICB2YXIgdGVtcGxhdGVOYW1lID0gdGVtcGxhdGVEZWYudGVtcGxhdGVOYW1lO1xuXG4gIHZhciBmaW5hbE1vZGVsQ29udGVudCA9IF9nZW5lcmF0ZU1vZGVsKGRlZnMsIHRlbXBsYXRlTmFtZSk7XG5cbiAgLy8gVE9ETyB1Z2x5IHRvIGFkZCB0aGlzIG1hbnVhbGx5XG4gIGlmICh0eXBlb2YgZGVmc1sndGhlbWUnXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBmaW5hbE1vZGVsQ29udGVudC50aGVtZSA9IF9nZW5lcmF0ZU1vZGVsKGRlZnMsICd0aGVtZScpO1xuICB9XG5cbiAgcmV0dXJuIGZpbmFsTW9kZWxDb250ZW50O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIHVzZWQgdG8gY29tcGlsZSB0aGUgdGVtcGxhdGVcbiAgZW5zdXJlUGF0aEFuZEdldEJpbmRWYWx1ZTogbW9kZWxFbnN1cmVQYXRoQW5kR2V0QmluZFZhbHVlLmJpbmQodW5kZWZpbmVkLCBmYWxzZSksXG4gIC8vIHVzZWQgaW4gcnVudGltZSB0aGUgdGVtcGxhdGVcbiAgZ2V0QmluZFZhbHVlOiBtb2RlbEVuc3VyZVBhdGhBbmRHZXRCaW5kVmFsdWUuYmluZCh1bmRlZmluZWQsIHRydWUpLFxuICBnZW5lcmF0ZU1vZGVsOiBfZ2VuZXJhdGVNb2RlbCxcbiAgZ2VuZXJhdGVSZXN1bHRNb2RlbDogZ2VuZXJhdGVSZXN1bHRNb2RlbCxcbiAgZ2V0RGVmOiBfZ2V0RGVmLFxuICBjcmVhdGVPclVwZGF0ZUJsb2NrRGVmOiBfbW9kZWxDcmVhdGVPclVwZGF0ZUJsb2NrRGVmXG59OyIsIlwidXNlIHN0cmljdFwiO1xuLyogZ2xvYmFsIGdsb2JhbDogZmFsc2UgKi9cblxudmFyICQgPSByZXF1aXJlKFwianF1ZXJ5XCIpO1xudmFyIGNvbnNvbGUgPSByZXF1aXJlKFwiY29uc29sZVwiKTtcbnZhciBjb252ZXJ0ZXJVdGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzLmpzXCIpO1xudmFyIGVsYWJvcmF0ZURlY2xhcmF0aW9ucyA9IHJlcXVpcmUoXCIuL2RlY2xhcmF0aW9ucy5qc1wiKTtcbnZhciBwcm9jZXNzU3R5bGVzaGVldFJ1bGVzID0gcmVxdWlyZShcIi4vc3R5bGVzaGVldC5qc1wiKTtcbnZhciBtb2RlbERlZiA9IHJlcXVpcmUoXCIuL21vZGVsLmpzXCIpO1xudmFyIGRvbXV0aWxzID0gcmVxdWlyZShcIi4vZG9tdXRpbHMuanNcIik7XG5cbnZhciB3cmFwRWxlbWVudFdpdGhDb25kaXRpb24gPSBmdW5jdGlvbihhdHRyaWJ1dGUsIGVsZW1lbnQsIGJpbmRpbmdQcm92aWRlcikge1xuICB2YXIgY29uZCA9IGRvbXV0aWxzLmdldEF0dHJpYnV0ZShlbGVtZW50LCBhdHRyaWJ1dGUpO1xuXG4gIHRyeSB7XG4gICAgdmFyIGJpbmRpbmcgPSBjb252ZXJ0ZXJVdGlscy5jb25kaXRpb25CaW5kaW5nKGNvbmQsIGJpbmRpbmdQcm92aWRlcik7XG4gICAgJChlbGVtZW50KS5iZWZvcmUoJzwhLS0ga28gaWY6ICcgKyBiaW5kaW5nICsgJyAtLT4nKTtcbiAgICAkKGVsZW1lbnQpLmFmdGVyKCc8IS0tIC9rbyAtLT4nKTtcbiAgICBkb211dGlscy5yZW1vdmVBdHRyaWJ1dGUoZWxlbWVudCwgYXR0cmlidXRlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUud2FybihcIk1vZGVsIGVuc3VyZSBwYXRoIGZhaWxlZCBpbiBpZi92YXJpYW50XCIsIGVsZW1lbnQsIGNvbmQsIGF0dHJpYnV0ZSk7XG4gICAgdGhyb3cgZTtcbiAgfVxuXG59O1xuXG52YXIgcmVwbGFjZWRBdHRyaWJ1dGVzID0gZnVuY3Rpb24oZWxlbWVudCwgYXR0cmlidXRlTmFtZSkge1xuICBkb211dGlscy5zZXRBdHRyaWJ1dGUoZWxlbWVudCwgYXR0cmlidXRlTmFtZSwgZG9tdXRpbHMuZ2V0QXR0cmlidXRlKGVsZW1lbnQsIFwicmVwbGFjZWRcIiArIGF0dHJpYnV0ZU5hbWUpKTtcbn07XG5cbnZhciBwcm9jZXNzU3R5bGUgPSBmdW5jdGlvbihlbGVtZW50LCB0ZW1wbGF0ZVVybENvbnZlcnRlciwgYmluZGluZ1Byb3ZpZGVyLCBhZGRVbmlxdWVJZCkge1xuICB2YXIgc3R5bGUgPSBkb211dGlscy5nZXRBdHRyaWJ1dGUoZWxlbWVudCwgJ3JlcGxhY2Vkc3R5bGUnKTtcbiAgdmFyIG5ld1N0eWxlID0gbnVsbDtcbiAgdmFyIG5ld0JpbmRpbmdzO1xuICBpZiAoYWRkVW5pcXVlSWQpIG5ld0JpbmRpbmdzID0ge1xuICAgIHVuaXF1ZUlkOiAnJGRhdGEnLFxuICAgIGF0dHI6IHtcbiAgICAgIGlkOiAnaWQnXG4gICAgfVxuICB9O1xuXG4gIHZhciByZW1vdmVEaXNwbGF5Tm9uZSA9IGRvbXV0aWxzLmdldEF0dHJpYnV0ZShlbGVtZW50LCAnZGF0YS1rby1kaXNwbGF5JykgIT09IG51bGw7XG5cbiAgbmV3U3R5bGUgPSBlbGFib3JhdGVEZWNsYXJhdGlvbnMoc3R5bGUsIHVuZGVmaW5lZCwgdGVtcGxhdGVVcmxDb252ZXJ0ZXIsIGJpbmRpbmdQcm92aWRlciwgZWxlbWVudCwgbmV3QmluZGluZ3MsIHJlbW92ZURpc3BsYXlOb25lKTtcblxuICAvLyBvbmx5IHdoZW4gdXNpbmcgXCJyZXBsYWNlZFwiXG4gIGlmIChuZXdTdHlsZSA9PT0gbnVsbCkge1xuICAgIG5ld1N0eWxlID0gc3R5bGU7XG4gIH0gZWxzZSB7XG4gICAgLy8gaW4gY2FzZSB0aGVyZSBhcmUgbm8gYmluZGluZ3Mgd2Uga2VlcCByZXBsYWNlZHN0eWxlIHRvIGJlIHVzZWQgYnkgSUUgZHVyaW5nIG91dHB1dFxuICAgIC8vIG90aGVyd2lzZSBJIHJlbW92ZSBpdCBiZWNhdXNlIGl0IHdpbGwgYmUgb3ZlcndyaXR0ZW4gYnkgdmlydHVhbEF0dHJTdHlsZSBiaW5kaW5nLlxuICAgIC8vIFRPRE8gbWF5YmUgd2UgYmV0dGVyIHVzZSBkaWZmZXJlbnQgbmFtZXMgZm9yIFwicmVwbGFjZWRcIiB1c2VkIGR1cmluZyB0ZW1wbGF0ZSBjb252ZXJzaW9uXG4gICAgLy8gYW5kIHRoZSBvbmVzIHVzZWQgdG8gY3JlYXRlIHRoZSBvdXRwdXQuXG4gICAgZG9tdXRpbHMucmVtb3ZlQXR0cmlidXRlKGVsZW1lbnQsICdyZXBsYWNlZHN0eWxlJyk7XG4gIH1cblxuICBpZiAobmV3U3R5bGUgIT09IG51bGwpIHtcbiAgICBpZiAobmV3U3R5bGUudHJpbSgpLmxlbmd0aCA+IDApIHtcbiAgICAgIGRvbXV0aWxzLnNldEF0dHJpYnV0ZShlbGVtZW50LCAnc3R5bGUnLCBuZXdTdHlsZSk7XG4gICAgfSBlbHNlIGRvbXV0aWxzLnJlbW92ZUF0dHJpYnV0ZShlbGVtZW50LCAnc3R5bGUnKTtcbiAgfVxufTtcblxuXG4vLyBUT0RPIGZpeGluZyBVUkxzIGlzIGFsc28gbmVlZGVkIHdoZXJlIHN0eWxlcyB1c2VzIHBhdGggKGUuZzogYmFja2dyb3VuZC1pbWFnZSwgQGltcG9ydClcbnZhciBfZml4UmVsYXRpdmVQYXRoID0gZnVuY3Rpb24oYXR0cmlidXRlLCB0ZW1wbGF0ZVVybENvbnZlcnRlciwgaW5kZXgsIGVsZW1lbnQpIHtcbiAgdmFyIHVybCA9IGRvbXV0aWxzLmdldEF0dHJpYnV0ZShlbGVtZW50LCBhdHRyaWJ1dGUpO1xuICB2YXIgbmV3VXJsID0gdGVtcGxhdGVVcmxDb252ZXJ0ZXIodXJsKTtcbiAgaWYgKG5ld1VybCAhPT0gbnVsbCkge1xuICAgIGRvbXV0aWxzLnNldEF0dHJpYnV0ZShlbGVtZW50LCBhdHRyaWJ1dGUsIG5ld1VybCk7XG4gIH1cbn07XG5cblxudmFyIHByb2Nlc3NCbG9jayA9IGZ1bmN0aW9uKGVsZW1lbnQsIGRlZnMsIHRoZW1lVXBkYXRlciwgYmxvY2tQdXNoZXIsIHRlbXBsYXRlVXJsQ29udmVydGVyLCBjb250ZXh0TmFtZSwgcm9vdE1vZGVsTmFtZSwgY29udGFpbmVyTmFtZSwgZ2VuZXJhdGVVbmlxdWVJZCwgdGVtcGxhdGVDcmVhdG9yKSB7XG5cbiAgdHJ5IHtcblxuICB2YXIgdGVtcGxhdGVOYW1lO1xuICB2YXIgdmFyaWFudE5hbWUgPSAnJyxcbiAgICB2YXJpYW50RGVmID0gJyc7XG4gIGlmIChjb250ZXh0TmFtZSA9PSAnYmxvY2snKSB7XG4gICAgdGVtcGxhdGVOYW1lID0gZG9tdXRpbHMuZ2V0QXR0cmlidXRlKGVsZW1lbnQsICdkYXRhLWtvLWJsb2NrJyk7XG4gICAgZG9tdXRpbHMucmVtb3ZlQXR0cmlidXRlKGVsZW1lbnQsICdkYXRhLWtvLWJsb2NrJyk7XG4gIH0gZWxzZSBpZiAoY29udGV4dE5hbWUgPT0gJ3RlbXBsYXRlJykge1xuICAgIHRlbXBsYXRlTmFtZSA9IHJvb3RNb2RlbE5hbWU7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgXCJVbmV4cGVjdGVkIGNvbnRleHQgbmFtZSB3aGlsZSBwcm9jZXNzaW5nIGJsb2NrOiBcIiArIGNvbnRleHROYW1lO1xuICB9XG5cbiAgLy8gY29uc29sZS5sb2coXCJwcm9jZXNzQmxvY2tcIiwgY29udGV4dE5hbWUsIHJvb3RNb2RlbE5hbWUsIGNvbnRhaW5lck5hbWUsIHRlbXBsYXRlTmFtZSk7XG5cbiAgLy8gUmVtb3ZlIGVsZW1lbnRcbiAgJCgnW2RhdGEta28tcmVtb3ZlXScsIGVsZW1lbnQpLnJlbW92ZSgpO1xuXG4gIHZhciBmaXhlZEJsb2NrcyA9ICQoJ1tkYXRhLWtvLWJsb2NrXScsIGVsZW1lbnQpLnJlcGxhY2VXaXRoKCc8cmVwbGFjZWRibG9jaz4nKTtcblxuICAvLyBVcmxzIGluIHRoZXNlIGF0dHJpYnV0ZXMgbmVlZHMgXCJyZWxhdGl2aXphdGlvblwiXG4gIHZhciB1cmxhdHRycyA9IFsnaHJlZicsICdzcmMnLCAnZGF0YS1rby1wbGFjZWhvbGRlci1zcmMnLCAnYmFja2dyb3VuZCddO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHVybGF0dHJzLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gZmFjY2lvIGlsIGJpbmQgcGVyIG5vbiBkZWZpbmlyZSBmdW56aW9uaSBpbiB1biBsb29wIChqc2hpbnQpXG4gICAgdmFyIGZ1bmMgPSBfZml4UmVsYXRpdmVQYXRoLmJpbmQodW5kZWZpbmVkLCB1cmxhdHRyc1tpXSwgdGVtcGxhdGVVcmxDb252ZXJ0ZXIpO1xuICAgICQoJ1snICsgdXJsYXR0cnNbaV0gKyAnXScsIGVsZW1lbnQpLmVhY2goZnVuYyk7XG4gIH1cblxuICB2YXIgZGF0YURlZnMgPSBkb211dGlscy5nZXRBdHRyaWJ1dGUoZWxlbWVudCwgJ2RhdGEta28tcHJvcGVydGllcycpO1xuICBpZiAoZGF0YURlZnMgPT09IG51bGwpIGRhdGFEZWZzID0gXCJcIjtcbiAgJChcIltkYXRhLWtvLXByb3BlcnRpZXNdXCIsIGVsZW1lbnQpLmVhY2goZnVuY3Rpb24oaW5kZXgsIGVsZW1lbnQpIHtcbiAgICBpZiAoZGF0YURlZnMubGVuZ3RoID4gMCkgZGF0YURlZnMgPSBkYXRhRGVmcyArIFwiIFwiO1xuICAgIGRhdGFEZWZzID0gZGF0YURlZnMgKyBkb211dGlscy5nZXRBdHRyaWJ1dGUoZWxlbWVudCwgJ2RhdGEta28tcHJvcGVydGllcycpO1xuICAgIGRvbXV0aWxzLnJlbW92ZUF0dHJpYnV0ZShlbGVtZW50LCAnZGF0YS1rby1wcm9wZXJ0aWVzJyk7XG4gIH0pO1xuXG4gIG1vZGVsRGVmLmNyZWF0ZU9yVXBkYXRlQmxvY2tEZWYoZGVmcywgdGVtcGxhdGVOYW1lLCBkYXRhRGVmcywgeyBjb250ZXh0TmFtZTogY29udGV4dE5hbWUgfSk7XG5cbiAgdmFyIGJpbmRpbmdQcm92aWRlciA9IG1vZGVsRGVmLmVuc3VyZVBhdGhBbmRHZXRCaW5kVmFsdWUuYmluZCh1bmRlZmluZWQsIGRlZnMsIHRoZW1lVXBkYXRlciwgcm9vdE1vZGVsTmFtZSwgdGVtcGxhdGVOYW1lLCAnJyk7XG4gIGlmIChjb250ZXh0TmFtZSA9PSAnYmxvY2snKSBiaW5kaW5nUHJvdmlkZXIoJ2lkJywgJycpO1xuXG4gICQoJ3N0eWxlJywgZWxlbWVudCkuZWFjaChmdW5jdGlvbihpbmRleCwgZWxlbWVudCkge1xuICAgIHZhciBzdHlsZSA9IGRvbXV0aWxzLmdldElubmVySHRtbChlbGVtZW50KTtcblxuICAgIHZhciBibG9ja0RlZnNVcGRhdGVyID0gbW9kZWxEZWYuY3JlYXRlT3JVcGRhdGVCbG9ja0RlZi5iaW5kKHVuZGVmaW5lZCwgZGVmcyk7XG4gICAgdmFyIGxvY2FsV2l0aEJpbmRpbmdQcm92aWRlciA9IG1vZGVsRGVmLmVuc3VyZVBhdGhBbmRHZXRCaW5kVmFsdWUuYmluZCh1bmRlZmluZWQsIGRlZnMsIHRoZW1lVXBkYXRlciwgcm9vdE1vZGVsTmFtZSk7XG4gICAgdmFyIG5ld1N0eWxlID0gcHJvY2Vzc1N0eWxlc2hlZXRSdWxlcyhzdHlsZSwgdW5kZWZpbmVkLCBsb2NhbFdpdGhCaW5kaW5nUHJvdmlkZXIsIGJsb2NrRGVmc1VwZGF0ZXIsIHRoZW1lVXBkYXRlciwgdGVtcGxhdGVVcmxDb252ZXJ0ZXIsIHJvb3RNb2RlbE5hbWUsIHRlbXBsYXRlTmFtZSk7XG5cbiAgICBpZiAobmV3U3R5bGUgIT0gc3R5bGUpIHtcbiAgICAgIGlmIChuZXdTdHlsZS50cmltKCkgIT09ICcnKSB7XG4gICAgICAgIHZhciB0bXBOYW1lID0gdGVtcGxhdGVDcmVhdG9yKG5ld1N0eWxlKTtcbiAgICAgICAgZG9tdXRpbHMuc2V0QXR0cmlidXRlKGVsZW1lbnQsICdkYXRhLWJpbmQnLCAndGVtcGxhdGU6IHsgbmFtZTogXFwnJyArIHRtcE5hbWUgKyAnXFwnIH0nKTtcbiAgICAgICAgLy8gaG8gY3JlYXRvIGlsIHRlbXBsYXRlIHF1aW5kaSBwb3NzbyBzdnVvdGFyZSBpbCBzb3JnZW50ZS5cbiAgICAgICAgZG9tdXRpbHMuc2V0Q29udGVudChlbGVtZW50LCAnJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyByZW1vdmUgZW1wdHkgc3R5bGVzIGJsb2Nrc1xuICAgICAgICBkb211dGlscy5yZW1vdmVFbGVtZW50cygkKGVsZW1lbnQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHByb2Nlc3NTdHlsZShlbGVtZW50LCB0ZW1wbGF0ZVVybENvbnZlcnRlciwgYmluZGluZ1Byb3ZpZGVyLCBnZW5lcmF0ZVVuaXF1ZUlkKTtcblxuICAvLyBUT0RPIGhyZWYgc2hvdWxkIGJlIHN1cHBvcnRlZC4gZGF0YS1rby1kaXNwbGF5IGFuZCBkYXRhLWtvLXdyYXAgc2hvdWxkIG5ldmVyIGhhcHBlbiBpbiBoZXJlLlxuICB2YXIgbm90c3VwcG9ydGVkID0gWydkYXRhLWtvLWRpc3BsYXknLCAnZGF0YS1rby1lZGl0YWJsZScsICdkYXRhLWtvLXdyYXAnLCAnaHJlZiddO1xuICBmb3IgKHZhciBqID0gMDsgaiA8IG5vdHN1cHBvcnRlZC5sZW5ndGg7IGorKykge1xuICAgIHZhciBhdHRyID0gZG9tdXRpbHMuZ2V0QXR0cmlidXRlKGVsZW1lbnQsIG5vdHN1cHBvcnRlZFtqXSk7XG4gICAgaWYgKGF0dHIpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIkVSUk9SOiBVbnN1cHBvcnRlZCBcIiArIG5vdHN1cHBvcnRlZFtqXSArIFwiIHVzZWQgdG9nZXRoZXIgd2l0aCBkYXRhLWtvLWJsb2NrXCIsIGVsZW1lbnQpO1xuICAgICAgdGhyb3cgXCJFUlJPUjogVW5zdXBwb3J0ZWQgXCIgKyBub3RzdXBwb3J0ZWRbal0gKyBcIiB1c2VkIHRvZ2V0aGVyIHdpdGggZGF0YS1rby1ibG9ja1wiO1xuICAgIH1cbiAgfVxuXG4gIC8vIHNpbXBseSBwcmVwcm9jZXNzZWQgYXMgZGF0YS1rby13cmFwICsgLWtvLWF0dHItaHJlZlxuICAkKFwiW2RhdGEta28tbGlua11cIiwgZWxlbWVudCkuZWFjaChmdW5jdGlvbihpbmRleCwgZWxlbWVudCkge1xuICAgIHZhciB1cmxWYXIgPSBkb211dGlscy5nZXRBdHRyaWJ1dGUoZWxlbWVudCwgJ2RhdGEta28tbGluaycpO1xuICAgIHZhciByZXBTdHlsZSA9IGRvbXV0aWxzLmdldEF0dHJpYnV0ZShlbGVtZW50LCAncmVwbGFjZWRzdHlsZScpO1xuICAgIGlmICh0eXBlb2YgcmVwU3R5bGUgPT0gJ3VuZGVmaW5lZCcgfHwgcmVwU3R5bGUgPT09IG51bGwpIHJlcFN0eWxlID0gJyc7XG4gICAgaWYgKHJlcFN0eWxlICE9PSAnJykgcmVwU3R5bGUgPSAnLWtvLWF0dHItaHJlZjogQCcgKyB1cmxWYXIgKyBcIjsgXCIgKyByZXBTdHlsZTtcbiAgICBlbHNlIHJlcFN0eWxlID0gJy1rby1hdHRyLWhyZWY6IEAnICsgdXJsVmFyO1xuICAgIGRvbXV0aWxzLnNldEF0dHJpYnV0ZShlbGVtZW50LCAncmVwbGFjZWRzdHlsZScsIHJlcFN0eWxlKTtcbiAgICBkb211dGlscy5zZXRBdHRyaWJ1dGUoZWxlbWVudCwgJ2RhdGEta28td3JhcCcsIHVybFZhcik7XG4gICAgZG9tdXRpbHMucmVtb3ZlQXR0cmlidXRlKGVsZW1lbnQsICdkYXRhLWtvLWxpbmsnKTtcbiAgfSk7XG5cbiAgJChcIltyZXBsYWNlZHN0eWxlXVwiLCBlbGVtZW50KS5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XG4gICAgcHJvY2Vzc1N0eWxlKGVsZW1lbnQsIHRlbXBsYXRlVXJsQ29udmVydGVyLCBiaW5kaW5nUHJvdmlkZXIsIGZhbHNlKTtcbiAgfSk7XG5cbiAgJChcIltyZXBsYWNlZGh0dHAtZXF1aXZdXCIsIGVsZW1lbnQpLmVhY2goZnVuY3Rpb24oaW5kZXgsIGVsZW1lbnQpIHtcbiAgICByZXBsYWNlZEF0dHJpYnV0ZXMoZWxlbWVudCwgXCJodHRwLWVxdWl2XCIpO1xuICB9KTtcblxuICAkKFwiW2RhdGEta28tZGlzcGxheV1cIiwgZWxlbWVudCkuZWFjaChmdW5jdGlvbihpbmRleCwgZWxlbWVudCkge1xuICAgIHdyYXBFbGVtZW50V2l0aENvbmRpdGlvbignZGF0YS1rby1kaXNwbGF5JywgZWxlbWVudCwgYmluZGluZ1Byb3ZpZGVyKTtcbiAgfSk7XG5cbiAgJChcIltkYXRhLWtvLWVkaXRhYmxlXVwiLCBlbGVtZW50KS5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XG4gICAgdmFyIG5ld0JpbmRpbmcsIGRlZmF1bHRWYWx1ZSwgbW9kZWwsIGN1cnJlbnRCaW5kaW5ncywgZGF0YUJpbmQ7XG5cblxuICAgIHZhciBkYXRhRWRpdGFibGUgPSBkb211dGlscy5nZXRBdHRyaWJ1dGUoZWxlbWVudCwgXCJkYXRhLWtvLWVkaXRhYmxlXCIpO1xuXG4gICAgLy8gVE9ETyBhZGQgdmFsaWRhdGlvbiBvZiB0aGUgZWRpdGFibGVcblxuICAgIHZhciBpdGVtQmluZFZhbHVlO1xuICAgIHZhciBzZWxlY3RCaW5kaW5nO1xuICAgIGlmIChkYXRhRWRpdGFibGUubGFzdEluZGV4T2YoJy4nKSA+IDApIHtcbiAgICAgIHZhciBzdWJzID0gZGF0YUVkaXRhYmxlLnN1YnN0cigwLCBkYXRhRWRpdGFibGUubGFzdEluZGV4T2YoJy4nKSk7XG4gICAgICBpdGVtQmluZFZhbHVlID0gYmluZGluZ1Byb3ZpZGVyKHN1YnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpdGVtQmluZFZhbHVlID0gYmluZGluZ1Byb3ZpZGVyKGRhdGFFZGl0YWJsZSk7XG4gICAgfVxuICAgIHNlbGVjdEJpbmRpbmcgPSBcInd5c2l3eWdDbGljazogZnVuY3Rpb24ob2JqLCBldnQpIHsgJHJvb3Quc2VsZWN0SXRlbShcIiArIGl0ZW1CaW5kVmFsdWUgKyBcIiwgJGRhdGEpOyByZXR1cm4gZmFsc2UgfSwgY2xpY2tCdWJibGU6IGZhbHNlLCB3eXNpd3lnQ3NzOiB7IHNlbGVjdGVkaXRlbTogJHJvb3QuaXNTZWxlY3RlZEl0ZW0oXCIgKyBpdGVtQmluZFZhbHVlICsgXCIpIH0sIHNjcm9sbEludG9WaWV3OiAkcm9vdC5pc1NlbGVjdGVkSXRlbShcIiArIGl0ZW1CaW5kVmFsdWUgKyBcIilcIjtcblxuICAgIGlmIChkb211dGlscy5nZXRMb3dlclRhZ05hbWUoZWxlbWVudCkgIT0gJ2ltZycpIHtcblxuXG4gICAgICBkZWZhdWx0VmFsdWUgPSBkb211dGlscy5nZXRJbm5lckh0bWwoZWxlbWVudCk7XG4gICAgICB2YXIgbW9kZWxCaW5kVmFsdWUgPSBiaW5kaW5nUHJvdmlkZXIoZGF0YUVkaXRhYmxlLCBkZWZhdWx0VmFsdWUsIHRydWUsICd3eXNpd3lnJyk7XG4gICAgICBuZXdCaW5kaW5nID0gXCJcIjtcblxuICAgICAgaWYgKCFkb211dGlscy5nZXRBdHRyaWJ1dGUoZWxlbWVudCwgXCJpZFwiKSkge1xuICAgICAgICBuZXdCaW5kaW5nICs9IFwid3lzaXd5Z0lkOiBpZCgpKydfXCIgKyBkYXRhRWRpdGFibGUucmVwbGFjZSgnLicsICdfJykgKyBcIicsIFwiO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHNlbGVjdEJpbmRpbmcgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIG5ld0JpbmRpbmcgKz0gc2VsZWN0QmluZGluZyArIFwiLCBcIjtcbiAgICAgIH1cblxuICAgICAgbmV3QmluZGluZyArPSBcInd5c2l3eWdPckh0bWw6IFwiICsgbW9kZWxCaW5kVmFsdWU7XG5cbiAgICAgIGlmIChkb211dGlscy5nZXRMb3dlclRhZ05hbWUoZWxlbWVudCkgPT0gJ3RkJykge1xuICAgICAgICB2YXIgd3JhcHBpbmdEaXYgPSAkKCc8ZGl2IGRhdGEta28td3JhcD1cImZhbHNlXCIgc3R5bGU9XCJ3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlXCI+PC9kaXY+JylbMF07XG4gICAgICAgIGRvbXV0aWxzLnNldEF0dHJpYnV0ZSh3cmFwcGluZ0RpdiwgJ2RhdGEtYmluZCcsIG5ld0JpbmRpbmcpO1xuICAgICAgICB2YXIgbmV3Q29udGVudCA9IGRvbXV0aWxzLmdldElubmVySHRtbCgkKCc8ZGl2PjwvZGl2PicpLmFwcGVuZCh3cmFwcGluZ0RpdikpO1xuICAgICAgICBkb211dGlscy5zZXRDb250ZW50KGVsZW1lbnQsIG5ld0NvbnRlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudEJpbmRpbmdzID0gZG9tdXRpbHMuZ2V0QXR0cmlidXRlKGVsZW1lbnQsICdkYXRhLWJpbmQnKTtcbiAgICAgICAgZGF0YUJpbmQgPSAoY3VycmVudEJpbmRpbmdzICE9PSBudWxsID8gY3VycmVudEJpbmRpbmdzICsgXCIsIFwiIDogXCJcIikgKyBuZXdCaW5kaW5nO1xuICAgICAgICBkb211dGlscy5zZXRBdHRyaWJ1dGUoZWxlbWVudCwgJ2RhdGEtYmluZCcsIGRhdGFCaW5kKTtcbiAgICAgICAgZG9tdXRpbHMuc2V0Q29udGVudChlbGVtZW50LCAnJyk7XG4gICAgICB9XG4gICAgICBkb211dGlscy5yZW1vdmVBdHRyaWJ1dGUoZWxlbWVudCwgJ2RhdGEta28tZWRpdGFibGUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHdpZHRoID0gZG9tdXRpbHMuZ2V0QXR0cmlidXRlKGVsZW1lbnQsICd3aWR0aCcpO1xuICAgICAgaWYgKHdpZHRoID09PSAnJykgd2lkdGggPSBudWxsO1xuICAgICAgaWYgKHdpZHRoID09PSBudWxsKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFUlJPUjogZGF0YS1rby1lZGl0YWJsZSBpbWFnZXMgbXVzdCBkZWNsYXJlIGEgV0lEVEggYXR0cmlidXRlIVwiLCBlbGVtZW50KTtcbiAgICAgICAgdGhyb3cgXCJFUlJPUjogZGF0YS1rby1lZGl0YWJsZSBpbWFnZXMgbXVzdCBkZWNsYXJlIGEgV0lEVEggYXR0cmlidXRlIVwiO1xuICAgICAgfVxuICAgICAgdmFyIGhlaWdodCA9IGRvbXV0aWxzLmdldEF0dHJpYnV0ZShlbGVtZW50LCAnaGVpZ2h0Jyk7XG4gICAgICBpZiAoaGVpZ2h0ID09PSAnJykgaGVpZ2h0ID0gbnVsbDtcblxuICAgICAgdmFyIGFsaWduID0gZG9tdXRpbHMuZ2V0QXR0cmlidXRlKGVsZW1lbnQsICdhbGlnbicpO1xuXG4gICAgICBjdXJyZW50QmluZGluZ3MgPSBkb211dGlscy5nZXRBdHRyaWJ1dGUoZWxlbWVudCwgJ2RhdGEtYmluZCcpO1xuXG4gICAgICAvLyBUT0RPIHRoaXMgaXMgdWdseS4uLiBtYXliZSBhIGJldHRlciBzdHJhdGVneSBpcyB0byBwYXNzIHRoaXMgYXJvdW5kIHVzaW5nIFwiZGF0YS1cIiBhdHRyaWJ1dGVzXG4gICAgICB2YXIgZHluSGVpZ2h0ID0gY3VycmVudEJpbmRpbmdzICYmIGN1cnJlbnRCaW5kaW5ncy5tYXRjaCgvdmlydHVhbEF0dHI6IHtbXn1dKiBoZWlnaHQ6IChbXix9XSopWyx9XS8pO1xuICAgICAgaWYgKGR5bkhlaWdodCkgaGVpZ2h0ID0gZHluSGVpZ2h0WzFdO1xuICAgICAgdmFyIGR5bldpZHRoID0gY3VycmVudEJpbmRpbmdzICYmIGN1cnJlbnRCaW5kaW5ncy5tYXRjaCgvdmlydHVhbEF0dHI6IHtbXn1dKiB3aWR0aDogKFteLH1dKilbLH1dLyk7XG4gICAgICBpZiAoZHluV2lkdGgpIHdpZHRoID0gZHluV2lkdGhbMV07XG5cbiAgICAgIHZhciBtZXRob2Q7XG5cbiAgICAgIGRlZmF1bHRWYWx1ZSA9IGRvbXV0aWxzLmdldEF0dHJpYnV0ZShlbGVtZW50LCAnZGF0YS1rby1wbGFjZWhvbGRlci1zcmMnKTtcbiAgICAgIC8vIFRPRE8gbWFrZSBzdXJlIHRoaXMgZGVmYXVsdCB2YWx1ZSBpcyB0aGUgc2FtZSBhcyB0aGUgb25lIGNoZWNrZWQgYnkgaW1nLXd5c2l3eWcgdGVtcGxhdGUuXG4gICAgICB2YXIgdmFsdWUgPSAnJztcbiAgICAgIGlmIChkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSBkb211dGlscy5nZXRBdHRyaWJ1dGUoZWxlbWVudCwgJ3NyYycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVmYXVsdFZhbHVlID0gZG9tdXRpbHMuZ2V0QXR0cmlidXRlKGVsZW1lbnQsICdzcmMnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNpemU7XG4gICAgICBpZiAod2lkdGggJiYgaGVpZ2h0KSB7XG4gICAgICAgIHNpemUgPSB3aWR0aCArIFwiKyd4JytcIiArIGhlaWdodDtcbiAgICAgIH0gZWxzZSBpZiAoIWhlaWdodCkge1xuICAgICAgICBzaXplID0gXCIndycrXCIgKyB3aWR0aCArIFwiKycnXCI7XG4gICAgICB9IGVsc2UgaWYgKCF3aWR0aCkge1xuICAgICAgICBzaXplID0gXCInaCcrXCIgKyBoZWlnaHQgKyBcIisnJ1wiO1xuICAgICAgfVxuICAgICAgdmFyIHBsYWNlaG9sZGVyc3JjO1xuICAgICAgdmFyIHBsaGVpZ2h0ID0gaGVpZ2h0IHx8IGRvbXV0aWxzLmdldEF0dHJpYnV0ZShlbGVtZW50LCAnZGF0YS1rby1wbGFjZWhvbGRlci1oZWlnaHQnKTtcbiAgICAgIHZhciBwbHdpZHRoID0gd2lkdGggfHwgZG9tdXRpbHMuZ2V0QXR0cmlidXRlKGVsZW1lbnQsICdkYXRhLWtvLXBsYWNlaG9sZGVyLXdpZHRoJyk7XG5cbiAgICAgIGRvbXV0aWxzLnJlbW92ZUF0dHJpYnV0ZShlbGVtZW50LCAnc3JjJyk7XG4gICAgICBkb211dGlscy5yZW1vdmVBdHRyaWJ1dGUoZWxlbWVudCwgJ2RhdGEta28tZWRpdGFibGUnKTtcbiAgICAgIGRvbXV0aWxzLnJlbW92ZUF0dHJpYnV0ZShlbGVtZW50LCAnZGF0YS1rby1wbGFjZWhvbGRlci1oZWlnaHQnKTtcbiAgICAgIGRvbXV0aWxzLnJlbW92ZUF0dHJpYnV0ZShlbGVtZW50LCAnZGF0YS1rby1wbGFjZWhvbGRlci13aWR0aCcpO1xuICAgICAgZG9tdXRpbHMucmVtb3ZlQXR0cmlidXRlKGVsZW1lbnQsICdkYXRhLWtvLXBsYWNlaG9sZGVyLXNyYycpO1xuXG4gICAgICBpZiAoZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIHBsYWNlaG9sZGVyc3JjID0gXCJ7IHdpZHRoOiBcIiArIHBsd2lkdGggKyBcIiwgaGVpZ2h0OiBcIiArIHBsaGVpZ2h0ICsgXCIsIHRleHQ6IFwiICsgc2l6ZSArIFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXBsd2lkdGggfHwgIXBsaGVpZ2h0KSB7XG4gICAgICAgIC8vIFRPRE8gcmFpc2UgYW4gZXhjZXB0aW9uP1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiSU1HIGRhdGEta28tZWRpdGFibGUgbXVzdCBkZWNsYXJlIHdpZHRoIGFuZCBoZWlnaHQgYXR0cmlidXRlcywgb3IgdGhlaXIgcGxhY2Vob2xkZXIgY291bnRlcnBhcnRzIGRhdGEta28tcGxhY2Vob2xkZXItd2lkdGgvZGF0YS1rby1wbGFjZWhvbGRlci1oZWlnaHRcIiwgZWxlbWVudCk7XG4gICAgICAgIHRocm93IFwiRVJST1I6IElNRyBkYXRhLWtvLWVkaXRhYmxlIE1VU1QgZGVjbGFyZSB3aWR0aCBhbmQgaGVpZ2h0IGF0dHJpYnV0ZXMsIG9yIHRoZWlyIHBsYWNlaG9sZGVyIGNvdW50ZXJwYXJ0cyBkYXRhLWtvLXBsYWNlaG9sZGVyLXdpZHRoL2RhdGEta28tcGxhY2Vob2xkZXItaGVpZ2h0XCI7XG4gICAgICB9XG5cbiAgICAgIHZhciBiaW5kaW5nVmFsdWUgPSBiaW5kaW5nUHJvdmlkZXIoZGF0YUVkaXRhYmxlLCB2YWx1ZSwgZmFsc2UsICd3eXNpd3lnJyk7XG4gICAgICBuZXdCaW5kaW5nID0gXCJ3eXNpd3lnU3JjOiB7IHdpZHRoOiBcIiArIHdpZHRoICsgXCIsIGhlaWdodDogXCIgKyBoZWlnaHQgKyBcIiwgc3JjOiBcIiArIGJpbmRpbmdWYWx1ZSArIFwiLCBwbGFjZWhvbGRlcjogXCIgKyBwbGFjZWhvbGRlcnNyYyArIFwiIH1cIjtcbiAgICAgIGRhdGFCaW5kID0gKGN1cnJlbnRCaW5kaW5ncyAhPT0gbnVsbCA/IGN1cnJlbnRCaW5kaW5ncyArIFwiLCBcIiA6IFwiXCIpICsgbmV3QmluZGluZztcbiAgICAgIGRvbXV0aWxzLnNldEF0dHJpYnV0ZShlbGVtZW50LCAnZGF0YS1iaW5kJywgZGF0YUJpbmQpO1xuXG4gICAgICB2YXIgdG1wbE5hbWUgPSB0ZW1wbGF0ZUNyZWF0b3IoZWxlbWVudCk7XG5cbiAgICAgIHZhciBjb250YWluZXJCaW5kID0gJ3sgd2lkdGg6ICcgKyB3aWR0aDtcbiAgICAgIGlmIChhbGlnbiA9PSAnbGVmdCcpIGNvbnRhaW5lckJpbmQgKz0gJywgZmxvYXQ6IFxcJ2xlZnRcXCcnO1xuICAgICAgZWxzZSBpZiAoYWxpZ24gPT0gJ3JpZ2h0JykgY29udGFpbmVyQmluZCArPSAnLCBmbG9hdDogXFwncmlnaHRcXCcnO1xuICAgICAgZWxzZSBpZiAoYWxpZ24gPT0gJ2NlbnRlcicpIGNvbnNvbGUubG9nKCdub24gc28gY29zYSBmYSBhbGlnbj1jZW50ZXIgc3UgdW5hIGltZyBlIHF1aW5kaSBub24gc28gY29tZSBzaW11bGFybmUgbFxcJ2VkaXRpbmcnKTtcbiAgICAgIGVsc2UgaWYgKGFsaWduID09ICd0b3AnKSBjb250YWluZXJCaW5kICs9ICcsIHZlcnRpY2FsQWxpZ246IFxcJ3RvcFxcJyc7XG4gICAgICBlbHNlIGlmIChhbGlnbiA9PSAnbWlkZGxlJykgY29udGFpbmVyQmluZCArPSAnLCB2ZXJ0aWNhbEFsaWduOiBcXCdtaWRkbGVcXCcnO1xuICAgICAgZWxzZSBpZiAoYWxpZ24gPT0gJ2JvdHRvbScpIGNvbnRhaW5lckJpbmQgKz0gJywgdmVydGljYWxBbGlnbjogXFwnYm90dG9tXFwnJztcbiAgICAgIGNvbnRhaW5lckJpbmQgKz0gJ30nO1xuXG4gICAgICAkKGVsZW1lbnQpLmJlZm9yZSgnPCEtLSBrbyB3eXNpd3lnSW1nOiB7IF9kYXRhOiAkZGF0YSwgX2l0ZW06ICcgKyBpdGVtQmluZFZhbHVlICsgJywgX3RlbXBsYXRlOiBcXCcnICsgdG1wbE5hbWUgKyAnXFwnLCBfZWRpdFRlbXBsYXRlOiBcXCdpbWctd3lzaXd5Z1xcJywgX3NyYzogJyArIGJpbmRpbmdWYWx1ZSArICcsIF93aWR0aDogJyArIHdpZHRoICsgJywgX2hlaWdodDogJyArIGhlaWdodCArICcsIF9hbGlnbjogJyArIChhbGlnbiA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6ICdcXCcnICsgYWxpZ24gKyAnXFwnJykgKyAnLCBfc2l6ZTogJyArIHNpemUgKyAnLCBfbWV0aG9kOiAnICsgbWV0aG9kICsgJywgX3BsYWNlaG9sZGVyc3JjOiAnICsgcGxhY2Vob2xkZXJzcmMgKyAnLCBfc3R5bGViaW5kOiAnICsgY29udGFpbmVyQmluZCArICcgfSAtLT4nKTtcbiAgICAgICQoZWxlbWVudCkuYWZ0ZXIoJzwhLS0gL2tvIC0tPicpO1xuICAgIH1cblxuICB9KTtcblxuICAvLyBBcHBsaWVkIGFmdGVyIHRoZSBkYXRhLWVkaXRhYmxlIHNvIHRvIGF2b2lkIHByb2Nlc3NpbmcgaHJlZnMgZm9yIGVkaXRhYmxlIGNvbnRlbnRcbiAgJChcIltocmVmXVwiLCBlbGVtZW50KS5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XG4gICAgdmFyIGF0dHJWYWx1ZSA9IGRvbXV0aWxzLmdldEF0dHJpYnV0ZShlbGVtZW50LCAnaHJlZicpO1xuICAgIHZhciBuZXdCaW5kaW5nID0gJ3d5c2l3eWdIcmVmOiBcXCcnICsgY29udmVydGVyVXRpbHMuYWRkU2xhc2hlcyhhdHRyVmFsdWUpICsgJ1xcJyc7XG4gICAgdmFyIGN1cnJlbnRCaW5kaW5ncyA9IGRvbXV0aWxzLmdldEF0dHJpYnV0ZShlbGVtZW50LCAnZGF0YS1iaW5kJyk7XG4gICAgdmFyIGRhdGFCaW5kID0gKGN1cnJlbnRCaW5kaW5ncyAhPT0gbnVsbCA/IGN1cnJlbnRCaW5kaW5ncyArIFwiLCBcIiA6IFwiXCIpICsgbmV3QmluZGluZztcbiAgICBkb211dGlscy5zZXRBdHRyaWJ1dGUoZWxlbWVudCwgJ2RhdGEtYmluZCcsIGRhdGFCaW5kKTtcbiAgfSk7XG5cbiAgJChcInJlcGxhY2VkYmxvY2tcIiwgZWxlbWVudCkuZWFjaChmdW5jdGlvbihpbmRleCwgZWxlbWVudCkge1xuICAgIHZhciBibG9ja0VsZW1lbnQgPSBmaXhlZEJsb2Nrc1tpbmRleF07XG5cbiAgICB2YXIgYmxvY2tOYW1lID0gcHJvY2Vzc0Jsb2NrKGJsb2NrRWxlbWVudCwgZGVmcywgdGhlbWVVcGRhdGVyLCBibG9ja1B1c2hlciwgdGVtcGxhdGVVcmxDb252ZXJ0ZXIsICdibG9jaycsIHRlbXBsYXRlTmFtZSwgY29udGFpbmVyTmFtZSwgdHJ1ZSwgdGVtcGxhdGVDcmVhdG9yKTtcbiAgICAvLyByZXBsYWNlZCBibG9ja3MgYXJlIGRlZmluZWQgaW4gdGhlIG1vZGVsIHJvb3RcbiAgICB2YXIgbW9kZWxCaW5kVmFsdWUgPSBtb2RlbERlZi5lbnN1cmVQYXRoQW5kR2V0QmluZFZhbHVlKGRlZnMsIHRoZW1lVXBkYXRlciwgcm9vdE1vZGVsTmFtZSwgdGVtcGxhdGVOYW1lLCAnJywgYmxvY2tOYW1lKTtcblxuICAgIC8vIHRoaXMgd2F5IHdlIGNhbGwgYmxvY2std3lzaXd5ZyBvciBibG9jay1zaG93IGFuZCBub3QgZGlyZWN0bHkgdGhlIHJpZ2h0IGJsb2NrXG4gICAgJChlbGVtZW50KS5iZWZvcmUoJzwhLS0ga28gYmxvY2s6IHsgZGF0YTogJyArIGNvbnZlcnRlclV0aWxzLmFkZFNsYXNoZXMobW9kZWxCaW5kVmFsdWUpICsgJywgdGVtcGxhdGU6IFxcJ2Jsb2NrXFwnIH0gLS0+Jyk7XG4gICAgJChlbGVtZW50KS5hZnRlcignPCEtLSAva28gLS0+Jyk7XG4gICAgJChlbGVtZW50KS5yZW1vdmUoKTtcbiAgfSk7XG5cbiAgLy8gVE9ETyBkbyB3ZSByZWFsbHkgbmVlZCB0byBsb29wIGluIHJldmVyc2Ugb3JkZXI/XG4gIC8vIGRhdGEta28td3JhcCBoYXZlIHRvIGJlIHByb2Nlc3NlZCBhdCB0aGUgZW5kLCBleHBlY2lhbGx5IGFmdGVyIFwicmVwbGFjZWJsb2Nrc1wiXG4gIC8vIG90aGVyd2lzZSBhIGRhdGEta28td3JhcCB3cmFwcGluZyBhIGRhdGEta28tYmxvY2sgd291bGQgYnJlYWsgZXZlcnl0aGluZy5cbiAgJCgkKFwiW2RhdGEta28td3JhcF1cIiwgZWxlbWVudCkuZ2V0KCkucmV2ZXJzZSgpLCBlbGVtZW50KS5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XG4gICAgdmFyIGNvbmQgPSBkb211dGlscy5nZXRBdHRyaWJ1dGUoZWxlbWVudCwgJ2RhdGEta28td3JhcCcpO1xuICAgIGlmICh0eXBlb2YgY29uZCA9PT0gJ3VuZGVmaW5lZCcgfHwgY29uZCA9PT0gJycgfHwgY29uZCA9PT0gJ3RydWUnKSB7XG4gICAgICB0aHJvdyBcIlVuc3VwcG9ydGVkIGVtcHR5IHZhbHVlIGZvciBkYXRhLWtvLXdyYXA6IHVzZSBmYWxzZSB2YWx1ZSBpZiB5b3Ugd2FudCB0byBhbHdheXMgcmVtb3ZlIHRoZSB0YWdcIjtcbiAgICB9XG5cbiAgICB2YXIgY29uZEJpbmRpbmcgPSBjb252ZXJ0ZXJVdGlscy5jb25kaXRpb25CaW5kaW5nKGNvbmQsIGJpbmRpbmdQcm92aWRlcik7XG5cbiAgICAvKlxuICAgICAgICAgIHZhciBjb25kQmluZGluZyA9IGZhbHNlO1xuICAgICAgICAgIGlmICh0eXBlb2YgY29uZCA9PT0gJ3VuZGVmaW5lZCcgfHwgY29uZCA9PT0gJycpIHtcbiAgICAgICAgICAgIHRocm93IFwiVW5zdXBwb3J0ZWQgZW1wdHkgdmFsdWUgZm9yIGRhdGEta28td3JhcDogdXNlIGZhbHNlIHZhbHVlIGlmIHlvdSB3YW50IHRvIGFsd2F5cyByZW1vdmUgdGhlIHRhZ1wiO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY29uZCA9PT0gJ2ZhbHNlJykge1xuICAgICAgICAgICAgY29uZEJpbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNvbmQgPT09ICd0cnVlJykge1xuICAgICAgICAgICAgdGhyb3cgXCJVbnN1cHBvcnRlZCB0cnVlIHZhbHVlIGZvciBkYXRhLWtvLXdyYXAuIFRoaXMgbWFrZXMgbm8gc2Vuc2U6IHVzZSBmYWxzZSBvciBhIHZhcmlhYmxlXCI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbmRCaW5kaW5nID0gYmluZGluZ1Byb3ZpZGVyKGNvbmQpKycoKSc7XG4gICAgICAgICAgfVxuICAgICovXG5cbiAgICB2YXIgZGF0YUJpbmQgPSBkb211dGlscy5nZXRBdHRyaWJ1dGUoZWxlbWVudCwgJ2RhdGEtYmluZCcpO1xuXG4gICAgdmFyIGlubmVyVG1wbE5hbWUsIG91dGVyVG1wbE5hbWU7XG4gICAgLy8gVE9ETyB1Z2x5IGhhcmRjb2RlZCBoYW5kbGluZzogYXQgdGhlIHZlcnkgbGVhc3QgdGhpcyBzaG91bGQgYmUgaW52b2tlZCBieSB0aGUgZGF0YS1jb250YWluZXIgY2FsbGVyLlxuICAgIGlmIChkYXRhQmluZCAhPT0gJycgJiYgZGF0YUJpbmQgIT09IG51bGwgJiYgZGF0YUJpbmQubWF0Y2goLyhibG9ja3x3eXNpd3lnT3JIdG1sKTovKSkge1xuICAgICAgLy8gd2UgY2FuJ3QgcHV0IHRoZSBjb250ZW50IGluIGEgdGVtcGxhdGUgYmVjYXVzZSBpdCB3aWxsIGJlIG92ZXJ3cml0dGVuIGJ5IHRoZSBiaW5kaW5nXG4gICAgICB2YXIgaW5uZXJUbXBsQ29udGVudCA9ICc8IS0tIGtvICcgKyBkYXRhQmluZCArICcgLS0+JyArIGRvbXV0aWxzLmdldElubmVySHRtbChlbGVtZW50KSArICc8IS0tIC9rbyAtLT4nO1xuICAgICAgaW5uZXJUbXBsTmFtZSA9IHRlbXBsYXRlQ3JlYXRvcihpbm5lclRtcGxDb250ZW50KTtcbiAgICAgIGRvbXV0aWxzLnJlbW92ZUF0dHJpYnV0ZShlbGVtZW50LCAnZGF0YS1rby13cmFwJyk7XG4gICAgICBvdXRlclRtcGxOYW1lID0gdGVtcGxhdGVDcmVhdG9yKGVsZW1lbnQpO1xuICAgICAgZG9tdXRpbHMucmVwbGFjZUh0bWwoZWxlbWVudCwgJzwhLS0ga28gdGVtcGxhdGU6IC8qIHNwZWNpYWwgKi8gKHR5cGVvZiB0ZW1wbGF0ZU1vZGUgIT0gXFwndW5kZWZpbmVkXFwnICYmIHRlbXBsYXRlTW9kZSA9PSBcXCd3eXNpd3lnXFwnKSB8fCAnICsgY29uZEJpbmRpbmcgKyAnID8gXFwnJyArIG91dGVyVG1wbE5hbWUgKyAnXFwnIDogXFwnJyArIGlubmVyVG1wbE5hbWUgKyAnXFwnIC0tPjwhLS0gL2tvIC0tPicpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB3ZSBwdXQgdGhlIGNvbnRlbnQgaW4gYSB0ZW1wbGF0ZSBhbmQgdGhlIGZyYW1lIGluIGFub3RoZXIgdGVtcGxhdGUgaW5jbHVkaW5nIHRoaXMgb25lLlxuICAgICAgaW5uZXJUbXBsTmFtZSA9IHRlbXBsYXRlQ3JlYXRvcihkb211dGlscy5nZXRJbm5lckh0bWwoZWxlbWVudCkpO1xuICAgICAgZG9tdXRpbHMucmVtb3ZlQXR0cmlidXRlKGVsZW1lbnQsICdkYXRhLWtvLXdyYXAnKTtcbiAgICAgIGRvbXV0aWxzLnNldENvbnRlbnQoZWxlbWVudCwgJzwhLS0ga28gdGVtcGxhdGU6IFxcJycgKyBpbm5lclRtcGxOYW1lICsgJ1xcJyAtLT48IS0tIC9rbyAtLT4nKTtcbiAgICAgIG91dGVyVG1wbE5hbWUgPSB0ZW1wbGF0ZUNyZWF0b3IoZWxlbWVudCk7XG4gICAgICBkb211dGlscy5yZXBsYWNlSHRtbChlbGVtZW50LCAnPCEtLSBrbyB0ZW1wbGF0ZTogKHR5cGVvZiB0ZW1wbGF0ZU1vZGUgIT0gXFwndW5kZWZpbmVkXFwnICYmIHRlbXBsYXRlTW9kZSA9PSBcXCd3eXNpd3lnXFwnKSB8fCAnICsgY29uZEJpbmRpbmcgKyAnID8gXFwnJyArIG91dGVyVG1wbE5hbWUgKyAnXFwnIDogXFwnJyArIGlubmVyVG1wbE5hbWUgKyAnXFwnIC0tPjwhLS0gL2tvIC0tPicpO1xuICAgIH1cblxuICB9KTtcblxuICB0ZW1wbGF0ZUNyZWF0b3IoZWxlbWVudCwgdGVtcGxhdGVOYW1lLCAnc2hvdycpO1xuXG4gIGJsb2NrUHVzaGVyKHJvb3RNb2RlbE5hbWUsIHRlbXBsYXRlTmFtZSwgY29udGV4dE5hbWUsIGNvbnRhaW5lck5hbWUpO1xuXG4gIHJldHVybiB0ZW1wbGF0ZU5hbWU7XG5cbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFeGNlcHRpb24gd2hpbGUgcGFyc2luZyB0aGUgdGVtcGxhdGVcIiwgZSwgZWxlbWVudCk7XG4gICAgdGhyb3cgZTtcbiAgfVxuXG59O1xuXG5mdW5jdGlvbiBjb25kaXRpb25hbF9yZXBsYWNlKGh0bWwpIHtcbiAgcmV0dXJuIGh0bWwucmVwbGFjZSgvPCEtLVxcW2lmIChbXlxcXV0qKVxcXT4oW1xcc1xcU10qPyk8IVxcW2VuZGlmXFxdLS0+L2csIGZ1bmN0aW9uKG1hdGNoLCBjb25kaXRpb24sIGJvZHkpIHtcbiAgICB2YXIgZGQgPSAnPCEtLSBjYzpzdGFydCAtLT4nO1xuICAgIGRkICs9IGJvZHkucmVwbGFjZSgvPChcXC8/KShbQS1aYS16XSopL2csICc8JDFjYyQyJykucmVwbGFjZSgvPFxcLyhbXj5dKik+L2csJzwhLS0gY2M6YmVmb3JlOiQxIC0tPjwvJDE+PCEtLSBjYzphZnRlcjokMSAtLT4nKTtcbiAgICBkZCArPSAnPCEtLSBjYzplbmQgLS0+JztcbiAgICB2YXIgb3V0cHV0ID0gJzxyZXBsYWNlZGNjIGNvbmRpdGlvbj1cIicrY29uZGl0aW9uKydcIiBzdHlsZT1cImRpc3BsYXk6IG5vbmVcIj4nO1xuICAgIG91dHB1dCArPSAkKCc8ZGl2PicpLmFwcGVuZCgkKGRkKSkuaHRtbCgpLnJlcGxhY2UoLzwhLS0gY2M6YmVmb3JlOihbXiBdKikgLS0+PFxcL1xcMT48IS0tIGNjOmFmdGVyOlxcMSAtLT4vZywgJzwvJDE+JylcbiAgICAgIC5yZXBsYWNlKC9ePCEtLSBjYzpzdGFydCAtLT4vLCAnJylcbiAgICAgIC5yZXBsYWNlKC88IS0tIGNjOmVuZCAtLT4kLywgJycpO1xuICAgIG91dHB1dCArPSAnPC9yZXBsYWNlZGNjPic7XG4gICAgLy8gY29uc29sZS5sb2coXCJSZXR1cm5pbmcgZW1wdHkgc3RyaW5nIGluc3RlYWQgb2ZcIiwgb3V0cHV0KTtcbiAgICAvLyBpZiAodHJ1ZSkgcmV0dXJuICcnO1xuICAgIHJldHVybiBvdXRwdXQ7XG4gIH0pO1xufVxuXG5cbnZhciB0cmFuc2xhdGVUZW1wbGF0ZSA9IGZ1bmN0aW9uKHRlbXBsYXRlTmFtZSwgaHRtbCwgdGVtcGxhdGVVcmxDb252ZXJ0ZXIsIHRlbXBsYXRlQ3JlYXRvcikge1xuICB2YXIgZGVmcyA9IHt9O1xuICB2YXIgcmVwbGFjZWRIdG1sID0gY29uZGl0aW9uYWxfcmVwbGFjZShodG1sLnJlcGxhY2UoLyg8W14+XStcXHMpKHN0eWxlfGh0dHAtZXF1aXYpKD1cIlteXCJdKlwiW14+XSo+KS9naSwgZnVuY3Rpb24obWF0Y2gsIHAxLCBwMiwgcDMpIHtcbiAgICByZXR1cm4gcDEgKyAncmVwbGFjZWQnICsgcDIgKyBwMztcbiAgfSkpO1xuICB2YXIgY29udGVudCA9ICQocmVwbGFjZWRIdG1sKTtcbiAgdmFyIGVsZW1lbnQgPSBjb250ZW50WzBdO1xuXG4gIHZhciBibG9ja3MgPSBbXTsgLy8ge3Jvb3ROYW1lLCBibG9ja05hbWUsIGNvbnRhaW5lck5hbWV9XG4gIHZhciBfYmxvY2tQdXNoZXIgPSBmdW5jdGlvbihyb290TmFtZSwgYmxvY2tOYW1lLCBjb250ZXh0TmFtZSwgY29udGFpbmVyTmFtZSkge1xuICAgIGJsb2Nrcy5wdXNoKHtcbiAgICAgIHJvb3Q6IHJvb3ROYW1lLFxuICAgICAgYmxvY2s6IGJsb2NrTmFtZSxcbiAgICAgIGNvbnRleHQ6IGNvbnRleHROYW1lLFxuICAgICAgY29udGFpbmVyOiBjb250YWluZXJOYW1lXG4gICAgfSk7XG4gIH07XG5cbiAgLy8gVE9ETyBoYXZlIHRvIGFjY2VwdCBudWxscyBhcyB1bmRlZmluZWRzIChiZWNhdXNlIG9mIG1vZGVsLmpzIGJlaGF2aW91cilcbiAgdmFyIHRoZW1lVXBkYXRlciA9IGZ1bmN0aW9uKG5hbWUsIGtleSwgdmFsKSB7XG4gICAgaWYgKHR5cGVvZiBkZWZzWyd0aGVtZXMnXSA9PT0gJ3VuZGVmaW5lZCcpIGRlZnNbJ3RoZW1lcyddID0ge307XG4gICAgaWYgKHR5cGVvZiBkZWZzWyd0aGVtZXMnXVtuYW1lXSA9PT0gJ3VuZGVmaW5lZCcpIGRlZnNbJ3RoZW1lcyddW25hbWVdID0ge307XG4gICAgaWYgKHR5cGVvZiBkZWZzWyd0aGVtZXMnXVtuYW1lXVtrZXldID09PSAndW5kZWZpbmVkJyB8fCBkZWZzWyd0aGVtZXMnXVtuYW1lXVtrZXldID09PSBudWxsKSBkZWZzWyd0aGVtZXMnXVtuYW1lXVtrZXldID0gdmFsO1xuICAgIGVsc2UgaWYgKHR5cGVvZiB2YWwgIT09ICd1bmRlZmluZWQnICYmIHZhbCAhPT0gbnVsbCkge1xuICAgICAgdmFyIHByZWNWYWwgPSBkZWZzWyd0aGVtZXMnXVtuYW1lXVtrZXldO1xuICAgICAgaWYgKHByZWNWYWwgIT0gdmFsKSBjb25zb2xlLmxvZyhcIkVycm9yIHNldHRpbmcgYSBuZXcgZGVmYXVsdCBmb3IgcHJvcGVydHkgXCIgKyBrZXkgKyBcIiBpbiB0aGVtZSBcIiArIG5hbWUgKyBcIi4gb2xkOlwiICsgcHJlY1ZhbCArIFwiIG5ldzpcIiArIHZhbCArIFwiIVwiKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGNvbnRhaW5lcnMgPSAkKFwiW2RhdGEta28tY29udGFpbmVyXVwiLCBjb250ZW50KTtcbiAgdmFyIGNvbnRhaW5lcnNEb20gPSB7fTtcbiAgY29udGFpbmVycy5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XG4gICAgdmFyIGNvbnRhaW5lck5hbWUgPSBkb211dGlscy5nZXRBdHRyaWJ1dGUoZWxlbWVudCwgJ2RhdGEta28tY29udGFpbmVyJykgKyBcIkJsb2Nrc1wiO1xuXG4gICAgZG9tdXRpbHMucmVtb3ZlQXR0cmlidXRlKGVsZW1lbnQsICdkYXRhLWtvLWNvbnRhaW5lcicpO1xuICAgIGRvbXV0aWxzLnNldEF0dHJpYnV0ZShlbGVtZW50LCAnZGF0YS1iaW5kJywgJ2Jsb2NrOiAnICsgY29udGFpbmVyTmFtZSk7XG5cbiAgICB2YXIgY29udGFpbmVyQmxvY2tzID0gJChcIj4gW2RhdGEta28tYmxvY2tdXCIsIGVsZW1lbnQpO1xuICAgIGRvbXV0aWxzLnJlbW92ZUVsZW1lbnRzKGNvbnRhaW5lckJsb2NrcywgdHJ1ZSk7XG5cbiAgICBjb250YWluZXJzRG9tW2NvbnRhaW5lck5hbWVdID0gY29udGFpbmVyQmxvY2tzO1xuICB9KTtcblxuICAvLyBUT0RPIHJlbW92ZSBoYXJkY29kZWQgcHJvcGVydGllczogd2UgbmVlZCB0aGVtIGJlY2F1c2Ugd2l0aG91dCB0aGVzZSBsb2FkaW5nIGEgYmFzaWMgdGVtcGxhdGUgZmFpbHMuXG4gIC8vIE5lZWRlZCBpbiBvcmRlciB0byB1c2UgZGF0YS1rby1ibG9ja1xuICBtb2RlbERlZi5jcmVhdGVPclVwZGF0ZUJsb2NrRGVmKGRlZnMsICdpZCcpO1xuICAvLyBOZWVkZWQgYWx3YXlzIGFzIGl0IGlzIHRoZSBkZWZhdWx0IHRoZW1lIHNlY3Rpb24uXG4gIG1vZGVsRGVmLmNyZWF0ZU9yVXBkYXRlQmxvY2tEZWYoZGVmcywgJ2JvZHlUaGVtZScpO1xuICAvLyBOZWVkZWQgZm9yIGRhdGEta28tY29udGFpbmVyXG4gIG1vZGVsRGVmLmNyZWF0ZU9yVXBkYXRlQmxvY2tEZWYoZGVmcywgJ2Jsb2NrcycsICdibG9ja3NbXScpO1xuXG4gIC8vIE5lZWRlZCBpZiB5b3Ugd2FudCB0byB1c2UgYSB0ZXh0IHZhcmlhYmxlPyBUT0RPIHRoaXMgc2hvdWxkIG5vdCBiZSBuZWVkZWQhXG4gIG1vZGVsRGVmLmNyZWF0ZU9yVXBkYXRlQmxvY2tEZWYoZGVmcywgJ3RleHQnKTtcblxuICBwcm9jZXNzQmxvY2soZWxlbWVudCwgZGVmcywgdGhlbWVVcGRhdGVyLCBfYmxvY2tQdXNoZXIsIHRlbXBsYXRlVXJsQ29udmVydGVyLCAndGVtcGxhdGUnLCB0ZW1wbGF0ZU5hbWUsIHVuZGVmaW5lZCwgZmFsc2UsIHRlbXBsYXRlQ3JlYXRvcik7XG5cbiAgdmFyIGJsb2NrUHJvY2VzcyA9IGZ1bmN0aW9uKGNvbnRhaW5lck5hbWUsIGluZGV4LCBlbGVtZW50KSB7XG4gICAgcHJvY2Vzc0Jsb2NrKGVsZW1lbnQsIGRlZnMsIHRoZW1lVXBkYXRlciwgX2Jsb2NrUHVzaGVyLCB0ZW1wbGF0ZVVybENvbnZlcnRlciwgJ2Jsb2NrJywgdGVtcGxhdGVOYW1lLCBjb250YWluZXJOYW1lLCB0cnVlLCB0ZW1wbGF0ZUNyZWF0b3IpO1xuICB9O1xuXG4gIGZvciAodmFyIHByb3AgaW4gY29udGFpbmVyc0RvbSlcbiAgICBpZiAoY29udGFpbmVyc0RvbS5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgdmFyIGNvbnRhaW5lckJsb2NrcyA9IGNvbnRhaW5lcnNEb21bcHJvcF07XG4gICAgICB2YXIgY29udGFpbmVyTmFtZSA9IHByb3A7XG5cbiAgICAgIG1vZGVsRGVmLmVuc3VyZVBhdGhBbmRHZXRCaW5kVmFsdWUoZGVmcywgdGhlbWVVcGRhdGVyLCB0ZW1wbGF0ZU5hbWUsIHRlbXBsYXRlTmFtZSwgJycsIGNvbnRhaW5lck5hbWUgKyBcIi5ibG9ja3NcIiwgXCJbXVwiKTtcblxuICAgICAgY29udGFpbmVyQmxvY2tzLmVhY2goYmxvY2tQcm9jZXNzLmJpbmQodW5kZWZpbmVkLCBjb250YWluZXJOYW1lKSk7XG4gICAgfVxuXG4gIHZhciB0ZW1wbGF0ZURlZiA9IHtcbiAgICBfZGVmczogZGVmcyxcbiAgICB0ZW1wbGF0ZU5hbWU6IHRlbXBsYXRlTmFtZSxcbiAgICBfYmxvY2tzOiBibG9ja3NcbiAgfTtcblxuICBpZiAodHlwZW9mIGRlZnNbdGVtcGxhdGVOYW1lXS5fdmVyc2lvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0ZW1wbGF0ZURlZi52ZXJzaW9uID0gZGVmc1t0ZW1wbGF0ZU5hbWVdLl92ZXJzaW9uO1xuICB9XG5cbiAgcmV0dXJuIHRlbXBsYXRlRGVmO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IHRyYW5zbGF0ZVRlbXBsYXRlOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vLyBQYXJzZXMgQ1NTL3N0eWxlc2hlZXRzIGRlY2xhcmF0aW9ucyAta28tYmxvY2tkZWZzLy1rby10aGVtZXNcbi8vIEl0IHJldHVybnMgS08gYmluZGluZ3MgYnV0IGRvZXNuJ3QgZGVwZW5kIG9uIEtPXG4vLyBOZWVkcyBhIGJpbmRpbmdQcm92aWRlclxuLy8gQWxzbyB1c2VzIGEgYmxvY2tEZWZzVXBkYXRlciB0byB1cGRhdGUgZGVmaW5pdGlvbnMgd2hpbGUgcGFyc2luZyB0aGUgc3R5bGVzaGVldC5cblxudmFyIGNzc1BhcnNlID0gcmVxdWlyZShcIm1lbnNjaC9saWIvcGFyc2VyLmpzXCIpO1xudmFyIGNvbnNvbGUgPSByZXF1aXJlKFwiY29uc29sZVwiKTtcbnZhciBjb252ZXJ0ZXJVdGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzLmpzXCIpO1xudmFyIGVsYWJvcmF0ZURlY2xhcmF0aW9ucyA9IHJlcXVpcmUoXCIuL2RlY2xhcmF0aW9ucy5qc1wiKTtcblxuLyogVGVtcG9yYXJ5IGV4cGVyaW1lbnRhbCBjb2RlIG5vdCB1c2VkXG52YXIgX3Byb2Nlc3NTdHlsZVNoZWV0UnVsZXNfcHJvY2Vzc1RoZW1lcyA9IGZ1bmN0aW9uIChiaW5kaW5nUHJvdmlkZXIsIHRoZW1lVXBkYXRlciwgcnVsZXMpIHtcbiAgdmFyIHNlbHMsIGRlY2xzLCBpLCBqLCBrO1xuICBmb3IoIGkgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocnVsZXNbaV0udHlwZSA9PSAncnVsZScpIHtcbiAgICAgIHNlbHMgPSBydWxlc1tpXS5zZWxlY3RvcnM7XG4gICAgICBkZWNscyA9IHJ1bGVzW2ldLmRlY2xhcmF0aW9ucztcbiAgICAgIGZvciAoaiA9IDA7IGogPCBzZWxzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGZvciAoayA9IDA7IGsgPCBkZWNscy5sZW5ndGg7IGsrKykgaWYgKGRlY2xzW2tdLnR5cGUgPT0gJ3Byb3BlcnR5Jykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgYmluZFZhbCA9IGJpbmRpbmdQcm92aWRlcignJCcrZGVjbHNba10ubmFtZSk7XG4gICAgICAgICAgICB0aGVtZVVwZGF0ZXIoc2Vsc1tqXSwgZGVjbHNba10ubmFtZSwgZGVjbHNba10udmFsdWUsIGJpbmRWYWwpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRXhjZXB0aW9uIHNldHRpbmcgdGhlbWUgZm9yXCIsIGRlY2xzW2tdLm5hbWUsIGRlY2xzW2tdLnZhbHVlLCBlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG4qL1xuXG52YXIgX3Byb2Nlc3NTdHlsZVNoZWV0UnVsZXNfcHJvY2Vzc0Jsb2NrRGVmID0gZnVuY3Rpb24oYmxvY2tEZWZzVXBkYXRlciwgcnVsZXMpIHtcbiAgdmFyIHByb3BlcnRpZXMsIG5hbWVkUHJvcHMsIGRlY2xzO1xuICAvLyBuYW1lLCBjb250ZXh0TmFtZSwgZ2xvYmFsU3R5bGUsIHRoZW1lT3ZlcnJpZGUsIGV4dGVuZCwgbWluLCBtYXgsIHdpZGdldCwgb3B0aW9ucywgY2F0ZWdvcnksIHZhcmlhbnQsIGhlbHAsIGJsb2NrRGVzY3JpcHRpb24sIHZlcnNpb24sIFxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHJ1bGVzW2ldLnR5cGUgPT0gJ3J1bGUnKSB7XG4gICAgICB2YXIgc2VscyA9IHJ1bGVzW2ldLnNlbGVjdG9ycztcbiAgICAgIHZhciBoYXNEZWNsYXJhdGlvbnMgPSBmYWxzZTtcbiAgICAgIHZhciBoYXNQcmV2aWV3cyA9IGZhbHNlO1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChzZWxzW2pdLm1hdGNoKC86cHJldmlldyQvKSkge1xuICAgICAgICAgIGhhc1ByZXZpZXdzID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoYXNEZWNsYXJhdGlvbnMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaGFzUHJldmlld3MgJiYgaGFzRGVjbGFyYXRpb25zKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiY2Fubm90IG1peCBzZWxlY3RvcnMgdHlwZSAoOnByZXZpZXcgYW5kIGRlY2xhcmF0aW9ucykgaW4gQHN1cHBvcnRzIC1rby1ibG9ja2RlZnMgXCIsIHNlbHMpO1xuICAgICAgICB0aHJvdyBcIkNhbm5vdCBtaXggc2VsZWN0b3JzIHR5cGUgKDpwcmV2aWV3IGFuZCBkZWNsYXJhdGlvbnMpIGluIEBzdXBwb3J0cyAta28tYmxvY2tkZWZzXCI7XG4gICAgICB9XG4gICAgICBpZiAoIWhhc1ByZXZpZXdzICYmICFoYXNEZWNsYXJhdGlvbnMpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJjYW5ub3QgZmluZCBrbm93biBzZWxlY3RvcnMgaW4gQHN1cHBvcnRzIC1rby1ibG9ja2RlZnMgXCIsIHNlbHMpO1xuICAgICAgICB0aHJvdyBcIkNhbm5vdCBmaW5kIGtub3duIHNlbGVjdG9ycyBpbiBAc3VwcG9ydHMgLWtvLWJsb2NrZGVmc1wiO1xuICAgICAgfVxuICAgICAgaWYgKGhhc0RlY2xhcmF0aW9ucykge1xuICAgICAgICBwcm9wZXJ0aWVzID0gJyc7XG4gICAgICAgIG5hbWVkUHJvcHMgPSB7fTtcblxuLypcbiAgICAgICAgbmFtZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgY29udGV4dE5hbWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIGdsb2JhbFN0eWxlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGVtZU92ZXJyaWRlID0gdW5kZWZpbmVkO1xuICAgICAgICBleHRlbmQgPSB1bmRlZmluZWQ7XG4gICAgICAgIG1heCA9IHVuZGVmaW5lZDtcbiAgICAgICAgbWluID0gdW5kZWZpbmVkO1xuICAgICAgICB3aWRnZXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIG9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIGNhdGVnb3J5ID0gdW5kZWZpbmVkO1xuICAgICAgICB2YXJpYW50ID0gdW5kZWZpbmVkO1xuICAgICAgICBoZWxwID0gdW5kZWZpbmVkO1xuICAgICAgICBibG9ja0Rlc2NyaXB0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB2ZXJzaW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAqL1xuICAgICAgICBkZWNscyA9IHJ1bGVzW2ldLmRlY2xhcmF0aW9ucztcbiAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBkZWNscy5sZW5ndGg7IGsrKykgaWYgKGRlY2xzW2tdLnR5cGUgPT0gJ3Byb3BlcnR5Jykge1xuICAgICAgICAgIGlmIChkZWNsc1trXS5uYW1lID09ICdsYWJlbCcpIG5hbWVkUHJvcHMubmFtZSA9IGRlY2xzW2tdLnZhbHVlO1xuICAgICAgICAgIGVsc2UgaWYgKGRlY2xzW2tdLm5hbWUgPT0gJ2NvbnRleHQnKSBuYW1lZFByb3BzLmNvbnRleHROYW1lID0gZGVjbHNba10udmFsdWU7XG4gICAgICAgICAgZWxzZSBpZiAoZGVjbHNba10ubmFtZSA9PSAncHJvcGVydGllcycpIHByb3BlcnRpZXMgPSBkZWNsc1trXS52YWx1ZTtcbiAgICAgICAgICBlbHNlIGlmIChkZWNsc1trXS5uYW1lID09ICd0aGVtZScpIG5hbWVkUHJvcHMuZ2xvYmFsU3R5bGUgPSAnX3RoZW1lXy4nICsgZGVjbHNba10udmFsdWU7XG4gICAgICAgICAgZWxzZSBpZiAoZGVjbHNba10ubmFtZSA9PSAndGhlbWVPdmVycmlkZScpIG5hbWVkUHJvcHMudGhlbWVPdmVycmlkZSA9IFN0cmluZyhkZWNsc1trXS52YWx1ZSkudG9Mb3dlckNhc2UoKSA9PSAndHJ1ZSc7XG4gICAgICAgICAgLy8gZWxzZSBpZiAoZGVjbHNba10ubmFtZSA9PSAnZXh0ZW5kJykgZXh0ZW5kID0gZGVjbHNba10udmFsdWU7XG5cbiAgICAgICAgICAvLyBlbHNlIGlmIChkZWNsc1trXS5uYW1lID09ICdtYXgnKSBtYXggPSBkZWNsc1trXS52YWx1ZTtcbiAgICAgICAgICAvLyBlbHNlIGlmIChkZWNsc1trXS5uYW1lID09ICdtaW4nKSBtaW4gPSBkZWNsc1trXS52YWx1ZTtcbiAgICAgICAgICAvLyBlbHNlIGlmIChkZWNsc1trXS5uYW1lID09ICdvcHRpb25zJykgb3B0aW9ucyA9IGRlY2xzW2tdLnZhbHVlO1xuXG4gICAgICAgICAgLy8gZWxzZSBpZiAoZGVjbHNba10ubmFtZSA9PSAnd2lkZ2V0Jykgd2lkZ2V0ID0gZGVjbHNba10udmFsdWU7XG4gICAgICAgICAgLy8gZWxzZSBpZiAoZGVjbHNba10ubmFtZSA9PSAnY2F0ZWdvcnknKSBjYXRlZ29yeSA9IGRlY2xzW2tdLnZhbHVlO1xuICAgICAgICAgIC8vIGVsc2UgaWYgKGRlY2xzW2tdLm5hbWUgPT0gJ3ZhcmlhbnQnKSB2YXJpYW50ID0gZGVjbHNba10udmFsdWU7XG4gICAgICAgICAgLy8gZWxzZSBpZiAoZGVjbHNba10ubmFtZSA9PSAnaGVscCcpIGhlbHAgPSBkZWNsc1trXS52YWx1ZTtcbiAgICAgICAgICAvLyBlbHNlIGlmIChkZWNsc1trXS5uYW1lID09ICdibG9ja0Rlc2NyaXB0aW9uJykgYmxvY2tEZXNjcmlwdGlvbiA9IGRlY2xzW2tdLnZhbHVlO1xuICAgICAgICAgIC8vIGVsc2UgaWYgKGRlY2xzW2tdLm5hbWUgPT0gJ3ZlcnNpb24nKSB2ZXJzaW9uID0gZGVjbHNba10udmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuYW1lZFByb3BzW2RlY2xzW2tdLm5hbWVdID0gZGVjbHNba10udmFsdWU7XG4gICAgICAgICAgICAvLyBUT0RPIGluIHBhc3Qgd2UgZGV0ZWN0ZWQgdW5zdXBwb3J0ZWQgcHJvcGVydGllcywgd2hpbGUgbm93IHdlIHNpbXBsZSBwdXNoIGV2ZXJ5IGRlY2xhcmF0aW9uIGluIGEgbmFtZWRQcm9wZXJ0eS5cbiAgICAgICAgICAgIC8vIFRoaXMgbWFrZSBpdCBoYXJkZXIgdG8gc3BvdCBlcnJvcnMgaW4gZGVjbGFyYXRpb25zLlxuICAgICAgICAgICAgLy8gY29uc29sZS53YXJuKFwiVW5rbm93biBwcm9wZXJ0eSBwcm9jZXNzaW5nIEBzdXBwb3J0cyAta28tYmxvY2tkZWZzIFwiLCBkZWNsc1trXSwgc2Vscyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGwgPSAwOyBsIDwgc2Vscy5sZW5ndGg7IGwrKykge1xuICAgICAgICAgIGJsb2NrRGVmc1VwZGF0ZXIoc2Vsc1tsXSwgcHJvcGVydGllcywgbmFtZWRQcm9wcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChoYXNQcmV2aWV3cykge1xuICAgICAgICBmb3IgKHZhciBtID0gMDsgbSA8IHNlbHMubGVuZ3RoOyBtKyspIHtcbiAgICAgICAgICB2YXIgbG9jYWxCbG9ja05hbWUgPSBzZWxzW21dLnN1YnN0cigwLCBzZWxzW21dLmluZGV4T2YoJzonKSk7XG4gICAgICAgICAgdmFyIHByZXZpZXdCaW5kaW5ncyA9IHJ1bGVzW2ldLmRlY2xhcmF0aW9ucztcbiAgICAgICAgICBibG9ja0RlZnNVcGRhdGVyKGxvY2FsQmxvY2tOYW1lLCB1bmRlZmluZWQsIHsgcHJldmlld0JpbmRpbmdzOiBwcmV2aWV3QmluZGluZ3MgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZ25vcmluZyBjb21tZW50cyBvciBvdGhlciBjb250ZW50XG4gICAgfVxuICB9XG59O1xuXG52YXIgcHJvY2Vzc1N0eWxlc2hlZXRSdWxlcyA9IGZ1bmN0aW9uKHN0eWxlLCBydWxlcywgbG9jYWxXaXRoQmluZGluZ1Byb3ZpZGVyLCBibG9ja0RlZnNVcGRhdGVyLCB0aGVtZVVwZGF0ZXIsIHRlbXBsYXRlVXJsQ29udmVydGVyLCByb290TW9kZWxOYW1lLCB0ZW1wbGF0ZU5hbWUpIHtcbiAgdmFyIG5ld1N0eWxlID0gc3R5bGU7XG4gIHZhciBsYXN0U3RhcnQgPSBudWxsO1xuXG4gIGlmICh0eXBlb2YgcnVsZXMgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgc3R5bGVTaGVldCA9IGNzc1BhcnNlKHN0eWxlLCB7XG4gICAgICBjb21tZW50czogdHJ1ZSxcbiAgICAgIHBvc2l0aW9uOiB0cnVlXG4gICAgfSk7XG4gICAgaWYgKHN0eWxlU2hlZXQudHlwZSAhPSAnc3R5bGVzaGVldCcgfHwgdHlwZW9mIHN0eWxlU2hlZXQuc3R5bGVzaGVldCA9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5sb2coXCJ1bmFibGUgdG8gcHJvY2VzcyBzdHlsZVNoZWV0XCIsIHN0eWxlU2hlZXQpO1xuICAgICAgdGhyb3cgXCJVbmFibGUgdG8gcGFyc2Ugc3R5bGVzaGVldFwiO1xuICAgIH1cbiAgICBydWxlcyA9IHN0eWxlU2hlZXQuc3R5bGVzaGVldC5ydWxlcztcbiAgfVxuXG4gIC8vIFdBUk4gY3VycmVubHR5IHRoaXMgcGFyc2VzIHJ1bGVzIGluIHJldmVyc2Ugb3JkZXIgc28gdGhhdCBzdHJpbmcgcmVwbGFjZW1lbnRzIHdvcmtzIHVzaW5nIGlucHV0IFwicG9zaXRpb25zXCJcbiAgLy8gb3RoZXJ3aXNlIGl0IHNob3VsZCBjb21wdXRlIG5ldyBvZmZzZXRzIG9uIGV2ZXJ5IHJlcGxhY2VtZW50LlxuICAvLyBCdXQgdGhpcyBjcmVhdGUgaXNzdWVzIGJlY2F1c2Ugb2YgZGVmaW5pdGlvbnMgYmVpbmcgcGFyc2VkIGluIHJldmVyc2Ugb3JkZXIsIHNvIHRoaXMgaXMgbm90IGEgZ29vZCBpZGVhLlxuICAvLyBTb21ldGltZXMsIHRvIHdvcmsgYXJvdW5kIHRoaXMgaXNzdWVzLCB5b3UgbmVlZCB0byBjcmVhdGUgMiBkaWZmZXJlbnQgPHN0eWxlPiBibG9ja3MuXG4gIHZhciBiaW5kaW5nUHJvdmlkZXI7XG5cbiAgZm9yICh2YXIgaSA9IHJ1bGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKHJ1bGVzW2ldLnR5cGUgPT0gJ3N1cHBvcnRzJyAmJiBydWxlc1tpXS5uYW1lID09ICcta28tYmxvY2tkZWZzJykge1xuICAgICAgX3Byb2Nlc3NTdHlsZVNoZWV0UnVsZXNfcHJvY2Vzc0Jsb2NrRGVmKGJsb2NrRGVmc1VwZGF0ZXIsIHJ1bGVzW2ldLnJ1bGVzKTtcbiAgICAgIG5ld1N0eWxlID0gY29udmVydGVyVXRpbHMucmVtb3ZlU3R5bGUobmV3U3R5bGUsIHJ1bGVzW2ldLnBvc2l0aW9uLnN0YXJ0LCBsYXN0U3RhcnQsIDAsIDAsIDAsICcnKTtcbiAgICAgIC8qIHRlbXBvcmFyeSBleHBlcmltZW50YWwgY29kZSBub3QgdXNlZFxuICAgICAgfSBlbHNlIGlmIChydWxlc1tpXS50eXBlID09ICdzdXBwb3J0cycgJiYgcnVsZXNbaV0ubmFtZSA9PSAnLWtvLXRoZW1lcycpIHtcbiAgICAgICAgYmluZGluZ1Byb3ZpZGVyID0gbG9jYWxXaXRoQmluZGluZ1Byb3ZpZGVyLmJpbmQodGhpcywgJ3RoZW1lJywgJycpO1xuICAgICAgICBfcHJvY2Vzc1N0eWxlU2hlZXRSdWxlc19wcm9jZXNzVGhlbWVzKGJpbmRpbmdQcm92aWRlciwgdGhlbWVVcGRhdGVyLCBydWxlc1tpXS5ydWxlcyk7XG4gICAgICAgIG5ld1N0eWxlID0gY29udmVydGVyVXRpbHMucmVtb3ZlU3R5bGUobmV3U3R5bGUsIHJ1bGVzW2ldLnBvc2l0aW9uLnN0YXJ0LCBsYXN0U3RhcnQsIDAsIDAsIDAsICcnKTtcbiAgICAgICovXG4gICAgfSBlbHNlIGlmIChydWxlc1tpXS50eXBlID09ICdtZWRpYScgfHwgcnVsZXNbaV0udHlwZSA9PSAnc3VwcG9ydHMnKSB7XG4gICAgICBuZXdTdHlsZSA9IHByb2Nlc3NTdHlsZXNoZWV0UnVsZXMobmV3U3R5bGUsIHJ1bGVzW2ldLnJ1bGVzLCBsb2NhbFdpdGhCaW5kaW5nUHJvdmlkZXIsIGJsb2NrRGVmc1VwZGF0ZXIsIHRoZW1lVXBkYXRlciwgdGVtcGxhdGVVcmxDb252ZXJ0ZXIsIHJvb3RNb2RlbE5hbWUsIHRlbXBsYXRlTmFtZSk7XG4gICAgfSBlbHNlIGlmIChydWxlc1tpXS50eXBlID09ICdjb21tZW50Jykge1xuICAgICAgLy8gaWdub3JlIGNvbW1lbnRzXG4gICAgfSBlbHNlIGlmIChydWxlc1tpXS50eXBlID09ICdydWxlJykge1xuICAgICAgdmFyIHNlbHMgPSBydWxlc1tpXS5zZWxlY3RvcnM7XG4gICAgICB2YXIgbmV3U2VsID0gXCJcIjtcbiAgICAgIHZhciBmb3VuZEJsb2NrTWF0Y2ggPSBudWxsO1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChuZXdTZWwubGVuZ3RoID4gMCkgbmV3U2VsICs9IFwiLCBcIjtcbiAgICAgICAgdmFyIG1hdGNoID0gc2Vsc1tqXS5tYXRjaCgvXFxbZGF0YS1rby1ibG9jaz0oW14gXSopXFxdLyk7XG4gICAgICAgIGlmIChtYXRjaCAhPT0gbnVsbCkge1xuICAgICAgICAgIGlmIChmb3VuZEJsb2NrTWF0Y2ggIT09IG51bGwgJiYgZm91bmRCbG9ja01hdGNoICE9IG1hdGNoWzFdKSB0aHJvdyBcIkZvdW5kIG11bHRpcGxlIGJsb2NrLW1hdGNoIGF0dHJpYnV0ZSBzZWxlY3RvcnM6IGNhbm5vdCB0cmFuc2xhdGUgaXQgKFwiICsgZm91bmRCbG9ja01hdGNoICsgXCIgdnMgXCIgKyBtYXRjaFsxXSArIFwiKVwiO1xuICAgICAgICAgIGZvdW5kQmxvY2tNYXRjaCA9IG1hdGNoWzFdO1xuICAgICAgICB9XG4gICAgICAgIG5ld1NlbCArPSAnPCEtLSBrbyB0ZXh0OiB0ZW1wbGF0ZU1vZGUgPT1cXCd3eXNpd3lnXFwnID8gXFwnI21haW4td3lzaXd5Zy1hcmVhIFxcJyA6IFxcJ1xcJyAtLT48IS0tIC9rbyAtLT4nICsgc2Vsc1tqXTtcbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZEJsb2NrTWF0Y2gpIHtcbiAgICAgICAgdmFyIGxvb3BQcmVmaXggPSAnPCEtLSBrbyBmb3JlYWNoOiAkcm9vdC5maW5kT2JqZWN0c09mVHlwZSgkZGF0YSwgXFwnJyArIGZvdW5kQmxvY2tNYXRjaCArICdcXCcpIC0tPic7XG4gICAgICAgIHZhciBsb29wUG9zdGZpeCA9ICc8IS0tIC9rbyAtLT4nO1xuICAgICAgICB2YXIgZW5kID0gbGFzdFN0YXJ0O1xuICAgICAgICB2YXIgc3BhY2luZyA9IFwiIFwiO1xuICAgICAgICBpZiAocnVsZXNbaV0uZGVjbGFyYXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBpZiAocnVsZXNbaV0uZGVjbGFyYXRpb25zWzBdLnBvc2l0aW9uLnN0YXJ0LmxpbmUgIT0gcnVsZXNbaV0ucG9zaXRpb24uZW5kLmxpbmUpIHtcbiAgICAgICAgICAgIHNwYWNpbmcgPSBcIlxcblwiICsgKG5ldyBBcnJheShydWxlc1tpXS5wb3NpdGlvbi5zdGFydC5jb2wpKS5qb2luKFwiIFwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZW5kID0gcnVsZXNbaV0uZGVjbGFyYXRpb25zW3J1bGVzW2ldLmRlY2xhcmF0aW9ucy5sZW5ndGggLSAxXS5wb3NpdGlvbi5lbmQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVuZCA9PT0gbnVsbCkgbmV3U3R5bGUgKz0gc3BhY2luZyArIGxvb3BQb3N0Zml4O1xuICAgICAgICBlbHNlIGlmIChlbmQgPT0gbGFzdFN0YXJ0KSBuZXdTdHlsZSA9IGNvbnZlcnRlclV0aWxzLnJlbW92ZVN0eWxlKG5ld1N0eWxlLCBlbmQsIGxhc3RTdGFydCwgMCwgMCwgMCwgc3BhY2luZyArIGxvb3BQb3N0Zml4KTtcbiAgICAgICAgZWxzZSBuZXdTdHlsZSA9IGNvbnZlcnRlclV0aWxzLnJlbW92ZVN0eWxlKG5ld1N0eWxlLCBlbmQsIGxhc3RTdGFydCwgMCwgMCwgMCwgc3BhY2luZyArICd9JyArIHNwYWNpbmcgKyBsb29wUG9zdGZpeCk7XG4gICAgICAgIG5ld1NlbCA9IGxvb3BQcmVmaXggKyBzcGFjaW5nICsgbmV3U2VsLnJlcGxhY2UobmV3IFJlZ0V4cCgnXFxcXFtkYXRhLWtvLWJsb2NrPScgKyBmb3VuZEJsb2NrTWF0Y2ggKyAnXFxcXF0nLCAnZycpLCAnPCEtLSBrbyB0ZXh0OiBcXCcjXFwnK2lkKCkgLS0+JyArIGZvdW5kQmxvY2tNYXRjaCArICc8IS0tIC9rbyAtLT4nKTtcblxuICAgICAgICBibG9ja0RlZnNVcGRhdGVyKGZvdW5kQmxvY2tNYXRjaCwgJycsIHsgY29udGV4dE5hbWU6ICdibG9jaycgfSk7XG4gICAgICB9XG4gICAgICAvLyBUT0RPIG1lbnNjaCB1cGRhdGUgKHVzaW5nIG9yaWdpbmFsIG1lbnNjaCBsaWJyYXJ5IHdlIG5lZWRlZCB0aGlzIGxpbmUsIHdoaWxlIHRoZSBwYXRjaGVkIG9uZSBkb2Vzbid0IG5lZWQgdGhpcyBjb2RlKVxuICAgICAgLy8gbmV3U2VsICs9IFwiIHtcIjtcbiAgICAgIHZhciBsb2NhbEJsb2NrTmFtZSA9IGZvdW5kQmxvY2tNYXRjaCA/IGZvdW5kQmxvY2tNYXRjaCA6IHRlbXBsYXRlTmFtZTtcbiAgICAgIGJpbmRpbmdQcm92aWRlciA9IGxvY2FsV2l0aEJpbmRpbmdQcm92aWRlci5iaW5kKHRoaXMsIGxvY2FsQmxvY2tOYW1lLCAnJyk7XG4gICAgICB2YXIgZWxhYm9yYXRlZFN0eWxlID0gZWxhYm9yYXRlRGVjbGFyYXRpb25zKG5ld1N0eWxlLCBydWxlc1tpXS5kZWNsYXJhdGlvbnMsIHRlbXBsYXRlVXJsQ29udmVydGVyLCBiaW5kaW5nUHJvdmlkZXIpO1xuICAgICAgaWYgKGVsYWJvcmF0ZWRTdHlsZSAhPT0gbnVsbCkgbmV3U3R5bGUgPSBlbGFib3JhdGVkU3R5bGU7XG5cbiAgICAgIG5ld1N0eWxlID0gY29udmVydGVyVXRpbHMucmVtb3ZlU3R5bGUobmV3U3R5bGUsIHJ1bGVzW2ldLnBvc2l0aW9uLnN0YXJ0LCBydWxlc1tpXS5wb3NpdGlvbi5lbmQsIDAsIDAsIDAsIG5ld1NlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiVW5rbm93biBydWxlIHR5cGVcIiwgcnVsZXNbaV0udHlwZSwgXCJ3aGlsZSBwYXJzaW5nIDxzdHlsZT4gcnVsZXNcIik7XG4gICAgfVxuICAgIGxhc3RTdGFydCA9IHJ1bGVzW2ldLnBvc2l0aW9uLnN0YXJ0O1xuICB9XG4gIHJldHVybiBuZXdTdHlsZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcHJvY2Vzc1N0eWxlc2hlZXRSdWxlczsiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBjb25zb2xlID0gcmVxdWlyZSgnY29uc29sZScpO1xudmFyIGpzZXAgPSByZXF1aXJlKCdqc2VwJyk7XG5cbmpzZXAuYWRkQmluYXJ5T3AoXCJvclwiLCAxKTtcbmpzZXAuYWRkQmluYXJ5T3AoXCJhbmRcIiwgMik7XG5qc2VwLmFkZEJpbmFyeU9wKFwiZXFcIiwgNik7XG5qc2VwLmFkZEJpbmFyeU9wKFwibmVxXCIsIDYpO1xuanNlcC5hZGRCaW5hcnlPcChcImx0XCIsIDcpO1xuanNlcC5hZGRCaW5hcnlPcChcImx0ZVwiLCA3KTtcbmpzZXAuYWRkQmluYXJ5T3AoXCJndFwiLCA3KTtcbmpzZXAuYWRkQmluYXJ5T3AoXCJndGVcIiwgNyk7XG5cbnZhciBhZGRTbGFzaGVzID0gZnVuY3Rpb24oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvW1xcXFxcIiddL2csICdcXFxcJCYnKS5yZXBsYWNlKC9cXHUwMDAwL2csICdcXFxcMCcpO1xufTtcblxudmFyIHJlbW92ZVN0eWxlID0gZnVuY3Rpb24oc3R5bGUsIHN0YXJ0UG9zLCBlbmRQb3MsIHNraXBSb3dzLCBzdGFydE9mZnNldCwgZW5kT2Zmc2V0LCBpbnNlcnQpIHtcbiAgdmFyIHN0eWxlUm93cyA9IHN0eWxlLnNwbGl0KFwiXFxuXCIpO1xuICB2YXIgc3RhcnQgPSBzdGFydE9mZnNldDtcbiAgdmFyIGVuZCA9IGVuZE9mZnNldDtcbiAgZm9yICh2YXIgciA9IDEgKyBza2lwUm93czsgciA8IHN0YXJ0UG9zLmxpbmU7IHIrKykgc3RhcnQgKz0gc3R5bGVSb3dzW3IgLSAxIC0gc2tpcFJvd3NdLmxlbmd0aCArIDE7XG4gIHN0YXJ0ICs9IHN0YXJ0UG9zLmNvbDtcbiAgaWYgKGVuZFBvcyAhPT0gbnVsbCkge1xuICAgIGZvciAodmFyIHIyID0gMSArIHNraXBSb3dzOyByMiA8IGVuZFBvcy5saW5lOyByMisrKSBlbmQgKz0gc3R5bGVSb3dzW3IyIC0gMSAtIHNraXBSb3dzXS5sZW5ndGggKyAxO1xuICAgIGVuZCArPSBlbmRQb3MuY29sO1xuICB9IGVsc2UgZW5kICs9IHN0eWxlLmxlbmd0aCArIDE7XG4gIHZhciBuZXdTdHlsZSA9IHN0eWxlLnN1YnN0cigwLCBzdGFydCAtIDEpICsgaW5zZXJ0ICsgc3R5bGUuc3Vic3RyKGVuZCAtIDEpO1xuICByZXR1cm4gbmV3U3R5bGU7XG59O1xuXG52YXIgZXhwcmVzc2lvbkdlbmVyYXRvciA9IGZ1bmN0aW9uKG5vZGUsIGJpbmRpbmdQcm92aWRlciwgZGVmVmFsKSB7XG4gIGZ1bmN0aW9uIG1hcE9wZXJhdG9yKG9wKSB7XG4gICAgc3dpdGNoIChvcCkge1xuICAgICAgY2FzZSAnb3InOlxuICAgICAgICByZXR1cm4gJ3x8JztcbiAgICAgIGNhc2UgJ2FuZCc6XG4gICAgICAgIHJldHVybiAnJiYnO1xuICAgICAgY2FzZSAnbHQnOlxuICAgICAgICByZXR1cm4gJzwnO1xuICAgICAgY2FzZSAnbHRlJzpcbiAgICAgICAgcmV0dXJuICc8PSc7XG4gICAgICBjYXNlICdndCc6XG4gICAgICAgIHJldHVybiAnPic7XG4gICAgICBjYXNlICdndGUnOlxuICAgICAgICByZXR1cm4gJz49JztcbiAgICAgIGNhc2UgJ2VxJzpcbiAgICAgICAgcmV0dXJuICc9PSc7XG4gICAgICBjYXNlICduZXEnOlxuICAgICAgICByZXR1cm4gJyE9JztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBvcDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZW4obm9kZSwgYmluZGluZ1Byb3ZpZGVyLCBsb29rdXBtZW1iZXIsIGRlZlZhbCkge1xuICAgIGlmICh0eXBlb2YgbG9va3VwbWVtYmVyID09ICd1bmRlZmluZWQnKSBsb29rdXBtZW1iZXIgPSB0cnVlO1xuXG4gICAgaWYgKHR5cGVvZiBkZWZWYWwgIT09ICd1bmRlZmluZWQnICYmIG5vZGUudHlwZSAhPT0gXCJJZGVudGlmaWVyXCIgJiYgbm9kZS50eXBlICE9PSBcIk1lbWJlckV4cHJlc3Npb25cIikgY29uc29sZS5sb2coXCJDYW5ub3QgYXBwbHkgZGVmYXVsdCB2YWx1ZSB0byB2YXJpYWJsZSB3aGVuIHVzaW5nIGV4cHJlc3Npb25zXCIpO1xuXG4gICAgaWYgKG5vZGUudHlwZSA9PT0gXCJCaW5hcnlFeHByZXNzaW9uXCIgfHwgbm9kZS50eXBlID09PSBcIkxvZ2ljYWxFeHByZXNzaW9uXCIpIHtcbiAgICAgIHJldHVybiAnKCcgKyBnZW4obm9kZS5sZWZ0LCBiaW5kaW5nUHJvdmlkZXIsIGxvb2t1cG1lbWJlcikgKyAnICcgKyBtYXBPcGVyYXRvcihub2RlLm9wZXJhdG9yKSArICcgJyArIGdlbihub2RlLnJpZ2h0LCBiaW5kaW5nUHJvdmlkZXIsIGxvb2t1cG1lbWJlcikgKyAnKSc7XG4gICAgfSBlbHNlIGlmIChub2RlLnR5cGUgPT09ICdDYWxsRXhwcmVzc2lvbicpIHtcbiAgICAgIHZhciBhcmdzID0gbm9kZS5hcmd1bWVudHMubWFwKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgcmV0dXJuIGdlbihuLCBiaW5kaW5nUHJvdmlkZXIsIGxvb2t1cG1lbWJlcik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBnZW4obm9kZS5jYWxsZWUsIGJpbmRpbmdQcm92aWRlciwgbG9va3VwbWVtYmVyKSArICcoJyArIGFyZ3Muam9pbignLCAnKSArICcpJztcbiAgICB9IGVsc2UgaWYgKG5vZGUudHlwZSA9PT0gXCJVbmFyeUV4cHJlc3Npb25cIikge1xuICAgICAgcmV0dXJuIG5vZGUub3BlcmF0b3IgKyBnZW4obm9kZS5hcmd1bWVudCwgYmluZGluZ1Byb3ZpZGVyLCBsb29rdXBtZW1iZXIpO1xuICAgIH0gZWxzZSBpZiAobm9kZS50eXBlID09ICdNZW1iZXJFeHByZXNzaW9uJyAmJiBub2RlLmNvbXB1dGVkKSB7XG4gICAgICB0aHJvdyBcIlVuZXhwZWN0ZWQgY29tcHV0ZWQgbWVtYmVyIGV4cHJlc3Npb25cIjtcbiAgICAgIC8vIHJldHVybiBnZW4obm9kZS5vYmplY3QpICsgJ1snICsgZ2VuKG5vZGUucHJvcGVydHkpICsgJ10nO1xuICAgIH0gZWxzZSBpZiAobm9kZS50eXBlID09ICdNZW1iZXJFeHByZXNzaW9uJyAmJiAhbm9kZS5jb21wdXRlZCkge1xuICAgICAgdmFyIG1lID0gZ2VuKG5vZGUub2JqZWN0LCBiaW5kaW5nUHJvdmlkZXIsIGZhbHNlKSArICcuJyArIGdlbihub2RlLnByb3BlcnR5LCBiaW5kaW5nUHJvdmlkZXIsIGZhbHNlKTtcbiAgICAgIGlmIChsb29rdXBtZW1iZXIgJiYgbm9kZS5vYmplY3QubmFtZSAhPT0gJ01hdGgnICYmIG5vZGUub2JqZWN0Lm5hbWUgIT09ICdDb2xvcicpIHJldHVybiBiaW5kaW5nUHJvdmlkZXIobWUsIGRlZlZhbCkgKyAnKCknO1xuICAgICAgcmV0dXJuIG1lO1xuICAgIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSBcIkxpdGVyYWxcIikge1xuICAgICAgcmV0dXJuIG5vZGUucmF3O1xuICAgIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSAnSWRlbnRpZmllcicpIHtcbiAgICAgIHZhciBpZCA9IG5vZGUubmFtZTtcbiAgICAgIGlmIChsb29rdXBtZW1iZXIpIHJldHVybiBiaW5kaW5nUHJvdmlkZXIoaWQsIGRlZlZhbCkgKyAnKCknO1xuICAgICAgZWxzZSByZXR1cm4gaWQ7XG4gICAgfSBlbHNlIGlmIChub2RlLnR5cGUgPT09ICdDb25kaXRpb25hbEV4cHJlc3Npb24nKSB7XG4gICAgICByZXR1cm4gJygnICsgZ2VuKG5vZGUudGVzdCwgYmluZGluZ1Byb3ZpZGVyLCBsb29rdXBtZW1iZXIpICsgJyA/ICcgKyBnZW4obm9kZS5jb25zZXF1ZW50LCBiaW5kaW5nUHJvdmlkZXIsIGxvb2t1cG1lbWJlcikgKyAnIDogJyArIGdlbihub2RlLmFsdGVybmF0ZSwgYmluZGluZ1Byb3ZpZGVyLCBsb29rdXBtZW1iZXIpICsgJyknO1xuICAgIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSAnQ29tcG91bmQnKSB7XG4gICAgICB0aHJvdyBcIlN5bnRheCBlcnJvciBpbiBleHByZXNzaW9uOiBvcGVyYXRvciBleHBlY3RlZCBhZnRlciBcIiArIGdlbihub2RlLmJvZHlbMF0sIGJpbmRpbmdQcm92aWRlciwgZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBcIkZvdW5kIGFuIHVuc3VwcG9ydGVkIGV4cHJlc3Npb24gdHlwZTogXCIgKyBub2RlLnR5cGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGdlbihub2RlLCBiaW5kaW5nUHJvdmlkZXIsIHVuZGVmaW5lZCwgZGVmVmFsKTtcbn07XG5cbnZhciBleHByZXNzaW9uQmluZGluZyA9IGZ1bmN0aW9uKGV4cHJlc3Npb24sIGJpbmRpbmdQcm92aWRlciwgZGVmYXVsdFZhbHVlKSB7XG4gIHZhciBtYXRjaGVzO1xuICBpZiAodHlwZW9mIGRlZmF1bHRWYWx1ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgZGVmYXVsdFZhbHVlICE9PSBudWxsKSB7XG4gICAgdmFyIGNoZWNrID0gZXhwcmVzc2lvbi50cmltKCkucmVwbGFjZSgvQFxcWyhbXlxcXV0rKVxcXXxAKFthLXpBLVowLTlcXC5fXSspXFxiL2csICcjIyN2YXIjIyMnKTtcbiAgICBjaGVjayA9IGNoZWNrLnJlcGxhY2UoL1tcXC1cXFtcXF1cXC9cXHtcXH1cXChcXClcXCpcXCtcXD9cXC5cXFxcXFxeXFwkXFx8XS9nLCBcIlxcXFwkJlwiKTtcbiAgICBpZiAoY2hlY2sgPT0gJyMjI3ZhciMjIycpIG1hdGNoZXMgPSBbbnVsbCwgZGVmYXVsdFZhbHVlXTtcbiAgICBlbHNlIHtcbiAgICAgIGNoZWNrID0gJ14nICsgY2hlY2sucmVwbGFjZSgvIyMjdmFyIyMjL2csICcoLispJykgKyAnJCc7XG4gICAgICBtYXRjaGVzID0gZGVmYXVsdFZhbHVlLnRyaW0oKS5tYXRjaChuZXcgUmVnRXhwKGNoZWNrKSk7XG4gICAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgICAgLy8gVE9ETyB0aHJvdyBlcnJvcj9cbiAgICAgICAgY29uc29sZS5sb2coXCJDYW5ub3QgZmluZCBtYXRjaGVzXCIsIG1hdGNoZXMsIFwiZm9yXCIsIGRlZmF1bHRWYWx1ZSwgZXhwcmVzc2lvbiwgY2hlY2ssIGV4cHJlc3Npb24pO1xuICAgICAgICB0aHJvdyBcIkNhbm5vdCBmaW5kIGRlZmF1bHQgdmFsdWUgZm9yIFwiICsgZXhwcmVzc2lvbiArIFwiIGluIFwiICsgZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICB0cnkge1xuICAgIHZhciB2YXJzID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gXCInXCIgKyBleHByZXNzaW9uLnJlcGxhY2UoL0BcXFsoW15cXF1dKylcXF18QChbYS16QS1aMC05XFwuX10rKVxcYnwoJykvZywgZnVuY3Rpb24obWF0Y2gsIHAxLCBwMiwgcDMpIHtcbiAgICAgIC8vIGVzY2FwaW5nLi5cbiAgICAgIGlmIChwMykgcmV0dXJuIFwiXFxcXFwiICsgcDM7XG4gICAgICB2YXJzKys7XG4gICAgICB2YXIgdmFyTmFtZSA9IHAxIHx8IHAyO1xuICAgICAgdmFyIGRlZlZhbDtcbiAgICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbWF0Y2hlc1t2YXJzXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBkZWZWYWwgPSBtYXRjaGVzW3ZhcnNdLnRyaW0oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIkFCWlpaIENhbm5vdCBmaW5kIGRlZmF1bHQgdmFsdWUgZm9yXCIsIHZhck5hbWUsIFwiaW5cIiwgbWF0Y2hlcywgXCJhc1wiLCB2YXJzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gaW4gY2FzZSB3ZSBmb3VuZCBwMSB3ZSBhcmUgaW4gYSBAW3NlcXVlbmNlXSBzbyB3ZSBzdGFydCBhbiBleHByZXNzaW9uIHBhcnNlclxuICAgICAgaWYgKHAxKSB7XG4gICAgICAgIHZhciBwYXJzZXRyZWUgPSBqc2VwKHAxKTtcbiAgICAgICAgdmFyIGdlbnRyZWUgPSBleHByZXNzaW9uR2VuZXJhdG9yKHBhcnNldHJlZSwgYmluZGluZ1Byb3ZpZGVyLCBkZWZWYWwpO1xuICAgICAgICByZXR1cm4gXCInK1wiICsgZ2VudHJlZSArIFwiKydcIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBcIicrXCIgKyBiaW5kaW5nUHJvdmlkZXIodmFyTmFtZSwgZGVmVmFsKSArIFwiKCkrJ1wiO1xuICAgIH0pICsgXCInXCI7XG4gICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UoLyhefFteXFxcXF0pJydcXCsvZywgJyQxJykucmVwbGFjZSgvXFwrJycvZywgJycpO1xuXG4gICAgaWYgKHZhcnMgPT09IDAgJiYgcmVzdWx0ICE9PSAnZmFsc2UnICYmIHJlc3VsdCAhPT0gJ3RydWUnKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiVW5leHBlY3RlZCBleHByZXNzaW9uIHdpdGggbm8gdmFsaWQgQHZhcmlhYmxlIHJlZmVyZW5jZXNcIiwgZXhwcmVzc2lvbik7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBcIkV4Y2VwdGlvbiBwYXJzaW5nIGV4cHJlc3Npb24gXCIgKyBleHByZXNzaW9uICsgXCIgXCIgKyBlO1xuICB9XG59O1xuXG52YXIgY29uZGl0aW9uQmluZGluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgYmluZGluZ1Byb3ZpZGVyKSB7XG4gIHZhciBwYXJzZXRyZWUgPSBqc2VwKGNvbmRpdGlvbik7XG4gIHZhciBnZW50cmVlID0gZXhwcmVzc2lvbkdlbmVyYXRvcihwYXJzZXRyZWUsIGJpbmRpbmdQcm92aWRlcik7XG4gIHJldHVybiBnZW50cmVlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFkZFNsYXNoZXM6IGFkZFNsYXNoZXMsXG4gIHJlbW92ZVN0eWxlOiByZW1vdmVTdHlsZSxcbiAgY29uZGl0aW9uQmluZGluZzogY29uZGl0aW9uQmluZGluZyxcbiAgZXhwcmVzc2lvbkJpbmRpbmc6IGV4cHJlc3Npb25CaW5kaW5nXG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vLyBUaGlzIGlzIGNvbXBsZXggY29kZSB0byBoYW5kbGUgXCJsaXZlXCIgbW9kZWwgaW5zdHJ1bWVudGF0aW9uIGFuZCBkZXBlbmRlbmN5IHRyYWNraW5nLlxuLy8gVGhpcyBhZGRzIF93cmFwIGFuZCBfdW53cmFwIG1ldGhvZHMgdG8gdGhlIG1vZGVsIGFuZCBhbHNvIGluc3RydW1lbnQgdGhlIGJsb2NrIGxpc3Qgc28gdG8gYXV0b21hdGljYWxseVxuLy8gd3JhcC91cHdyYXAgb2JqZWN0cyBvbiBzaW1wbGUgYXJyYXkgbWV0aG9kcyAocHVzaCwgc3BsaWNlKVxuXG52YXIga28gPSByZXF1aXJlKFwia25vY2tvdXRcIik7XG52YXIga293cmFwID0gcmVxdWlyZShcImtub2Nrb3V0LndyYXBcIik7XG52YXIgY29uc29sZSA9IHJlcXVpcmUoXCJjb25zb2xlXCIpO1xuXG52YXIgX2dldE9wdGlvbnNPYmplY3QgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIHZhciBvcHRpb25zQ291cGxlcyA9IG9wdGlvbnMuc3BsaXQoJ3wnKTtcbiAgdmFyIG9wdHMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcHRpb25zQ291cGxlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBvcHQgPSBvcHRpb25zQ291cGxlc1tpXS5zcGxpdCgnPScpO1xuICAgIG9wdHNbb3B0WzBdXSA9IG9wdC5sZW5ndGggPiAxID8gb3B0WzFdIDogb3B0WzBdO1xuICB9XG4gIHJldHVybiBvcHRzO1xufTtcblxuLy8gZ2VuZXJhdGUgYSBjb21wdXRlZCB2YXJpYWJsZSBoYW5kbGluZyB0aGUgZmFsbGJhY2sgdG8gdGhlbWUgdmFyaWFibGVcbnZhciBfbWFrZUNvbXB1dGVkID0gZnVuY3Rpb24odGFyZ2V0LCBkZWYsIG51bGxJZkVxdWFsLCBzY2hlbWVTZWxlY3RvciwgdGhlbWVQYXRoLCB0aGVtZXMpIHtcbiAgdmFyIHJlcyA9IGtvLmNvbXB1dGVkKHtcbiAgICAncmVhZCc6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHZhbCA9IHRhcmdldCgpO1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCkge1xuICAgICAgICB2YXIgc2NoZW1lID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShzY2hlbWVTZWxlY3Rvcik7XG4gICAgICAgIGlmICh0eXBlb2Ygc2NoZW1lID09ICd1bmRlZmluZWQnIHx8IHNjaGVtZSA9PSAnY3VzdG9tJykge1xuICAgICAgICAgIHJldHVybiBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKGRlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoZW1lc1tzY2hlbWVdW3RoZW1lUGF0aF07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9XG4gICAgfSxcbiAgICAnd3JpdGUnOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIHNjaGVtZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoc2NoZW1lU2VsZWN0b3IpO1xuICAgICAgdmFyIGRlZlZhbDtcbiAgICAgIGlmICh0eXBlb2Ygc2NoZW1lID09ICd1bmRlZmluZWQnIHx8IHNjaGVtZSA9PSAnY3VzdG9tJykge1xuICAgICAgICBkZWZWYWwgPSBrby51dGlscy5wZWVrT2JzZXJ2YWJsZShkZWYpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVmVmFsID0gdGhlbWVzW3NjaGVtZV1bdGhlbWVQYXRoXTtcbiAgICAgIH1cblxuICAgICAgaWYgKCEhbnVsbElmRXF1YWwpIHtcbiAgICAgICAgaWYgKHZhbHVlID09IGRlZlZhbCkgdGFyZ2V0KG51bGwpO1xuICAgICAgICBlbHNlIHRhcmdldCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgY3VycmVudCA9IGtvLnV0aWxzLnBlZWtPYnNlcnZhYmxlKHRhcmdldCk7XG4gICAgICAgIGlmICh2YWx1ZSAhPSBkZWZWYWwgfHwgY3VycmVudCAhPT0gbnVsbCkgdGFyZ2V0KHZhbHVlKTtcbiAgICAgIH1cblxuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXM7XG59O1xuXG52YXIgX25leHRWYXJpYW50RnVuY3Rpb24gPSBmdW5jdGlvbihrbywgcHJvcCwgdmFyaWFudHMpIHtcbiAgdmFyIGN1cnJlbnRWYWx1ZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUocHJvcCk7XG4gIHZhciB2YXJpYW50VmFsdWU7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YXJpYW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhcmlhbnRWYWx1ZSA9IGtvLnV0aWxzLnBlZWtPYnNlcnZhYmxlKHZhcmlhbnRzW2ldKTtcbiAgICBpZiAodmFyaWFudFZhbHVlID09IGN1cnJlbnRWYWx1ZSkgYnJlYWs7XG4gIH1cblxuICBpZiAoaSA9PSB2YXJpYW50cy5sZW5ndGgpIHtcbiAgICBjb25zb2xlLndhcm4oXCJEaWRuJ3QgZmluZCBhIHZhcmlhbnQhXCIsIHByb3AsIGN1cnJlbnRWYWx1ZSwgdmFyaWFudHMpO1xuICAgIGkgPSB2YXJpYW50cy5sZW5ndGggLSAxO1xuICB9XG5cbiAgdmFyIG5leHRWYXJpYW50ID0gaSArIDE7XG4gIGlmIChuZXh0VmFyaWFudCA9PSB2YXJpYW50cy5sZW5ndGgpIG5leHRWYXJpYW50ID0gMDtcbiAgdmFyIG5leHRWYWx1ZSA9IGtvLnV0aWxzLnBlZWtPYnNlcnZhYmxlKHZhcmlhbnRzW25leHRWYXJpYW50XSk7XG5cbiAgcHJvcChuZXh0VmFsdWUpO1xufTtcblxudmFyIF9nZXRWYXJpYW50cyA9IGZ1bmN0aW9uKGRlZikge1xuICB2YXIgdmFyaWFudFByb3AgPSBkZWYuX3ZhcmlhbnQ7XG4gIHZhciB2YXJpYW50T3B0aW9ucztcbiAgaWYgKHR5cGVvZiBkZWZbdmFyaWFudFByb3BdICE9PSAnb2JqZWN0JyB8fCB0eXBlb2YgZGVmW3ZhcmlhbnRQcm9wXS5fd2lkZ2V0ID09PSAndW5kZWZpbmVkJyB8fCAodHlwZW9mIGRlZlt2YXJpYW50UHJvcF0uX29wdGlvbnMgIT09ICdzdHJpbmcnICYmIGRlZlt2YXJpYW50UHJvcF0uX3dpZGdldCAhPT0gJ2Jvb2xlYW4nKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJVbmV4cGVjdGVkIHZhcmlhbnQgZGVjbGFyYXRpb25cIiwgdmFyaWFudFByb3AsIGRlZlt2YXJpYW50UHJvcF0pO1xuICAgIHRocm93IFwiVW5leHBlY3RlZCB2YXJpYW50IGRlY2xhcmF0aW9uOiBjYW5ub3QgZmluZCBwcm9wZXJ0eSBcIiArIHZhcmlhbnRQcm9wICsgXCIgb3IgaXRzIF9vcHRpb25zIHN0cmluZyBhbmQgaXQgaXMgbm90IGEgYm9vbGVhblwiO1xuICB9XG4gIC8vIFRPRE8gSSByZWFkIHRoZSBcImtleXNcIiBidXQgdGhpcyBpcyBub3QgMTAwJSBjb3JyZWN0IGJlY2F1c2UgdGhleSBhcmUgbm90IGdhcmFudGVlZCB0byBiZSBzb3J0ZWQgYXMgaW4gZGVjbGFyYXRpb25cbiAgaWYgKHR5cGVvZiBkZWZbdmFyaWFudFByb3BdLl9vcHRpb25zID09ICdzdHJpbmcnKSB7XG4gICAgdmFyaWFudE9wdGlvbnMgPSBPYmplY3Qua2V5cyhfZ2V0T3B0aW9uc09iamVjdChkZWZbdmFyaWFudFByb3BdLl9vcHRpb25zKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyaWFudE9wdGlvbnMgPSBbdHJ1ZSwgZmFsc2VdO1xuICB9XG4gIHJldHVybiB2YXJpYW50T3B0aW9ucztcbn07XG5cbnZhciBfbWFrZUNvbXB1dGVkRnVuY3Rpb24gPSBmdW5jdGlvbihkZWYsIGRlZnMsIHRobXMsIGtvLCBjb250ZW50TW9kZWwsIGlzQ29udGVudCwgdCkge1xuICBpZiAodHlwZW9mIGRlZiA9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2Yga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh0KS50eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5sb2coXCJUT0RPIEVSUk9SIEZvdW5kIGEgbm9uLXR5cGVkIGRlZiBcIiwgZGVmLCB0KTtcbiAgICAgIHRocm93IFwiRm91bmQgYSBub24tdHlwZWQgZGVmIFwiICsgZGVmO1xuICAgIH1cbiAgICB2YXIgdHlwZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoa28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh0KS50eXBlKTtcbiAgICBkZWYgPSBkZWZzW3R5cGVdO1xuICAgIGlmICh0eXBlb2YgZGVmICE9PSAnb2JqZWN0JykgY29uc29sZS5sb2coXCJUT0RPIEVSUk9SIEZvdW5kIGEgbm9uLW9iamVjdCBkZWYgXCIsIGRlZiwgXCJmb3JcIiwgdHlwZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIGNvbnRlbnRNb2RlbCA9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgaXNDb250ZW50ICE9ICd1bmRlZmluZWQnICYmIGlzQ29udGVudCkge1xuICAgIGNvbnRlbnRNb2RlbCA9IHQ7XG4gIH1cblxuICB2YXIgc2VsZlBhdGggPSAnJHJvb3QuY29udGVudCgpLic7XG5cbiAgdmFyIHBwID0gZGVmLl9nbG9iYWxTdHlsZXM7XG4gIGlmICh0eXBlb2YgcHAgIT0gJ3VuZGVmaW5lZCcpXG4gICAgZm9yICh2YXIgcCBpbiBwcClcbiAgICAgIGlmIChwcC5oYXNPd25Qcm9wZXJ0eShwKSkge1xuICAgICAgICB2YXIgc2NoZW1lUGF0aE9yaWcgPSAnJHJvb3QuY29udGVudCgpLnRoZW1lKCkuc2NoZW1lJztcbiAgICAgICAgdmFyIHNjaGVtZVBhdGgsIHZtLCBwYXRoO1xuXG4gICAgICAgIGlmIChwcFtwXS5zdWJzdHIoMCwgc2VsZlBhdGgubGVuZ3RoKSA9PSBzZWxmUGF0aCkge1xuICAgICAgICAgIHBhdGggPSBwcFtwXS5zdWJzdHIoc2VsZlBhdGgubGVuZ3RoKTtcbiAgICAgICAgICB2bSA9IGNvbnRlbnRNb2RlbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBcIlVORVhQRUNURUQgZ2xvYmFsU3R5bGUgcGF0aCAoXCIgKyBwcFtwXSArIFwiKSBvdXRzaWRlIHNlbGZQYXRoIChcIiArIHNlbGZQYXRoICsgXCIpXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNjaGVtZVBhdGhPcmlnLnN1YnN0cigwLCBzZWxmUGF0aC5sZW5ndGgpID09IHNlbGZQYXRoKSB7XG4gICAgICAgICAgc2NoZW1lUGF0aCA9IHNjaGVtZVBhdGhPcmlnLnN1YnN0cihzZWxmUGF0aC5sZW5ndGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiSVMgVEhJUyBDT1JSRUNUP1wiLCBzY2hlbWVQYXRoT3JpZywgc2VsZlBhdGgpO1xuICAgICAgICAgIHNjaGVtZVBhdGggPSBzY2hlbWVQYXRoT3JpZztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzY2hlbWVTZWxlY3RvciA9IHZtO1xuXG4gICAgICAgIHZhciBwYXRoUGFydHMgPSBwYXRoLnNwbGl0KCcoKS4nKTtcbiAgICAgICAgdmFyIHRoZW1lUGF0aCA9ICcnO1xuICAgICAgICB2YXIgc2tpcCA9IHRydWU7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aFBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdm0gPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZtKVtwYXRoUGFydHNbaV1dO1xuICAgICAgICAgIC8vIHVnbHkgdGhpbmcgdG8gZmluZCB0aGUgcGF0aCB0byB0aGUgc2NoZW1hIGNvbG9yIHByb3BlcnR5IChzb21ldGltZXMgd2UgaGF2ZSB0aGVtZS5ib2R5VGhlbWUsIHNvbWUgb3RoZXIgd2UgaGF2ZSBjb250ZW50LnRoZW1lLmJvZHlUaGVtZS4uLilcbiAgICAgICAgICBpZiAoc2tpcCkge1xuICAgICAgICAgICAgaWYgKHBhdGhQYXJ0c1tpXSA9PSAndGhlbWUnKSBza2lwID0gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGVtZVBhdGgubGVuZ3RoID4gMCkgdGhlbWVQYXRoICs9ICcuJztcbiAgICAgICAgICAgIHRoZW1lUGF0aCArPSBwYXRoUGFydHNbaV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNjaGVtZVBhcnRzID0gc2NoZW1lUGF0aC5zcGxpdCgnKCkuJyk7XG4gICAgICAgIGZvciAodmFyIGkzID0gMDsgaTMgPCBzY2hlbWVQYXJ0cy5sZW5ndGg7IGkzKyspIHtcbiAgICAgICAgICBzY2hlbWVTZWxlY3RvciA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoc2NoZW1lU2VsZWN0b3IpW3NjaGVtZVBhcnRzW2kzXV07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbnVsbElmRXF1YWwgPSB0cnVlO1xuICAgICAgICB2YXIgdFBhcnRzID0gcC5zcGxpdCgnLicpO1xuICAgICAgICB2YXIgdGFyZ2V0ID0gdDtcbiAgICAgICAgZm9yICh2YXIgaTIgPSAwOyBpMiA8IHRQYXJ0cy5sZW5ndGg7IGkyKyspIHtcbiAgICAgICAgICB0YXJnZXQgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHRhcmdldClbdFBhcnRzW2kyXV07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWtvLmlzT2JzZXJ2YWJsZSh0YXJnZXQpKSB0aHJvdyBcIlVuZXhwZWN0ZWQgbm9uIG9ic2VydmFibGUgdGFyZ2V0IFwiICsgcCArIFwiL1wiICsgdGhlbWVQYXRoO1xuXG4gICAgICAgIHRhcmdldC5fZGVmYXVsdENvbXB1dGVkID0gX21ha2VDb21wdXRlZCh0YXJnZXQsIHZtLCBudWxsSWZFcXVhbCwgc2NoZW1lU2VsZWN0b3IsIHRoZW1lUGF0aCwgdGhtcyk7XG4gICAgICB9XG5cbiAgaWYgKHR5cGVvZiBkZWYuX3ZhcmlhbnQgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgcFBhcnRzID0gZGVmLl92YXJpYW50LnNwbGl0KCcuJyk7XG4gICAgLy8gbG9va3MgaW4gdCBhbmQgbm90IGNvbnRlbnRNb2RlbCBiZWNhdXNlIHZhcmlhbnRzIGFyZSBkZWNsYXJlZCBvbiBzaW5nbGUgYmxvY2tzLlxuICAgIHZhciBwVGFyZ2V0ID0gdDtcbiAgICB2YXIgcFBhcmVudCA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodCk7XG4gICAgZm9yICh2YXIgaTQgPSAwOyBpNCA8IHBQYXJ0cy5sZW5ndGg7IGk0KyspIHtcbiAgICAgIHBUYXJnZXQgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHBUYXJnZXQpW3BQYXJ0c1tpNF1dO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHBUYXJnZXQuX2RlZmF1bHRDb21wdXRlZCAhPSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5sb2coXCJGb3VuZCB2YXJpYW50IG9uIGEgc3R5bGUgcHJvcGVydHk6IGJld2FyZSB2YXJpYW50cyBzaG91bGQgYmUgb25seSB1c2VkIG9uIGNvbnRlbnQgcHJvcGVydGllcyBiZWNhdXNlIHRoZXkgZG9uJ3QgbWF0Y2ggdGhlIHRoZW1lIGZhbGxiYWNrIGJlaGF2aW91clwiLCBkZWYuX3ZhcmlhbnQpO1xuICAgICAgcFRhcmdldCA9IHBUYXJnZXQuX2RlZmF1bHRDb21wdXRlZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwVGFyZ2V0ID09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIkVSUk9SIGxvb2tpbmcgZm9yIHZhcmlhbnQgdGFyZ2V0XCIsIGRlZi5fdmFyaWFudCwgdCk7XG4gICAgICB0aHJvdyBcIkVSUk9SIGxvb2tpbmcgZm9yIHZhcmlhbnQgdGFyZ2V0IFwiICsgZGVmLl92YXJpYW50O1xuICAgIH1cbiAgICBwUGFyZW50Ll9uZXh0VmFyaWFudCA9IF9uZXh0VmFyaWFudEZ1bmN0aW9uLmJpbmQocFRhcmdldCwga28sIHBUYXJnZXQsIF9nZXRWYXJpYW50cyhkZWYpKTtcbiAgfVxuXG4gIGZvciAodmFyIHByb3AyIGluIGRlZilcbiAgICBpZiAoZGVmLmhhc093blByb3BlcnR5KHByb3AyKSkge1xuICAgICAgdmFyIHZhbCA9IGRlZltwcm9wMl07XG4gICAgICBpZiAodHlwZW9mIHZhbCA9PSAnb2JqZWN0JyAmJiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbC5fY29udGV4dCAhPSAndW5kZWZpbmVkJyAmJiB2YWwuX2NvbnRleHQgPT0gJ2Jsb2NrJykge1xuICAgICAgICB2YXIgcHJvcFZtID0gY29udGVudE1vZGVsW3Byb3AyXSgpO1xuICAgICAgICB2YXIgbmV3Vm0gPSBfbWFrZUNvbXB1dGVkRnVuY3Rpb24oZGVmc1twcm9wMl0sIGRlZnMsIHRobXMsIGtvLCBjb250ZW50TW9kZWwsIGlzQ29udGVudCwgcHJvcFZtKTtcbiAgICAgICAgdFtwcm9wMl0obmV3Vm0pO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09ICdvYmplY3QnICYmIHZhbCAhPT0gbnVsbCAmJiB2YWwudHlwZSA9PSAnYmxvY2tzJykge1xuICAgICAgICB2YXIgbWFpblZtID0gY29udGVudE1vZGVsW3Byb3AyXSgpO1xuICAgICAgICB2YXIgYmxvY2tzVm0gPSBtYWluVm0uYmxvY2tzKCk7XG4gICAgICAgIHZhciBvbGRCbG9jaywgYmxvY2tUeXBlLCBuZXdCbG9jaztcbiAgICAgICAgZm9yICh2YXIgaWIgPSAwOyBpYiA8IGJsb2Nrc1ZtLmxlbmd0aDsgaWIrKykge1xuICAgICAgICAgIG9sZEJsb2NrID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShibG9ja3NWbVtpYl0pO1xuICAgICAgICAgIGJsb2NrVHlwZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUob2xkQmxvY2sudHlwZSk7XG4gICAgICAgICAgbmV3QmxvY2sgPSBfbWFrZUNvbXB1dGVkRnVuY3Rpb24oZGVmc1tibG9ja1R5cGVdLCBkZWZzLCB0aG1zLCBrbywgY29udGVudE1vZGVsLCBpc0NvbnRlbnQsIG9sZEJsb2NrKTtcbiAgICAgICAgICBibG9ja3NWbVtpYl0obmV3QmxvY2spO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGJsb2Nrc09icyA9IG1haW5WbS5ibG9ja3M7XG5cbiAgICAgICAgX2F1Z21lbnRCbG9ja3NPYnNlcnZhYmxlKGJsb2Nrc09icywgX2Jsb2NrSW5zdHJ1bWVudEZ1bmN0aW9uLmJpbmQobWFpblZtLCB1bmRlZmluZWQsIGRlZnMsIHRobXMsIGtvLCB1bmRlZmluZWQsIGNvbnRlbnRNb2RlbCwgaXNDb250ZW50KSk7XG5cbiAgICAgICAgY29udGVudE1vZGVsW3Byb3AyXS5fd3JhcCA9IF9tYWtlQmxvY2tzV3JhcC5iaW5kKGNvbnRlbnRNb2RlbFtwcm9wMl0sIGJsb2Nrc09icy5faW5zdHJ1bWVudEJsb2NrKTtcbiAgICAgICAgY29udGVudE1vZGVsW3Byb3AyXS5fdW53cmFwID0gX3Vud3JhcC5iaW5kKGNvbnRlbnRNb2RlbFtwcm9wMl0pO1xuICAgICAgfVxuICAgIH1cblxuICByZXR1cm4gdDtcbn07XG5cbnZhciBfYXVnbWVudEJsb2Nrc09ic2VydmFibGUgPSBmdW5jdGlvbihibG9ja3NPYnMsIGluc3RydW1lbnQpIHtcbiAgYmxvY2tzT2JzLl9pbnN0cnVtZW50QmxvY2sgPSBpbnN0cnVtZW50O1xuICBpZiAodHlwZW9mIGJsb2Nrc09icy5vcmlnUHVzaCA9PSAndW5kZWZpbmVkJykge1xuICAgIGJsb2Nrc09icy5vcmlnUHVzaCA9IGJsb2Nrc09icy5wdXNoO1xuICAgIGJsb2Nrc09icy5wdXNoID0gX21ha2VQdXNoLmJpbmQoYmxvY2tzT2JzKTtcbiAgICBibG9ja3NPYnMub3JpZ1NwbGljZSA9IGJsb2Nrc09icy5zcGxpY2U7XG4gICAgYmxvY2tzT2JzLnNwbGljZSA9IF9tYWtlU3BsaWNlLmJpbmQoYmxvY2tzT2JzKTtcbiAgfVxufTtcblxudmFyIF9tYWtlQmxvY2tzV3JhcCA9IGZ1bmN0aW9uKGluc3RydW1lbnQsIGlucHV0TW9kZWwpIHtcbiAgdmFyIG1vZGVsID0ga28udG9KUyhpbnB1dE1vZGVsKTtcbiAgdmFyIGlucHV0ID0gbW9kZWwuYmxvY2tzO1xuICBtb2RlbC5ibG9ja3MgPSBbXTtcbiAgdmFyIHJlcyA9IGtvd3JhcC5mcm9tSlMobW9kZWwsIHVuZGVmaW5lZCwgdHJ1ZSkoKTtcbiAgX2F1Z21lbnRCbG9ja3NPYnNlcnZhYmxlKHJlcy5ibG9ja3MsIGluc3RydW1lbnQpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG9iaiA9IGtvLnRvSlMoaW5wdXRbaV0pO1xuICAgIC8vIGNvbnNvbGUubG9nKFwiX21ha2VCbG9ja3NXcmFwIHNldCBibG9ja0lkXCIsIG9iai5pZCwgJ2Jsb2NrXycraSk7XG4gICAgb2JqLmlkID0gJ2Jsb2NrXycgKyBpO1xuICAgIHJlcy5ibG9ja3MucHVzaChvYmopO1xuICB9XG4gIHRoaXMocmVzKTtcbn07XG5cbnZhciBfbWFrZVB1c2ggPSBmdW5jdGlvbigpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB0aHJvdyBcIkFycmF5IHB1c2ggd2l0aCBtdWx0aXBsZSBhcmd1bWVudHMgbm90IGltcGxlbWVudGVkXCI7XG4gIC8vIHVud3JhcCBvYnNlcnZhYmxlIGJsb2Nrcywgb3RoZXJ3aXNlIHZpc2liaWxpdHkgKGRlcGVuZGVuY3kpIGhhbmRsaW5nIGJyZWFrc1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYga28uaXNPYnNlcnZhYmxlKGFyZ3VtZW50c1swXSkpIHtcbiAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXS5fdW53cmFwID09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFyZ3VtZW50c1swXSA9IGFyZ3VtZW50c1swXS5fdW53cmFwKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiV0FSTjogcHVzaGluZyBvYnNlcnZhYmxlIHdpdGggbm8gX3Vud3JhcCBmdW5jdGlvbiAoVE9ETyByZW1vdmUgbWUsIGV4cGVjdGVkIGNvbmRpdGlvbilcIik7XG4gICAgfVxuICB9XG4gIGlmICgha28uaXNPYnNlcnZhYmxlKGFyZ3VtZW50c1swXSkpIHtcbiAgICB2YXIgaW5zdHJ1bWVudGVkID0gdGhpcy5faW5zdHJ1bWVudEJsb2NrKGFyZ3VtZW50c1swXSk7XG4gICAgcmV0dXJuIHRoaXMub3JpZ1B1c2guYXBwbHkodGhpcywgW2luc3RydW1lbnRlZF0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0aGlzLm9yaWdQdXNoLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cbn07XG5cbnZhciBfbWFrZVNwbGljZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDMpIHRocm93IFwiQXJyYXkgc3BsaWNlIHdpdGggbXVsdGlwbGUgb2JqZWN0cyBub3QgaW1wbGVtZW50ZWRcIjtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGtvLmlzT2JzZXJ2YWJsZShhcmd1bWVudHNbMl0pKSB7XG4gICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMl0uX3Vud3JhcCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhcmd1bWVudHNbMl0gPSBhcmd1bWVudHNbMl0uX3Vud3JhcCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZyhcIldBUk46IHNwbGljaW5nIG9ic2VydmFibGUgd2l0aCBubyBfdW53cmFwIGZ1bmN0aW9uIChUT0RPIHJlbW92ZSBtZSwgZXhwZWN0ZWQgY29uZGl0aW9uKVwiKTtcbiAgICB9XG4gIH1cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyICYmICFrby5pc09ic2VydmFibGUoYXJndW1lbnRzWzJdKSkge1xuICAgIHZhciBpbnN0cnVtZW50ZWQgPSB0aGlzLl9pbnN0cnVtZW50QmxvY2soYXJndW1lbnRzWzJdKTtcbiAgICByZXR1cm4gdGhpcy5vcmlnU3BsaWNlLmFwcGx5KHRoaXMsIFthcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSwgaW5zdHJ1bWVudGVkXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRoaXMub3JpZ1NwbGljZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG59O1xuXG4vLyBkZWYsIGRlZnMgYW5kIHRoZW1lcyBhcmUgYm91bmQgaW4gXCJfbW9kZWxJbnN0cnVtZW50XCIgd2hpbGUgdGhlIG5leHQgcGFyYW1ldGVycyBhcmUgZXhwb3NlZCBieSB0aGlzIG1vZHVsZVxudmFyIF9ibG9ja0luc3RydW1lbnRGdW5jdGlvbiA9IGZ1bmN0aW9uKGRlZiwgZGVmcywgdGhlbWVzLCBrbm9ja291dCwgc2VsZiwgbW9kZWxDb250ZW50LCBpc0NvbnRlbnQsIHNlbGYyKSB7XG4gIC8vIHVnbHk6IHNvbWV0aW1lcyB3ZSBoYXZlIHRvIGJpbmQgY29udGVudCBidXQgbm90IHNlbGYsIHNvIHdlIHJlcGVhdCBzZWxmIGF0IHRoZSBlbmQgYXMgXCJzZWxmMlwiXG4gIGlmICh0eXBlb2Ygc2VsZiA9PSAndW5kZWZpbmVkJykgc2VsZiA9IHNlbGYyO1xuXG4gIHZhciBjb21wdXRlZEZ1bmN0aW9ucztcbiAgY29tcHV0ZWRGdW5jdGlvbnMgPSB7XG4gICAgJyc6IF9tYWtlQ29tcHV0ZWRGdW5jdGlvbi5iaW5kKHNlbGYsIGRlZiwgZGVmcywgdGhlbWVzLCBrbm9ja291dCwgbW9kZWxDb250ZW50LCBpc0NvbnRlbnQpXG4gIH07XG5cbiAgdmFyIHJlcyA9IGtvd3JhcC5mcm9tSlMoc2VsZiwgY29tcHV0ZWRGdW5jdGlvbnMsIHRydWUpO1xuICByZXMuX3Vud3JhcCA9IF91bndyYXAuYmluZChyZXMpO1xuICByZXR1cm4gcmVzO1xufTtcblxudmFyIF93cmFwID0gZnVuY3Rpb24oaW5zdHJ1bWVudCwgdW53cmFwcGVkKSB7XG4gIHZhciBuZXdDb250ZW50ID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShpbnN0cnVtZW50KGtvLCB1bndyYXBwZWQsIHVuZGVmaW5lZCwgdHJ1ZSkpO1xuICB0aGlzKG5ld0NvbnRlbnQpO1xufTtcblxudmFyIF91bndyYXAgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGtvLnRvSlModGhpcyk7XG59O1xuXG52YXIgX21vZGVsSW5zdHJ1bWVudCA9IGZ1bmN0aW9uKG1vZGVsLCBtb2RlbERlZiwgZGVmcykge1xuICB2YXIgX2luc3RydW1lbnQgPSBfYmxvY2tJbnN0cnVtZW50RnVuY3Rpb24uYmluZCh1bmRlZmluZWQsIG1vZGVsRGVmLCBkZWZzLCBkZWZzWyd0aGVtZXMnXSk7XG4gIHZhciByZXMgPSBfaW5zdHJ1bWVudChrbywgbW9kZWwsIHVuZGVmaW5lZCwgdHJ1ZSk7XG4gIC8vIHJlcy5faW5zdHJ1bWVudCA9IF9pbnN0cnVtZW50O1xuICByZXMuX3dyYXAgPSBfd3JhcC5iaW5kKHJlcywgX2luc3RydW1lbnQpO1xuICByZXMuX3Vud3JhcCA9IF91bndyYXAuYmluZChyZXMpO1xuICByZXR1cm4gcmVzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBfbW9kZWxJbnN0cnVtZW50OyIsInZhciB0aW55Y29sb3IgPSByZXF1aXJlKCd0aW55Y29sb3InKTtcblxuZnVuY3Rpb24gQ29sb3IodGlueWNvbG9yKSB7XG4gIHRoaXMuZ2V0QnJpZ2h0bmVzcyA9IGZ1bmN0aW9uKGNvbG9yKSB7XG4gICAgcmV0dXJuIHRpbnljb2xvcihjb2xvcikuZ2V0QnJpZ2h0bmVzcygpO1xuICB9O1xuICB0aGlzLmlzTGlnaHQgPSBmdW5jdGlvbihjb2xvcikge1xuICAgIHJldHVybiB0aW55Y29sb3IoY29sb3IpLmlzTGlnaHQoKTtcbiAgfTtcbiAgdGhpcy5pc0RhcmsgPSBmdW5jdGlvbihjb2xvcikge1xuICAgIHJldHVybiB0aW55Y29sb3IoY29sb3IpLmlzRGFyaygpO1xuICB9O1xuICB0aGlzLmdldEx1bWluYW5jZSA9IGZ1bmN0aW9uKGNvbG9yKSB7XG4gICAgcmV0dXJuIHRpbnljb2xvcihjb2xvcikuZ2V0THVtaW5hbmNlKCk7XG4gIH07XG5cblxuICB0aGlzLmxpZ2h0ZW4gPSBmdW5jdGlvbihjb2xvciwgYW1vdW50KSB7XG4gICAgcmV0dXJuIHRpbnljb2xvcihjb2xvcikubGlnaHRlbihhbW91bnQpLnRvSGV4U3RyaW5nKCk7XG4gIH07XG4gIHRoaXMuYnJpZ2h0ZW4gPSBmdW5jdGlvbihjb2xvciwgYW1vdW50KSB7XG4gICAgcmV0dXJuIHRpbnljb2xvcihjb2xvcikuYnJpZ2h0ZW4oYW1vdW50KS50b0hleFN0cmluZygpO1xuICB9O1xuICB0aGlzLmRhcmtlbiA9IGZ1bmN0aW9uKGNvbG9yLCBhbW91bnQpIHtcbiAgICByZXR1cm4gdGlueWNvbG9yKGNvbG9yKS5kYXJrZW4oYW1vdW50KS50b0hleFN0cmluZygpO1xuICB9O1xuICB0aGlzLmRlc2F0dXJhdGUgPSBmdW5jdGlvbihjb2xvciwgYW1vdW50KSB7XG4gICAgcmV0dXJuIHRpbnljb2xvcihjb2xvcikuZGVzYXR1cmF0ZShhbW91bnQpLnRvSGV4U3RyaW5nKCk7XG4gIH07XG4gIHRoaXMuc2F0dXJhdGUgPSBmdW5jdGlvbihjb2xvciwgYW1vdW50KSB7XG4gICAgcmV0dXJuIHRpbnljb2xvcihjb2xvcikuc2F0dXJhdGUoYW1vdW50KS50b0hleFN0cmluZygpO1xuICB9O1xuICB0aGlzLmdyZXlzY2FsZSA9IGZ1bmN0aW9uKGNvbG9yKSB7XG4gICAgcmV0dXJuIHRpbnljb2xvcihjb2xvcikuZ3JleXNjYWxlKCkudG9IZXhTdHJpbmcoKTtcbiAgfTtcbiAgdGhpcy5zcGluID0gZnVuY3Rpb24oY29sb3IsIGFtb3VudCkge1xuICAgIHJldHVybiB0aW55Y29sb3IoY29sb3IpLnNwaW4oYW1vdW50KS50b0hleFN0cmluZygpO1xuICB9O1xuICB0aGlzLmNvbXBsZW1lbnQgPSBmdW5jdGlvbihjb2xvcikge1xuICAgIHJldHVybiB0aW55Y29sb3IoY29sb3IpLmNvbXBsZW1lbnQoKS50b0hleFN0cmluZygpO1xuICB9O1xuXG4gIHRoaXMubWl4ID0gdGlueWNvbG9yLm1peDtcbiAgdGhpcy5yZWFkYWJpbGl0eSA9IHRpbnljb2xvci5yZWFkYWJpbGl0eTtcbiAgdGhpcy5pc1JlYWRhYmxlID0gdGlueWNvbG9yLmlzUmVhZGFibGU7XG4gIHRoaXMubW9zdFJlYWRhYmxlID0gdGlueWNvbG9yLm1vc3RSZWFkYWJsZTtcbn1cblxudmFyIGNvbG9yUGx1Z2luID0gZnVuY3Rpb24odm0pIHtcbiAgZ2xvYmFsLkNvbG9yID0gbmV3IENvbG9yKHRpbnljb2xvcik7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbG9yUGx1Z2luOyIsIlwidXNlIHN0cmljdFwiO1xuLyogZ2xvYmFsIGdsb2JhbDogZmFsc2UgKi9cbnZhciBjb25zb2xlID0gcmVxdWlyZShcImNvbnNvbGVcIik7XG52YXIga28gPSByZXF1aXJlKFwia25vY2tvdXRcIik7XG52YXIgJCA9IHJlcXVpcmUoXCJqcXVlcnlcIik7XG5cbnZhciBsc0xvYWRlciA9IGZ1bmN0aW9uKGhhc2hfa2V5LCBlbWFpbFByb2Nlc3NvckJhY2tlbmQpIHtcbiAgdmFyIG1kU3RyID0gZ2xvYmFsLmxvY2FsU3RvcmFnZS5nZXRJdGVtKFwibWV0YWRhdGEtXCIgKyBoYXNoX2tleSk7XG4gIGlmIChtZFN0ciAhPT0gbnVsbCkge1xuICAgIHZhciBtb2RlbDtcbiAgICB2YXIgdGQgPSBnbG9iYWwubG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ0ZW1wbGF0ZS1cIiArIGhhc2hfa2V5KTtcbiAgICBpZiAodGQgIT09IG51bGwpIG1vZGVsID0gSlNPTi5wYXJzZSh0ZCk7XG4gICAgdmFyIG1kID0gSlNPTi5wYXJzZShtZFN0cik7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1ldGFkYXRhOiBtZCxcbiAgICAgIG1vZGVsOiBtb2RlbCxcbiAgICAgIGV4dGVuc2lvbjogbHNDb21tYW5kUGx1Z2luRmFjdG9yeShtZCwgZW1haWxQcm9jZXNzb3JCYWNrZW5kKVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgXCJDYW5ub3QgZmluZCBzdG9yZWQgZGF0YSBmb3IgXCIraGFzaF9rZXk7XG4gIH1cbn07XG5cbnZhciBsc0NvbW1hbmRQbHVnaW5GYWN0b3J5ID0gZnVuY3Rpb24obWQsIGVtYWlsUHJvY2Vzc29yQmFja2VuZCkge1xuICB2YXIgY29tbWFuZHNQbHVnaW4gPSBmdW5jdGlvbihtZGtleSwgbWRuYW1lLCB2aWV3TW9kZWwpIHtcblxuICAgIC8vIGNvbnNvbGUubG9nKFwibG9hZGluZyBmcm9tIG1ldGFkYXRhXCIsIG1kLCBtb2RlbCk7XG4gICAgdmFyIHNhdmVDbWQgPSB7XG4gICAgICBuYW1lOiAnU2F2ZScsIC8vIGwxMG4gaGFwcGVucyBpbiB0aGUgdGVtcGxhdGVcbiAgICAgIGVuYWJsZWQ6IGtvLm9ic2VydmFibGUodHJ1ZSlcbiAgICB9O1xuICAgIHNhdmVDbWQuZXhlY3V0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBzYXZlQ21kLmVuYWJsZWQoZmFsc2UpO1xuICAgICAgICB2YXIgcG9zdFVybCA9IGVtYWlsUHJvY2Vzc29yQmFja2VuZCA/IGVtYWlsUHJvY2Vzc29yQmFja2VuZCA6ICcvZGwvJztcbiAgICAgICAgdmFyIHRlbXBsYXRlVGl0bGVJbnB1dElkID0gJ3RlbXBsYXRlVGl0bGUnO1xuICAgICAgICB2YXIgdGl0bGVJbnB1dEVsZW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGVtcGxhdGVUaXRsZUlucHV0SWQpO1xuICAgICAgICB2YXIgdGVtcGxhdGVUaXRsZSA9IHRpdGxlSW5wdXRFbGVtZW50LnZhbHVlO1xuICAgICAgICBjb25zb2xlLmxvZyhcInNhdmUgdGVtcGxhdGUgXCIgKyB0ZW1wbGF0ZVRpdGxlICsgXCIgXCIgKyBwb3N0VXJsKTtcbiAgICAgICAgdmFyIHBvc3QgPSAkLnBvc3QocG9zdFVybCwge1xuICAgICAgICAgICAgYWN0aW9uOiAnc2F2ZScsXG4gICAgICAgICAgICBodG1sOiB2aWV3TW9kZWwuZXhwb3J0SFRNTCgpLFxuICAgICAgICAgICAgdGl0bGU6IHRlbXBsYXRlVGl0bGVcbiAgICAgICAgfSwgbnVsbCwgJ2h0bWwnKTtcbiAgICAgICAgcG9zdC5mYWlsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJmYWlsXCIsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB2aWV3TW9kZWwubm90aWZpZXIuZXJyb3Iodmlld01vZGVsLnQoJ1VuZXhwZWN0ZWQgZXJyb3IgdGFsa2luZyB0byBzZXJ2ZXI6IGNvbnRhY3QgdXMhJykpO1xuICAgICAgICB9KTtcbiAgICAgICAgcG9zdC5zdWNjZXNzKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJzdWNjZXNzXCIsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB2aWV3TW9kZWwubm90aWZpZXIuc3VjY2Vzcyh2aWV3TW9kZWwudChcIlRlbXBsYXRlIHNhdmVkLi4uXCIpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHBvc3QuYWx3YXlzKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2F2ZUNtZC5lbmFibGVkKHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgIC8qXG4gICAgICBzYXZlQ21kLmVuYWJsZWQoZmFsc2UpO1xuICAgICAgdmlld01vZGVsLm1ldGFkYXRhLmNoYW5nZWQgPSBEYXRlLm5vdygpO1xuICAgICAgaWYgKHR5cGVvZiB2aWV3TW9kZWwubWV0YWRhdGEua2V5ID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIlVuYWJsZSB0byBmaW5kIGtldCBpbiBtZXRhZGF0YSBvYmplY3QuLi5cIiwgdmlld01vZGVsLm1ldGFkYXRhKTtcbiAgICAgICAgdmlld01vZGVsLm1ldGFkYXRhLmtleSA9IG1ka2V5O1xuICAgICAgfVxuICAgICAgZ2xvYmFsLmxvY2FsU3RvcmFnZS5zZXRJdGVtKFwibWV0YWRhdGEtXCIgKyBtZGtleSwgdmlld01vZGVsLmV4cG9ydE1ldGFkYXRhKCkpO1xuICAgICAgZ2xvYmFsLmxvY2FsU3RvcmFnZS5zZXRJdGVtKFwidGVtcGxhdGUtXCIgKyBtZGtleSwgdmlld01vZGVsLmV4cG9ydEpTT04oKSk7XG4gICAgICBzYXZlQ21kLmVuYWJsZWQodHJ1ZSk7XG4gICAgICAqL1xuICAgIH07XG4gICAgdmFyIHRlc3RDbWQgPSB7XG4gICAgICBuYW1lOiAnVGVzdCcsIC8vIGwxMG4gaGFwcGVucyBpbiB0aGUgdGVtcGxhdGVcbiAgICAgIGVuYWJsZWQ6IGtvLm9ic2VydmFibGUodHJ1ZSlcbiAgICB9O1xuICAgIHZhciBkb3dubG9hZENtZCA9IHtcbiAgICAgIG5hbWU6ICdEb3dubG9hZCcsIC8vIGwxMG4gaGFwcGVucyBpbiB0aGUgdGVtcGxhdGVcbiAgICAgIGVuYWJsZWQ6IGtvLm9ic2VydmFibGUodHJ1ZSlcbiAgICB9O1xuICAgIHRlc3RDbWQuZXhlY3V0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdGVzdENtZC5lbmFibGVkKGZhbHNlKTtcbiAgICAgIHZhciBlbWFpbCA9IGdsb2JhbC5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInRlc3RlbWFpbFwiKTtcbiAgICAgIGlmIChlbWFpbCA9PT0gbnVsbCB8fCBlbWFpbCA9PSAnbnVsbCcpIGVtYWlsID0gdmlld01vZGVsLnQoJ0luc2VydCBoZXJlIHRoZSByZWNpcGllbnQgZW1haWwgYWRkcmVzcycpO1xuICAgICAgZW1haWwgPSBnbG9iYWwucHJvbXB0KHZpZXdNb2RlbC50KFwiVGVzdCBlbWFpbCBhZGRyZXNzXCIpLCBlbWFpbCk7XG4gICAgICBpZiAoZW1haWwubWF0Y2goL0AvKSkge1xuICAgICAgICBnbG9iYWwubG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ0ZXN0ZW1haWxcIiwgZW1haWwpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIlRPRE8gdGVzdGluZy4uLlwiLCBlbWFpbCk7XG4gICAgICAgIHZhciBwb3N0VXJsID0gZW1haWxQcm9jZXNzb3JCYWNrZW5kID8gZW1haWxQcm9jZXNzb3JCYWNrZW5kIDogJy9kbC8nO1xuICAgICAgICB2YXIgcG9zdCA9ICQucG9zdChwb3N0VXJsLCB7XG4gICAgICAgICAgYWN0aW9uOiAnZW1haWwnLFxuICAgICAgICAgIHJjcHQ6IGVtYWlsLFxuICAgICAgICAgIHN1YmplY3Q6IFwiW3Rlc3RdIFwiICsgbWRrZXkgKyBcIiAtIFwiICsgbWRuYW1lLFxuICAgICAgICAgIGh0bWw6IHZpZXdNb2RlbC5leHBvcnRIVE1MKClcbiAgICAgICAgfSwgbnVsbCwgJ2h0bWwnKTtcbiAgICAgICAgcG9zdC5mYWlsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiZmFpbFwiLCBhcmd1bWVudHMpO1xuICAgICAgICAgIHZpZXdNb2RlbC5ub3RpZmllci5lcnJvcih2aWV3TW9kZWwudCgnVW5leHBlY3RlZCBlcnJvciB0YWxraW5nIHRvIHNlcnZlcjogY29udGFjdCB1cyEnKSk7XG4gICAgICAgIH0pO1xuICAgICAgICBwb3N0LnN1Y2Nlc3MoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJzdWNjZXNzXCIsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgdmlld01vZGVsLm5vdGlmaWVyLnN1Y2Nlc3Modmlld01vZGVsLnQoXCJUZXN0IGVtYWlsIHNlbnQuLi5cIikpO1xuICAgICAgICB9KTtcbiAgICAgICAgcG9zdC5hbHdheXMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGVzdENtZC5lbmFibGVkKHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdsb2JhbC5hbGVydCh2aWV3TW9kZWwudCgnSW52YWxpZCBlbWFpbCBhZGRyZXNzJykpO1xuICAgICAgICB0ZXN0Q21kLmVuYWJsZWQodHJ1ZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBkb3dubG9hZENtZC5leGVjdXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICBkb3dubG9hZENtZC5lbmFibGVkKGZhbHNlKTtcbiAgICAgIHZpZXdNb2RlbC5ub3RpZmllci5pbmZvKHZpZXdNb2RlbC50KFwiRG93bmxvYWRpbmcuLi5cIikpO1xuICAgICAgdmlld01vZGVsLmV4cG9ydEhUTUx0b1RleHRhcmVhKCcjZG93bmxvYWRIdG1sVGV4dGFyZWEnKTtcbiAgICAgIHZhciBwb3N0VXJsID0gZW1haWxQcm9jZXNzb3JCYWNrZW5kID8gZW1haWxQcm9jZXNzb3JCYWNrZW5kIDogJy9kbC8nO1xuICAgICAgZ2xvYmFsLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkb3dubG9hZEZvcm0nKS5zZXRBdHRyaWJ1dGUoXCJhY3Rpb25cIiwgcG9zdFVybCk7XG4gICAgICBnbG9iYWwuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Rvd25sb2FkRm9ybScpLnN1Ym1pdCgpO1xuICAgICAgZG93bmxvYWRDbWQuZW5hYmxlZCh0cnVlKTtcbiAgICB9O1xuXG4gICAgdmlld01vZGVsLnNhdmUgPSBzYXZlQ21kO1xuICAgIHZpZXdNb2RlbC50ZXN0ID0gdGVzdENtZDtcbiAgICB2aWV3TW9kZWwuZG93bmxvYWQgPSBkb3dubG9hZENtZDtcbiAgfS5iaW5kKHVuZGVmaW5lZCwgbWQua2V5LCBtZC5uYW1lKTtcblxuICByZXR1cm4gY29tbWFuZHNQbHVnaW47XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxzTG9hZGVyOyIsIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwia25vY2tvdXQtc29ydGFibGVcIik7XG5cbnJlcXVpcmUoXCIuL2JpbmRpbmdzL2pxdWVyeXVpLXNwaW5uZXIuanNcIik7XG5yZXF1aXJlKFwiLi9iaW5kaW5ncy9qcXVlcnl1aS10YWJzLmpzXCIpO1xucmVxdWlyZShcIi4vYmluZGluZ3MvY29sb3JwaWNrZXIuanNcIik7XG5yZXF1aXJlKFwiLi9iaW5kaW5ncy9ibG9ja3MuanNcIik7XG5yZXF1aXJlKFwiLi9iaW5kaW5ncy9jc3N0ZXh0LmpzXCIpO1xucmVxdWlyZShcIi4vYmluZGluZ3MvYmluZC1pZnJhbWUuanNcIik7XG5yZXF1aXJlKFwiLi9iaW5kaW5ncy9kcm9wcGFibGUuanNcIik7XG5yZXF1aXJlKFwiLi9iaW5kaW5ncy9maWxldXBsb2FkLmpzXCIpO1xucmVxdWlyZShcIi4vYmluZGluZ3MvdmlydHVhbHMuanNcIik7XG5yZXF1aXJlKFwiLi9iaW5kaW5ncy93eXNpd3lncy5qc1wiKTtcbnJlcXVpcmUoXCIuL2JpbmRpbmdzL3Njcm9sbGZpeC5qc1wiKTtcbnJlcXVpcmUoXCIuL2JpbmRpbmdzL2lmLXN1YnMuanNcIik7XG5yZXF1aXJlKFwiLi9iaW5kaW5ncy9leHRzb3J0YWJsZXMuanNcIik7XG5yZXF1aXJlKFwiLi9iaW5kaW5ncy9ldmVudGFibGUuanNcIik7XG5yZXF1aXJlKFwiLi9iaW5kaW5ncy90b29sdGlwcy5qc1wiKTtcbnJlcXVpcmUoXCIuL2JpbmRpbmdzL2V4dGVuZGVyLXBhZ2luYXRpb24uanNcIik7XG5yZXF1aXJlKFwiLi9iaW5kaW5ncy92YWxpZGF0ZWQtdmFsdWUuanNcIik7XG5yZXF1aXJlKFwiLi9iaW5kaW5ncy9zY3JvbGxpbnRvdmlldy5qc1wiKTsiLCJcInVzZSBzdHJpY3RcIjtcbi8qIGdsb2JhbCBnbG9iYWw6IGZhbHNlICovXG5cbnZhciAkID0gcmVxdWlyZShcImpxdWVyeVwiKTtcbnZhciBrbyA9IHJlcXVpcmUoXCJrbm9ja291dFwiKTtcbnZhciBrb2pxdWkgPSByZXF1aXJlKFwia25vY2tvdXQtanF1ZXJ5dWlcIik7IC8vIGp1c3QgZm9yIHRoZSB3aWRnZXQgcGx1Z2luc1xudmFyIHRlbXBsYXRlQ29udmVydGVyID0gcmVxdWlyZShcIi4vY29udmVydGVyL21haW4uanNcIik7XG52YXIgY29uc29sZSA9IHJlcXVpcmUoXCJjb25zb2xlXCIpO1xudmFyIGluaXRpYWxpemVWaWV3bW9kZWwgPSByZXF1aXJlKFwiLi92aWV3bW9kZWwuanNcIik7XG52YXIgdGVtcGxhdGVTeXN0ZW0gPSByZXF1aXJlKCcuL2JpbmRpbmdzL2Nob29zZS10ZW1wbGF0ZS5qcycpO1xuXG4vLyBjYWxsIGEgZ2l2ZW4gbWV0aG9kIG9uIGV2ZXJ5IHBsdWdpbiBpbXBsZW1lbnRpbmcgaXQuXG4vLyBzdXBwb3J0cyBhIFwicmV2ZXJzZVwiIHBhcmFtZXRlciB0byBjYWxsIHRoZSBtZXRob2RzIGZyb20gdGhlIGxhc3Qgb25lIHRvIHRoZSBmaXJzdCBvbmUuXG52YXIgcGx1Z2luc0NhbGwgPSBmdW5jdGlvbihwbHVnaW5zLCBtZXRob2ROYW1lLCBhcmdzLCByZXZlcnNlKSB7XG4gIHZhciBzdGFydCwgZW5kLCBkaWZmLCByZXMsIHJlc3VsdHM7XG4gIHJlc3VsdHMgPSBbXTtcbiAgaWYgKHR5cGVvZiByZXZlcnNlICE9PSAndW5kZWZpbmVkJyAmJiByZXZlcnNlKSB7XG4gICAgc3RhcnQgPSBwbHVnaW5zLmxlbmd0aCAtIDE7XG4gICAgZW5kID0gMDtcbiAgICBkaWZmID0gLTE7XG4gIH0gZWxzZSB7XG4gICAgc3RhcnQgPSAwO1xuICAgIGVuZCA9IHBsdWdpbnMubGVuZ3RoIC0gMTtcbiAgICBkaWZmID0gMTtcbiAgfVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgIT0gZW5kICsgZGlmZjsgaSArPSBkaWZmKSB7XG4gICAgaWYgKHR5cGVvZiBwbHVnaW5zW2ldW21ldGhvZE5hbWVdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmVzID0gcGx1Z2luc1tpXVttZXRob2ROYW1lXS5hcHBseShwbHVnaW5zW2ldLCBhcmdzKTtcbiAgICAgIGlmICh0eXBlb2YgcmVzICE9PSAndW5kZWZpbmVkJykgcmVzdWx0cy5wdXNoKHJlcyk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gd29ya2Fyb3VuZCBmb3Iga25vY2tvdXQtanF1ZXJ5dWkncyBidXR0b25zZXQvYnV0dG9uIGRpc3Bvc2FsOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2d2YXMva25vY2tvdXQtanF1ZXJ5dWkvaXNzdWVzLzI1XG52YXIgb3JpZ0Rpc3Bvc2VDYWxsYmFjayA9IGtvLnV0aWxzLmRvbU5vZGVEaXNwb3NhbC5hZGREaXNwb3NlQ2FsbGJhY2s7XG5rby51dGlscy5kb21Ob2RlRGlzcG9zYWwuYWRkRGlzcG9zZUNhbGxiYWNrID0gZnVuY3Rpb24obm9kZSwgY2FsbGJhY2spIHtcbiAgdmFyIG5ld0NhbGxiYWNrID0gZnVuY3Rpb24obm9kZSkge1xuICAgIHRyeSB7XG4gICAgICBjYWxsYmFjayhub2RlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImNvdWdodCBkaXNwb3NlIGNhbGxiYWNrIGV4Y2VwdGlvblwiLCBlKTtcbiAgICB9XG4gIH07XG4gIG9yaWdEaXNwb3NlQ2FsbGJhY2sobm9kZSwgbmV3Q2FsbGJhY2spO1xufTtcblxudmFyIGJpbmRpbmdQbHVnaW5NYWtlciA9IGZ1bmN0aW9uKHBlcmZvcm1hbmNlQXdhcmVDYWxsZXIpIHtcbiAgcmV0dXJuIHtcbiAgICB2aWV3TW9kZWw6IGZ1bmN0aW9uKHZpZXdNb2RlbCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcGVyZm9ybWFuY2VBd2FyZUNhbGxlcignYXBwbHlCaW5kaW5ncycsIGtvLmFwcGx5QmluZGluZ3MuYmluZCh1bmRlZmluZWQsIHZpZXdNb2RlbCkpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVyciwgZXJyLnN0YWNrKTtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGlzcG9zZTogZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICBwZXJmb3JtYW5jZUF3YXJlQ2FsbGVyKCd1bmFwcGx5QmluZGluZ3MnLCBrby5jbGVhbk5vZGUuYmluZCh0aGlzLCBnbG9iYWwuZG9jdW1lbnQuYm9keSkpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVyciwgZXJyLnN0YWNrKTtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG5cbnZhciB0ZW1wbGF0ZUNyZWF0b3IgPSBmdW5jdGlvbih0ZW1wbGF0ZVBsdWdpbiwgaHRtbE9yRWxlbWVudCwgb3B0aW9uYWxOYW1lLCB0ZW1wbGF0ZU1vZGUpIHtcbiAgdmFyIHRtcE5hbWUgPSBvcHRpb25hbE5hbWU7XG4gIGlmICh0eXBlb2Ygb3B0aW9uYWxOYW1lICE9ICd1bmRlZmluZWQnICYmIHR5cGVvZiB0ZW1wbGF0ZU1vZGUgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIGh0bWxPckVsZW1lbnQgIT0gJ29iamVjdCcgfHwgaHRtbE9yRWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgIT0gJ3JlcGxhY2VkaHRtbCcpIHRtcE5hbWUgKz0gJy0nICsgdGVtcGxhdGVNb2RlO1xuICB9XG5cbiAgd2hpbGUgKHR5cGVvZiB0bXBOYW1lID09ICd1bmRlZmluZWQnIHx8IHRtcE5hbWUgPT09IG51bGwgfHwgdGVtcGxhdGVQbHVnaW4uZXhpc3RzKHRtcE5hbWUpKSB7XG4gICAgdG1wTmFtZSA9ICdhbm9ueW1vdXMtJyArIE1hdGguZmxvb3IoKE1hdGgucmFuZG9tKCkgKiAxMDAwMDApICsgMSk7XG4gIH1cblxuICBpZiAodHlwZW9mIGh0bWxPckVsZW1lbnQgPT0gJ29iamVjdCcgJiYgaHRtbE9yRWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT0gJ3JlcGxhY2VkaHRtbCcpIHtcbiAgICB2YXIgJGVsID0gJChodG1sT3JFbGVtZW50KTtcbiAgICB2YXIgJGhlYWQgPSAkKCdyZXBsYWNlZGhlYWQnLCAkZWwpO1xuICAgIHZhciAkYm9keSA9ICQoJ3JlcGxhY2VkYm9keScsICRlbCk7XG4gICAgdGVtcGxhdGVQbHVnaW4uYWRkZXIodG1wTmFtZSArICctaGVhZCcsICRoZWFkLmh0bWwoKSB8fCAnJyk7XG4gICAgdGVtcGxhdGVQbHVnaW4uYWRkZXIodG1wTmFtZSArICctc2hvdycsICRib2R5Lmh0bWwoKSB8fCAnJyk7XG4gICAgdGVtcGxhdGVQbHVnaW4uYWRkZXIodG1wTmFtZSArICctcHJldmlldycsICRlbC5odG1sKCkpO1xuICAgIHRlbXBsYXRlUGx1Z2luLmFkZGVyKHRtcE5hbWUgKyAnLXd5c2l3eWcnLCAkZWwuaHRtbCgpKTtcblxuICAgIC8vICRoZWFkLmF0dHIoJ2RhdGEtYmluZCcsICdibG9jazogY29udGVudCcpO1xuICAgICRoZWFkLmNoaWxkcmVuKCkuZGV0YWNoKCk7XG4gICAgJGhlYWQuaHRtbChcIjwhLS0ga28gYmxvY2s6IGNvbnRlbnQgLS0+PCEtLSAva28gLS0+XCIpO1xuICAgICRoZWFkLmJlZm9yZSgnPCEtLSBrbyB3aXRoUHJvcGVydGllczogeyB0ZW1wbGF0ZU1vZGU6IFxcJ2hlYWRcXCcgfSAtLT4nKTtcbiAgICAkaGVhZC5hZnRlcignPCEtLSAva28gLS0+Jyk7XG4gICAgJGJvZHkuaHRtbChcIjwhLS0ga28gYmxvY2s6IGNvbnRlbnQgLS0+PCEtLSAva28gLS0+XCIpO1xuXG4gICAgdGVtcGxhdGVQbHVnaW4uYWRkZXIodG1wTmFtZSArICctaWZyYW1lJywgJGVsWzBdLm91dGVySFRNTCk7XG5cbiAgfSBlbHNlIGlmICh0eXBlb2YgaHRtbE9yRWxlbWVudCA9PSAnb2JqZWN0Jykge1xuICAgIHRlbXBsYXRlUGx1Z2luLmFkZGVyKHRtcE5hbWUsIGh0bWxPckVsZW1lbnQub3V0ZXJIVE1MKTtcbiAgfSBlbHNlIHtcbiAgICB0ZW1wbGF0ZVBsdWdpbi5hZGRlcih0bXBOYW1lLCBodG1sT3JFbGVtZW50KTtcbiAgfVxuXG4gIHJldHVybiB0bXBOYW1lO1xufTtcblxuLy8gQWRhcHRlciB0byB0cmFuc2Zvcm0gXCJ2aWV3TW9kZWwgcGx1Z2luc1wiIGludG8gbW9yZSBnZW5lcmljIHBsdWdpbnMuXG5mdW5jdGlvbiBfdmlld01vZGVsUGx1Z2luSW5zdGFuY2UocGx1Z2luRnVuY3Rpb24pIHtcbiAgdmFyIGluc3RhbmNlO1xuICByZXR1cm4ge1xuICAgIHZpZXdNb2RlbDogZnVuY3Rpb24odmlld01vZGVsKSB7XG4gICAgICBpbnN0YW5jZSA9IHBsdWdpbkZ1bmN0aW9uKHZpZXdNb2RlbCk7XG4gICAgfSxcbiAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0eXBlb2YgaW5zdGFuY2UgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBpbnN0YW5jZS5pbml0ICE9PSAndW5kZWZpbmVkJykgaW5zdGFuY2UuaW5pdCgpO1xuICAgIH0sXG4gICAgZGlzcG9zZTogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodHlwZW9mIGluc3RhbmNlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgaW5zdGFuY2UuZGlzcG9zZSAhPT0gJ3VuZGVmaW5lZCcpIGluc3RhbmNlLmRpc3Bvc2UoKTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBfdGVtcGxhdGVVcmxDb252ZXJ0ZXIgPSBmdW5jdGlvbihiYXNlUGF0aCwgdXJsKSB7XG4gIGlmICghdXJsLm1hdGNoKC9eW15cXC9dKjovKSAmJiAhdXJsLm1hdGNoKC9eXFwvLykgJiYgIXVybC5tYXRjaCgvXlxcWy8pICYmICF1cmwubWF0Y2goL14jPyQvKSkge1xuICAgIC8vIFRPRE8gdGhpcyBjb3VsZCBiZSBzbWFydGVyIGpvaW5pbmcgdGhlIHVybHMuLi5cbiAgICByZXR1cm4gYmFzZVBhdGggKyB1cmw7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cbnZhciB0ZW1wbGF0ZUxvYWRlciA9IGZ1bmN0aW9uKHBlcmZvcm1hbmNlQXdhcmVDYWxsZXIsIHRlbXBsYXRlRmlsZU5hbWUsIHRlbXBsYXRlTWV0YWRhdGEsIGpzb3Jqc29uLCBleHRlbnNpb25zLCBnYWxsZXJ5VXJsKSB7XG4gIHZhciB0ZW1wbGF0ZUZpbGUgPSB0eXBlb2YgdGVtcGxhdGVGaWxlTmFtZSA9PSAnc3RyaW5nJyA/IHRlbXBsYXRlRmlsZU5hbWUgOiB0ZW1wbGF0ZU1ldGFkYXRhLnRlbXBsYXRlO1xuICB2YXIgdGVtcGxhdGVQYXRoID0gXCIuL1wiO1xuICB2YXIgcCA9IHRlbXBsYXRlRmlsZS5sYXN0SW5kZXhPZignLycpO1xuICBpZiAocCAhPSAtMSkge1xuICAgIHRlbXBsYXRlUGF0aCA9IHRlbXBsYXRlRmlsZS5zdWJzdHIoMCwgcCArIDEpO1xuICB9XG5cbiAgdmFyIHRlbXBsYXRlVXJsQ29udmVydGVyID0gX3RlbXBsYXRlVXJsQ29udmVydGVyLmJpbmQodW5kZWZpbmVkLCB0ZW1wbGF0ZVBhdGgpO1xuXG4gIHZhciBtZXRhZGF0YTtcbiAgaWYgKHR5cGVvZiB0ZW1wbGF0ZU1ldGFkYXRhID09ICd1bmRlZmluZWQnKSB7XG4gICAgbWV0YWRhdGEgPSB7XG4gICAgICB0ZW1wbGF0ZTogdGVtcGxhdGVGaWxlLFxuICAgICAgLy8gVE9ETyBsMTBuP1xuICAgICAgbmFtZTogJ05vIG5hbWUnLFxuICAgICAgY3JlYXRlZDogRGF0ZS5ub3coKVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgbWV0YWRhdGEgPSB0ZW1wbGF0ZU1ldGFkYXRhO1xuICB9XG5cbiAgJC5nZXQodGVtcGxhdGVGaWxlLCBmdW5jdGlvbih0ZW1wbGF0ZWNvZGUpIHtcbiAgICB2YXIgcmVzID0gdGVtcGxhdGVDb21waWxlcihwZXJmb3JtYW5jZUF3YXJlQ2FsbGVyLCB0ZW1wbGF0ZVVybENvbnZlcnRlciwgXCJ0ZW1wbGF0ZVwiLCB0ZW1wbGF0ZWNvZGUsIGpzb3Jqc29uLCBtZXRhZGF0YSwgZXh0ZW5zaW9ucywgZ2FsbGVyeVVybCk7XG4gICAgcmVzLmluaXQoKTtcbiAgfSk7XG59O1xuXG52YXIgdGVtcGxhdGVDb21waWxlciA9IGZ1bmN0aW9uKHBlcmZvcm1hbmNlQXdhcmVDYWxsZXIsIHRlbXBsYXRlVXJsQ29udmVydGVyLCB0ZW1wbGF0ZU5hbWUsIHRlbXBsYXRlY29kZSwganNvcmpzb24sIG1ldGFkYXRhLCBleHRlbnNpb25zLCBnYWxsZXJ5VXJsKSB7XG4gIC8vIHdlIHN0cmlwIGNvbnRlbnQgYmVmb3JlIDxodG1sPiB0YWcgYW5kIGFmdGVyIDwvaHRtbD4gYmVjYXVzZSBqcXVlcnkgZG9lc24ndCBwYXJzZSBpdC5cbiAgLy8gd2UnbGwga2VlcCBpdCBcInJhd1wiIGFuZCB1c2UgaXQgaW4gdGhlIHByZXZpZXcvb3V0cHV0IG1ldGhvZHMuXG4gIHZhciByZXMgPSB0ZW1wbGF0ZWNvZGUubWF0Y2goL14oW1xcU1xcc10qKShbPF1odG1sW14+XSo+W1xcU1xcc10qPFxcL2h0bWw+KShbXFxTXFxzXSopJC9pKTtcbiAgaWYgKHJlcyA9PT0gbnVsbCkgdGhyb3cgXCJVbmFibGUgdG8gZmluZCA8aHRtbD4gb3BlbmluZyBhbmQgY2xvc2luZyB0YWdzIGluIHRoZSB0ZW1wbGF0ZVwiO1xuICB2YXIgcHJlZml4ID0gcmVzWzFdO1xuICAvLyB3ZSBwYXJzZSB0aGUgaHRtbCBjb250ZW50IGFmdGVyIHJlcGxhY2luZyB0aGUgdGFnIG5hbWUgZm9yIGh0bWwvaGVhZC9ib2R5IHNvIHRvIGF2b2lkIGpxdWVyeSBpc3N1ZXMgaW4gcGFyc2luZy5cbiAgdmFyIGJhc2ljU3RydWN0dXJlID0geyAnPGh0bWwnOiAwLCAnPGhlYWQnOiAwLCAnPGJvZHknOiAwLCAnPC9odG1sJzogMCwgJzwvYm9keSc6IDAsICc8L2hlYWQnOiAwIH07XG4gIHZhciBodG1sID0gcmVzWzJdLnJlcGxhY2UoLyg8XFwvPykoaHRtbHxoZWFkfGJvZHkpKFtePl0qPikvZ2ksIGZ1bmN0aW9uKG1hdGNoLCBwMSwgcDIsIHAzKSB7XG4gICAgYmFzaWNTdHJ1Y3R1cmVbKHAxK3AyKS50b0xvd2VyQ2FzZSgpXSArPSAxO1xuICAgIHJldHVybiBwMSArICdyZXBsYWNlZCcgKyBwMiArIHAzO1xuICB9KTtcbiAgZm9yICh2YXIgZWxlIGluIGJhc2ljU3RydWN0dXJlKSBpZiAoYmFzaWNTdHJ1Y3R1cmUuaGFzT3duUHJvcGVydHkoZWxlKSkgaWYgKGJhc2ljU3RydWN0dXJlW2VsZV0gIT0gMSkge1xuICAgIGlmIChiYXNpY1N0cnVjdHVyZVtlbGVdID09PSAwKSB0aHJvdyBcIkVSUk9SOiBtaXNzaW5nIG1hbmRhdG9yeSBlbGVtZW50IFwiK2VsZStcIj5cIjtcbiAgICBpZiAoYmFzaWNTdHJ1Y3R1cmVbZWxlXSA+IDEpIHRocm93IFwiRVJST1I6IG11bHRpcGxlIGVsZW1lbnQgXCIrZWxlK1wiPiBvY2NvdXJlbmNlcyBhcmUgbm90IHN1cHBvcnRlZCAoZm91bmQgXCIrYmFzaWNTdHJ1Y3R1cmVbZWxlXStcIiBvY2NvdXJlbmNlcylcIjtcbiAgfVxuICB2YXIgcG9zdGZpeCA9IHJlc1szXTtcbiAgdmFyIGJsb2NrRGVmcyA9IFtdO1xuICB2YXIgZW5hYmxlVW5kbyA9IHRydWU7XG4gIHZhciBlbmFibGVSZWNvcmRlciA9IHRydWU7XG4gIHZhciBiYXNlVGhyZXNob2xkID0gJyskcm9vdC5jb250ZW50TGlzdGVuZXJzKCknO1xuXG4gIHZhciBwbHVnaW5zID0gW107XG5cbiAgaWYgKHR5cGVvZiBleHRlbnNpb25zICE9PSAndW5kZWZpbmVkJykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXh0ZW5zaW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHR5cGVvZiBleHRlbnNpb25zW2ldID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcGx1Z2lucy5wdXNoKF92aWV3TW9kZWxQbHVnaW5JbnN0YW5jZShleHRlbnNpb25zW2ldKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwbHVnaW5zLnB1c2goZXh0ZW5zaW9uc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGNyZWF0ZWRUZW1wbGF0ZXMgPSBbXTtcbiAgdmFyIHRlbXBsYXRlc1BsdWdpbiA9IHtcbiAgICBhZGRlcjogZnVuY3Rpb24oaWQsIGh0bWwpIHtcbiAgICAgIGlmICh0eXBlb2YgaHRtbCAhPT0gJ3N0cmluZycpIHRocm93IFwiVGVtcGxhdGUgc3lzdGVtOiBjYW5ub3QgY3JlYXRlIG5ldyB0ZW1wbGF0ZSBcIiArIGlkO1xuICAgICAgdmFyIHRyYXNoID0gaHRtbC5tYXRjaCgvKGRhdGEpPy1rby1bXiA9Ol0qL2cpO1xuICAgICAgaWYgKHRyYXNoKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFUlJPUjogZm91bmQgdW5leHBlY3RlZCAta28tIGF0dHJpYnV0ZSBpbiBjb21waWxlZCB0ZW1wbGF0ZVwiLCBpZCwgXCIsIHlvdSBwcm9iYWJseSBtaXNwZWxsZWQgaXQ6XCIsIHRyYXNoKTtcbiAgICAgIH1cbiAgICAgIHRlbXBsYXRlU3lzdGVtLmFkZFRlbXBsYXRlKGlkLCBodG1sKTtcbiAgICAgIGNyZWF0ZWRUZW1wbGF0ZXMucHVzaChpZCk7XG4gICAgfSxcbiAgICBleGlzdHM6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICB2YXIgZWwgPSB0ZW1wbGF0ZVN5c3RlbS5nZXRUZW1wbGF0ZUNvbnRlbnQoaWQpO1xuICAgICAgaWYgKHR5cGVvZiBlbCAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybiB0cnVlO1xuICAgICAgZWxzZSByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICBkaXNwb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIGkgPSBjcmVhdGVkVGVtcGxhdGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHRlbXBsYXRlU3lzdGVtLnJlbW92ZVRlbXBsYXRlKGNyZWF0ZWRUZW1wbGF0ZXNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBrby5iaW5kaW5nSGFuZGxlcnNbJ2Jsb2NrJ10udGVtcGxhdGVFeGlzdHMgPSB0ZW1wbGF0ZXNQbHVnaW4uZXhpc3RzO1xuXG4gIC8vIHRlbXBsYXRlY3JlYXRvciB0cmFja3MgY3JlYXRlZCB0ZW1wbGF0ZSAodmlhIHRlbXBsYXRlQWRkZXIpIHNvIHRvIGJlIGFibGUgdG8gZGlzcG9zZSB0aGVtIGxhdGVyXG4gIHZhciBteVRlbXBsYXRlQ3JlYXRvciA9IHRlbXBsYXRlQ3JlYXRvci5iaW5kKHVuZGVmaW5lZCwgdGVtcGxhdGVzUGx1Z2luKTtcblxuICAvLyBmaXJzdCBwYXNzOiB3ZSBcImNvbXBpbGVcIiB0aGUgdGVtcGxhdGUgaW50byBhIHRlcm1wbGF0ZURlZiBvYmplY3RcbiAgdmFyIHRlbXBsYXRlRGVmID0gcGVyZm9ybWFuY2VBd2FyZUNhbGxlcigndHJhbnNsYXRlVGVtcGxhdGUnLCB0ZW1wbGF0ZUNvbnZlcnRlci50cmFuc2xhdGVUZW1wbGF0ZS5iaW5kKHVuZGVmaW5lZCwgdGVtcGxhdGVOYW1lLCBodG1sLCB0ZW1wbGF0ZVVybENvbnZlcnRlciwgbXlUZW1wbGF0ZUNyZWF0b3IpKTtcblxuICAvLyBzZWNvbmQgcGFzczogZ2l2ZW4gdGhlIHRlbXBsYXRlRGVmIHdlIGNyZWF0ZSBhIGJhc2UgY29udGVudCBtb2RlbCBvYmplY3QgZm9yIHRoaXMgdGVtcGxhdGUuXG4gIHZhciBjb250ZW50ID0gcGVyZm9ybWFuY2VBd2FyZUNhbGxlcignZ2VuZXJhdGVNb2RlbCcsIHRlbXBsYXRlQ29udmVydGVyLndyYXBwZWRSZXN1bHRNb2RlbC5iaW5kKHVuZGVmaW5lZCwgdGVtcGxhdGVEZWYpKTtcblxuICAvLyB0aGlyZCBwYXNzOiB3ZSBjcmVhdGUgXCJzdHlsZS9jb250ZW50IGVkaXRvcnNcIiBmb3IgZXZlcnkgYmxvY2tcbiAgdmFyIHdpZGdldHMgPSB7fTtcbiAgdmFyIHdpZGdldFBsdWdpbnMgPSBwbHVnaW5zQ2FsbChwbHVnaW5zLCAnd2lkZ2V0JywgWyQsIGtvLCBrb2pxdWldKTtcbiAgZm9yICh2YXIgd2kgPSAwOyB3aSA8IHdpZGdldFBsdWdpbnMubGVuZ3RoOyB3aSsrKSB7XG4gICAgd2lkZ2V0c1t3aWRnZXRQbHVnaW5zW3dpXS53aWRnZXRdID0gd2lkZ2V0UGx1Z2luc1t3aV07XG4gIH1cbiAgYmxvY2tEZWZzLnB1c2guYXBwbHkoYmxvY2tEZWZzLCBwZXJmb3JtYW5jZUF3YXJlQ2FsbGVyKCdnZW5lcmF0ZUVkaXRvcnMnLCB0ZW1wbGF0ZUNvbnZlcnRlci5nZW5lcmF0ZUVkaXRvcnMuYmluZCh1bmRlZmluZWQsIHRlbXBsYXRlRGVmLCB3aWRnZXRzLCB0ZW1wbGF0ZVVybENvbnZlcnRlciwgbXlUZW1wbGF0ZUNyZWF0b3IsIGJhc2VUaHJlc2hvbGQpKSk7XG5cbiAgdmFyIGluY29tcGF0aWJsZVRlbXBsYXRlID0gZmFsc2U7XG4gIGlmICh0eXBlb2YganNvcmpzb24gIT09ICd1bmRlZmluZWQnICYmIGpzb3Jqc29uICE9PSBudWxsKSB7XG4gICAgdmFyIHVud3JhcHBlZDtcbiAgICBpZiAodHlwZW9mIGpzb3Jqc29uID09ICdzdHJpbmcnKSB7XG4gICAgICB1bndyYXBwZWQgPSBrby51dGlscy5wYXJzZUpzb24oanNvcmpzb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICB1bndyYXBwZWQgPSBqc29yanNvbjtcbiAgICB9XG5cbiAgICAvLyB3ZSBydW4gYSBiYXNpYyBjb21wYXRpYmlsaXR5IGNoZWNrIGJldHdlZW4gdGhlIGNvbnRlbnQtbW9kZWwgd2UgZXhwZWN0IGFuZCB0aGUgaW5pdGlhbGl6YXRpb24gbW9kZWxcbiAgICB2YXIgY2hlY2tNb2RlbFJlcyA9IHBlcmZvcm1hbmNlQXdhcmVDYWxsZXIoJ2NoZWNrTW9kZWwnLCB0ZW1wbGF0ZUNvbnZlcnRlci5jaGVja01vZGVsLmJpbmQodW5kZWZpbmVkLCBjb250ZW50Ll91bndyYXAoKSwgYmxvY2tEZWZzLCB1bndyYXBwZWQpKTtcbiAgICAvLyBpZiBjaGVja01vZGVsUmVzIGlzIDEgdGhlbiB0aGUgbW9kZWwgaXMgbm90IGZ1bGx5IGNvbXBhdGlibGUgYnV0IHdlIGZpeGVkIGl0XG4gICAgaWYgKGNoZWNrTW9kZWxSZXMgPT0gMikge1xuICAgICAgY29uc29sZS5lcnJvcihcIlRyeWluZyB0byBjb21waWxlIGFuIGluY29tcGF0aWJsZSB0ZW1wbGF0ZSB2ZXJzaW9uIVwiLCBjb250ZW50Ll91bndyYXAoKSwgYmxvY2tEZWZzLCB1bndyYXBwZWQpO1xuICAgICAgaW5jb21wYXRpYmxlVGVtcGxhdGUgPSB0cnVlO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb250ZW50Ll93cmFwKHVud3JhcHBlZCk7XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJVbmFibGUgdG8gaW5qZWN0IG1vZGVsIGNvbnRlbnQhXCIsIGV4KTtcbiAgICAgIGluY29tcGF0aWJsZVRlbXBsYXRlID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBUaGlzIGJ1aWxkIHRoZSB0ZW1wbGF0ZSBmb3IgdGhlIHByZXZpZXcvb3V0cHV0LCBidXQgY29uY2F0ZW5hdGluZyBwcmVmaXgsIHRlbXBsYXRlIGFuZCBjb250ZW50IGFuZCBzdHJpcHBpbmcgdGhlIFwicmVwbGFjZWRcIiBwcmVmaXggYWRkZWQgdG8gXCJwcm9ibGVtYXRpY1wiIHRhZyAoaHRtbC9oZWFkL2JvZHkpXG4gIHZhciBpZnJhbWVUcGwgPSBwcmVmaXggKyB0ZW1wbGF0ZVN5c3RlbS5nZXRUZW1wbGF0ZUNvbnRlbnQodGVtcGxhdGVOYW1lICsgJy1pZnJhbWUnKS5yZXBsYWNlKC8oPFxcLz8pcmVwbGFjZWQoaHRtbHxoZWFkfGJvZHkpKFtePl0qPikvZ2ksIGZ1bmN0aW9uKG1hdGNoLCBwMSwgcDIsIHAzKSB7XG4gICAgcmV0dXJuIHAxICsgcDIgKyBwMztcbiAgfSkgKyBwb3N0Zml4O1xuXG4gIC8vIHN0b3JlIHRoaXMgc28gdG8gcmVzdG9yZSBpdCBvbiBkaXNwb3NhbGVcbiAgdmFyIG9yaWdpRnJhbWVUcGwgPSBrby5iaW5kaW5nSGFuZGxlcnMuYmluZElmcmFtZS50cGw7XG4gIGtvLmJpbmRpbmdIYW5kbGVycy5iaW5kSWZyYW1lLnRwbCA9IGlmcmFtZVRwbDtcbiAgdmFyIGlGcmFtZVBsdWdpbiA9IHtcbiAgICBkaXNwb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgIGtvLmJpbmRpbmdIYW5kbGVycy5iaW5kSWZyYW1lLnRwbCA9IG9yaWdpRnJhbWVUcGw7XG4gICAgfVxuICB9O1xuXG4gIHBsdWdpbnMucHVzaChpRnJhbWVQbHVnaW4pO1xuICBwbHVnaW5zLnB1c2godGVtcGxhdGVzUGx1Z2luKTtcblxuICAvLyBpbml0aWFsaXplIHRoZSB2aWV3TW9kZWwgb2JqZWN0IGJhc2VkIG9uIHRoZSBjb250ZW50IG1vZGVsLlxuICB2YXIgdmlld01vZGVsID0gcGVyZm9ybWFuY2VBd2FyZUNhbGxlcignaW5pdGlhbGl6ZVZpZXdtb2RlbCcsIGluaXRpYWxpemVWaWV3bW9kZWwuYmluZCh0aGlzLCBjb250ZW50LCBibG9ja0RlZnMsIHRlbXBsYXRlVXJsQ29udmVydGVyLCBnYWxsZXJ5VXJsKSk7XG5cbiAgdmlld01vZGVsLm1ldGFkYXRhID0gbWV0YWRhdGE7XG4gIC8vIGxldCdzIHJ1biBzb21lIHZlcnNpb24gY2hlY2sgb24gdGVtcGxhdGUgYW5kIGVkaXRvciB1c2VkIHRvIGJ1aWxkIHRoZSBtb2RlbCBiZWluZyBsb2FkZWQuXG4gIHZhciBlZGl0dmVyID0gJzAuMTMuMCc7XG4gIGlmICh0eXBlb2Ygdmlld01vZGVsLm1ldGFkYXRhLmVkaXRvcnZlcnNpb24gIT09ICd1bmRlZmluZWQnICYmIHZpZXdNb2RlbC5tZXRhZGF0YS5lZGl0b3J2ZXJzaW9uICE9PSBlZGl0dmVyKSB7XG4gICAgY29uc29sZS53YXJuKFwiVGhlIG1vZGVsIGJlaW5nIGxvYWRlZCBoYXMgYmVlbiBjcmVhdGVkIHdpdGggYW4gb2xkZXIgZWRpdG9yIHZlcnNpb25cIiwgdmlld01vZGVsLm1ldGFkYXRhLmVkaXRvcnZlcnNpb24sIFwidnNcIiwgZWRpdHZlcik7XG4gIH1cbiAgdmlld01vZGVsLm1ldGFkYXRhLmVkaXRvcnZlcnNpb24gPSBlZGl0dmVyO1xuXG4gIGlmICh0eXBlb2YgdGVtcGxhdGVEZWYudmVyc2lvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIHZpZXdNb2RlbC5tZXRhZGF0YS50ZW1wbGF0ZXZlcnNpb24gIT09ICd1bmRlZmluZWQnICYmIHZpZXdNb2RlbC5tZXRhZGF0YS50ZW1wbGF0ZXZlcnNpb24gIT09IHRlbXBsYXRlRGVmLnZlcnNpb24pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJUaGUgbW9kZWwgYmVpbmcgbG9hZGVkIGhhcyBiZWVuIGNyZWF0ZWQgd2l0aCBhIGRpZmZlcmVudCB0ZW1wbGF0ZSB2ZXJzaW9uXCIsIHRlbXBsYXRlRGVmLnZlcnNpb24sIFwidnNcIiwgdmlld01vZGVsLm1ldGFkYXRhLnRlbXBsYXRldmVyc2lvbik7XG4gICAgfVxuICAgIHZpZXdNb2RlbC5tZXRhZGF0YS50ZW1wbGF0ZXZlcnNpb24gPSB0ZW1wbGF0ZURlZi52ZXJzaW9uO1xuICB9XG5cbiAgdGVtcGxhdGVTeXN0ZW0uaW5pdCgpO1xuXG4gIC8vIGV2ZXJ5dGhpbmcncyByZWFkeSwgc3RhcnQga25vY2tvdXQgYmluZGluZ3MuXG4gIHBsdWdpbnMucHVzaChiaW5kaW5nUGx1Z2luTWFrZXIocGVyZm9ybWFuY2VBd2FyZUNhbGxlcikpO1xuXG4gIHBsdWdpbnNDYWxsKHBsdWdpbnMsICd2aWV3TW9kZWwnLCBbdmlld01vZGVsXSk7XG5cbiAgaWYgKGluY29tcGF0aWJsZVRlbXBsYXRlKSB7XG4gICAgJCgnI2luY29tcGF0aWJsZS10ZW1wbGF0ZScpLmRpYWxvZyh7XG4gICAgICBtb2RhbDogdHJ1ZSxcbiAgICAgIGFwcGVuZFRvOiAnI21vLWJvZHknLFxuICAgICAgYnV0dG9uczoge1xuICAgICAgICBPazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJCh0aGlzKS5kaWFsb2coXCJjbG9zZVwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtb2RlbDogdmlld01vZGVsLFxuICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcGx1Z2luc0NhbGwocGx1Z2lucywgJ2luaXQnLCB1bmRlZmluZWQsIHRydWUpO1xuICAgIH0sXG4gICAgZGlzcG9zZTogZnVuY3Rpb24oKSB7XG4gICAgICBwbHVnaW5zQ2FsbChwbHVnaW5zLCAnZGlzcG9zZScsIHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgfVxuICB9O1xuXG59O1xuXG5cbnZhciBjaGVja0ZlYXR1cmUgPSBmdW5jdGlvbihmZWF0dXJlLCBmdW5jKSB7XG4gIGlmICghZnVuYygpKSB7XG4gICAgY29uc29sZS53YXJuKFwiTWlzc2luZyBmZWF0dXJlXCIsIGZlYXR1cmUpO1xuICAgIHRocm93IFwiTWlzc2luZyBmZWF0dXJlIFwiICsgZmVhdHVyZTtcbiAgfVxufTtcblxudmFyIGlzQ29tcGF0aWJsZSA9IGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIC8vIHdpbmRvdy5tc01hdGNoTWVkaWEgd291bGQgbWF0Y2ggYWxzbyBJRTlcbiAgICAvLyBJRTkgd291bGRuJ3QgYmUgc28gaGFyZCB0byBzdXBwb3J0LCBidXQgaXQgZG9lc24ndCB3b3J0aCBpdC4gKHByZXZpZXcgaWZyYW1lIGFuZCBhdXRvbWF0aWMgc2Nyb2xsIGFyZSAyIHRoaW5ncyBub3Qgd29ya2luZyBpbiBJRTkpXG4gICAgY2hlY2tGZWF0dXJlKCdtYXRjaE1lZGlhJywgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIGdsb2JhbC5tYXRjaE1lZGlhICE9ICd1bmRlZmluZWQnO1xuICAgIH0pO1xuICAgIGNoZWNrRmVhdHVyZSgnWE1MSHR0cFJlcXVlc3QgMicsIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICdYTUxIdHRwUmVxdWVzdCcgaW4gZ2xvYmFsICYmICd3aXRoQ3JlZGVudGlhbHMnIGluIG5ldyBnbG9iYWwuWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB9KTtcbiAgICBjaGVja0ZlYXR1cmUoJ0VTNSBzdHJpY3QnLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHsgLyogXCJ1c2Ugc3RyaWN0XCI7Ki9cbiAgICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICd1bmRlZmluZWQnO1xuICAgICAgfSgpO1xuICAgIH0pO1xuICAgIGNoZWNrRmVhdHVyZSgnQ1NTIGJvcmRlclJhZGl1cycsIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiBnbG9iYWwuZG9jdW1lbnQuYm9keS5zdHlsZVsnYm9yZGVyUmFkaXVzJ10gIT0gJ3VuZGVmaW5lZCc7XG4gICAgfSk7XG4gICAgY2hlY2tGZWF0dXJlKCdDU1MgYm94U2hhZG93JywgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIGdsb2JhbC5kb2N1bWVudC5ib2R5LnN0eWxlWydib3hTaGFkb3cnXSAhPSAndW5kZWZpbmVkJztcbiAgICB9KTtcbiAgICBjaGVja0ZlYXR1cmUoJ0NTUyBib3hTaXppbmcnLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgZ2xvYmFsLmRvY3VtZW50LmJvZHkuc3R5bGVbJ2JveFNpemluZyddICE9ICd1bmRlZmluZWQnO1xuICAgIH0pO1xuICAgIGNoZWNrRmVhdHVyZSgnQ1NTIGJhY2tncm91bmRTaXplJywgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIGdsb2JhbC5kb2N1bWVudC5ib2R5LnN0eWxlWydiYWNrZ3JvdW5kU2l6ZSddICE9ICd1bmRlZmluZWQnO1xuICAgIH0pO1xuICAgIGNoZWNrRmVhdHVyZSgnQ1NTIGJhY2tncm91bmRPcmlnaW4nLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgZ2xvYmFsLmRvY3VtZW50LmJvZHkuc3R5bGVbJ2JhY2tncm91bmRPcmlnaW4nXSAhPSAndW5kZWZpbmVkJztcbiAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5cbnZhciBmaXhQYWdlRXZlbnRzID0gZnVuY3Rpb24oKSB7XG4gIC8vIFRoaXMgaXMgZ2xvYmFsIGNvZGUgdG8gcHJldmVudCBkcmFnZ2luZy9kcm9wcGluZyBpbiB0aGUgcGFnZSB3aGVyZSB3ZSBkb24ndCBkZWFsIHdpdGggaXQuXG4gIC8vIElFOCBkb2Vzbid0IGhhdmUgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIsIGJ1dCBkb2Vzbid0IHN1cHBvcnQgZHJhZyZkcm9wIHRvby5cbiAgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgLy8gcHJldmVudCBnZW5lcmljIGZpbGUgZHJvcHBwaW5nIGluIHRoZSBwYWdlXG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKFwiYnJvd3NlciBpcyB1c2luZyBkcmFnIGxpc3RlbmVyIG9uIHdpbmRvd1wiKTtcbiAgICAgIGUgPSBlIHx8IGdsb2JhbC5ldmVudDtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9LCBmYWxzZSk7XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnc3RhcnRcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgLy8gY29uc29sZS5sb2coXCJicm93c2VyIGlzIHVzaW5nIGRyYWdzdGFydCBsaXN0ZW5lciBvbiB3aW5kb3dcIik7XG4gICAgICBlID0gZSB8fCBnbG9iYWwuZXZlbnQ7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSwgZmFsc2UpO1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ292ZXJcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgLy8gdGhpcyBpcyBjYWxsZWQgb24gbW91c2UgbW92ZSBvbiBldmVyeSBzdXBwb3J0ZWQgYnJvd3Nlci5cbiAgICAgIC8vIGNvbnNvbGUubG9nKFwiYnJvd3NlciBpcyB1c2luZyBkcmFnb3ZlciBsaXN0ZW5lciBvbiB3aW5kb3dcIik7XG4gICAgICBlID0gZSB8fCBnbG9iYWwuZXZlbnQ7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSwgZmFsc2UpO1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwiZHJvcFwiLCBmdW5jdGlvbihlKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZyhcImJyb3dzZXIgaXMgdXNpbmcgZHJvcCBsaXN0ZW5lciBvbiB3aW5kb3dcIik7XG4gICAgICBlID0gZSB8fCBnbG9iYWwuZXZlbnQ7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSwgZmFsc2UpO1xuICAgIGdsb2JhbC5kb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBmdW5jdGlvbihlKSB7XG4gICAgICAvLyBJIGJyb3dzZXIgc3VwcG9ydGF0aSBlbnRyYXRvIHR1dHRpIHF1aSBxdWFuZG8gc2kgZHJvcHBhIHF1YWxjb3NhIHN1bCBib2R5XG4gICAgICAvLyBjb25zb2xlLmxvZyhcImJyb3dzZXIgaXMgdXNpbmcgZHJvcCBsaXN0ZW5lciBvbiBib2R5IHRhZ1wiKTtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9LCBmYWxzZSk7XG4gIH1cbiAgaWYgKGdsb2JhbC5kb2N1bWVudC5vbmRyYWdzdGFydCkge1xuICAgIGdsb2JhbC5kb2N1bWVudC5vbmRyYWdzdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gY29uc29sZS5sb2coXCJicm93c2VyIGNhbGxlZCBvbmRyYWdzdGFydC4gcmV0dXJuIGZhbHNlIVwiKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY29tcGlsZTogdGVtcGxhdGVDb21waWxlcixcbiAgbG9hZDogdGVtcGxhdGVMb2FkZXIsXG4gIGlzQ29tcGF0aWJsZTogaXNDb21wYXRpYmxlLFxuICBmaXhQYWdlRXZlbnRzOiBmaXhQYWdlRXZlbnRzXG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgY29uc29sZSA9IHJlcXVpcmUoXCJjb25zb2xlXCIpO1xuXG52YXIgX2NhbGwgPSBmdW5jdGlvbih3aGF0VG9DYWxsKSB7XG4gIHJldHVybiB3aGF0VG9DYWxsKCk7XG59O1xuXG52YXIgbG9ncyA9IFtdO1xuXG52YXIgX3RpbWVkQ2FsbCA9IGZ1bmN0aW9uKG5hbWUsIHdoYXRUb0NhbGwpIHtcbiAgdmFyIHJlcztcbiAgdmFyIHN0YXJ0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIGlmICh0eXBlb2YgY29uc29sZSA9PSAnb2JqZWN0JyAmJiBjb25zb2xlLnRpbWUpIGNvbnNvbGUudGltZShuYW1lKTtcbiAgcmVzID0gX2NhbGwod2hhdFRvQ2FsbCk7XG4gIGlmICh0eXBlb2YgY29uc29sZSA9PSAnb2JqZWN0JyAmJiBjb25zb2xlLnRpbWUpIGNvbnNvbGUudGltZUVuZChuYW1lKTtcbiAgdmFyIGRpZmYgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHN0YXJ0O1xuICBpZiAodHlwZW9mIGNvbnNvbGUgPT0gJ29iamVjdCcgJiYgIWNvbnNvbGUudGltZSkgY29uc29sZS5sb2cobmFtZSwgXCJ0b29rXCIsIGRpZmYsIFwibXNcIik7XG4gIGxvZ3MucHVzaCh7XG4gICAgbmFtZTogbmFtZSxcbiAgICB0aW1lOiBkaWZmXG4gIH0pO1xuICAvLyBtYXggbG9nc1xuICBpZiAobG9ncy5sZW5ndGggPiAxMDApIGxvZ3MudW5zaGlmdCgpO1xuICByZXR1cm4gcmVzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHRpbWVkQ2FsbDogX3RpbWVkQ2FsbCxcbiAgbG9nczogbG9nc1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGtvID0gcmVxdWlyZShcImtub2Nrb3V0XCIpO1xudmFyIHVuZG9NYW5hZ2VyID0gcmVxdWlyZSgna25vY2tvdXQtdW5kb21hbmFnZXInKTtcbnZhciB1bmRvc2VyaWFsaXplciA9IHJlcXVpcmUoXCIuL3VuZG9zZXJpYWxpemVyLmpzXCIpO1xuXG52YXIgYWRkVW5kb1N0YWNrRXh0ZW5zaW9uTWFrZXIgPSBmdW5jdGlvbihwZXJmb3JtYW5jZUF3YXJlQ2FsbGVyKSB7XG4gIHJldHVybiBmdW5jdGlvbih2aWV3TW9kZWwpIHtcblxuICAgIHZpZXdNb2RlbC5jb250ZW50TGlzdGVuZXJzKHZpZXdNb2RlbC5jb250ZW50TGlzdGVuZXJzKCkgKyAyKTtcblxuICAgIC8vIFRPRE8gdGhlIGxhYmVscyBzaG91bGQgYmUgY29tcHV0ZWQgb2JzZXJ2YWJsZXMgKG5lZWRzIGNoYW5nZXMgaW4gdW5kb21hbmFnZXIgcHJvamVjdHMpXG4gICAgdmFyIHVuZG9SZWRvU3RhY2sgPSB1bmRvTWFuYWdlcih2aWV3TW9kZWwuY29udGVudCwge1xuICAgICAgbGV2ZWxzOiAxMDAsXG4gICAgICB1bmRvTGFiZWw6IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkgeyByZXR1cm4gdmlld01vZGVsLnQoXCJVbmRvICgjQ09VTlQjKVwiKTsgfSksXG4gICAgICByZWRvTGFiZWw6IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkgeyByZXR1cm4gdmlld01vZGVsLnQoXCJSZWRvXCIpOyB9KVxuICAgIH0pO1xuICAgIHZpZXdNb2RlbC51bmRvID0gdW5kb1JlZG9TdGFjay51bmRvQ29tbWFuZDtcbiAgICB2aWV3TW9kZWwudW5kby5leGVjdXRlID0gcGVyZm9ybWFuY2VBd2FyZUNhbGxlci5iaW5kKHZpZXdNb2RlbCwgJ3VuZG8nLCB2aWV3TW9kZWwudW5kby5leGVjdXRlKTtcbiAgICB2aWV3TW9kZWwucmVkbyA9IHVuZG9SZWRvU3RhY2sucmVkb0NvbW1hbmQ7XG4gICAgdmlld01vZGVsLnJlZG8uZXhlY3V0ZSA9IHBlcmZvcm1hbmNlQXdhcmVDYWxsZXIuYmluZCh2aWV3TW9kZWwsICdyZWRvJywgdmlld01vZGVsLnJlZG8uZXhlY3V0ZSk7XG4gICAgdmlld01vZGVsLnVuZG9SZXNldCA9IHBlcmZvcm1hbmNlQXdhcmVDYWxsZXIuYmluZCh2aWV3TW9kZWwsICd1bmRvUmVzZXQnLCB1bmRvUmVkb1N0YWNrLnJlc2V0KTtcbiAgICB2aWV3TW9kZWwuc2V0VW5kb01vZGVNZXJnZSA9IHVuZG9SZWRvU3RhY2suc2V0TW9kZU1lcmdlO1xuICAgIHZpZXdNb2RlbC5zZXRVbmRvTW9kZU9uY2UgPSB1bmRvUmVkb1N0YWNrLnNldE1vZGVPbmNlO1xuICAgIHVuZG9SZWRvU3RhY2suc2V0TW9kZUlnbm9yZSgpO1xuICAgIHVuZG9SZWRvU3RhY2suc2V0VW5kb0FjdGlvbk1ha2VyKHVuZG9zZXJpYWxpemVyLm1ha2VVbmRvQWN0aW9uLmJpbmQodW5kZWZpbmVkLCB2aWV3TW9kZWwuY29udGVudCkpO1xuICAgIHVuZG9zZXJpYWxpemVyLndhdGNoRW5hYmxlZCh0cnVlKTtcblxuICAgIHJldHVybiB7XG4gICAgICBwYXVzZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHVuZG9SZWRvU3RhY2suc2V0TW9kZUlnbm9yZSgpO1xuICAgICAgfSxcbiAgICAgIHJ1bjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHVuZG9SZWRvU3RhY2suc2V0TW9kZU9uY2UoKTtcbiAgICAgIH0sXG4gICAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdW5kb1JlZG9TdGFjay5zZXRNb2RlT25jZSgpO1xuICAgICAgfSxcbiAgICAgIGRpc3Bvc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2aWV3TW9kZWwuY29udGVudExpc3RlbmVycyh2aWV3TW9kZWwuY29udGVudExpc3RlbmVycygpIC0gMik7XG4gICAgICAgIHVuZG9zZXJpYWxpemVyLndhdGNoRW5hYmxlZChmYWxzZSk7XG4gICAgICAgIHVuZG9SZWRvU3RhY2suZGlzcG9zZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gYWRkVW5kb1N0YWNrRXh0ZW5zaW9uTWFrZXI7IiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIga28gPSByZXF1aXJlKFwia25vY2tvdXRcIik7XG52YXIgY29uc29sZSA9IHJlcXVpcmUoXCJjb25zb2xlXCIpO1xuLy8gVGhpcyBtb2R1bGUgZGVhbHMgd2l0aCBzZXJpYWxpemF0aW9uL2Rlc2VyaWFsaXphdGlvbiBvZiBhIFwidHJlZS1wYXRoXCIgcmVwcmVzZW50aW5nIHRoZSBwYXRoIHRvIHJlYWNoIHRoZSBnaXZlbiBsZWFmLlxuLy8gSW4gb3JkZXIgdG8gYmUgY29ycmVjdGx5IHNlcmlhbGl6ZWQgd2UgaGF2ZSB0byBtb3ZlIGZyb20gXCJyZWZlcmVuY2VcIiB0byBcInN0cmluZ1wiIGFuZCB2aWNldmVyc2EuXG5cbnZhciBfcmVmZXJlbmNlID0gZnVuY3Rpb24obW9kZWwsIHBhdGgpIHtcbiAgdmFyIHAgPSAwO1xuICB2YXIgcDEsIHAyO1xuICB2YXIgbSA9IG1vZGVsO1xuICB3aGlsZSAocCA8IHBhdGgubGVuZ3RoKSB7XG4gICAgc3dpdGNoIChwYXRoLmNoYXJBdChwKSkge1xuICAgICAgY2FzZSAnKCc6XG4gICAgICAgIGlmIChwYXRoLmNoYXJBdChwICsgMSkgPT0gJyknKSB7XG4gICAgICAgICAgbSA9IG0oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBUT0RPIGVycm9yXG4gICAgICAgIH1cbiAgICAgICAgcCArPSAyO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ1snOlxuICAgICAgICBwMiA9IHBhdGguaW5kZXhPZignXScsIHApO1xuICAgICAgICBtID0gbVtwYXRoLnN1YnN0cmluZyhwICsgMSwgcDIpXTtcbiAgICAgICAgcCA9IHAyICsgMTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICcuJzpcbiAgICAgICAgcDEgPSBwYXRoLmluZGV4T2YoJygnLCBwKTtcbiAgICAgICAgaWYgKHAxID09IC0xKSBwMSA9IHBhdGgubGVuZ3RoO1xuICAgICAgICBwMiA9IHBhdGguaW5kZXhPZignWycsIHApO1xuICAgICAgICBpZiAocDIgPT0gLTEpIHAyID0gcGF0aC5sZW5ndGg7XG4gICAgICAgIHAyID0gTWF0aC5taW4ocDEsIHAyKTtcbiAgICAgICAgbSA9IG1bcGF0aC5zdWJzdHJpbmcocCArIDEsIHAyKV07XG4gICAgICAgIHAgPSBwMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICAvLyBUT0RPIGVycm9yXG4gICAgfVxuICB9XG4gIHJldHVybiBtO1xufTtcblxudmFyIF9nZXRQYXRoID0gZnVuY3Rpb24ocGFyZW50cywgY2hpbGQpIHtcbiAgdmFyIHBhdGggPSBcIlwiO1xuICB2YXIgcDtcbiAgZm9yICh2YXIgayA9IDA7IGsgPD0gcGFyZW50cy5sZW5ndGg7IGsrKykge1xuICAgIHAgPSBrIDwgcGFyZW50cy5sZW5ndGggPyBwYXJlbnRzW2tdIDogY2hpbGQ7XG4gICAgaWYgKGtvLmlzT2JzZXJ2YWJsZShwKSkgcGF0aCArPSAnKCknO1xuICAgIGlmICh0eXBlb2YgcC5fZmllbGROYW1lICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcGF0aCArPSBcIi5cIiArIHAuX2ZpZWxkTmFtZTtcbiAgICB9IGVsc2UgaWYgKGsgPiAwICYmIHR5cGVvZiBwYXJlbnRzW2sgLSAxXS5wb3AgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFyIHBhcmVudEFycmF5ID0ga28uaXNPYnNlcnZhYmxlKHBhcmVudHNbayAtIDFdKSA/IGtvLnV0aWxzLnBlZWtPYnNlcnZhYmxlKHBhcmVudHNbayAtIDFdKSA6IHBhcmVudHNbayAtIDFdO1xuICAgICAgdmFyIHBvcyA9IGtvLnV0aWxzLmFycmF5SW5kZXhPZihwYXJlbnRBcnJheSwgcCk7XG4gICAgICBpZiAocG9zICE9IC0xKSB7XG4gICAgICAgIHBhdGggKz0gXCJbXCIgKyBwb3MgKyBcIl1cIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE5PVEUgdGhpcyBoYXBwZW4sIHNvbWV0aW1lcyB3aGVuIFRpbnlNQ0Ugc2VuZHMgdXBkYXRlcyBmb3Igb2JqZWN0cyBhbHJlYWR5IHJlbW92ZWQuXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJVbmV4cGVjdGVkIG9iamVjdCBub3QgZm91bmQgaW4gcGFyZW50IGFycmF5XCIsIHBhcmVudEFycmF5LCBwLCBrLCBwYXJlbnRzLmxlbmd0aCwga28udG9KUyhwYXJlbnRBcnJheSksIGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUocCkpO1xuICAgICAgICB0aHJvdyBcIlVuZXhwZWN0ZWQgb2JqZWN0IG5vdCBmb3VuZCBpbiBwYXJlbnQgYXJyYXlcIjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5lcnJvcihcIlVuZXhwZWN0ZWQgcGFyZW50IHdpdGggbm8gX2ZpZWxkTmFtZSBhbmQgbm8gcGFyZW50IGFycmF5XCIsIGssIHBhcmVudHMpO1xuICAgICAgdGhyb3cgXCJVbmV4cGVjdGVkIHBhcmVudCB3aXRoIG5vIF9maWVsZE5hbWUgYW5kIG5vIHBhcmVudCBhcnJheVwiO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcGF0aDtcbn07XG5cbnZhciBtYWtlRGVyZWZlcmVuY2VkVW5kb0FjdGlvbiA9IGZ1bmN0aW9uKHVuZG9GdW5jLCBtb2RlbCwgcGF0aCwgdmFsdWUsIGl0ZW0pIHtcbiAgdmFyIGNoaWxkID0gX3JlZmVyZW5jZShtb2RlbCwgcGF0aCk7XG4gIHVuZG9GdW5jKGNoaWxkLCB2YWx1ZSwgaXRlbSk7XG59O1xuXG52YXIgbGlzdGVuZXI7XG5cbnZhciBfc2V0TGlzdGVuZXIgPSBmdW5jdGlvbihsaXN0ZW5mdW5jKSB7XG4gIGxpc3RlbmVyID0gbGlzdGVuZnVuYztcbn07XG5cbi8qIGRlcmVmZXJlbmNpbmcgcGF0aCBhbmQgY2hhbmdpbmcgdmFsdWUgd2l0aCBcInRvSlNcIiAqL1xudmFyIG1ha2VVbmRvQWN0aW9uRGVyZWZlcmVuY2VkID0gZnVuY3Rpb24obW9kZWwsIHVuZG9GdW5jLCBwYXJlbnRzLCBjaGlsZCwgb2xkVmFsLCBpdGVtKSB7XG4gIHRyeSB7XG4gICAgdmFyIHBhdGggPSBfZ2V0UGF0aChwYXJlbnRzLCBjaGlsZCk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gYWN0aW9ucyBpbiBzaW1wbGUgSlMgb2JqZWN0cy5cbiAgICBpZiAodHlwZW9mIG9sZFZhbCA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIG9sZFZhbCA9PT0gJ2Z1bmN0aW9uJykgb2xkVmFsID0ga28udG9KUyhvbGRWYWwpO1xuICAgIGlmICh0eXBlb2YgaXRlbSAhPT0gJ3VuZGVmaW5lZCcgJiYgKHR5cGVvZiBpdGVtLnZhbHVlID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgaXRlbS52YWx1ZSA9PT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgIHZhciBuZXdJdGVtID0ga28udG9KUyhpdGVtKTtcbiAgICAgIGl0ZW0gPSBuZXdJdGVtO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBsaXN0ZW5lcihwYXRoLCBjaGlsZCwgb2xkVmFsLCBpdGVtKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJVbmRvc2VyaWFsaXplciBpZ25vcmluZyBleGNlcHRpb24gaW4gbGlzdGVuZXIgY2FsbGJhY2tcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1ha2VEZXJlZmVyZW5jZWRVbmRvQWN0aW9uLmJpbmQodW5kZWZpbmVkLCB1bmRvRnVuYywgbW9kZWwsIHBhdGgsIG9sZFZhbCwgaXRlbSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBOT1RFIHRoaXMgaGFwcGVucywgZnJvbSB0aW1lIHRvIHRpbWUsIHdoZW4gVGlueU1DRSBzZW5kcyB1cGRhdGVzIGZvciBkZWxldGVkIGNvbnRlbnQuXG4gICAgY29uc29sZS5lcnJvcihcIkV4Y2VwdGlvbiBwcm9jZXNzaW5nIHVuZG9cIiwgZSwgcGFyZW50cywgY2hpbGQsIGl0ZW0pO1xuICB9XG59O1xuXG52YXIgd2F0Y2hFbmFibGVkO1xudmFyIF93YXRjaEVuYWJsZWQgPSBmdW5jdGlvbihuZXdWYWwpIHtcbiAgaWYgKHR5cGVvZiBuZXdWYWwgIT09ICd1bmRlZmluZWQnKVxuICAgIHdhdGNoRW5hYmxlZCA9IG5ld1ZhbDtcbiAgZWxzZVxuICAgIHJldHVybiB3YXRjaEVuYWJsZWQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVyZWZlcmVuY2U6IF9nZXRQYXRoLFxuICByZWZlcmVuY2U6IF9yZWZlcmVuY2UsXG4gIG1ha2VVbmRvQWN0aW9uOiBtYWtlVW5kb0FjdGlvbkRlcmVmZXJlbmNlZCxcbiAgc2V0TGlzdGVuZXI6IF9zZXRMaXN0ZW5lcixcbiAgd2F0Y2hFbmFibGVkOiBfd2F0Y2hFbmFibGVkXG59OyIsIlwidXNlIHN0cmljdFwiO1xuLyogZ2xvYmFsIGdsb2JhbDogZmFsc2UgKi9cblxudmFyICQgPSByZXF1aXJlKFwianF1ZXJ5XCIpO1xudmFyIGtvID0gcmVxdWlyZShcImtub2Nrb3V0XCIpO1xudmFyIGNvbnNvbGUgPSByZXF1aXJlKFwiY29uc29sZVwiKTtcbnZhciBwZXJmb3JtYW5jZUF3YXJlQ2FsbGVyID0gcmVxdWlyZShcIi4vdGltZWQtY2FsbC5qc1wiKS50aW1lZENhbGw7XG5cbnZhciB0b2FzdHIgPSByZXF1aXJlKFwidG9hc3RyXCIpO1xudG9hc3RyLm9wdGlvbnMgPSB7XG4gIFwiY2xvc2VCdXR0b25cIjogZmFsc2UsXG4gIFwiZGVidWdcIjogZmFsc2UsXG4gIFwicG9zaXRpb25DbGFzc1wiOiBcInRvYXN0LWJvdHRvbS1mdWxsLXdpZHRoXCIsXG4gIFwidGFyZ2V0XCI6IFwiI21vLWJvZHlcIixcbiAgXCJvbmNsaWNrXCI6IG51bGwsXG4gIFwic2hvd0R1cmF0aW9uXCI6IFwiMzAwXCIsXG4gIFwiaGlkZUR1cmF0aW9uXCI6IFwiMTAwMFwiLFxuICBcInRpbWVPdXRcIjogXCI1MDAwXCIsXG4gIFwiZXh0ZW5kZWRUaW1lT3V0XCI6IFwiMTAwMFwiLFxuICBcInNob3dFYXNpbmdcIjogXCJzd2luZ1wiLFxuICBcImhpZGVFYXNpbmdcIjogXCJsaW5lYXJcIixcbiAgXCJzaG93TWV0aG9kXCI6IFwiZmFkZUluXCIsXG4gIFwiaGlkZU1ldGhvZFwiOiBcImZhZGVPdXRcIlxufTtcblxuLyogTk9URTogdHJhbnNsYXRpb25zIG1vdmVkIHRvIFwicGx1Z2luXCJcbnZhciBzdHJpbmdzID0ge1xuICAnc2hvdyBwcmV2aWV3IGFuZCBzZW5kIHRlc3QnOiAnVmlzdWFsaXp6YSB1bmEgYW50ZXByaW1hIGUgZmFpIHVuIGludmlvIGRpIHRlc3QnLFxuICAvLyBTdHJpbmdzIGZvciBhcHAuanNcbiAgJ0Rvd25sb2FkJzogJ0Rvd25sb2FkJyxcbiAgJ1Rlc3QnOiAnVGVzdCcsXG4gICdTYXZlJzogJ1NhbHZhJyxcbiAgJ0Rvd25sb2FkaW5nLi4uJzogXCJEb3dubG9hZCBpbiBjb3Jzby4uLlwiLFxuICAnSW52YWxpZCBlbWFpbCBhZGRyZXNzJzogXCJJbmRpcml6em8gZW1haWwgaW52YWxpZG9cIixcbiAgXCJUZXN0IGVtYWlsIHNlbnQuLi5cIjogXCJFbWFpbCBkaSB0ZXN0IGludmlhdGEuLi5cIixcbiAgJ1VuZXhwZWN0ZWQgZXJyb3IgdGFsa2luZyB0byBzZXJ2ZXI6IGNvbnRhY3QgdXMhJzogJ0Vycm9yZSBkaSBjb211bmljYXppb25lIGNvbiBpbCBzZXJ2ZXI6IGNvbnRhdHRhY2khJyxcbiAgJ0luc2VydCBoZXJlIHRoZSByZWNpcGllbnQgZW1haWwgYWRkcmVzcyc6ICdJbnNlcmlzY2kgcXVpIGxcXCdpbmRpcml6em8gZW1haWwgYSBjdWkgc3BlZGlyZScsXG4gIFwiVGVzdCBlbWFpbCBhZGRyZXNzXCI6IFwiSW5kaXJpenpvIGVtYWlsIGRpIHRlc3RcIixcbiAgLy8gdmlld01vZGVsXG4gICdCbG9jayByZW1vdmVkOiB1c2UgdW5kbyBidXR0b24gdG8gcmVzdG9yZSBpdC4uLic6ICdCbG9jY28gZWxpbWluYXRvOiB1c2EgaWwgcHVsc2FudGUgYW5udWxsYSBwZXIgcmVjdXBlcmFybG8uLi4nLFxuICAnTmV3IGJsb2NrIGFkZGVkIGFmdGVyIHRoZSBzZWxlY3RlZCBvbmUgKF9fcG9zX18pJzogJ051b3ZvIGJsb2NjbyBhZ2dpdW50byBzb3R0byBhIHF1ZWxsbyBzZWxlemlvbmF0byAoX19wb3NfXyknLFxuICAnTmV3IGJsb2NrIGFkZGVkIGF0IHRoZSBtb2RlbCBib3R0b20gKF9fcG9zX18pJzogJ051b3ZvIGJsb2NjbyBhZ2dpdW50byBpbiBmb25kbyBhbCBtb2RlbGxvIChfX3Bvc19fKScsXG4gIC8vIHVuZG9tYWluLmpzXG4gICdVbmRvICgjQ09VTlQjKSc6ICdBbm51bGxhICgjQ09VTlQjKScsXG4gICdSZWRvJzogJ1JpcHJpc3RpbmEnLFxuICAvLyBlZGl0b3IuanNcbiAgJ1NlbGVjdGVkIGVsZW1lbnQgaGFzIG5vIGVkaXRhYmxlIHByb3BlcnRpZXMnOiAnTFxcJ2VsZW1lbnRvIHNlbGV6aW9uYXRvIG5vbiBmb3JuaXNjZSBwcm9wcmlldMOgIGVkaXRhYmlsaScsXG4gICdUaGlzIHN0eWxlIGlzIHNwZWNpZmljIGZvciB0aGlzIGJsb2NrOiBjbGljayBoZXJlIHRvIHJlbW92ZSB0aGUgY3VzdG9tIHN0eWxlIGFuZCByZXZlcnQgdG8gdGhlIHRoZW1lIHZhbHVlJzogJ1F1ZXN0byBzdGlsZSDDqCBzcGVjaWZpY28gZGkgcXVlc3RvIGJsb2NjbzogY2xpY2NhIHF1aSBwZXIgYW5udWxsYXJlIGxvIHN0aWxlIHBlcnNvbmFsaXp6YXRvJyxcbiAgJ1N3aXRjaCBiZXR3ZWVuIGdsb2JhbCBhbmQgYmxvY2sgbGV2ZWwgc3R5bGVzIGVkaXRpbmcnOiAnUGVybWV0dGUgZGkgc3BlY2lmaWNhcmUgc2Ugc2kgdnVvbGUgbW9kaWZpY2FyZSBsbyBzdGlsZSBnZW5lcmFsZSBvIHNvbGFtZW50ZSBxdWVsbG8gc3BlY2lmaWNvIGRlbCBibG9jY28gc2VsZXppb25hdG8nLFxuICAvLyBtYWluLnRwbC5odG1sXG4gICdVbmRvIGxhc3Qgb3BlcmF0aW9uJzogJ0FubnVsbGEgdWx0aW1hIG9wZXJhemlvbmUnLFxuICAnUmVkbyBsYXN0IG9wZXJhdGlvbic6ICdSaXBldGkgb3BlcmF6aW9uZSBhbm51bGxhdGEnLFxuICAnU2hvdyBpbWFnZSBnYWxsZXJ5JzogJ1Zpc3VhbGl6emEgZ2FsbGVyaWEgaW1tYWdpbmknLFxuICAnR2FsbGVyeSc6ICdHYWxsZXJpYScsXG4gICdQcmV2aWV3JzogJ0FudGVwcmltYScsXG4gICdTaG93IGxpdmUgcHJldmlldyc6ICdNb3N0cmEgYW50ZXByaW1hIGxpdmUnLFxuICAnTGFyZ2Ugc2NyZWVuJzogJ1NjaGVybW8gZ3JhbmRlJyxcbiAgJ1RhYmxldCc6ICdUYWJsZXQnLFxuICAnU21hcnRwaG9uZSc6ICdTbWFydHBob25lJyxcbiAgJ1Nob3cgcHJldmlldyBhbmQgc2VuZCB0ZXN0JzogJ1Zpc3VhbGl6emEgdW5hIGFudGVwcmltYSBlIGZhaSB1biBpbnZpbyBkaSB0ZXN0JyxcbiAgJ0Rvd25sb2FkIHRlbXBsYXRlJzogJ1NjYXJpY2EgaWwgdGVtcGxhdGUnLFxuICAnU2F2ZSB0ZW1wbGF0ZSc6ICdTYWx2YSBpbCB0ZW1wbGF0ZScsXG4gICdTYXZlZCBtb2RlbCBpcyBvYnNvbGV0ZSc6ICdNb2RlbGxvIHNhbHZhdG8gb2Jzb2xldG8nLFxuICAnPHA+VGhlIHNhdmVkIG1vZGVsIGhhcyBiZWVuIGNyZWF0ZWQgd2l0aCBhIHByZXZpb3VzLCBub24gY29tcGxldGVseSBjb21wYXRpYmxlIHZlcnNpb24sIG9mIHRoZSB0ZW1wbGF0ZTwvcD48cD5Tb21lIGNvbnRlbnQgb3Igc3R5bGUgaW4gdGhlIG1vZGVsIDxiPkNPVUxEIEJFIExPU1Q8L2I+IGlmIHlvdSB3aWxsIDxiPnNhdmU8L2I+PC9wPjxwPkNvbnRhY3QgdXMgZm9yIG1vcmUgaW5mb3JtYXRpb25zITwvcD4nOiAnPHA+SWwgbW9kZWxsbyBzYWx2YXRvIMOoIHN0YXRvIGNyZWF0byBjb24gdW5hIHZlcnNpb25lIHByZWNlZGVudGUgZGVsIHRlbXBsYXRlIG5vbiBkZWwgdHV0dG8gY29tcGF0aWJpbGU8L3A+PHA+QWxjdW5pIGNvbnRlbnV0aSBvIHN0aWxpIGRlbCBtb2RlbGxvIDxiPlBPVFJFQkJFUk8gRVNTRVJFIFBFUlNJPC9iPiBzZSBwcm9jZWRlcmFpIGUgZGVjaWRlcmFpIGRpIDxiPnNhbHZhcmU8L2I+PC9wPjxwPkNvbnRhdHRhY2kgc2UgaGFpIGRlaSBkdWJiaSE8L3A+JyxcblxuICAvLyBUT0RPIHRoaXMgY2Fubm90IGJlIGRvbmUgaW4ga25vY2tvdXQgYXMgd2l0aCB1bmNvbXBhdGlibGUgYnJvd3NlcnMgd2UgZG9uJ3QgaW5pdGlhbGl6ZVxuICAvLyAnVXN1cHBvcnRlZCBicm93c2VyJzogJ0Jyb3dzZXIgbm9uIGNvbXBhdGliaWxlJywgXG4gIC8vICc8cD5Zb3VyIGJyb3dzZXIgaXMgbm90IHN1cHBvcnRlZC48L3A+PHA+VXNlIGEgZGlmZmVyZW50IGJyb3dzZXIgb3IgdHJ5IHVwZGFyaW5nIHlvdXIgYnJvd3Nlci48L3A+PHA+U3VwcG9ydGVkIGJyb3dzZXJzOiA8dWw+PGxpPkludGVybmV0IEV4cGxvcmVyICZndDs9IDEwPC9saT48bGk+R29vZ2xlIENocm9tZSAmZ3Q7PSAzMDwvbGk+PGxpPkFwcGxlIFNhZmFyaSAmZ3Q7PSA1PC9saT48bGk+TW96aWxsYSBGaXJlZml4ICZndDs9IDIwPC9saT48L3VsPjwvcD4nOiAnPHA+SWwgdHVvIGJyb3dzZXIgbm9uIMOoIHN1cHBvcnRhdG8uPC9wPjxwPkFjY2VkaSBjb24gdW4gYnJvd3NlciBkaWZmZXJlbnRlIG8gcHJvdmEgYWQgYWdnaW9ybmFyZSBpbCB0dW8gYnJvd3Nlci48L3A+PHA+QnJvd3NlciBzdXBwb3J0YXRpOiA8dWw+PGxpPkludGVybmV0IEV4cGxvcmVyICZndDs9IDEwPC9saT48bGk+R29vZ2xlIENocm9tZSAmZ3Q7PSAzMDwvbGk+PGxpPkFwcGxlIFNhZmFyaSAmZ3Q7PSA1PC9saT48bGk+TW96aWxsYSBGaXJlZml4ICZndDs9IDIwPC9saT48L3VsPjwvcD4nLFxuXG4gIC8vIHRvb2xib3hcbiAgJ0Jsb2Nrcyc6ICdCbG9jY2hpJyxcbiAgJ0Jsb2NrcyByZWFkeSB0byBiZSBhZGRlZCB0byB0aGUgdGVtcGxhdGUnOiAnRWxlbmNvIGNvbnRlbnV0aSBhZ2dpdW5naWJpbGkgYWwgbWVzc2FnZ2lvJyxcbiAgJ0NvbnRlbnQnOiAnQ29udGVudXRvJyxcbiAgJ0VkaXQgY29udGVudCBvcHRpb25zJzogJ01vZGlmaWNhIG9wemlvbmkgY29udGVudXRpJyxcbiAgJ1N0eWxlJzogJ1N0aWxlJyxcbiAgJ0VkaXQgc3R5bGUgb3B0aW9ucyc6ICdNb2RpZmljYSBvcHppb25pIGdyYWZpY2hlJyxcbiAgJ0Jsb2NrIF9fbmFtZV9fJzogJ0Jsb2NjbyBfX25hbWVfXycsXG4gICdDbGljayBvciBkcmFnIHRvIGFkZCB0aGlzIGJsb2NrIHRvIHRoZSB0ZW1wbGF0ZSc6ICdDbGljY2EgbyB0cmFzY2luYSBwZXIgYWdnaXVuZ2VyZSBhbCBtZXNzYWdnaW8nLFxuICAnQWRkJzogJ0FnZ2l1bmdpJyxcbiAgJ0J5IGNsaWNraW5nIG9uIG1lc3NhZ2UgcGFydHMgeW91IHdpbGwgc2VsZWN0IGEgYmxvY2sgYW5kIGNvbnRlbnQgb3B0aW9ucywgaWYgYW55LCB3aWxsIHNob3cgaGVyZSc6ICdDbGljY2FuZG8gc3UgYWxjdW5lIHBhcnRpIGRlbCBtZXNzYWdnaW8gc2VsZXppb25lcmFpIHVuIGJsb2NjbyBlIGxlIG9wemlvbmkgY29udGVudXRpc3RpY2hlLCBzZSBkaXNwb25pYmlsaSwgY29tcGFyaXJhbm5vIHF1aScsXG4gICdCeSBjbGlja2luZyBvbiBtZXNzYWdlIHBhcnRzIHlvdSB3aWxsIHNlbGVjdCBhIGJsb2NrIGFuZCBzdHlsZSBvcHRpb25zLCBpZiBhdmFpbGFibGUsIHdpbGwgc2hvdyBoZXJlJzogJ0NsaWNjYW5kbyBzdSBhbGN1bmUgcGFydGkgZGVsIG1lc3NhZ2dpbyBzZWxlemlvbmVyYWkgdW4gYmxvY2NvIGUgbGUgb3B6aW9uaSBkaSBzdGlsZSwgc2UgZGlzcG9uaWJpbGksIGNvbXBhcmlyYW5ubyBxdWknLFxuICAnQ2xpY2sgb3IgZHJhZyBmaWxlcyBoZXJlJzogJ0NsaWNjYSBvIHRyYXNjaW5hIGkgZmlsZSBxdWkhJyxcbiAgJ05vIGltYWdlcyB1cGxvYWRlZCwgeWV0JzogJ05vbiBoYWkgYW5jb3JhIGNhcmljYXRvIGltbWFnaW5pJyxcbiAgJ1Nob3cgaW1hZ2VzIGZyb20gdGhlIGdhbGxlcnknOiAnVmlzdWFsaXp6YSBsZSBpbW1hZ2luaSBjYXJpY2F0ZSBuZWxsYSB0dWEgYXJlYScsXG4gICdMb2FkaW5nLi4uJzogJ0NhcmljYW1lbnRvLi4uJyxcbiAgJ0xvYWQgZ2FsbGVyeSc6ICdDYXJpY2EgZ2FsbGVyaWEnLFxuICAnTG9hZGluZyBnYWxsZXJ5Li4uJzogJ0NhcmljYW1lbnRvIGluIGNvcnNvLi4uJyxcbiAgJ1RoZSBnYWxsZXJ5IGlzIGVtcHR5JzogJ05lc3N1bmEgaW1tYWdpbmUgbmVsbGEgZ2FsbGVyaWEnLFxuICAvLyBpbWctd3lzaXd5Zy50bWxwXG4gICdSZW1vdmUgaW1hZ2UnOiAnUmltdW92aSBpbW1hZ2luZScsXG4gICdPcGVuIHRoZSBpbWFnZSBlZGl0aW5nIHRvb2wnOiAnQXZ2aWEgc3RydW1lbnRvIG1vZGlmaWNhIGltbWFnaW5lJyxcbiAgJ1VwbG9hZCBhIG5ldyBpbWFnZSc6ICdDYXJpY2EgdW5hIG51b3ZhIGltbWFnaW5lJyxcbiAgJ0Ryb3AgYW4gaW1hZ2UgaGVyZSc6ICdUcmFzY2luYSB1bmEgaW1tYWdpbmUgcXVpJyxcbiAgJ0Ryb3AgYW4gaW1hZ2UgaGVyZSBvciBjbGljayB0aGUgdXBsb2FkIGJ1dHRvbic6ICdUcmFzY2luYSB1bmEgaW1tYWdpbmUgcXVpIG8gY2xpY2NhIHN1bCBwdWxzYW50ZSBkaSBjYXJpY2FtZW50bycsXG4gIC8vIGdhbGxlcnlcbiAgJ0RyYWcgdGhpcyBpbWFnZSBhbmQgZHJvcCBpdCBvbiBhbnkgdGVtcGxhdGUgaW1hZ2UgcGxhY2Vob2xkZXInOiAnVHJhc2NpbmEgcXVlc3RhIGltbWFnaW5lIHN1bGxhIHBvc2l6aW9uZSBpbiBjdWkgdnVvaSBpbnNlcmlybGEnLFxuICAnR2FsbGVyeTonOiAnR2FsbGVyaWE6JyxcbiAgJ1Nlc3Npb24gaW1hZ2VzJzogJ0ltbWFnaW5pIGRpIHNlc3Npb25lJyxcbiAgJ1JlY2VudHMnOiAnUmVjZW50aScsXG4gICdSZW1vdGUgZ2FsbGVyeSc6ICdHYWxsZXJpYSByZW1vdGEnLFxuXG4gIC8vIGN1c3RvbXN0eWxlXG4gICdDdXN0b21pemVkIGJsb2NrLjx1bD48bGk+SW4gdGhpcyBzdGF0dXMgY2hhbmdlcyB0byBwcm9wZXJ0aWVzIHdpbGwgYmUgc3BlY2lmaWMgdG8gdGhlIGN1cnJlbnQgYmxvY2sgKGluc3RlYWQgb2YgYmVpbmcgZ2xvYmFsIHRvIGFsbCBibG9ja3MgaW4gdGhlIHNhbWUgc2VjdGlvbik8L2xpPjxsaT5BIDxzcGFuIGNsYXNzPVwiY3VzdG9tU3R5bGVkXCI+PHNwYW4+XCJzbWFsbCBjdWJlXCIgPC9zcGFuPjwvc3Bhbj4gaWNvbiBiZXNpZGUgdGhlIHByb3BlcnR5IHdpbGwgbWFyayB0aGUgY3VzdG9taXphdGlvbi4gQnkgY2xpY2tpbmcgdGhpcyBpY29uIHRoZSBwcm9wZXJ0eSB2YWx1ZSB3aWxsIGJlIHJldmVydGVkIHRvIHRoZSB2YWx1ZSBkZWZpbmVkIGZvciB0aGUgc2VjdGlvbi48L2xpPjwvdWw+JzogJ0Jsb2NjbyBwZXJzb25hbGl6emF0by48dWw+PGxpPkluIHF1ZXN0YSBtb2RhbGl0w6Agc2UgY2FtYmkgdW5hIHByb3ByaWV0w6AgdmVycsOgIG1vZGlmaWNhdGEgc29sYW1lbnRlIHBlciBxdWVzdG8gc3BlY2lmaWNvIGJsb2NjbyAoaW52ZWNlIGNoZSBwZXIgdHV0dGkgaSBibG9jY2hpIGRlbGxhIHN0ZXNzYSBzZXppb25lKS48L2xpPjxsaT5QZXIgc2VnbmFsYXJlIGxhIHBlcnNvbmFsaXp6YXppb25lIGFwcGFyaXLDoCBsXFwnaWNvbmEgPHNwYW4gY2xhc3M9XCJjdXN0b21TdHlsZWRcIj48c3Bhbj4gZGVsIFwiY3ViZXR0b1wiPC9zcGFuPjwvc3Bhbj4gYSBmaWFuY28gZGVsbGUgcHJvcHJpZXTDoC4gQ2xpY2NhbmRvIHF1ZXN0YSBpY29uYSB0b3JuZXJhaSBhbCB2YWxvcmUgY29tdW5lLjwvbGk+PC91bD4nLFxuICAvLyBibG9ja3Mtd3lzaXd5Z1xuICAnRHJvcCBoZXJlIGJsb2NrcyBmcm9tIHRoZSBcIkJsb2Nrc1wiIHRhYic6ICdUcmFzY2luYSBxdWkgaSBibG9jY2hpIGRhbGxhIHNjaGVkYSBcXCdCbG9jY2hpXFwnJyxcbiAgLy8gYmxvY2std3lzaXd5Z1xuICAnRHJhZyB0aGlzIGhhbmRsZSB0byBtb3ZlIHRoZSBibG9jayc6ICdUcmFzY2luYSBwZXIgc3Bvc3RhcmUgaWwgYmxvY2NvIGFsdHJvdmUnLFxuICAnTW92ZSB0aGlzIGJsb2NrIHVwc2lkZSc6ICdTcG9zdGEgaWwgYmxvY2NvIGluIHN1JyxcbiAgJ01vdmUgdGhpcyBibG9jayBkb3duc2lkZSc6ICdTcG9zdGEgaWwgYmxvY2NvIGluIGdpdScsXG4gICdEZWxldGUgYmxvY2snOiAnRWxpbWluYSBibG9jY28nLFxuICAnRHVwbGljYXRlIGJsb2NrJzogJ0R1cGxpY2EgYmxvY2NvJyxcbiAgJ1N3aXRjaCBibG9jayB2YXJpYW50JzogJ0NhbWJpYSB2YXJpYW50ZSBibG9jY28nLFxuICAvLyBjb2xvcnBpY2tlclxuICAnVGhlbWUgQ29sb3JzLFN0YW5kYXJkIENvbG9ycyxXZWIgQ29sb3JzLFRoZW1lIENvbG9ycyxCYWNrIHRvIFBhbGV0dGUsSGlzdG9yeSxObyBoaXN0b3J5IHlldC4nOiAnQ29sb3JpIFRlbWEsQ29sb3JpIFN0YW5kYXJkLENvbG9yaSBXZWIsQ29sb3JpIFRlbWEsVG9ybmEgYWxsYSB0YXZvbG96emEsU3RvcmljbyxzdG9yaWNvIGNvbG9yaSB2dW90bycsXG5cbiAgJ0Ryb3AgaGVyZSc6ICdSaWxhc2NpYSBxdWknLFxuXG59O1xuKi9cblxuZnVuY3Rpb24gaW5pdGlhbGl6ZUVkaXRvcihjb250ZW50LCBibG9ja0RlZnMsIHRodW1iUGF0aENvbnZlcnRlciwgZ2FsbGVyeVVybCkge1xuXG4gIHZhciB2aWV3TW9kZWwgPSB7XG4gICAgZ2FsbGVyeVJlY2VudDoga28ub2JzZXJ2YWJsZUFycmF5KFtdKS5leHRlbmQoe1xuICAgICAgcGFnaW5nOiAxNlxuICAgIH0pLFxuICAgIGdhbGxlcnlSZW1vdGU6IGtvLm9ic2VydmFibGVBcnJheShbXSkuZXh0ZW5kKHtcbiAgICAgIHBhZ2luZzogMTZcbiAgICB9KSxcbiAgICBzZWxlY3RlZEJsb2NrOiBrby5vYnNlcnZhYmxlKG51bGwpLFxuICAgIHNlbGVjdGVkSXRlbToga28ub2JzZXJ2YWJsZShudWxsKSxcbiAgICBzZWxlY3RlZFRvb2w6IGtvLm9ic2VydmFibGUoMCksXG4gICAgc2VsZWN0ZWRJbWFnZVRhYjoga28ub2JzZXJ2YWJsZSgwKSxcbiAgICBkcmFnZ2luZzoga28ub2JzZXJ2YWJsZShmYWxzZSksXG4gICAgZHJhZ2dpbmdJbWFnZToga28ub2JzZXJ2YWJsZShmYWxzZSksXG4gICAgZ2FsbGVyeUxvYWRlZDoga28ub2JzZXJ2YWJsZShmYWxzZSksXG4gICAgc2hvd1ByZXZpZXdGcmFtZToga28ub2JzZXJ2YWJsZShmYWxzZSksXG4gICAgcHJldmlld01vZGU6IGtvLm9ic2VydmFibGUoJ21vYmlsZScpLFxuICAgIHNob3dUb29sYm94OiBrby5vYnNlcnZhYmxlKHRydWUpLFxuICAgIHNob3dUaGVtZToga28ub2JzZXJ2YWJsZShmYWxzZSksXG4gICAgc2hvd0dhbGxlcnk6IGtvLm9ic2VydmFibGUoZmFsc2UpLFxuICAgIGRlYnVnOiBrby5vYnNlcnZhYmxlKGZhbHNlKSxcbiAgICBjb250ZW50TGlzdGVuZXJzOiBrby5vYnNlcnZhYmxlKDApLFxuICAgIFxuICAgIGxvZ29QYXRoOiAnZGlzdC9pbWcvbW9zYWljbzMyLnBuZycsXG4gICAgbG9nb1VybDogJy4nLFxuICAgIGxvZ29BbHQ6ICdtb3NhaWNvJ1xuICB9O1xuXG4gIC8vIHZpZXdNb2RlbC5jb250ZW50ID0gY29udGVudC5faW5zdHJ1bWVudChrbywgY29udGVudCwgdW5kZWZpbmVkLCB0cnVlKTtcbiAgdmlld01vZGVsLmNvbnRlbnQgPSBjb250ZW50O1xuICB2aWV3TW9kZWwuYmxvY2tEZWZzID0gYmxvY2tEZWZzO1xuXG4gIHZpZXdNb2RlbC5ub3RpZmllciA9IHRvYXN0cjtcblxuICAvLyBEb2VzIHRva2VuIHN1YnN0aXR1dGlvbiBpbiBpMThuZXh0IHN0eWxlXG4gIHZpZXdNb2RlbC50dCA9IGZ1bmN0aW9uKGtleSwgcGFyYW1PYmopIHtcbiAgICBpZiAodHlwZW9mIHBhcmFtT2JqICE9PSAndW5kZWZpbmVkJylcbiAgICAgIGZvciAodmFyIHByb3AgaW4gcGFyYW1PYmopXG4gICAgICAgIGlmIChwYXJhbU9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICAgIGtleSA9IGtleS5yZXBsYWNlKG5ldyBSZWdFeHAoJ19fJyArIHByb3AgKyAnX18nLCAnZycpLCBwYXJhbU9ialtwcm9wXSk7XG4gICAgICAgIH1cbiAgICByZXR1cm4ga2V5O1xuICB9O1xuXG4gIC8vIFNpbXBseSBtYXBzIHRvIHR0OiBsYW5ndWFnZSBwbHVnaW5zIGNhbiBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byBkZWZpbmUgdGhlaXIgb3duIGxhbmd1YWdlXG4gIC8vIGhhbmRsaW5nLlxuICAvLyBJZiB0aGlzIG1ldGhvZCBpbnZva2VzIGFuIG9ic2VydmFibGUgKGUuZzogdmlld01vZGVsLmxhbmcoKSkgdGhlbiB0aGUgVUkgbGFuZ3VhZ2Ugd2lsbCBhdXRvbWF0aWNhbGx5XG4gIC8vIHVwZGF0ZSB3aGVuIHRoZSBcImxhbmdcIiBvYnNlcnZhYmxlIGNoYW5nZXMuXG4gIHZpZXdNb2RlbC50ID0gdmlld01vZGVsLnR0O1xuXG4gIC8vIGN1cnJlbnRseSBjYWxsZWQgYnkgZWRpdG9yLmh0bWwgdG8gdHJhbnNsYXRlIHRlbXBsYXRlLWRlZmluZWQga2V5cyAobGFiZWwsIGhlbHAsIGRlc2NyaXB0aW9ucylcbiAgLy8gdGhlIGVkaXRvciBhbHdheXMgdXNlcyB0aGUgXCJ0ZW1wbGF0ZVwiIGNhdGVnb3J5IGZvciB0aGF0IHN0cmluZ3MuXG4gIC8vIHlvdSBjYW4gb3ZlcnJpZGUgdGhpcyBtZXRob2QgYXMgeW91IGxpa2UgaW4gb3JkZXIgdG8gcHJvdmlkZSB0cmFuc2xhdGlvbiBvciBjaGFuZ2UgdGhlIHN0cmluZ3MgaW4gYW55IHdheS5cbiAgdmlld01vZGVsLnV0ID0gZnVuY3Rpb24oY2F0ZWdvcnksIGtleSkge1xuICAgIHJldHVybiBrZXk7XG4gIH07XG5cbiAgdmlld01vZGVsLnRlbXBsYXRlUGF0aCA9IHRodW1iUGF0aENvbnZlcnRlcjtcblxuICB2aWV3TW9kZWwucmVtb3RlVXJsUHJvY2Vzc29yID0gZnVuY3Rpb24odXJsKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfTtcblxuICB2aWV3TW9kZWwucmVtb3RlRmlsZVByb2Nlc3NvciA9IGZ1bmN0aW9uKGZpbGVPYmopIHtcbiAgICBpZiAodHlwZW9mIGZpbGVPYmoudXJsICE9PSAndW5kZWZpbmVkJykgZmlsZU9iai51cmwgPSB2aWV3TW9kZWwucmVtb3RlVXJsUHJvY2Vzc29yKGZpbGVPYmoudXJsKTtcbiAgICBpZiAodHlwZW9mIGZpbGVPYmoudGh1bWJuYWlsVXJsICE9PSAndW5kZWZpbmVkJykgZmlsZU9iai50aHVtYm5haWxVcmwgPSB2aWV3TW9kZWwucmVtb3RlVXJsUHJvY2Vzc29yKGZpbGVPYmoudGh1bWJuYWlsVXJsKTtcbiAgICAvLyBkZWxldGVVcmw/XG4gICAgcmV0dXJuIGZpbGVPYmo7XG4gIH07XG5cbiAgLy8gdG9vbGJveC50bXBsLmh0bWxcbiAgdmlld01vZGVsLmxvYWRHYWxsZXJ5ID0gZnVuY3Rpb24oKSB7XG4gICAgdmlld01vZGVsLmdhbGxlcnlMb2FkZWQoJ2xvYWRpbmcnKTtcbiAgICB2YXIgdXJsID0gZ2FsbGVyeVVybCA/IGdhbGxlcnlVcmwgOiAnL3VwbG9hZC8nO1xuICAgIC8vIHJldHJpZXZlIHRoZSBmdWxsIGxpc3Qgb2YgcmVtb3RlIGZpbGVzXG4gICAgJC5nZXRKU09OKHVybCwgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmZpbGVzLmxlbmd0aDsgaSsrKSBkYXRhLmZpbGVzW2ldID0gdmlld01vZGVsLnJlbW90ZUZpbGVQcm9jZXNzb3IoZGF0YS5maWxlc1tpXSk7XG4gICAgICB2aWV3TW9kZWwuZ2FsbGVyeUxvYWRlZChkYXRhLmZpbGVzLmxlbmd0aCk7XG4gICAgICAvLyBUT0RPIGRvIEkgd2FudCB0aGlzIGNhbGwgdG8gcmV0dXJuIHJlbGF0aXZlIHBhdGhzPyBPciBqdXN0IGFic29sdXRlIHBhdGhzP1xuICAgICAgdmlld01vZGVsLmdhbGxlcnlSZW1vdGUoZGF0YS5maWxlcy5yZXZlcnNlKCkpO1xuICAgIH0pLmZhaWwoZnVuY3Rpb24oKSB7XG4gICAgICB2aWV3TW9kZWwuZ2FsbGVyeUxvYWRlZChmYWxzZSk7XG4gICAgICB2aWV3TW9kZWwubm90aWZpZXIuZXJyb3Iodmlld01vZGVsLnQoJ1VuZXhwZWN0ZWQgZXJyb3IgbGlzdGluZyBmaWxlcycpKTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBpbWctd3lzaXd5Zy50bXBsLmh0bWxcbiAgdmlld01vZGVsLmZpbGVUb0ltYWdlID0gZnVuY3Rpb24ob2JqLCBldmVudCwgdWkpIHtcbiAgICAvLyBjb25zb2xlLmxvZyhcImZpbGVUb0ltYWdlXCIsIG9iaik7XG4gICAgcmV0dXJuIG9iai51cmw7XG4gIH07XG5cbiAgLy8gYmxvY2std3lzaXd5Zy50bXBsLmh0bWxcbiAgdmlld01vZGVsLnJlbW92ZUJsb2NrID0gZnVuY3Rpb24oZGF0YSwgcGFyZW50KSB7XG4gICAgLy8gbGV0J3MgdW5zZWxlY3QgdGhlIGJsb2NrXG4gICAgaWYgKGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmlld01vZGVsLnNlbGVjdGVkQmxvY2spID09IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoZGF0YSkpIHtcbiAgICAgIHZpZXdNb2RlbC5zZWxlY3RCbG9jayhudWxsLCB0cnVlKTtcbiAgICB9XG4gICAgdmFyIHJlcyA9IHBhcmVudC5ibG9ja3MucmVtb3ZlKGRhdGEpO1xuICAgIC8vIFRPRE8gVGhpcyBtZXNzYWdlIHNob3VsZCBiZSBkaWZmZXJlbnQgZGVwZW5kaW5nIG9uIHVuZG8gcGx1Z2luIHByZXNlbmNlLlxuICAgIHZpZXdNb2RlbC5ub3RpZmllci5pbmZvKHZpZXdNb2RlbC50KCdCbG9jayByZW1vdmVkOiB1c2UgdW5kbyBidXR0b24gdG8gcmVzdG9yZSBpdC4uLicpKTtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIGJsb2NrLXd5c2l3eWcudG1wbC5odG1sXG4gIHZpZXdNb2RlbC5kdXBsaWNhdGVCbG9jayA9IGZ1bmN0aW9uKGluZGV4LCBwYXJlbnQpIHtcbiAgICB2YXIgaWR4ID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShpbmRleCk7XG4gICAgLy8gRGVpbnN0cnVtZW50L2Rlb2JzZXJ2ZSB0aGUgb2JqZWN0XG4gICAgdmFyIHVud3JhcHBlZCA9IGtvLnRvSlMoa28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShwYXJlbnQuYmxvY2tzKVtpZHhdKTtcbiAgICAvLyBXZSBuZWVkIHRvIHJlbW92ZSB0aGUgaWQgc28gdGhhdCBhIG5ldyBvbmUgd2lsbCBiZSBhc3NpZ25lZCB0byB0aGUgY2xvbmVcbiAgICBpZiAodHlwZW9mIHVud3JhcHBlZC5pZCAhPT0gJ3VuZGVmaW5lZCcpIHVud3JhcHBlZC5pZCA9ICcnO1xuICAgIC8vIGluc2VydCB0aGUgY2xvbmVkIGJsb2NrXG4gICAgcGFyZW50LmJsb2Nrcy5zcGxpY2UoaWR4ICsgMSwgMCwgdW53cmFwcGVkKTtcbiAgfTtcblxuICAvLyBibG9jay13eXNpd3lnLnRtcGwuaHRtbFxuICB2aWV3TW9kZWwubW92ZUJsb2NrID0gZnVuY3Rpb24oaW5kZXgsIHBhcmVudCwgdXApIHtcbiAgICB2YXIgaWR4ID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShpbmRleCk7XG4gICAgdmFyIHBhcmVudEJsb2NrcyA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUocGFyZW50LmJsb2Nrcyk7XG4gICAgaWYgKCh1cCAmJiBpZHggPiAwKSB8fCAoIXVwICYmIGlkeCA8IHBhcmVudEJsb2Nrcy5sZW5ndGggLSAxKSkge1xuICAgICAgdmFyIGRlc3RJbmRleCA9IGlkeCArICh1cCA/IC0xIDogMSk7XG4gICAgICB2YXIgZGVzdEJsb2NrID0gcGFyZW50QmxvY2tzW2Rlc3RJbmRleF07XG4gICAgICB2aWV3TW9kZWwuc3RhcnRNdWx0aXBsZSgpO1xuICAgICAgcGFyZW50LmJsb2Nrcy5zcGxpY2UoZGVzdEluZGV4LCAxKTtcbiAgICAgIHBhcmVudC5ibG9ja3Muc3BsaWNlKGlkeCwgMCwgZGVzdEJsb2NrKTtcbiAgICAgIHZpZXdNb2RlbC5zdG9wTXVsdGlwbGUoKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gdGVzdCBtZXRob2QsIGNvbW1hbmQgbGluZSB1c2Ugb25seVxuICB2aWV3TW9kZWwubG9hZERlZmF1bHRCbG9ja3MgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBjbG9uaW5nIHRoZSB3aG9sZSBcIm1haW5CbG9ja3NcIiBvYmplY3Qgc28gdGhhdCB1bmRvbWFuYWdlciB3aWxsXG4gICAgLy8gc2VlIGl0IGFzIGEgc2luZ2xlIG9wZXJhdGlvbiAobWF5YmUgSSBjb3VsZCB1c2UgXCJzdGFydE11bHRpcGxlXCIvXCJzdG9wTXVsdGlwbGVcIi5cbiAgICB2YXIgcmVzID0ga28udG9KUyh2aWV3TW9kZWwuY29udGVudCgpLm1haW5CbG9ja3MpO1xuICAgIHJlcy5ibG9ja3MgPSBbXTtcbiAgICB2YXIgaW5wdXQgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZpZXdNb2RlbC5ibG9ja0RlZnMpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBvYmogPSBrby50b0pTKGlucHV0W2ldKTtcbiAgICAgIC8vIGdlbmVyYXRpbmcgaWRzIGZvciBibG9ja3MsIG1heWJlIHRoaXMgd291bGQgd29yayBhbHNvIGxlYXZpbmcgaXQgZW1wdHkuXG4gICAgICBvYmouaWQgPSAnYmxvY2tfJyArIGk7XG4gICAgICByZXMuYmxvY2tzLnB1c2gob2JqKTtcbiAgICB9XG4gICAgcGVyZm9ybWFuY2VBd2FyZUNhbGxlcignc2V0TWFpbkJsb2NrcycsIHZpZXdNb2RlbC5jb250ZW50KCkubWFpbkJsb2Nrcy5fd3JhcC5iaW5kKHZpZXdNb2RlbC5jb250ZW50KCkubWFpbkJsb2NrcywgcmVzKSk7XG4gIH07XG5cbiAgLy8gZ2FsbGVyeS1pbWFnZXMudG1wbC5odG1sXG4gIHZpZXdNb2RlbC5hZGRJbWFnZSA9IGZ1bmN0aW9uKGltZykge1xuICAgIHZhciBzZWxlY3RlZEltZyA9ICQoJyNtYWluLXd5c2l3eWctYXJlYSAuc2VsZWN0YWJsZS1pbWcuc2VsZWN0ZWRpdGVtJyk7XG4gICAgaWYgKHNlbGVjdGVkSW1nLmxlbmd0aCA9PSAxICYmIHR5cGVvZiBpbWcgPT0gJ29iamVjdCcgJiYgdHlwZW9mIGltZy51cmwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBrby5jb250ZXh0Rm9yKHNlbGVjdGVkSW1nWzBdKS5fc3JjKGltZy51cmwpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgLy8gdG9vbGJveC50bXBsLmh0bWxcbiAgdmlld01vZGVsLmFkZEJsb2NrID0gZnVuY3Rpb24ob2JqLCBldmVudCkge1xuICAgIC8vIGlmIHRoZXJlIGlzIGEgc2VsZWN0ZWQgYmxvY2sgd2UgdHJ5IHRvIGFkZCB0aGUgYmxvY2sganVzdCBhZnRlciB0aGUgc2VsZWN0ZWQgb25lLlxuICAgIHZhciBzZWxlY3RlZCA9IHZpZXdNb2RlbC5zZWxlY3RlZEJsb2NrKCk7XG4gICAgLy8gc2VhcmNoIHRoZSBzZWxlY3RlZCBibG9jayBwb3NpdGlvbi5cbiAgICB2YXIgZm91bmQ7XG4gICAgaWYgKHNlbGVjdGVkICE9PSBudWxsKSB7XG4gICAgICAvLyBUT0RPIFwibWFpbkJsb2Nrc1wiIGlzIGFuIGhhcmRjb2RlZCB0aGluZy5cbiAgICAgIGZvciAodmFyIGkgPSB2aWV3TW9kZWwuY29udGVudCgpLm1haW5CbG9ja3MoKS5ibG9ja3MoKS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBpZiAodmlld01vZGVsLmNvbnRlbnQoKS5tYWluQmxvY2tzKCkuYmxvY2tzKClbaV0oKSA9PSBzZWxlY3RlZCkge1xuICAgICAgICAgIGZvdW5kID0gaTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB2YXIgcG9zO1xuICAgIGlmICh0eXBlb2YgZm91bmQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBwb3MgPSBmb3VuZCArIDE7XG4gICAgICB2aWV3TW9kZWwuY29udGVudCgpLm1haW5CbG9ja3MoKS5ibG9ja3Muc3BsaWNlKHBvcywgMCwgb2JqKTtcbiAgICAgIHZpZXdNb2RlbC5ub3RpZmllci5pbmZvKHZpZXdNb2RlbC50KCdOZXcgYmxvY2sgYWRkZWQgYWZ0ZXIgdGhlIHNlbGVjdGVkIG9uZSAoX19wb3NfXyknLCB7XG4gICAgICAgIHBvczogcG9zXG4gICAgICB9KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZpZXdNb2RlbC5jb250ZW50KCkubWFpbkJsb2NrcygpLmJsb2Nrcy5wdXNoKG9iaik7XG4gICAgICBwb3MgPSB2aWV3TW9kZWwuY29udGVudCgpLm1haW5CbG9ja3MoKS5ibG9ja3MoKS5sZW5ndGggLSAxO1xuICAgICAgdmlld01vZGVsLm5vdGlmaWVyLmluZm8odmlld01vZGVsLnQoJ05ldyBibG9jayBhZGRlZCBhdCB0aGUgbW9kZWwgYm90dG9tIChfX3Bvc19fKScsIHtcbiAgICAgICAgcG9zOiBwb3NcbiAgICAgIH0pKTtcbiAgICB9XG4gICAgLy8gZmluZCB0aGUgbmV3bHkgYWRkZWQgYmxvY2sgYW5kIHNlbGVjdCBpdCFcbiAgICB2YXIgYWRkZWQgPSB2aWV3TW9kZWwuY29udGVudCgpLm1haW5CbG9ja3MoKS5ibG9ja3MoKVtwb3NdKCk7XG4gICAgdmlld01vZGVsLnNlbGVjdEJsb2NrKGFkZGVkLCB0cnVlKTtcbiAgICAvLyBwcmV2ZW50IGNsaWNrIHByb3BhZ2F0aW9uIChsb3NpbmcgdXJsIGhhc2ggLSBzZWUgIzQzKVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICAvLyBVc2VkIGJ5IHN0eWxlc2hlZXQuanMgdG8gY3JlYXRlIG11bHRpcGxlIHN0eWxlc1xuICB2aWV3TW9kZWwuZmluZE9iamVjdHNPZlR5cGUgPSBmdW5jdGlvbihkYXRhLCB0eXBlKSB7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBvYmogPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKGRhdGEpO1xuICAgIGZvciAodmFyIHByb3AgaW4gb2JqKVxuICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICB2YXIgdmFsID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShvYmpbcHJvcF0pO1xuICAgICAgICAvLyBUT0RPIHRoaXMgaXMgbm90IHRoZSByaWdodCB3YXkgdG8gZGVhbCB3aXRoIFwiYmxvY2sgbGlzdFwiIG9iamVjdHMuXG4gICAgICAgIGlmIChwcm9wLm1hdGNoKC9CbG9ja3MkLykpIHtcbiAgICAgICAgICB2YXIgY29udGVudHMgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbC5ibG9ja3MpO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29udGVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShjb250ZW50c1tpXSk7XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gbnVsbCB8fCBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKGMudHlwZSkgPT0gdHlwZSkgcmVzLnB1c2goYyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFRPRE8gaW52ZXN0aWdhdGUgd2hpY2ggY29uZGl0aW9uIHByb3ZpZGUgYSBudWxsIHZhbHVlLlxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT0gJ29iamVjdCcgJiYgdmFsICE9PSBudWxsKSB7XG4gICAgICAgICAgaWYgKHR5cGUgPT09IG51bGwgfHwga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWwudHlwZSkgPT0gdHlwZSkgcmVzLnB1c2godmFsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLypcbiAgdmlld01vZGVsLnBsYWNlaG9sZGVySGVscGVyID0gJ3NvcnRhYmxlLXBsYWNlaG9sZGVyJztcbiAgaWYgKGZhbHNlKSB7XG4gICAgdmlld01vZGVsLnBsYWNlaG9sZGVySGVscGVyID0ge1xuICAgICAgZWxlbWVudDogZnVuY3Rpb24oY3VycmVudEl0ZW0pIHtcbiAgICAgICAgcmV0dXJuICQoJzxkaXYgLz4nKS5yZW1vdmVDbGFzcygndWktZHJhZ2dhYmxlJykuYWRkQ2xhc3MoJ3NvcnRhYmxlLXBsYWNlaG9sZGVyJykuY3NzKCdwb3NpdGlvbicsICdyZWxhdGl2ZScpLmNzcygnd2lkdGgnLCAnMTAwJScpLmNzcygnaGVpZ2h0JywgY3VycmVudEl0ZW0uY3NzKCdoZWlnaHQnKSkuY3NzKCdvcGFjaXR5JywgJy44JylbMF07XG4gICAgICB9LFxuICAgICAgdXBkYXRlOiBmdW5jdGlvbihjb250YWluZXIsIHApIHtcbiAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICAqL1xuXG4gIC8vIEF0dGVtcHQgdG8gaW5zZXJ0IHRoZSBibG9jayBpbiB0aGUgZGVzdGluYXRpb24gbGF5b3V0IGR1cmluZyBkcmFnZ2luZ1xuICB2aWV3TW9kZWwucGxhY2Vob2xkZXJIZWxwZXIgPSB7XG4gICAgZWxlbWVudDogZnVuY3Rpb24oY3VycmVudEl0ZW0pIHtcbiAgICAgIHJldHVybiAkKGN1cnJlbnRJdGVtWzBdLm91dGVySFRNTCkucmVtb3ZlQ2xhc3MoJ3VpLWRyYWdnYWJsZScpLmFkZENsYXNzKCdzb3J0YWJsZS1wbGFjZWhvbGRlcicpLmNzcygnZGlzcGxheScsICdibG9jaycpLmNzcygncG9zaXRpb24nLCAncmVsYXRpdmUnKS5jc3MoJ3dpZHRoJywgJzEwMCUnKS5jc3MoJ2hlaWdodCcsICdhdXRvJykuY3NzKCdvcGFjaXR5JywgJy44JylbMF07XG4gICAgfSxcbiAgICB1cGRhdGU6IGZ1bmN0aW9uKGNvbnRhaW5lciwgcCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfTtcblxuICAvLyBUT0RPIHRoZSB1bmR1bWFuYWdlciBzaG91bGQgYmUgcGx1Z2dhYmxlLlxuICAvLyBVc2VkIGJ5IFwibW92ZUJsb2NrXCIgYW5kIGJsb2Nrcy13eXNpd3lnLnRtcGwuaHRtbCB0byBcIm1lcmdlXCIgZHJhZy9kcm9wIG9wZXJhdGlvbnMgaW50byBhIHNpbmdsZSB1bmRvL3JlZG8gb3AuXG4gIHZpZXdNb2RlbC5zdGFydE11bHRpcGxlID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHR5cGVvZiB2aWV3TW9kZWwuc2V0VW5kb01vZGVNZXJnZSAhPT0gJ3VuZGVmaW5lZCcpIHZpZXdNb2RlbC5zZXRVbmRvTW9kZU1lcmdlKCk7XG4gIH07XG4gIHZpZXdNb2RlbC5zdG9wTXVsdGlwbGUgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodHlwZW9mIHZpZXdNb2RlbC5zZXRVbmRvTW9kZU9uY2UgIT09ICd1bmRlZmluZWQnKSB2aWV3TW9kZWwuc2V0VW5kb01vZGVPbmNlKCk7XG4gIH07XG5cbiAgLy8gVXNlZCBieSBjb2RlIGdlbmVyYXRlZCBieSBlZGl0b3IuanMgXG4gIHZpZXdNb2RlbC5sb2NhbEdsb2JhbFN3aXRjaCA9IGZ1bmN0aW9uKHByb3AsIGdsb2JhbFByb3ApIHtcbiAgICB2YXIgY3VycmVudCA9IHByb3AoKTtcbiAgICBpZiAoY3VycmVudCA9PT0gbnVsbCkgcHJvcChnbG9iYWxQcm9wKCkpO1xuICAgIGVsc2UgcHJvcChudWxsKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgLy8gVXNlZCBieSBlZGl0b3IgYW5kIG1haW4gXCJjb252ZXJ0ZXJcIiB0byBzdXBwb3J0IGl0ZW0gc2VsZWN0aW9uXG4gIHZpZXdNb2RlbC5zZWxlY3RJdGVtID0gZnVuY3Rpb24odmFsdWVBY2Nlc3NvciwgaXRlbSwgYmxvY2spIHtcbiAgICB2YXIgdmFsID0ga28udXRpbHMucGVla09ic2VydmFibGUodmFsdWVBY2Nlc3Nvcik7XG4gICAgaWYgKHR5cGVvZiBibG9jayAhPT0gJ3VuZGVmaW5lZCcpIHZpZXdNb2RlbC5zZWxlY3RCbG9jayhibG9jaywgZmFsc2UsIHRydWUpO1xuICAgIGlmICh2YWwgIT0gaXRlbSkge1xuICAgICAgdmFsdWVBY2Nlc3NvcihpdGVtKTtcbiAgICAgIC8vIE9uIHNlbGVjdEl0ZW0gaWYgd2Ugd2VyZSBvbiBcIkJsb2Nrc1wiIHRvb2xib3ggdGFiIHdlIG1vdmUgdG8gXCJDb250ZW50XCIgdG9vbGJveCB0YWIuXG4gICAgICBpZiAoaXRlbSAhPT0gbnVsbCAmJiB2aWV3TW9kZWwuc2VsZWN0ZWRUb29sKCkgPT09IDApIHZpZXdNb2RlbC5zZWxlY3RlZFRvb2woMSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfS5iaW5kKHZpZXdNb2RlbCwgdmlld01vZGVsLnNlbGVjdGVkSXRlbSk7XG5cbiAgdmlld01vZGVsLmlzU2VsZWN0ZWRJdGVtID0gZnVuY3Rpb24oaXRlbSkge1xuICAgIHJldHVybiB2aWV3TW9kZWwuc2VsZWN0ZWRJdGVtKCkgPT0gaXRlbTtcbiAgfTtcblxuICB2aWV3TW9kZWwuc2VsZWN0QmxvY2sgPSBmdW5jdGlvbih2YWx1ZUFjY2Vzc29yLCBpdGVtLCBkb05vdFNlbGVjdCwgZG9Ob3RVbnNlbGVjdEl0ZW0pIHtcbiAgICB2YXIgdmFsID0ga28udXRpbHMucGVla09ic2VydmFibGUodmFsdWVBY2Nlc3Nvcik7XG4gICAgaWYgKCFkb05vdFVuc2VsZWN0SXRlbSkgdmlld01vZGVsLnNlbGVjdEl0ZW0obnVsbCk7XG4gICAgaWYgKHZhbCAhPSBpdGVtKSB7XG4gICAgICB2YWx1ZUFjY2Vzc29yKGl0ZW0pO1xuICAgICAgLy8gaGlkZSBnYWxsZXJ5IG9uIGJsb2NrIHNlbGVjdGlvblxuICAgICAgdmlld01vZGVsLnNob3dHYWxsZXJ5KGZhbHNlKTtcbiAgICAgIGlmIChpdGVtICE9PSBudWxsICYmICFkb05vdFNlbGVjdCAmJiB2aWV3TW9kZWwuc2VsZWN0ZWRUb29sKCkgPT09IDApIHZpZXdNb2RlbC5zZWxlY3RlZFRvb2woMSk7XG4gICAgfVxuICB9LmJpbmQodmlld01vZGVsLCB2aWV3TW9kZWwuc2VsZWN0ZWRCbG9jayk7XG5cbiAgLy8gREVCVUdcbiAgdmlld01vZGVsLmNvdW50U3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uKG1vZGVsLCBkZWJ1Zykge1xuICAgIHZhciByZXMgPSAwO1xuICAgIGZvciAodmFyIHByb3AgaW4gbW9kZWwpXG4gICAgICBpZiAobW9kZWwuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgdmFyIHAgPSBtb2RlbFtwcm9wXTtcbiAgICAgICAgaWYgKGtvLmlzT2JzZXJ2YWJsZShwKSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgcC5fZGVmYXVsdENvbXB1dGVkICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRlYnVnICE9ICd1bmRlZmluZWQnKSBjb25zb2xlLmxvZyhkZWJ1ZyArIFwiL1wiICsgcHJvcCArIFwiL19cIiwgcC5fZGVmYXVsdENvbXB1dGVkLmdldFN1YnNjcmlwdGlvbnNDb3VudCgpKTtcbiAgICAgICAgICAgIHJlcyArPSBwLl9kZWZhdWx0Q29tcHV0ZWQuZ2V0U3Vic2NyaXB0aW9uc0NvdW50KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgZGVidWcgIT0gJ3VuZGVmaW5lZCcpIGNvbnNvbGUubG9nKGRlYnVnICsgXCIvXCIgKyBwcm9wICsgXCIvLVwiLCBwLmdldFN1YnNjcmlwdGlvbnNDb3VudCgpKTtcbiAgICAgICAgICByZXMgKz0gcC5nZXRTdWJzY3JpcHRpb25zQ291bnQoKTtcbiAgICAgICAgICBwID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHAgPT0gJ29iamVjdCcgJiYgcCAhPT0gbnVsbCkge1xuICAgICAgICAgIHZhciB0b3QgPSB2aWV3TW9kZWwuY291bnRTdWJzY3JpcHRpb25zKHAsIHR5cGVvZiBkZWJ1ZyAhPSAndW5kZWZpbmVkJyA/IGRlYnVnICsgJy8nICsgcHJvcCArIFwiQFwiIDogdW5kZWZpbmVkKTtcbiAgICAgICAgICBpZiAodHlwZW9mIGRlYnVnICE9ICd1bmRlZmluZWQnKSBjb25zb2xlLmxvZyhkZWJ1ZyArIFwiL1wiICsgcHJvcCArIFwiQFwiLCB0b3QpO1xuICAgICAgICAgIHJlcyArPSB0b3Q7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIERFQlVHXG4gIHZpZXdNb2RlbC5sb29wU3Vic2NyaXB0aW9uc0NvdW50ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvdW50ID0gdmlld01vZGVsLmNvdW50U3Vic2NyaXB0aW9ucyh2aWV3TW9kZWwuY29udGVudCgpKTtcbiAgICBnbG9iYWwuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N1YnNjcmlwdGlvbnNDb3VudCcpLmlubmVySFRNTCA9IGNvdW50O1xuICAgIGdsb2JhbC5zZXRUaW1lb3V0KHZpZXdNb2RlbC5sb29wU3Vic2NyaXB0aW9uc0NvdW50LCAxMDAwKTtcbiAgfTtcblxuICB2aWV3TW9kZWwuZXhwb3J0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvbnRlbnQgPSBwZXJmb3JtYW5jZUF3YXJlQ2FsbGVyKFwiZXhwb3J0SFRNTFwiLCB2aWV3TW9kZWwuZXhwb3J0SFRNTCk7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH07XG5cbiAgZnVuY3Rpb24gY29uZGl0aW9uYWxfcmVzdG9yZShodG1sKSB7XG4gICAgcmV0dXJuIGh0bWwucmVwbGFjZSgvPHJlcGxhY2VkY2NbXj5dKiBjb25kaXRpb249XCIoW15cIl0qKVwiW14+XSo+KFtcXHNcXFNdKj8pPFxcL3JlcGxhY2VkY2M+L2csIGZ1bmN0aW9uKG1hdGNoLCBjb25kaXRpb24sIGJvZHkpIHtcbiAgICAgIHZhciBkZCA9ICc8IS0tW2lmICcrY29uZGl0aW9uKyddPic7XG4gICAgICBkZCArPSBib2R5LnJlcGxhY2UoLzwhLS0gY2M6YmVmb3JlOihbXiBdKikgLS0+PCEtLSBjYzphZnRlcjpcXDEgLS0+L2csICc8LyQxPicpXG4gICAgICAgICAgICAucmVwbGFjZSgvXi4qPCEtLSBjYzpzdGFydCAtLT4vLCcnKVxuICAgICAgICAgICAgLnJlcGxhY2UoLzwhLS0gY2M6ZW5kIC0tPi4qJC8sJycpXG4gICAgICAgICAgICAucmVwbGFjZSgvPChcXC8/KWNjKFtBLVphLXpdKikvZywgJzwkMSQyJyk7XG4gICAgICBkZCArPSAnPCFbZW5kaWZdLS0+JztcbiAgICAgIHJldHVybiBkZDtcbiAgICB9KTtcbiAgfVxuXG4gIHZpZXdNb2RlbC5leHBvcnRIVE1MID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGlkID0gJ2V4cG9ydGZyYW1lJztcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8aWZyYW1lIGlkPVwiJyArIGlkICsgJ1wiIGRhdGEtYmluZD1cImJpbmRJZnJhbWU6ICRkYXRhXCI+PC9pZnJhbWU+Jyk7XG4gICAgdmFyIGZyYW1lRWwgPSBnbG9iYWwuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICAgIGtvLmFwcGx5QmluZGluZ3Modmlld01vZGVsLCBmcmFtZUVsKTtcbiAgICAvLyBPYnNvbGV0ZSBtZXRob2QgZGlkbid0IHdvcmsgb24gSUUxMSB3aGVuIHVzaW5nIFwiSFRNTDUgZG9jdHlwZVwiOlxuICAgIC8vIHZhciBkb2NUeXBlID0gbmV3IFhNTFNlcmlhbGl6ZXIoKS5zZXJpYWxpemVUb1N0cmluZyhnbG9iYWwuZG9jdW1lbnQuZG9jdHlwZSk7XG4gICAgdmFyIG5vZGUgPSBmcmFtZUVsLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQuZG9jdHlwZTtcbiAgICB2YXIgZG9jVHlwZSA9IFwiPCFET0NUWVBFIFwiICsgbm9kZS5uYW1lICtcbiAgICAgIChub2RlLnB1YmxpY0lkID8gJyBQVUJMSUMgXCInICsgbm9kZS5wdWJsaWNJZCArICdcIicgOiAnJykgK1xuICAgICAgKCFub2RlLnB1YmxpY0lkICYmIG5vZGUuc3lzdGVtSWQgPyAnIFNZU1RFTScgOiAnJykgK1xuICAgICAgKG5vZGUuc3lzdGVtSWQgPyAnIFwiJyArIG5vZGUuc3lzdGVtSWQgKyAnXCInIDogJycpICsgJz4nO1xuICAgIHZhciBjb250ZW50ID0gZG9jVHlwZSArIFwiXFxuXCIgKyBmcmFtZUVsLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm91dGVySFRNTDtcbiAgICBrby5jbGVhbk5vZGUoZnJhbWVFbCk7XG4gICAga28ucmVtb3ZlTm9kZShmcmFtZUVsKTtcblxuICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoLzxzY3JpcHQgKFtePl0qICk/dHlwZT1cInRleHRcXC9odG1sXCJbXj5dKj5bXFxzXFxTXSo/PFxcL3NjcmlwdD4vZ20sICcnKTtcbiAgICAvLyBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKC88IS0tIGtvIC4qPyAtLT4vZywgJycpOyAvLyBzb21ldGltZXMgd2UgaGF2ZSBleHByZXNzaW9ucyBsaWtlICg8IS0tIGtvIHZhciA+IDIgLS0+KVxuICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoLzwhLS0ga28gKCg/IS0tKS4pKj8gLS0+L2csICcnKTsgLy8gdGhpcyByZXBsYWNlcyB0aGUgYWJvdmUgd2l0aCBhIG1vcmUgZm9ybWFsIChidXQgc2xvd2VyKSBzb2x1dGlvblxuICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoLzwhLS0gXFwva28gLS0+L2csICcnKTtcbiAgICAvLyBSZW1vdmUgZGF0YS1iaW5kL2RhdGEtYmxvY2sgYXR0cmlidXRlc1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoLyBkYXRhLWJpbmQ9XCJbXlwiXSpcIi9nbSwgJycpO1xuICAgIC8vIFJlbW92ZSB0cmFzaCBsZWZ0b3ZlciBieSBUaW55TUNFXG4gICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZSgvIGRhdGEtbWNlLShocmVmfHNyYyk9XCJbXlwiXSpcIi9nbSwgJycpO1xuXG4gICAgLy8gUmVwbGFjZSBcInJlcGxhY2Vkc3R5bGVcIiB0byBcInN0eWxlXCIgYXR0cmlidXRlcyAoY2hyb21lIHB1dHMgcmVwbGFjZWRzdHlsZSBhZnRlciBzdHlsZSlcbiAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKC8gc3R5bGU9XCJbXlwiXSpcIihbXj5dKikgcmVwbGFjZWQoc3R5bGU9XCJbXlwiXSpcIikvZ20sICckMSAkMicpO1xuICAgIC8vIFJlcGxhY2UgXCJyZXBsYWNlZHN0eWxlXCIgdG8gXCJzdHlsZVwiIGF0dHJpYnV0ZXMgKGllL2ZmIGhhdmUgcmV2ZXJzZSBvcmRlcilcbiAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKC8gcmVwbGFjZWQoc3R5bGU9XCJbXlwiXSpcIikoW14+XSopIHN0eWxlPVwiW15cIl0qXCIvZ20sICcgJDEkMicpO1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoLyByZXBsYWNlZChzdHlsZT1cIlteXCJdKlwiKS9nbSwgJyAkMScpO1xuXG4gICAgLy8gc2FtZSBhcyBzdHlsZSwgYnV0IGZvciBodHRwLWVxdWl2IChzb21lIGJyb3dzZXIgYnJlYWsgaXQgaWYgd2UgZG9uJ3QgcmVwbGFjZSwgYnV0IHRoZW4gd2UgZmluZCBpdCBkdXBsaWNhdGVkKVxuICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoLyBodHRwLWVxdWl2PVwiW15cIl0qXCIoW14+XSopIHJlcGxhY2VkKGh0dHAtZXF1aXY9XCJbXlwiXSpcIikvZ20sICckMSAkMicpO1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoLyByZXBsYWNlZChodHRwLWVxdWl2PVwiW15cIl0qXCIpKFtePl0qKSBodHRwLWVxdWl2PVwiW15cIl0qXCIvZ20sICcgJDEkMicpO1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoLyByZXBsYWNlZChodHRwLWVxdWl2PVwiW15cIl0qXCIpL2dtLCAnICQxJyk7XG5cbiAgICAvLyBXZSBhbHJlYWR5IHJlcGxhY2Ugc3R5bGUgYW5kIGh0dHAtZXF1aXYgYW5kIHdlIGRvbid0IG5lZWQgdGhpcy5cbiAgICAvLyBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKC8gcmVwbGFjZWQoW149IF0qPSkvZ20sICcgJDEnKTtcbiAgICAvLyBSZXN0b3JlIGNvbmRpdGlvbmFsIGNvbW1lbnRzXG4gICAgY29udGVudCA9IGNvbmRpdGlvbmFsX3Jlc3RvcmUoY29udGVudCk7XG4gICAgdmFyIHRyYXNoID0gY29udGVudC5tYXRjaCgvIGRhdGEtW14gPV0rKD1cIlteXCJdK1wiKT8gLykgfHwgY29udGVudC5tYXRjaCgvIHJlcGxhY2VkKFtePSBdKj0pLyk7XG4gICAgaWYgKHRyYXNoKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJPdXRwdXQgSFRNTCBjb250YWlucyB1bmV4cGVjdGVkIGRhdGEtIGF0dHJpYnV0ZXMgb3IgcmVwbGFjZWQgYXR0cmlidXRlc1wiLCB0cmFzaCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH07XG5cbiAgdmlld01vZGVsLmV4cG9ydEhUTUx0b1RleHRhcmVhID0gZnVuY3Rpb24odGV4dGFyZWFpZCkge1xuICAgICQodGV4dGFyZWFpZCkudmFsKHZpZXdNb2RlbC5leHBvcnRIVE1MKCkpO1xuICB9O1xuXG4gIHZpZXdNb2RlbC5leHBvcnRKU09OdG9UZXh0YXJlYSA9IGZ1bmN0aW9uKHRleHRhcmVhaWQpIHtcbiAgICAkKHRleHRhcmVhaWQpLnZhbCh2aWV3TW9kZWwuZXhwb3J0SlNPTigpKTtcbiAgfTtcblxuICB2aWV3TW9kZWwuaW1wb3J0SlNPTmZyb21UZXh0YXJlYSA9IGZ1bmN0aW9uKHRleHRhcmVhaWQpIHtcbiAgICB2aWV3TW9kZWwuaW1wb3J0SlNPTigkKHRleHRhcmVhaWQpLnZhbCgpKTtcbiAgfTtcblxuICB2aWV3TW9kZWwuZXhwb3J0TWV0YWRhdGEgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIganNvbiA9IGtvLnRvSlNPTih2aWV3TW9kZWwubWV0YWRhdGEpO1xuICAgIHJldHVybiBqc29uO1xuICB9O1xuXG4gIHZpZXdNb2RlbC5leHBvcnRKU09OID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGpzb24gPSBrby50b0pTT04odmlld01vZGVsLmNvbnRlbnQpO1xuICAgIHJldHVybiBqc29uO1xuICB9O1xuXG4gIHZpZXdNb2RlbC5leHBvcnRKUyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBrby50b0pTKHZpZXdNb2RlbC5jb250ZW50KTtcbiAgfTtcblxuICB2aWV3TW9kZWwuaW1wb3J0SlNPTiA9IGZ1bmN0aW9uKGpzb24pIHtcbiAgICB2YXIgdW53cmFwcGVkID0ga28udXRpbHMucGFyc2VKc29uKGpzb24pO1xuICAgIHZpZXdNb2RlbC5jb250ZW50Ll93cmFwKHVud3JhcHBlZCk7XG4gIH07XG5cbiAgdmlld01vZGVsLmV4cG9ydFRoZW1lID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGZsYXQgPSB7fTtcbiAgICB2YXIgbW9kID0gdmlld01vZGVsLmNvbnRlbnQoKS50aGVtZSgpO1xuXG4gICAgdmFyIF9leHBvcnQgPSBmdW5jdGlvbihwcmVmaXgsIGZsYXQsIG1vZCkge1xuICAgICAgZm9yICh2YXIgcHJvcCBpbiBtb2QpXG4gICAgICAgIGlmIChtb2QuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgICB2YXIgYSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUobW9kW3Byb3BdKTtcbiAgICAgICAgICBpZiAoYSAhPT0gbnVsbCAmJiB0eXBlb2YgYSA9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgX2V4cG9ydChwcm9wICsgJy4nLCBmbGF0LCBhKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmxhdFtwcmVmaXggKyBwcm9wXSA9IGE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIF9leHBvcnQoJycsIGZsYXQsIG1vZCk7XG5cbiAgICB2YXIgb3V0cHV0ID0gJyc7XG4gICAgZm9yICh2YXIgcHJvcCBpbiBmbGF0KVxuICAgICAgaWYgKGZsYXQuaGFzT3duUHJvcGVydHkocHJvcCkgJiYgcHJvcCAhPSAndHlwZScpIHtcbiAgICAgICAgb3V0cHV0ICs9IHByb3AgKyBcIjogXCIgKyBmbGF0W3Byb3BdICsgXCI7XCIgKyBcIlxcblwiO1xuICAgICAgfVxuXG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfTtcblxuICAvLyBtb3hpZW1hbmFnZXIgKG9yIGZpbGUgYnJvd3Nlci9pbWFnZWVkaXRvcikgZXh0ZW5zaW9uIHBvaW50cy5cbiAgLy8gSnVzdCBpbXBsZW1lbnQgZWRpdEltYWdlIG9yIGxpbmtEaWFsb2cgbWV0aG9kc1xuICAvLyB2aWV3TW9kZWwuZWRpdEltYWdlID0gZnVuY3Rpb24oc3JjLCBkb25lKSB7fSA6IGltcGxlbWVudCB0aGlzIG1ldGhvZCB0byBlbmFibGUgaW1hZ2UgZWRpdGluZyAoc3JjIGlzIGEgd2lydGFibGVPYnNlcnZhYmxlKS5cbiAgLy8gdmlld01vZGVsLmxpbmtEaWFsb2cgPSBmdW5jdGlvbigpIHt9OiBpbXBsZW1lbnQgdGhpcyBtZXRob2QgdXNpbmcgXCJ0aGlzXCIgdG8gZmluZCB0aGUgaW5wdXQgZWxlbWVudCAkKHRoaXMpLnZhbCBpcyBhIHdyaXRhYmxlT2JzZXJ2YWJsZS5cblxuICB2aWV3TW9kZWwubG9hZEltYWdlID0gZnVuY3Rpb24oaW1nKSB7XG4gICAgLy8gcHVzaCBpbWFnZSBhdCB0b3Agb2YgXCJyZWNlbnRcIiBnYWxsZXJ5XG4gICAgdmlld01vZGVsLmdhbGxlcnlSZWNlbnQudW5zaGlmdChpbWcpO1xuICAgIC8vIHNlbGVjdCByZWNlbnQgZ2FsbGVyeSB0YWJcbiAgICB2aWV3TW9kZWwuc2VsZWN0ZWRJbWFnZVRhYigwKTtcbiAgfTtcblxuICB2aWV3TW9kZWwuZGlhbG9nID0gZnVuY3Rpb24oc2VsZWN0b3IsIG9wdGlvbnMpIHtcbiAgICAkKHNlbGVjdG9yKS5kaWFsb2cob3B0aW9ucyk7XG4gIH07XG5cbiAgLy8gRHVtbXkgbG9nIG1ldGhvZCBvdmVycmlkZGVuIGJ5IGV4dGVuc2lvbnNcbiAgdmlld01vZGVsLmxvZyA9IGZ1bmN0aW9uKGNhdGVnb3J5LCBtc2cpIHtcbiAgICAvLyBjb25zb2xlLmxvZyhcInZpZXdNb2RlbC5sb2dcIiwgY2F0ZWdvcnksIG1zZyk7XG4gIH07XG5cbiAgLy8gYXV0b21hdGljYWxseSBsb2FkIHRoZSBnYWxsZXJ5IHdoZW4gdGhlIGdhbGxlcnkgdGFiIGlzIHNlbGVjdGVkXG4gIHZpZXdNb2RlbC5zZWxlY3RlZEltYWdlVGFiLnN1YnNjcmliZShmdW5jdGlvbihuZXdWYWx1ZSkge1xuICAgIGlmIChuZXdWYWx1ZSA9PSAxICYmIHZpZXdNb2RlbC5nYWxsZXJ5TG9hZGVkKCkgPT09IGZhbHNlKSB7XG4gICAgICB2aWV3TW9kZWwubG9hZEdhbGxlcnkoKTtcbiAgICB9XG4gIH0sIHZpZXdNb2RlbCwgJ2NoYW5nZScpO1xuXG4gIHJldHVybiB2aWV3TW9kZWw7XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbml0aWFsaXplRWRpdG9yOyJdfQ==
